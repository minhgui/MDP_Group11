
MDPTEST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001018  0800db78  0800db78  0000eb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb90  0800eb90  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb90  0800eb90  0000fb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb98  0800eb98  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb98  0800eb98  0000fb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb9c  0800eb9c  0000fb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800eba0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          00005168  200001e0  200001e0  000101e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005348  20005348  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b93c  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8e  00000000  00000000  0002bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  0002f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000142e  00000000  00000000  00030f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000051fd  00000000  00000000  000323c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d018  00000000  00000000  000375c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da968  00000000  00000000  000545db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ef43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f04  00000000  00000000  0012ef88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00136e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db5c 	.word	0x0800db5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800db5c 	.word	0x0800db5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <__NVIC_SystemReset+0x24>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eea:	4904      	ldr	r1, [pc, #16]	@ (8000efc <__NVIC_SystemReset+0x24>)
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_SystemReset+0x28>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef2:	f3bf 8f4f 	dsb	sy
}
 8000ef6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <__NVIC_SystemReset+0x20>
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	05fa0004 	.word	0x05fa0004

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f002 f982 	bl	8003210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f896 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 fb8e 	bl	8001630 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f14:	f000 fab8 	bl	8001488 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f18:	f000 f9ba 	bl	8001290 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1c:	f000 f91a 	bl	8001154 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000f20:	f000 fb5c 	bl	80015dc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f24:	f000 fa08 	bl	8001338 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f28:	f000 f8e6 	bl	80010f8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f2c:	f000 fa58 	bl	80013e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /*------------INIT LIBRARIES ----------------*/
 OLED_Init();
 8000f30:	f009 ff40 	bl	800adb4 <OLED_Init>

 /*------------END INIT LIBRARIES ----------------*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f34:	f007 f814 	bl	8007f60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f38:	4a25      	ldr	r2, [pc, #148]	@ (8000fd0 <main+0xcc>)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4825      	ldr	r0, [pc, #148]	@ (8000fd4 <main+0xd0>)
 8000f3e:	f007 f859 	bl	8007ff4 <osThreadNew>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a24      	ldr	r2, [pc, #144]	@ (8000fd8 <main+0xd4>)
 8000f46:	6013      	str	r3, [r2, #0]

  /* creation of motorTask_v1 */
  motorTask_v1Handle = osThreadNew(motors, NULL, &motorTask_v1_attributes);
 8000f48:	4a24      	ldr	r2, [pc, #144]	@ (8000fdc <main+0xd8>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4824      	ldr	r0, [pc, #144]	@ (8000fe0 <main+0xdc>)
 8000f4e:	f007 f851 	bl	8007ff4 <osThreadNew>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <main+0xe0>)
 8000f56:	6013      	str	r3, [r2, #0]

  /* creation of rightEncoderTas */
  rightEncoderTasHandle = osThreadNew(rightEncoder, NULL, &rightEncoderTas_attributes);
 8000f58:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <main+0xe4>)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4823      	ldr	r0, [pc, #140]	@ (8000fec <main+0xe8>)
 8000f5e:	f007 f849 	bl	8007ff4 <osThreadNew>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a22      	ldr	r2, [pc, #136]	@ (8000ff0 <main+0xec>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* creation of leftEncoderTask */
  leftEncoderTaskHandle = osThreadNew(leftEncoder, NULL, &leftEncoderTask_attributes);
 8000f68:	4a22      	ldr	r2, [pc, #136]	@ (8000ff4 <main+0xf0>)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4822      	ldr	r0, [pc, #136]	@ (8000ff8 <main+0xf4>)
 8000f6e:	f007 f841 	bl	8007ff4 <osThreadNew>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <main+0xf8>)
 8000f76:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(StartCommsTask, NULL, &CommTask_attributes);
 8000f78:	4a21      	ldr	r2, [pc, #132]	@ (8001000 <main+0xfc>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4821      	ldr	r0, [pc, #132]	@ (8001004 <main+0x100>)
 8000f7e:	f007 f839 	bl	8007ff4 <osThreadNew>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <main+0x104>)
 8000f86:	6013      	str	r3, [r2, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(StartOLEDTask, NULL, &OLED_attributes);
 8000f88:	4a20      	ldr	r2, [pc, #128]	@ (800100c <main+0x108>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4820      	ldr	r0, [pc, #128]	@ (8001010 <main+0x10c>)
 8000f8e:	f007 f831 	bl	8007ff4 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a1f      	ldr	r2, [pc, #124]	@ (8001014 <main+0x110>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(StartMotorTask, NULL, &Motor_attributes);
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <main+0x114>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	481f      	ldr	r0, [pc, #124]	@ (800101c <main+0x118>)
 8000f9e:	f007 f829 	bl	8007ff4 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8001020 <main+0x11c>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(StartGyroTask, NULL, &GyroTask_attributes);
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8001024 <main+0x120>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	481e      	ldr	r0, [pc, #120]	@ (8001028 <main+0x124>)
 8000fae:	f007 f821 	bl	8007ff4 <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800102c <main+0x128>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* creation of UltrasoundTask */
  UltrasoundTaskHandle = osThreadNew(StartUltrasoundTask, NULL, &UltrasoundTask_attributes);
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <main+0x12c>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	481d      	ldr	r0, [pc, #116]	@ (8001034 <main+0x130>)
 8000fbe:	f007 f819 	bl	8007ff4 <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001038 <main+0x134>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f006 ffee 	bl	8007fa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <main+0xc8>
 8000fd0:	0800dc60 	.word	0x0800dc60
 8000fd4:	08001edd 	.word	0x08001edd
 8000fd8:	20000400 	.word	0x20000400
 8000fdc:	0800dc84 	.word	0x0800dc84
 8000fe0:	08001f01 	.word	0x08001f01
 8000fe4:	20000404 	.word	0x20000404
 8000fe8:	0800dca8 	.word	0x0800dca8
 8000fec:	08001f11 	.word	0x08001f11
 8000ff0:	20000408 	.word	0x20000408
 8000ff4:	0800dccc 	.word	0x0800dccc
 8000ff8:	08001fa1 	.word	0x08001fa1
 8000ffc:	2000040c 	.word	0x2000040c
 8001000:	0800dcf0 	.word	0x0800dcf0
 8001004:	08002031 	.word	0x08002031
 8001008:	20000410 	.word	0x20000410
 800100c:	0800dd14 	.word	0x0800dd14
 8001010:	08002325 	.word	0x08002325
 8001014:	20000414 	.word	0x20000414
 8001018:	0800dd38 	.word	0x0800dd38
 800101c:	08002481 	.word	0x08002481
 8001020:	20000418 	.word	0x20000418
 8001024:	0800dd5c 	.word	0x0800dd5c
 8001028:	08002901 	.word	0x08002901
 800102c:	2000041c 	.word	0x2000041c
 8001030:	0800dd80 	.word	0x0800dd80
 8001034:	08002a9d 	.word	0x08002a9d
 8001038:	20000420 	.word	0x20000420

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	@ 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00a fcbb 	bl	800b9c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <SystemClock_Config+0xb4>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <SystemClock_Config+0xb4>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <SystemClock_Config+0xb4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <SystemClock_Config+0xb8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1b      	ldr	r2, [pc, #108]	@ (80010f4 <SystemClock_Config+0xb8>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <SystemClock_Config+0xb8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a0:	2310      	movs	r3, #16
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fcdb 	bl	8004a68 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010b8:	f001 fd10 	bl	8002adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 ff3e 	bl	8004f58 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010e2:	f001 fcfb 	bl	8002adc <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	@ 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f002 fc75 	bl	8003a24 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f001 fccc 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001fc 	.word	0x200001fc
 800114c:	40005400 	.word	0x40005400
 8001150:	000186a0 	.word	0x000186a0

08001154 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	@ 0x58
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00a fc1a 	bl	800b9c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001192:	4b3d      	ldr	r3, [pc, #244]	@ (8001288 <MX_TIM1_Init+0x134>)
 8001194:	4a3d      	ldr	r2, [pc, #244]	@ (800128c <MX_TIM1_Init+0x138>)
 8001196:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001198:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <MX_TIM1_Init+0x134>)
 800119a:	22a0      	movs	r2, #160	@ 0xa0
 800119c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b3a      	ldr	r3, [pc, #232]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80011a4:	4b38      	ldr	r3, [pc, #224]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b2:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011ba:	2280      	movs	r2, #128	@ 0x80
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011be:	4832      	ldr	r0, [pc, #200]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011c0:	f004 f8aa 	bl	8005318 <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ca:	f001 fc87 	bl	8002adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011d8:	4619      	mov	r1, r3
 80011da:	482b      	ldr	r0, [pc, #172]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011dc:	f004 ff06 	bl	8005fec <HAL_TIM_ConfigClockSource>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011e6:	f001 fc79 	bl	8002adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ea:	4827      	ldr	r0, [pc, #156]	@ (8001288 <MX_TIM1_Init+0x134>)
 80011ec:	f004 f8e3 	bl	80053b6 <HAL_TIM_PWM_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011f6:	f001 fc71 	bl	8002adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001202:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001206:	4619      	mov	r1, r3
 8001208:	481f      	ldr	r0, [pc, #124]	@ (8001288 <MX_TIM1_Init+0x134>)
 800120a:	f005 fc69 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001214:	f001 fc62 	bl	8002adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001218:	2360      	movs	r3, #96	@ 0x60
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001234:	220c      	movs	r2, #12
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	@ (8001288 <MX_TIM1_Init+0x134>)
 800123a:	f004 fe15 	bl	8005e68 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001244:	f001 fc4a 	bl	8002adc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001260:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM1_Init+0x134>)
 800126c:	f005 fcb4 	bl	8006bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001276:	f001 fc31 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127a:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM1_Init+0x134>)
 800127c:	f001 fdf8 	bl	8002e70 <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3758      	adds	r7, #88	@ 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000250 	.word	0x20000250
 800128c:	40010000 	.word	0x40010000

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	@ 0x30
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2224      	movs	r2, #36	@ 0x24
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f00a fb91 	bl	800b9c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012d4:	2303      	movs	r3, #3
 80012d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012e4:	230a      	movs	r3, #10
 80012e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ec:	2301      	movs	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80012f4:	230a      	movs	r3, #10
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_TIM2_Init+0xa4>)
 8001300:	f004 faf2 	bl	80058e8 <HAL_TIM_Encoder_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800130a:	f001 fbe7 	bl	8002adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_TIM2_Init+0xa4>)
 800131c:	f005 fbe0 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001326:	f001 fbd9 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3730      	adds	r7, #48	@ 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000298 	.word	0x20000298

08001338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2224      	movs	r2, #36	@ 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f00a fb3d 	bl	800b9c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001354:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 8001356:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <MX_TIM3_Init+0xa4>)
 8001358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 8001368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800136c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800137a:	2303      	movs	r3, #3
 800137c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800138a:	230a      	movs	r3, #10
 800138c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800139a:	230a      	movs	r3, #10
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 80013a6:	f004 fa9f 	bl	80058e8 <HAL_TIM_Encoder_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013b0:	f001 fb94 	bl	8002adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_TIM3_Init+0xa0>)
 80013c2:	f005 fb8d 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013cc:	f001 fb86 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	@ 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002e0 	.word	0x200002e0
 80013dc:	40000400 	.word	0x40000400

080013e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <MX_TIM4_Init+0xa0>)
 80013fe:	4a21      	ldr	r2, [pc, #132]	@ (8001484 <MX_TIM4_Init+0xa4>)
 8001400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <MX_TIM4_Init+0xa0>)
 8001404:	220f      	movs	r2, #15
 8001406:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <MX_TIM4_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <MX_TIM4_Init+0xa0>)
 8001410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001414:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_TIM4_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_TIM4_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001422:	4817      	ldr	r0, [pc, #92]	@ (8001480 <MX_TIM4_Init+0xa0>)
 8001424:	f004 f8e8 	bl	80055f8 <HAL_TIM_IC_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800142e:	f001 fb55 	bl	8002adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	480f      	ldr	r0, [pc, #60]	@ (8001480 <MX_TIM4_Init+0xa0>)
 8001442:	f005 fb4d 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800144c:	f001 fb46 	bl	8002adc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001450:	2300      	movs	r3, #0
 8001452:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <MX_TIM4_Init+0xa0>)
 8001468:	f004 fc62 	bl	8005d30 <HAL_TIM_IC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001472:	f001 fb33 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000328 	.word	0x20000328
 8001484:	40000800 	.word	0x40000800

08001488 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b096      	sub	sp, #88	@ 0x58
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00a fa80 	bl	800b9c6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014c6:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014c8:	4a43      	ldr	r2, [pc, #268]	@ (80015d8 <MX_TIM8_Init+0x150>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014cc:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b40      	ldr	r3, [pc, #256]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80014d8:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014da:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b3c      	ldr	r3, [pc, #240]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b39      	ldr	r3, [pc, #228]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014f2:	4838      	ldr	r0, [pc, #224]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80014f4:	f003 ff10 	bl	8005318 <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014fe:	f001 faed 	bl	8002adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001508:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800150c:	4619      	mov	r1, r3
 800150e:	4831      	ldr	r0, [pc, #196]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 8001510:	f004 fd6c 	bl	8005fec <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800151a:	f001 fadf 	bl	8002adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800151e:	482d      	ldr	r0, [pc, #180]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 8001520:	f003 ff49 	bl	80053b6 <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800152a:	f001 fad7 	bl	8002adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001536:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800153a:	4619      	mov	r1, r3
 800153c:	4825      	ldr	r0, [pc, #148]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 800153e:	f005 facf 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001548:	f001 fac8 	bl	8002adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	@ 0x60
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	4818      	ldr	r0, [pc, #96]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 8001572:	f004 fc79 	bl	8005e68 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800157c:	f001 faae 	bl	8002adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4812      	ldr	r0, [pc, #72]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 800158a:	f004 fc6d 	bl	8005e68 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001594:	f001 faa2 	bl	8002adc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <MX_TIM8_Init+0x14c>)
 80015bc:	f005 fb0c 	bl	8006bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015c6:	f001 fa89 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3758      	adds	r7, #88	@ 0x58
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000370 	.word	0x20000370
 80015d8:	40010400 	.word	0x40010400

080015dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <MX_USART3_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART3_UART_Init+0x4c>)
 8001614:	f005 fb46 	bl	8006ca4 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f001 fa5d 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200003b8 	.word	0x200003b8
 800162c:	40004800 	.word	0x40004800

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	@ 0x30
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b49      	ldr	r3, [pc, #292]	@ (8001770 <MX_GPIO_Init+0x140>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a48      	ldr	r2, [pc, #288]	@ (8001770 <MX_GPIO_Init+0x140>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b46      	ldr	r3, [pc, #280]	@ (8001770 <MX_GPIO_Init+0x140>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <MX_GPIO_Init+0x140>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a41      	ldr	r2, [pc, #260]	@ (8001770 <MX_GPIO_Init+0x140>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <MX_GPIO_Init+0x140>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <MX_GPIO_Init+0x140>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a3a      	ldr	r2, [pc, #232]	@ (8001770 <MX_GPIO_Init+0x140>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <MX_GPIO_Init+0x140>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a33      	ldr	r2, [pc, #204]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a2c      	ldr	r2, [pc, #176]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a25      	ldr	r2, [pc, #148]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <MX_GPIO_Init+0x140>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 80016f4:	481f      	ldr	r0, [pc, #124]	@ (8001774 <MX_GPIO_Init+0x144>)
 80016f6:	f002 f961 	bl	80039bc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	213c      	movs	r1, #60	@ 0x3c
 80016fe:	481e      	ldr	r0, [pc, #120]	@ (8001778 <MX_GPIO_Init+0x148>)
 8001700:	f002 f95c 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800170a:	481c      	ldr	r0, [pc, #112]	@ (800177c <MX_GPIO_Init+0x14c>)
 800170c:	f002 f956 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001710:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001714:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4812      	ldr	r0, [pc, #72]	@ (8001774 <MX_GPIO_Init+0x144>)
 800172a:	f001 ffab 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800172e:	233c      	movs	r3, #60	@ 0x3c
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <MX_GPIO_Init+0x148>)
 8001746:	f001 ff9d 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 800174a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <MX_GPIO_Init+0x14c>)
 8001764:	f001 ff8e 	bl	8003684 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001768:	bf00      	nop
 800176a:	3730      	adds	r7, #48	@ 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	40021000 	.word	0x40021000
 8001778:	40020000 	.word	0x40020000
 800177c:	40020c00 	.word	0x40020c00

08001780 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning*/
	 UNUSED(huart);
	 receivedInstruction =1;
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <HAL_UART_RxCpltCallback+0x1c>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000424 	.word	0x20000424

080017a0 <moveCarStraight>:


// movement
void moveCarStraight(double distance) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	ed87 0b00 	vstr	d0, [r7]
//	rightTarget = 75000;
//	leftTarget = 75000;
//	rightTarget += distance;
//	leftTarget += distance;
//	while(finishCheck());
	distance = distance * 75;
 80017aa:	a344      	add	r3, pc, #272	@ (adr r3, 80018bc <moveCarStraight+0x11c>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017b4:	f7fe ff20 	bl	80005f8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	e9c7 2300 	strd	r2, r3, [r7]
	  pwmVal_servo = SERVOCENTER;
 80017c0:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <moveCarStraight+0xf0>)
 80017c2:	2292      	movs	r2, #146	@ 0x92
 80017c4:	801a      	strh	r2, [r3, #0]
	  osDelay(450);
 80017c6:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80017ca:	f006 fca5 	bl	8008118 <osDelay>
	  e_brake = 0;
 80017ce:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <moveCarStraight+0xf4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
	  times_acceptable = 0;
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <moveCarStraight+0xf8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
	  rightEncoderVal = 75000;
 80017da:	4b30      	ldr	r3, [pc, #192]	@ (800189c <moveCarStraight+0xfc>)
 80017dc:	4a30      	ldr	r2, [pc, #192]	@ (80018a0 <moveCarStraight+0x100>)
 80017de:	601a      	str	r2, [r3, #0]
	  leftEncoderVal = 75000;
 80017e0:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <moveCarStraight+0x104>)
 80017e2:	4a2f      	ldr	r2, [pc, #188]	@ (80018a0 <moveCarStraight+0x100>)
 80017e4:	601a      	str	r2, [r3, #0]
	  rightTarget = 75000;
 80017e6:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <moveCarStraight+0x108>)
 80017e8:	4a2d      	ldr	r2, [pc, #180]	@ (80018a0 <moveCarStraight+0x100>)
 80017ea:	601a      	str	r2, [r3, #0]
	  leftTarget = 75000;
 80017ec:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <moveCarStraight+0x10c>)
 80017ee:	4a2c      	ldr	r2, [pc, #176]	@ (80018a0 <moveCarStraight+0x100>)
 80017f0:	601a      	str	r2, [r3, #0]
	  rightTarget += distance;
 80017f2:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <moveCarStraight+0x108>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe94 	bl	8000524 <__aeabi_i2d>
 80017fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001800:	f7fe fd44 	bl	800028c <__adddf3>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff f9a4 	bl	8000b58 <__aeabi_d2iz>
 8001810:	4603      	mov	r3, r0
 8001812:	4a25      	ldr	r2, [pc, #148]	@ (80018a8 <moveCarStraight+0x108>)
 8001814:	6013      	str	r3, [r2, #0]
	  leftTarget += distance;
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <moveCarStraight+0x10c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe82 	bl	8000524 <__aeabi_i2d>
 8001820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001824:	f7fe fd32 	bl	800028c <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f992 	bl	8000b58 <__aeabi_d2iz>
 8001834:	4603      	mov	r3, r0
 8001836:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <moveCarStraight+0x10c>)
 8001838:	6013      	str	r3, [r2, #0]

	  while(finishCheck()) {
 800183a:	e01c      	b.n	8001876 <moveCarStraight+0xd6>
	    // Check for obstacle during movement (for forward movement only)
	    if (distance > 0 && obstacle_detected) {
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001848:	f7ff f966 	bl	8000b18 <__aeabi_dcmpgt>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d011      	beq.n	8001876 <moveCarStraight+0xd6>
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <moveCarStraight+0x110>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <moveCarStraight+0xd6>
	      e_brake = 1;  // Trigger emergency brake
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <moveCarStraight+0xf4>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
	      pwmVal_servo = SERVOCENTER;
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <moveCarStraight+0xf0>)
 8001862:	2292      	movs	r2, #146	@ 0x92
 8001864:	801a      	strh	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, (uint8_t*)"O\0", 2, 0xFFFF);  // Send obstacle alert
 8001866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800186a:	2202      	movs	r2, #2
 800186c:	4911      	ldr	r1, [pc, #68]	@ (80018b4 <moveCarStraight+0x114>)
 800186e:	4812      	ldr	r0, [pc, #72]	@ (80018b8 <moveCarStraight+0x118>)
 8001870:	f005 fa68 	bl	8006d44 <HAL_UART_Transmit>
	      break;  // Exit the loop
 8001874:	e005      	b.n	8001882 <moveCarStraight+0xe2>
	  while(finishCheck()) {
 8001876:	f000 f98d 	bl	8001b94 <finishCheck>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1dd      	bne.n	800183c <moveCarStraight+0x9c>
	    }
	  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	20000000 	.word	0x20000000
 8001894:	20000440 	.word	0x20000440
 8001898:	2000043c 	.word	0x2000043c
 800189c:	20000444 	.word	0x20000444
 80018a0:	000124f8 	.word	0x000124f8
 80018a4:	20000448 	.word	0x20000448
 80018a8:	2000044c 	.word	0x2000044c
 80018ac:	20000450 	.word	0x20000450
 80018b0:	200004a0 	.word	0x200004a0
 80018b4:	0800dbec 	.word	0x0800dbec
 80018b8:	200003b8 	.word	0x200003b8
 80018bc:	00000000 	.word	0x00000000
 80018c0:	4052c000 	.word	0x4052c000

080018c4 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(200);
}

void moveCarRight(double angle) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <moveCarRight+0x54>)
 80018d0:	22fa      	movs	r2, #250	@ 0xfa
 80018d2:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 80018d4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80018d8:	f006 fc1e 	bl	8008118 <osDelay>
	e_brake = 0;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <moveCarRight+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <moveCarRight+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <moveCarRight+0x60>)
 80018ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	490a      	ldr	r1, [pc, #40]	@ (8001924 <moveCarRight+0x60>)
 80018fc:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001900:	bf00      	nop
 8001902:	f000 f947 	bl	8001b94 <finishCheck>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1fa      	bne.n	8001902 <moveCarRight+0x3e>
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	20000440 	.word	0x20000440
 8001920:	2000043c 	.word	0x2000043c
 8001924:	20000458 	.word	0x20000458

08001928 <moveCarLeft>:

void moveCarLeft(double angle) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <moveCarLeft+0x54>)
 8001934:	2254      	movs	r2, #84	@ 0x54
 8001936:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 8001938:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800193c:	f006 fbec 	bl	8008118 <osDelay>
	e_brake = 0;
 8001940:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <moveCarLeft+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <moveCarLeft+0x5c>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <moveCarLeft+0x60>)
 800194e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001956:	f7fe fc99 	bl	800028c <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	490a      	ldr	r1, [pc, #40]	@ (8001988 <moveCarLeft+0x60>)
 8001960:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001964:	bf00      	nop
 8001966:	f000 f915 	bl	8001b94 <finishCheck>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1fa      	bne.n	8001966 <moveCarLeft+0x3e>
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000
 8001980:	20000440 	.word	0x20000440
 8001984:	2000043c 	.word	0x2000043c
 8001988:	20000458 	.word	0x20000458

0800198c <PID_Control>:



// error correction
int PID_Control(int error, int right) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d018      	beq.n	80019ce <PID_Control+0x42>
		if (error > 0) { //go forward
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dd0a      	ble.n	80019b8 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B (RIGHT)- FORWARD
 80019a2:	2201      	movs	r2, #1
 80019a4:	2110      	movs	r1, #16
 80019a6:	4835      	ldr	r0, [pc, #212]	@ (8001a7c <PID_Control+0xf0>)
 80019a8:	f002 f808 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	4832      	ldr	r0, [pc, #200]	@ (8001a7c <PID_Control+0xf0>)
 80019b2:	f002 f803 	bl	80039bc <HAL_GPIO_WritePin>
 80019b6:	e022      	b.n	80019fe <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B (RIGHT)- BACKWARDS
 80019b8:	2200      	movs	r2, #0
 80019ba:	2110      	movs	r1, #16
 80019bc:	482f      	ldr	r0, [pc, #188]	@ (8001a7c <PID_Control+0xf0>)
 80019be:	f001 fffd 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2120      	movs	r1, #32
 80019c6:	482d      	ldr	r0, [pc, #180]	@ (8001a7c <PID_Control+0xf0>)
 80019c8:	f001 fff8 	bl	80039bc <HAL_GPIO_WritePin>
 80019cc:	e017      	b.n	80019fe <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd0a      	ble.n	80019ea <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A(LEFT) - FORWARD
 80019d4:	2201      	movs	r2, #1
 80019d6:	2108      	movs	r1, #8
 80019d8:	4828      	ldr	r0, [pc, #160]	@ (8001a7c <PID_Control+0xf0>)
 80019da:	f001 ffef 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2104      	movs	r1, #4
 80019e2:	4826      	ldr	r0, [pc, #152]	@ (8001a7c <PID_Control+0xf0>)
 80019e4:	f001 ffea 	bl	80039bc <HAL_GPIO_WritePin>
 80019e8:	e009      	b.n	80019fe <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A(LEFT) - BACKWARDS
 80019ea:	2200      	movs	r2, #0
 80019ec:	2108      	movs	r1, #8
 80019ee:	4823      	ldr	r0, [pc, #140]	@ (8001a7c <PID_Control+0xf0>)
 80019f0:	f001 ffe4 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2104      	movs	r1, #4
 80019f8:	4820      	ldr	r0, [pc, #128]	@ (8001a7c <PID_Control+0xf0>)
 80019fa:	f001 ffdf 	bl	80039bc <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfb8      	it	lt
 8001a04:	425b      	neglt	r3, r3
 8001a06:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a0e:	dd02      	ble.n	8001a16 <PID_Control+0x8a>
		return 3000;
 8001a10:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001a14:	e02d      	b.n	8001a72 <PID_Control+0xe6>
	} else if (error > 500)     {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a1c:	dd02      	ble.n	8001a24 <PID_Control+0x98>
		return 2000;
 8001a1e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a22:	e026      	b.n	8001a72 <PID_Control+0xe6>
	 } else if (error > 200)  {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2bc8      	cmp	r3, #200	@ 0xc8
 8001a28:	dd02      	ble.n	8001a30 <PID_Control+0xa4>
		return 1400;
 8001a2a:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001a2e:	e020      	b.n	8001a72 <PID_Control+0xe6>
	  } else if (error > 100)    {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	dd02      	ble.n	8001a3c <PID_Control+0xb0>
		return 1000;
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	e01a      	b.n	8001a72 <PID_Control+0xe6>
	   } else if (error > 2)  {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	dd07      	ble.n	8001a52 <PID_Control+0xc6>
			times_acceptable++;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <PID_Control+0xf4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <PID_Control+0xf4>)
 8001a4a:	6013      	str	r3, [r2, #0]
			return 500;
 8001a4c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a50:	e00f      	b.n	8001a72 <PID_Control+0xe6>
			} else if (error >= 1) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	dd06      	ble.n	8001a66 <PID_Control+0xda>
		times_acceptable++;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <PID_Control+0xf4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a08      	ldr	r2, [pc, #32]	@ (8001a80 <PID_Control+0xf4>)
 8001a60:	6013      	str	r3, [r2, #0]
		return 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e005      	b.n	8001a72 <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <PID_Control+0xf4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <PID_Control+0xf4>)
 8001a6e:	6013      	str	r3, [r2, #0]
		return 0;
 8001a70:	2300      	movs	r3, #0
	}
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	2000043c 	.word	0x2000043c

08001a84 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a8e:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b3c      	ldr	r3, [pc, #240]	@ (8001b88 <PID_Angle+0x104>)
 8001a96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a9a:	f7fe fdad 	bl	80005f8 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f857 	bl	8000b58 <__aeabi_d2iz>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor = WHEEL B
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d018      	beq.n	8001ae6 <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	dd0a      	ble.n	8001ad0 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001aba:	2201      	movs	r2, #1
 8001abc:	2110      	movs	r1, #16
 8001abe:	4833      	ldr	r0, [pc, #204]	@ (8001b8c <PID_Angle+0x108>)
 8001ac0:	f001 ff7c 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	4830      	ldr	r0, [pc, #192]	@ (8001b8c <PID_Angle+0x108>)
 8001aca:	f001 ff77 	bl	80039bc <HAL_GPIO_WritePin>
 8001ace:	e022      	b.n	8001b16 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	482d      	ldr	r0, [pc, #180]	@ (8001b8c <PID_Angle+0x108>)
 8001ad6:	f001 ff71 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2120      	movs	r1, #32
 8001ade:	482b      	ldr	r0, [pc, #172]	@ (8001b8c <PID_Angle+0x108>)
 8001ae0:	f001 ff6c 	bl	80039bc <HAL_GPIO_WritePin>
 8001ae4:	e017      	b.n	8001b16 <PID_Angle+0x92>
		}
	} else { //leftMotor = WHEEL A
		if (error < 0) { //go forward
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da0a      	bge.n	8001b02 <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001aec:	2201      	movs	r2, #1
 8001aee:	2108      	movs	r1, #8
 8001af0:	4826      	ldr	r0, [pc, #152]	@ (8001b8c <PID_Angle+0x108>)
 8001af2:	f001 ff63 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2104      	movs	r1, #4
 8001afa:	4824      	ldr	r0, [pc, #144]	@ (8001b8c <PID_Angle+0x108>)
 8001afc:	f001 ff5e 	bl	80039bc <HAL_GPIO_WritePin>
 8001b00:	e009      	b.n	8001b16 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001b02:	2200      	movs	r2, #0
 8001b04:	2108      	movs	r1, #8
 8001b06:	4821      	ldr	r0, [pc, #132]	@ (8001b8c <PID_Angle+0x108>)
 8001b08:	f001 ff58 	bl	80039bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2104      	movs	r1, #4
 8001b10:	481e      	ldr	r0, [pc, #120]	@ (8001b8c <PID_Angle+0x108>)
 8001b12:	f001 ff53 	bl	80039bc <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bfb8      	it	lt
 8001b1c:	425b      	neglt	r3, r3
 8001b1e:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001b26:	dd02      	ble.n	8001b2e <PID_Angle+0xaa>
		return 3000;
 8001b28:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b2c:	e028      	b.n	8001b80 <PID_Angle+0xfc>
	} else if (error > 200) {
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b32:	dd02      	ble.n	8001b3a <PID_Angle+0xb6>
		return 2000;
 8001b34:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b38:	e022      	b.n	8001b80 <PID_Angle+0xfc>
	} else if (error > 150) {
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b96      	cmp	r3, #150	@ 0x96
 8001b3e:	dd02      	ble.n	8001b46 <PID_Angle+0xc2>
		return 1600;
 8001b40:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001b44:	e01c      	b.n	8001b80 <PID_Angle+0xfc>
	} else if (error > 100) {
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b64      	cmp	r3, #100	@ 0x64
 8001b4a:	dd02      	ble.n	8001b52 <PID_Angle+0xce>
		return 1400;
 8001b4c:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001b50:	e016      	b.n	8001b80 <PID_Angle+0xfc>
	} else if (error > 10) {
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	dd02      	ble.n	8001b5e <PID_Angle+0xda>
		return 1000;
 8001b58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5c:	e010      	b.n	8001b80 <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	dd07      	ble.n	8001b74 <PID_Angle+0xf0>
		times_acceptable++;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <PID_Angle+0x10c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <PID_Angle+0x10c>)
 8001b6c:	6013      	str	r3, [r2, #0]
		return 600;
 8001b6e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001b72:	e005      	b.n	8001b80 <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <PID_Angle+0x10c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <PID_Angle+0x10c>)
 8001b7c:	6013      	str	r3, [r2, #0]
		return 0;
 8001b7e:	2300      	movs	r3, #0
	}
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40240000 	.word	0x40240000
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	2000043c 	.word	0x2000043c

08001b94 <finishCheck>:

int finishCheck() {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {		//break if deviating from path
 8001b98:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <finishCheck+0x48>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b14      	cmp	r3, #20
 8001b9e:	dd1a      	ble.n	8001bd6 <finishCheck+0x42>
		e_brake = 1;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <finishCheck+0x4c>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <finishCheck+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	801a      	strh	r2, [r3, #0]
 8001bac:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <finishCheck+0x50>)
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <finishCheck+0x54>)
 8001bb2:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <finishCheck+0x58>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <finishCheck+0x5c>)
 8001bba:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <finishCheck+0x60>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <finishCheck+0x64>)
 8001bc2:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <finishCheck+0x48>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001bca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001bce:	f006 faa3 	bl	8008118 <osDelay>
		return 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <finishCheck+0x44>
	}
	return 1;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000043c 	.word	0x2000043c
 8001be0:	20000440 	.word	0x20000440
 8001be4:	20000438 	.word	0x20000438
 8001be8:	2000043a 	.word	0x2000043a
 8001bec:	20000448 	.word	0x20000448
 8001bf0:	20000450 	.word	0x20000450
 8001bf4:	20000444 	.word	0x20000444
 8001bf8:	2000044c 	.word	0x2000044c

08001bfc <delay_us>:

// ultrasonic
void delay_us(uint16_t time_us) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <delay_us+0x30>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < time_us);
 8001c0e:	bf00      	nop
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <delay_us+0x30>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3f9      	bcc.n	8001c10 <delay_us+0x14>
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000328 	.word	0x20000328

08001c30 <Ultrasonic_Read>:


void Ultrasonic_Read(void) //Call when u want to get reading from US
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c3a:	480b      	ldr	r0, [pc, #44]	@ (8001c68 <Ultrasonic_Read+0x38>)
 8001c3c:	f001 febe 	bl	80039bc <HAL_GPIO_WritePin>
	delay_us(20);
 8001c40:	2014      	movs	r0, #20
 8001c42:	f7ff ffdb 	bl	8001bfc <delay_us>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c4c:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <Ultrasonic_Read+0x38>)
 8001c4e:	f001 feb5 	bl	80039bc <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <Ultrasonic_Read+0x3c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <Ultrasonic_Read+0x3c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0202 	orr.w	r2, r2, #2
 8001c60:	60da      	str	r2, [r3, #12]
	//osDelay(50);
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	20000328 	.word	0x20000328

08001c70 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

	//OLED_ShowString(0, 50, "hello pls work");

	if(htim->Channel ==HAL_TIM_ACTIVE_CHANNEL_1){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7f1b      	ldrb	r3, [r3, #28]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	f040 8084 	bne.w	8001d8a <HAL_TIM_IC_CaptureCallback+0x11a>
		if(u_CapturedTrig1 == 0){	// Ultrasonic Trigger first sent
 8001c82:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11b      	bne.n	8001cc2 <HAL_TIM_IC_CaptureCallback+0x52>
			trig1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f004 fa75 	bl	800617c <HAL_TIM_ReadCapturedValue>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b43      	ldr	r3, [pc, #268]	@ (8001da4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c98:	601a      	str	r2, [r3, #0]
			u_CapturedTrig1 =1;
 8001c9a:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020a 	bic.w	r2, r2, #10
 8001cae:	621a      	str	r2, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a1a      	ldr	r2, [r3, #32]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0202 	orr.w	r2, r2, #2
 8001cbe:	621a      	str	r2, [r3, #32]


		}

	}
}
 8001cc0:	e063      	b.n	8001d8a <HAL_TIM_IC_CaptureCallback+0x11a>
		else if (u_CapturedTrig1 == 1){	//Ultrasonic Trigger 2nd sent
 8001cc2:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d15f      	bne.n	8001d8a <HAL_TIM_IC_CaptureCallback+0x11a>
				trig2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f004 fa55 	bl	800617c <HAL_TIM_ReadCapturedValue>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001cd8:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim,0);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24
				if (trig2 > trig1){
 8001ce2:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dd0d      	ble.n	8001d0a <HAL_TIM_IC_CaptureCallback+0x9a>
					echo_pulse = trig2-trig1;		//width of pulse
 8001cee:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc13 	bl	8000524 <__aeabi_i2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	492a      	ldr	r1, [pc, #168]	@ (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001d04:	e9c1 2300 	strd	r2, r3, [r1]
 8001d08:	e00f      	b.n	8001d2a <HAL_TIM_IC_CaptureCallback+0xba>
					echo_pulse = (65535-trig1)+trig2;	//if overflow, width of pulse
 8001d0a:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001d12:	33ff      	adds	r3, #255	@ 0xff
 8001d14:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc02 	bl	8000524 <__aeabi_i2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4921      	ldr	r1, [pc, #132]	@ (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001d26:	e9c1 2300 	strd	r2, r3, [r1]
				echo_dist = echo_pulse * 0.0343/2; //echo_dist in cm
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d30:	a319      	add	r3, pc, #100	@ (adr r3, 8001d98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	f7fe fc5f 	bl	80005f8 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d4a:	f7fe fd7f 	bl	800084c <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4917      	ldr	r1, [pc, #92]	@ (8001db0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001d54:	e9c1 2300 	strd	r2, r3, [r1]
				u_CapturedTrig1 =0;
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a1a      	ldr	r2, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 020a 	bic.w	r2, r2, #10
 8001d6c:	621a      	str	r2, [r3, #32]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a12      	ldr	r2, [r2, #32]
 8001d78:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0202 	bic.w	r2, r2, #2
 8001d88:	60da      	str	r2, [r3, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	04816f00 	.word	0x04816f00
 8001d9c:	3fa18fc5 	.word	0x3fa18fc5
 8001da0:	2000047c 	.word	0x2000047c
 8001da4:	20000498 	.word	0x20000498
 8001da8:	2000049c 	.word	0x2000049c
 8001dac:	20000490 	.word	0x20000490
 8001db0:	20000488 	.word	0x20000488
 8001db4:	20000328 	.word	0x20000328

08001db8 <readByte>:
//////////////////////////////////////////////////////////////



 //gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <readByte+0x48>)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <readByte+0x4c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	b299      	uxth	r1, r3
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <readByte+0x48>)
 8001dda:	480b      	ldr	r0, [pc, #44]	@ (8001e08 <readByte+0x50>)
 8001ddc:	f001 ff66 	bl	8003cac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <readByte+0x4c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	b299      	uxth	r1, r3
 8001de8:	2314      	movs	r3, #20
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2302      	movs	r3, #2
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <readByte+0x50>)
 8001df2:	f002 f859 	bl	8003ea8 <HAL_I2C_Master_Receive>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000468 	.word	0x20000468
 8001e04:	20000002 	.word	0x20000002
 8001e08:	200001fc 	.word	0x200001fc

08001e0c <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	4603      	mov	r3, r0
 8001e14:	460a      	mov	r2, r1
 8001e16:	71fb      	strb	r3, [r7, #7]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <writeByte+0x3c>)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001e22:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <writeByte+0x3c>)
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <writeByte+0x40>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	b299      	uxth	r1, r3
 8001e30:	2314      	movs	r3, #20
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2302      	movs	r3, #2
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <writeByte+0x3c>)
 8001e38:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <writeByte+0x44>)
 8001e3a:	f001 ff37 	bl	8003cac <HAL_I2C_Master_Transmit>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000468 	.word	0x20000468
 8001e4c:	20000002 	.word	0x20000002
 8001e50:	200001fc 	.word	0x200001fc

08001e54 <gyroInit>:

void gyroInit() {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2006      	movs	r0, #6
 8001e5c:	f7ff ffd6 	bl	8001e0c <writeByte>
	osDelay(10);
 8001e60:	200a      	movs	r0, #10
 8001e62:	f006 f959 	bl	8008118 <osDelay>
	writeByte(0x03, 0x80);
 8001e66:	2180      	movs	r1, #128	@ 0x80
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f7ff ffcf 	bl	8001e0c <writeByte>
	osDelay(10);
 8001e6e:	200a      	movs	r0, #10
 8001e70:	f006 f952 	bl	8008118 <osDelay>
	writeByte(0x07, 0x07);
 8001e74:	2107      	movs	r1, #7
 8001e76:	2007      	movs	r0, #7
 8001e78:	f7ff ffc8 	bl	8001e0c <writeByte>
	osDelay(10);
 8001e7c:	200a      	movs	r0, #10
 8001e7e:	f006 f94b 	bl	8008118 <osDelay>
	writeByte(0x06, 0x01);
 8001e82:	2101      	movs	r1, #1
 8001e84:	2006      	movs	r0, #6
 8001e86:	f7ff ffc1 	bl	8001e0c <writeByte>
	osDelay(10);
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f006 f944 	bl	8008118 <osDelay>
	writeByte(0x7F, 0x20);
 8001e90:	2120      	movs	r1, #32
 8001e92:	207f      	movs	r0, #127	@ 0x7f
 8001e94:	f7ff ffba 	bl	8001e0c <writeByte>
	osDelay(10);
 8001e98:	200a      	movs	r0, #10
 8001e9a:	f006 f93d 	bl	8008118 <osDelay>
	writeByte(0x01, 0x2F);
 8001e9e:	212f      	movs	r1, #47	@ 0x2f
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ffb3 	bl	8001e0c <writeByte>
	osDelay(10);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f006 f936 	bl	8008118 <osDelay>
	writeByte(0x0, 0x00);
 8001eac:	2100      	movs	r1, #0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff ffac 	bl	8001e0c <writeByte>
	osDelay(10);
 8001eb4:	200a      	movs	r0, #10
 8001eb6:	f006 f92f 	bl	8008118 <osDelay>
	writeByte(0x7F, 0x00);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	207f      	movs	r0, #127	@ 0x7f
 8001ebe:	f7ff ffa5 	bl	8001e0c <writeByte>
	osDelay(10);
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f006 f928 	bl	8008118 <osDelay>
	writeByte(0x07, 0x00);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2007      	movs	r0, #7
 8001ecc:	f7ff ff9e 	bl	8001e0c <writeByte>
	osDelay(10);
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f006 f921 	bl	8008118 <osDelay>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001ee4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ee8:	4804      	ldr	r0, [pc, #16]	@ (8001efc <StartDefaultTask+0x20>)
 8001eea:	f001 fd80 	bl	80039ee <HAL_GPIO_TogglePin>
     osDelay(1000);
 8001eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef2:	f006 f911 	bl	8008118 <osDelay>
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001ef6:	bf00      	nop
 8001ef8:	e7f4      	b.n	8001ee4 <StartDefaultTask+0x8>
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
//			osDelay(5000);
//
//		}
		//SERVOMOTOR END

    osDelay(100);
 8001f08:	2064      	movs	r0, #100	@ 0x64
 8001f0a:	f006 f905 	bl	8008118 <osDelay>
 8001f0e:	e7fb      	b.n	8001f08 <motors+0x8>

08001f10 <rightEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rightEncoder */
void rightEncoder(void *argument)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rightEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001f18:	213c      	movs	r1, #60	@ 0x3c
 8001f1a:	481f      	ldr	r0, [pc, #124]	@ (8001f98 <rightEncoder+0x88>)
 8001f1c:	f003 fd8a 	bl	8005a34 <HAL_TIM_Encoder_Start>
		int cnt1;
		int dirR = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
		int diff;
		uint32_t tick = HAL_GetTick();
 8001f24:	f001 f9da 	bl	80032dc <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]
		/* Infinite loop */
		for (;;) {
			if (HAL_GetTick() - tick > 10L) {
 8001f2a:	f001 f9d7 	bl	80032dc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b0a      	cmp	r3, #10
 8001f36:	d92a      	bls.n	8001f8e <rightEncoder+0x7e>
				cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <rightEncoder+0x88>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	60bb      	str	r3, [r7, #8]
				if (cnt1 > 32000) {
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001f46:	dd06      	ble.n	8001f56 <rightEncoder+0x46>
					dirR = 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
					diff = (65536 - cnt1);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e004      	b.n	8001f60 <rightEncoder+0x50>
				} else {
					dirR = -1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	617b      	str	r3, [r7, #20]
					diff = cnt1;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	613b      	str	r3, [r7, #16]
				}
				if (dirR == 1) {
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d106      	bne.n	8001f74 <rightEncoder+0x64>
					rightEncoderVal -= diff;
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <rightEncoder+0x8c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f9c <rightEncoder+0x8c>)
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e005      	b.n	8001f80 <rightEncoder+0x70>
				} else {
					rightEncoderVal += diff;
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <rightEncoder+0x8c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <rightEncoder+0x8c>)
 8001f7e:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <rightEncoder+0x88>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24

				tick = HAL_GetTick();
 8001f88:	f001 f9a8 	bl	80032dc <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]
			}
			osDelay(50);
 8001f8e:	2032      	movs	r0, #50	@ 0x32
 8001f90:	f006 f8c2 	bl	8008118 <osDelay>
			if (HAL_GetTick() - tick > 10L) {
 8001f94:	e7c9      	b.n	8001f2a <rightEncoder+0x1a>
 8001f96:	bf00      	nop
 8001f98:	200002e0 	.word	0x200002e0
 8001f9c:	20000444 	.word	0x20000444

08001fa0 <leftEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leftEncoder */
void leftEncoder(void *argument)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leftEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001fa8:	213c      	movs	r1, #60	@ 0x3c
 8001faa:	481f      	ldr	r0, [pc, #124]	@ (8002028 <leftEncoder+0x88>)
 8001fac:	f003 fd42 	bl	8005a34 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
	int diff;

	uint32_t tick = HAL_GetTick();
 8001fb4:	f001 f992 	bl	80032dc <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8001fba:	f001 f98f 	bl	80032dc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b0a      	cmp	r3, #10
 8001fc6:	d92a      	bls.n	800201e <leftEncoder+0x7e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001fc8:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <leftEncoder+0x88>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001fd6:	dd06      	ble.n	8001fe6 <leftEncoder+0x46>
				dirL = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e004      	b.n	8001ff0 <leftEncoder+0x50>
			} else {
				dirL = -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d106      	bne.n	8002004 <leftEncoder+0x64>
				leftEncoderVal += diff;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <leftEncoder+0x8c>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <leftEncoder+0x8c>)
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e005      	b.n	8002010 <leftEncoder+0x70>
			} else {
				leftEncoderVal -= diff;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <leftEncoder+0x8c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	4a07      	ldr	r2, [pc, #28]	@ (800202c <leftEncoder+0x8c>)
 800200e:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <leftEncoder+0x88>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 8002018:	f001 f960 	bl	80032dc <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

//		sprintf(hello, "SpeedL: %5d\0", diff);
//		  OLED_ShowString(10,30,hello);
//		  sprintf(hello, "DirL: %5d\0", dirL);
//		  OLED_ShowString(10,40,hello);
		  osDelay(50);
 800201e:	2032      	movs	r0, #50	@ 0x32
 8002020:	f006 f87a 	bl	8008118 <osDelay>
		if (HAL_GetTick() - tick > 10L) {
 8002024:	e7c9      	b.n	8001fba <leftEncoder+0x1a>
 8002026:	bf00      	nop
 8002028:	20000298 	.word	0x20000298
 800202c:	20000448 	.word	0x20000448

08002030 <StartCommsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommsTask */
void StartCommsTask(void *argument)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	========================================================================*/




	uint8_t ack[4] = "A\0";        // ACK
 8002038:	2341      	movs	r3, #65	@ 0x41
 800203a:	617b      	str	r3, [r7, #20]
	  uint8_t invalid[8] = "I\0";    // "INVALID
 800203c:	2349      	movs	r3, #73	@ 0x49
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
	  uint8_t obstacle[2] = "O\0";   // Obstacle detected
 8002044:	234f      	movs	r3, #79	@ 0x4f
 8002046:	813b      	strh	r3, [r7, #8]

	  strcpy((char *)aRxBuffer, "START");
 8002048:	4baa      	ldr	r3, [pc, #680]	@ (80022f4 <StartCommsTask+0x2c4>)
 800204a:	4aab      	ldr	r2, [pc, #684]	@ (80022f8 <StartCommsTask+0x2c8>)
 800204c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002050:	6018      	str	r0, [r3, #0]
 8002052:	3304      	adds	r3, #4
 8002054:	8019      	strh	r1, [r3, #0]

	  /* Infinite loop */
	  for(;;)
	  {
	    // Make sure UART is ready to receive
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8002056:	2205      	movs	r2, #5
 8002058:	49a6      	ldr	r1, [pc, #664]	@ (80022f4 <StartCommsTask+0x2c4>)
 800205a:	48a8      	ldr	r0, [pc, #672]	@ (80022fc <StartCommsTask+0x2cc>)
 800205c:	f004 fefd 	bl	8006e5a <HAL_UART_Receive_IT>

	    if(receivedInstruction == 1)
 8002060:	4ba7      	ldr	r3, [pc, #668]	@ (8002300 <StartCommsTask+0x2d0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	f040 812c 	bne.w	80022c2 <StartCommsTask+0x292>
	    {
	      amplitude = 0;
 800206a:	4ba6      	ldr	r3, [pc, #664]	@ (8002304 <StartCommsTask+0x2d4>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

	      // Check valid command format
	      if ((aRxBuffer[0] == 'R' && aRxBuffer[1] == 'E' && aRxBuffer[2] == 'S' && aRxBuffer[3] == 'E' && aRxBuffer[4] == 'T')
 8002070:	4ba0      	ldr	r3, [pc, #640]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b52      	cmp	r3, #82	@ 0x52
 8002076:	d10f      	bne.n	8002098 <StartCommsTask+0x68>
 8002078:	4b9e      	ldr	r3, [pc, #632]	@ (80022f4 <StartCommsTask+0x2c4>)
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	2b45      	cmp	r3, #69	@ 0x45
 800207e:	d10b      	bne.n	8002098 <StartCommsTask+0x68>
 8002080:	4b9c      	ldr	r3, [pc, #624]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	2b53      	cmp	r3, #83	@ 0x53
 8002086:	d107      	bne.n	8002098 <StartCommsTask+0x68>
 8002088:	4b9a      	ldr	r3, [pc, #616]	@ (80022f4 <StartCommsTask+0x2c4>)
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	2b45      	cmp	r3, #69	@ 0x45
 800208e:	d103      	bne.n	8002098 <StartCommsTask+0x68>
 8002090:	4b98      	ldr	r3, [pc, #608]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002092:	791b      	ldrb	r3, [r3, #4]
 8002094:	2b54      	cmp	r3, #84	@ 0x54
 8002096:	d033      	beq.n	8002100 <StartCommsTask+0xd0>
	          || ((aRxBuffer[0] == 'F' || aRxBuffer[0] == 'B')        // move Forward, Backwards
 8002098:	4b96      	ldr	r3, [pc, #600]	@ (80022f4 <StartCommsTask+0x2c4>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b46      	cmp	r3, #70	@ 0x46
 800209e:	d004      	beq.n	80020aa <StartCommsTask+0x7a>
 80020a0:	4b94      	ldr	r3, [pc, #592]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b42      	cmp	r3, #66	@ 0x42
 80020a6:	f040 80f5 	bne.w	8002294 <StartCommsTask+0x264>
	          && (aRxBuffer[1] == 'S' || aRxBuffer[1] == 'R' || aRxBuffer[1] == 'L'))   // move straight, right, or left
 80020aa:	4b92      	ldr	r3, [pc, #584]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	2b53      	cmp	r3, #83	@ 0x53
 80020b0:	d008      	beq.n	80020c4 <StartCommsTask+0x94>
 80020b2:	4b90      	ldr	r3, [pc, #576]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b52      	cmp	r3, #82	@ 0x52
 80020b8:	d004      	beq.n	80020c4 <StartCommsTask+0x94>
 80020ba:	4b8e      	ldr	r3, [pc, #568]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020bc:	785b      	ldrb	r3, [r3, #1]
 80020be:	2b4c      	cmp	r3, #76	@ 0x4c
 80020c0:	f040 80e8 	bne.w	8002294 <StartCommsTask+0x264>
	          && ((aRxBuffer[2] - '0') >= 0 && (aRxBuffer[2] - '0') <= 9)
 80020c4:	4b8b      	ldr	r3, [pc, #556]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020c6:	789b      	ldrb	r3, [r3, #2]
 80020c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80020ca:	f240 80e3 	bls.w	8002294 <StartCommsTask+0x264>
 80020ce:	4b89      	ldr	r3, [pc, #548]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020d0:	789b      	ldrb	r3, [r3, #2]
 80020d2:	2b39      	cmp	r3, #57	@ 0x39
 80020d4:	f200 80de 	bhi.w	8002294 <StartCommsTask+0x264>
	          && ((aRxBuffer[3] - '0') >= 0 && (aRxBuffer[3] - '0') <= 9)
 80020d8:	4b86      	ldr	r3, [pc, #536]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020da:	78db      	ldrb	r3, [r3, #3]
 80020dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80020de:	f240 80d9 	bls.w	8002294 <StartCommsTask+0x264>
 80020e2:	4b84      	ldr	r3, [pc, #528]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020e4:	78db      	ldrb	r3, [r3, #3]
 80020e6:	2b39      	cmp	r3, #57	@ 0x39
 80020e8:	f200 80d4 	bhi.w	8002294 <StartCommsTask+0x264>
	          && ((aRxBuffer[4] - '0') >= 0 && (aRxBuffer[4] - '0') <= 9))
 80020ec:	4b81      	ldr	r3, [pc, #516]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80020f2:	f240 80cf 	bls.w	8002294 <StartCommsTask+0x264>
 80020f6:	4b7f      	ldr	r3, [pc, #508]	@ (80022f4 <StartCommsTask+0x2c4>)
 80020f8:	791b      	ldrb	r3, [r3, #4]
 80020fa:	2b39      	cmp	r3, #57	@ 0x39
 80020fc:	f200 80ca 	bhi.w	8002294 <StartCommsTask+0x264>
	      {
	        // Check if we're trying to move forward and there's an obstacle
	        if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'S' && obstacle_detected) {
 8002100:	4b7c      	ldr	r3, [pc, #496]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b46      	cmp	r3, #70	@ 0x46
 8002106:	d11a      	bne.n	800213e <StartCommsTask+0x10e>
 8002108:	4b7a      	ldr	r3, [pc, #488]	@ (80022f4 <StartCommsTask+0x2c4>)
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	2b53      	cmp	r3, #83	@ 0x53
 800210e:	d116      	bne.n	800213e <StartCommsTask+0x10e>
 8002110:	4b7d      	ldr	r3, [pc, #500]	@ (8002308 <StartCommsTask+0x2d8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <StartCommsTask+0x10e>
	          // Don't execute the forward command if there's an obstacle
	          strcpy((char *)aRxBuffer, "OBST!");
 8002118:	4b76      	ldr	r3, [pc, #472]	@ (80022f4 <StartCommsTask+0x2c4>)
 800211a:	4a7c      	ldr	r2, [pc, #496]	@ (800230c <StartCommsTask+0x2dc>)
 800211c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002120:	6018      	str	r0, [r3, #0]
 8002122:	3304      	adds	r3, #4
 8002124:	8019      	strh	r1, [r3, #0]
	          HAL_UART_Transmit(&huart3, (uint8_t*) obstacle, 2, 0xFFFF);  // Send obstacle alert
 8002126:	f107 0108 	add.w	r1, r7, #8
 800212a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800212e:	2202      	movs	r2, #2
 8002130:	4872      	ldr	r0, [pc, #456]	@ (80022fc <StartCommsTask+0x2cc>)
 8002132:	f004 fe07 	bl	8006d44 <HAL_UART_Transmit>
	          receivedInstruction = 0;
 8002136:	4b72      	ldr	r3, [pc, #456]	@ (8002300 <StartCommsTask+0x2d0>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e0a9      	b.n	8002292 <StartCommsTask+0x262>
	        }
	        else {
	          // Process the command as usual
	          HAL_UART_AbortReceive_IT(&huart3);  // pause receiving from UART
 800213e:	486f      	ldr	r0, [pc, #444]	@ (80022fc <StartCommsTask+0x2cc>)
 8002140:	f004 feb0 	bl	8006ea4 <HAL_UART_AbortReceive_IT>

	          amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002144:	4b6b      	ldr	r3, [pc, #428]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002146:	789b      	ldrb	r3, [r3, #2]
 8002148:	3b30      	subs	r3, #48	@ 0x30
 800214a:	2264      	movs	r2, #100	@ 0x64
 800214c:	fb02 f103 	mul.w	r1, r2, r3
	                    + ((int) (aRxBuffer[3]) - 48) * 10
 8002150:	4b68      	ldr	r3, [pc, #416]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002152:	78db      	ldrb	r3, [r3, #3]
 8002154:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	18ca      	adds	r2, r1, r3
	                    + ((int) (aRxBuffer[4]) - 48);
 8002162:	4b64      	ldr	r3, [pc, #400]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002164:	791b      	ldrb	r3, [r3, #4]
 8002166:	3b30      	subs	r3, #48	@ 0x30
 8002168:	4413      	add	r3, r2
	          amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 800216a:	4a66      	ldr	r2, [pc, #408]	@ (8002304 <StartCommsTask+0x2d4>)
 800216c:	6013      	str	r3, [r2, #0]

	          if (aRxBuffer[0] == 'B') {          // check Direction first
 800216e:	4b61      	ldr	r3, [pc, #388]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b42      	cmp	r3, #66	@ 0x42
 8002174:	d104      	bne.n	8002180 <StartCommsTask+0x150>
	            amplitude *= -1;
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <StartCommsTask+0x2d4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	425b      	negs	r3, r3
 800217c:	4a61      	ldr	r2, [pc, #388]	@ (8002304 <StartCommsTask+0x2d4>)
 800217e:	6013      	str	r3, [r2, #0]
	          }

	          osDelay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f005 ffc9 	bl	8008118 <osDelay>
	          switch (aRxBuffer[1]) {
 8002186:	4b5b      	ldr	r3, [pc, #364]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	3b45      	subs	r3, #69	@ 0x45
 800218c:	2b0e      	cmp	r3, #14
 800218e:	f200 8097 	bhi.w	80022c0 <StartCommsTask+0x290>
 8002192:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <StartCommsTask+0x168>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	0800226b 	.word	0x0800226b
 800219c:	080022c1 	.word	0x080022c1
 80021a0:	080022c1 	.word	0x080022c1
 80021a4:	080022c1 	.word	0x080022c1
 80021a8:	080022c1 	.word	0x080022c1
 80021ac:	080022c1 	.word	0x080022c1
 80021b0:	080022c1 	.word	0x080022c1
 80021b4:	08002239 	.word	0x08002239
 80021b8:	080022c1 	.word	0x080022c1
 80021bc:	080022c1 	.word	0x080022c1
 80021c0:	080022c1 	.word	0x080022c1
 80021c4:	080022c1 	.word	0x080022c1
 80021c8:	080022c1 	.word	0x080022c1
 80021cc:	08002207 	.word	0x08002207
 80021d0:	080021d5 	.word	0x080021d5
	          case 'S':
	            moveCarStraight(amplitude);
 80021d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002304 <StartCommsTask+0x2d4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f9a3 	bl	8000524 <__aeabi_i2d>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	ec43 2b10 	vmov	d0, r2, r3
 80021e6:	f7ff fadb 	bl	80017a0 <moveCarStraight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 80021ea:	4b42      	ldr	r3, [pc, #264]	@ (80022f4 <StartCommsTask+0x2c4>)
 80021ec:	4a48      	ldr	r2, [pc, #288]	@ (8002310 <StartCommsTask+0x2e0>)
 80021ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f2:	6018      	str	r0, [r3, #0]
 80021f4:	3304      	adds	r3, #4
 80021f6:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 80021f8:	4b46      	ldr	r3, [pc, #280]	@ (8002314 <StartCommsTask+0x2e4>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 80021fe:	200a      	movs	r0, #10
 8002200:	f005 ff8a 	bl	8008118 <osDelay>
	            break;
 8002204:	e045      	b.n	8002292 <StartCommsTask+0x262>
	          case 'R':
	            moveCarRight(amplitude);
 8002206:	4b3f      	ldr	r3, [pc, #252]	@ (8002304 <StartCommsTask+0x2d4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f98a 	bl	8000524 <__aeabi_i2d>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	ec43 2b10 	vmov	d0, r2, r3
 8002218:	f7ff fb54 	bl	80018c4 <moveCarRight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 800221c:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <StartCommsTask+0x2c4>)
 800221e:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <StartCommsTask+0x2e0>)
 8002220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002224:	6018      	str	r0, [r3, #0]
 8002226:	3304      	adds	r3, #4
 8002228:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 800222a:	4b3a      	ldr	r3, [pc, #232]	@ (8002314 <StartCommsTask+0x2e4>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002230:	200a      	movs	r0, #10
 8002232:	f005 ff71 	bl	8008118 <osDelay>
	            break;
 8002236:	e02c      	b.n	8002292 <StartCommsTask+0x262>
	          case 'L':
	            moveCarLeft(amplitude);
 8002238:	4b32      	ldr	r3, [pc, #200]	@ (8002304 <StartCommsTask+0x2d4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f971 	bl	8000524 <__aeabi_i2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	ec43 2b10 	vmov	d0, r2, r3
 800224a:	f7ff fb6d 	bl	8001928 <moveCarLeft>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 800224e:	4b29      	ldr	r3, [pc, #164]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002250:	4a2f      	ldr	r2, [pc, #188]	@ (8002310 <StartCommsTask+0x2e0>)
 8002252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002256:	6018      	str	r0, [r3, #0]
 8002258:	3304      	adds	r3, #4
 800225a:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 800225c:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <StartCommsTask+0x2e4>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002262:	200a      	movs	r0, #10
 8002264:	f005 ff58 	bl	8008118 <osDelay>
	            break;
 8002268:	e013      	b.n	8002292 <StartCommsTask+0x262>
	          case 'E':                   // reset whole system to recalibrate gyro
	            strcpy((char *)aRxBuffer, "RESET");
 800226a:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <StartCommsTask+0x2c4>)
 800226c:	4a2a      	ldr	r2, [pc, #168]	@ (8002318 <StartCommsTask+0x2e8>)
 800226e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002272:	6018      	str	r0, [r3, #0]
 8002274:	3304      	adds	r3, #4
 8002276:	8019      	strh	r1, [r3, #0]
	            HAL_UART_Transmit(&huart3, (uint8_t*) "R\0", 2, 0xFFFF);  // TRANSMITTING "RESET" TO RPI/PUTTY
 8002278:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800227c:	2202      	movs	r2, #2
 800227e:	4927      	ldr	r1, [pc, #156]	@ (800231c <StartCommsTask+0x2ec>)
 8002280:	481e      	ldr	r0, [pc, #120]	@ (80022fc <StartCommsTask+0x2cc>)
 8002282:	f004 fd5f 	bl	8006d44 <HAL_UART_Transmit>
	            osDelay(500);
 8002286:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800228a:	f005 ff45 	bl	8008118 <osDelay>
	            NVIC_SystemReset();
 800228e:	f7fe fe23 	bl	8000ed8 <__NVIC_SystemReset>
	        if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'S' && obstacle_detected) {
 8002292:	e015      	b.n	80022c0 <StartCommsTask+0x290>
	          }
	        }
	      }
	      else      // INVALID CHOICE
	      {
	        strcpy((char *)aRxBuffer, "INVAL");
 8002294:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <StartCommsTask+0x2c4>)
 8002296:	4a22      	ldr	r2, [pc, #136]	@ (8002320 <StartCommsTask+0x2f0>)
 8002298:	e892 0003 	ldmia.w	r2, {r0, r1}
 800229c:	6018      	str	r0, [r3, #0]
 800229e:	3304      	adds	r3, #4
 80022a0:	8019      	strh	r1, [r3, #0]
	        osDelay(10);
 80022a2:	200a      	movs	r0, #10
 80022a4:	f005 ff38 	bl	8008118 <osDelay>
	        HAL_UART_Transmit(&huart3, (uint8_t*) &invalid, 8, 0xFFFF);  // TRANSMITTING "INVAL" TO RPI/PUTTY
 80022a8:	f107 010c 	add.w	r1, r7, #12
 80022ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022b0:	2208      	movs	r2, #8
 80022b2:	4812      	ldr	r0, [pc, #72]	@ (80022fc <StartCommsTask+0x2cc>)
 80022b4:	f004 fd46 	bl	8006d44 <HAL_UART_Transmit>
	        receivedInstruction = 0;
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <StartCommsTask+0x2d0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e000      	b.n	80022c2 <StartCommsTask+0x292>
	        if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'S' && obstacle_detected) {
 80022c0:	bf00      	nop
	      }
	    }

	    if (flagDone == 1) {
 80022c2:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <StartCommsTask+0x2e4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d110      	bne.n	80022ec <StartCommsTask+0x2bc>
	      receivedInstruction = 0;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <StartCommsTask+0x2d0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
	      osDelay(10);
 80022d0:	200a      	movs	r0, #10
 80022d2:	f005 ff21 	bl	8008118 <osDelay>
	      HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 4, 0xFFFF);   // TRANSMITTING "ACK" TO RPI/PUTTY
 80022d6:	f107 0114 	add.w	r1, r7, #20
 80022da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022de:	2204      	movs	r2, #4
 80022e0:	4806      	ldr	r0, [pc, #24]	@ (80022fc <StartCommsTask+0x2cc>)
 80022e2:	f004 fd2f 	bl	8006d44 <HAL_UART_Transmit>
	      flagDone = 0;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <StartCommsTask+0x2e4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
	    }

	    osDelay(10);
 80022ec:	200a      	movs	r0, #10
 80022ee:	f005 ff13 	bl	8008118 <osDelay>
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 80022f2:	e6b0      	b.n	8002056 <StartCommsTask+0x26>
 80022f4:	20000428 	.word	0x20000428
 80022f8:	0800dbf0 	.word	0x0800dbf0
 80022fc:	200003b8 	.word	0x200003b8
 8002300:	20000424 	.word	0x20000424
 8002304:	20000434 	.word	0x20000434
 8002308:	200004a0 	.word	0x200004a0
 800230c:	0800dbf8 	.word	0x0800dbf8
 8002310:	0800dc00 	.word	0x0800dc00
 8002314:	20000430 	.word	0x20000430
 8002318:	0800dc08 	.word	0x0800dc08
 800231c:	0800dc10 	.word	0x0800dc10
 8002320:	0800dc14 	.word	0x0800dc14

08002324 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b096      	sub	sp, #88	@ 0x58
 8002328:	af04      	add	r7, sp, #16
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
  /* Infinite loop */
// aaa	uint8_t usVal[20] = { 0 };
	uint8_t gyroVal[20] = { 0 };
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002330:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	f107 0320 	add.w	r3, r7, #32
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
	uint8_t echo[20] = { 0 };
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]

	for (;;) {
		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 8002362:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <StartOLEDTask+0x138>)
 8002364:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002368:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <StartOLEDTask+0x138>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f7fe fbf1 	bl	8000b58 <__aeabi_d2iz>
 8002376:	4603      	mov	r3, r0
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f8d3 	bl	8000524 <__aeabi_i2d>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4620      	mov	r0, r4
 8002384:	4629      	mov	r1, r5
 8002386:	f7fd ff7f 	bl	8000288 <__aeabi_dsub>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	4b32      	ldr	r3, [pc, #200]	@ (8002460 <StartOLEDTask+0x13c>)
 8002398:	f7fe f92e 	bl	80005f8 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7fe fbd8 	bl	8000b58 <__aeabi_d2iz>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	425b      	neglt	r3, r3
 80023b0:	647b      	str	r3, [r7, #68]	@ 0x44
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <StartOLEDTask+0x138>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fbcc 	bl	8000b58 <__aeabi_d2iz>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80023c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c8:	4926      	ldr	r1, [pc, #152]	@ (8002464 <StartOLEDTask+0x140>)
 80023ca:	f009 fa99 	bl	800b900 <siprintf>
		OLED_ShowString(0, 10, gyroVal);
 80023ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023d2:	461a      	mov	r2, r3
 80023d4:	210a      	movs	r1, #10
 80023d6:	2000      	movs	r0, #0
 80023d8:	f008 fcba 	bl	800ad50 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 80023dc:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <StartOLEDTask+0x144>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461c      	mov	r4, r3
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <StartOLEDTask+0x144>)
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <StartOLEDTask+0x144>)
 80023ea:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 80023ec:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <StartOLEDTask+0x144>)
 80023f0:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 80023f2:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 80023f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <StartOLEDTask+0x144>)
 80023f6:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 80023f8:	f107 001c 	add.w	r0, r7, #28
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	9101      	str	r1, [sp, #4]
 8002400:	9200      	str	r2, [sp, #0]
 8002402:	462b      	mov	r3, r5
 8002404:	4622      	mov	r2, r4
 8002406:	4919      	ldr	r1, [pc, #100]	@ (800246c <StartOLEDTask+0x148>)
 8002408:	f009 fa7a 	bl	800b900 <siprintf>
		OLED_ShowString(0, 20, command);
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	461a      	mov	r2, r3
 8002412:	2114      	movs	r1, #20
 8002414:	2000      	movs	r0, #0
 8002416:	f008 fc9b 	bl	800ad50 <OLED_ShowString>

		//print ultrasonic readings

		uintPart = (int)echo_dist;
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <StartOLEDTask+0x14c>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fb98 	bl	8000b58 <__aeabi_d2iz>
 8002428:	4603      	mov	r3, r0
 800242a:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <StartOLEDTask+0x150>)
 800242c:	6013      	str	r3, [r2, #0]
		sprintf(echo, "E = %dcm \0", uintPart);
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <StartOLEDTask+0x150>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	4910      	ldr	r1, [pc, #64]	@ (8002478 <StartOLEDTask+0x154>)
 8002438:	4618      	mov	r0, r3
 800243a:	f009 fa61 	bl	800b900 <siprintf>

//		sprintf(echo, "UDist: %.2d \0", echo_dist);
				OLED_ShowString(0, 30, echo);
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	461a      	mov	r2, r3
 8002444:	211e      	movs	r1, #30
 8002446:	2000      	movs	r0, #0
 8002448:	f008 fc82 	bl	800ad50 <OLED_ShowString>


		OLED_Refresh_Gram();
 800244c:	f008 fb0c 	bl	800aa68 <OLED_Refresh_Gram>
		osDelay(100);
 8002450:	2064      	movs	r0, #100	@ 0x64
 8002452:	f005 fe61 	bl	8008118 <osDelay>
	for (;;) {
 8002456:	bf00      	nop
 8002458:	e783      	b.n	8002362 <StartOLEDTask+0x3e>
 800245a:	bf00      	nop
 800245c:	20000460 	.word	0x20000460
 8002460:	408f4000 	.word	0x408f4000
 8002464:	0800dc1c 	.word	0x0800dc1c
 8002468:	20000428 	.word	0x20000428
 800246c:	0800dc2c 	.word	0x0800dc2c
 8002470:	20000488 	.word	0x20000488
 8002474:	20000480 	.word	0x20000480
 8002478:	0800dc3c 	.word	0x0800dc3c
 800247c:	00000000 	.word	0x00000000

08002480 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	pwmVal_R = 0;
 8002488:	4baf      	ldr	r3, [pc, #700]	@ (8002748 <StartMotorTask+0x2c8>)
 800248a:	2200      	movs	r2, #0
 800248c:	801a      	strh	r2, [r3, #0]
	  pwmVal_L = 0;
 800248e:	4baf      	ldr	r3, [pc, #700]	@ (800274c <StartMotorTask+0x2cc>)
 8002490:	2200      	movs	r2, #0
 8002492:	801a      	strh	r2, [r3, #0]
	  int straightCorrection = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002498:	2100      	movs	r1, #0
 800249a:	48ad      	ldr	r0, [pc, #692]	@ (8002750 <StartMotorTask+0x2d0>)
 800249c:	f002 ffe4 	bl	8005468 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80024a0:	2104      	movs	r1, #4
 80024a2:	48ab      	ldr	r0, [pc, #684]	@ (8002750 <StartMotorTask+0x2d0>)
 80024a4:	f002 ffe0 	bl	8005468 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80024a8:	210c      	movs	r1, #12
 80024aa:	48aa      	ldr	r0, [pc, #680]	@ (8002754 <StartMotorTask+0x2d4>)
 80024ac:	f002 ffdc 	bl	8005468 <HAL_TIM_PWM_Start>
	  htim1.Instance->CCR4 = SERVOCENTER; 	//Centre
 80024b0:	4ba8      	ldr	r3, [pc, #672]	@ (8002754 <StartMotorTask+0x2d4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2292      	movs	r2, #146	@ 0x92
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // RIGHT WHEEL FORWARD
 80024b8:	2201      	movs	r2, #1
 80024ba:	2110      	movs	r1, #16
 80024bc:	48a6      	ldr	r0, [pc, #664]	@ (8002758 <StartMotorTask+0x2d8>)
 80024be:	f001 fa7d 	bl	80039bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2120      	movs	r1, #32
 80024c6:	48a4      	ldr	r0, [pc, #656]	@ (8002758 <StartMotorTask+0x2d8>)
 80024c8:	f001 fa78 	bl	80039bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // LEFT WHEEL FORWARD
 80024cc:	2201      	movs	r2, #1
 80024ce:	2108      	movs	r1, #8
 80024d0:	48a1      	ldr	r0, [pc, #644]	@ (8002758 <StartMotorTask+0x2d8>)
 80024d2:	f001 fa73 	bl	80039bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2104      	movs	r1, #4
 80024da:	489f      	ldr	r0, [pc, #636]	@ (8002758 <StartMotorTask+0x2d8>)
 80024dc:	f001 fa6e 	bl	80039bc <HAL_GPIO_WritePin>
	  osDelay(1000);
 80024e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e4:	f005 fe18 	bl	8008118 <osDelay>

	  /* Infinite loop */
	  for (;;) {
	    htim1.Instance->CCR4 = pwmVal_servo;
 80024e8:	4b9c      	ldr	r3, [pc, #624]	@ (800275c <StartMotorTask+0x2dc>)
 80024ea:	881a      	ldrh	r2, [r3, #0]
 80024ec:	4b99      	ldr	r3, [pc, #612]	@ (8002754 <StartMotorTask+0x2d4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40
	    double error_angle = target_angle - total_angle;	//100 - total ang
 80024f2:	4b9b      	ldr	r3, [pc, #620]	@ (8002760 <StartMotorTask+0x2e0>)
 80024f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002764 <StartMotorTask+0x2e4>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fd fec3 	bl	8000288 <__aeabi_dsub>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	e9c7 2302 	strd	r2, r3, [r7, #8]

	    // Check if there's an obstacle and we're trying to move forward straight
	    if (obstacle_detected && (aRxBuffer[0] == 'F') && (aRxBuffer[1] == 'S')) {
 800250a:	4b97      	ldr	r3, [pc, #604]	@ (8002768 <StartMotorTask+0x2e8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <StartMotorTask+0xb6>
 8002512:	4b96      	ldr	r3, [pc, #600]	@ (800276c <StartMotorTask+0x2ec>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b46      	cmp	r3, #70	@ 0x46
 8002518:	d10d      	bne.n	8002536 <StartMotorTask+0xb6>
 800251a:	4b94      	ldr	r3, [pc, #592]	@ (800276c <StartMotorTask+0x2ec>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	2b53      	cmp	r3, #83	@ 0x53
 8002520:	d109      	bne.n	8002536 <StartMotorTask+0xb6>
	      // Stop motors if obstacle detected and we're moving forward
	      pwmVal_L = 0;
 8002522:	4b8a      	ldr	r3, [pc, #552]	@ (800274c <StartMotorTask+0x2cc>)
 8002524:	2200      	movs	r2, #0
 8002526:	801a      	strh	r2, [r3, #0]
	      pwmVal_R = 0;
 8002528:	4b87      	ldr	r3, [pc, #540]	@ (8002748 <StartMotorTask+0x2c8>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
	      e_brake = 1;
 800252e:	4b90      	ldr	r3, [pc, #576]	@ (8002770 <StartMotorTask+0x2f0>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e19a      	b.n	800286c <StartMotorTask+0x3ec>
	    } else {
	      // Normal operation - no obstacle or not moving forward
	      if (pwmVal_servo < 127) { //TURN LEFT
 8002536:	4b89      	ldr	r3, [pc, #548]	@ (800275c <StartMotorTask+0x2dc>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	2b7e      	cmp	r3, #126	@ 0x7e
 800253c:	d84c      	bhi.n	80025d8 <StartMotorTask+0x158>
	        pwmVal_R = PID_Angle(error_angle, 1) * 1.072;  //RIGHT = MASTER
 800253e:	2001      	movs	r0, #1
 8002540:	ed97 0b02 	vldr	d0, [r7, #8]
 8002544:	f7ff fa9e 	bl	8001a84 <PID_Angle>
 8002548:	4603      	mov	r3, r0
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd ffea 	bl	8000524 <__aeabi_i2d>
 8002550:	a379      	add	r3, pc, #484	@ (adr r3, 8002738 <StartMotorTask+0x2b8>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f84f 	bl	80005f8 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb21 	bl	8000ba8 <__aeabi_d2uiz>
 8002566:	4603      	mov	r3, r0
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b77      	ldr	r3, [pc, #476]	@ (8002748 <StartMotorTask+0x2c8>)
 800256c:	801a      	strh	r2, [r3, #0]
	        pwmVal_L = pwmVal_R * (0.59); //LEFT = SLAVE
 800256e:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <StartMotorTask+0x2c8>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ffd6 	bl	8000524 <__aeabi_i2d>
 8002578:	a371      	add	r3, pc, #452	@ (adr r3, 8002740 <StartMotorTask+0x2c0>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fe f83b 	bl	80005f8 <__aeabi_dmul>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fb0d 	bl	8000ba8 <__aeabi_d2uiz>
 800258e:	4603      	mov	r3, r0
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b6e      	ldr	r3, [pc, #440]	@ (800274c <StartMotorTask+0x2cc>)
 8002594:	801a      	strh	r2, [r3, #0]

	        if (error_angle > 0) {
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025a2:	f7fe fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <StartMotorTask+0x142>
	          // LEFT WHEEL GO FORWARD
	          HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80025ac:	2201      	movs	r2, #1
 80025ae:	2108      	movs	r1, #8
 80025b0:	4869      	ldr	r0, [pc, #420]	@ (8002758 <StartMotorTask+0x2d8>)
 80025b2:	f001 fa03 	bl	80039bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2104      	movs	r1, #4
 80025ba:	4867      	ldr	r0, [pc, #412]	@ (8002758 <StartMotorTask+0x2d8>)
 80025bc:	f001 f9fe 	bl	80039bc <HAL_GPIO_WritePin>
 80025c0:	e154      	b.n	800286c <StartMotorTask+0x3ec>
	        } else {
	          //// LEFT WHEEL GO BACKWARD
	          HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2108      	movs	r1, #8
 80025c6:	4864      	ldr	r0, [pc, #400]	@ (8002758 <StartMotorTask+0x2d8>)
 80025c8:	f001 f9f8 	bl	80039bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80025cc:	2201      	movs	r2, #1
 80025ce:	2104      	movs	r1, #4
 80025d0:	4861      	ldr	r0, [pc, #388]	@ (8002758 <StartMotorTask+0x2d8>)
 80025d2:	f001 f9f3 	bl	80039bc <HAL_GPIO_WritePin>
 80025d6:	e149      	b.n	800286c <StartMotorTask+0x3ec>
	        }
	      }

	      else if (pwmVal_servo > 189) { //TURN RIGHT
 80025d8:	4b60      	ldr	r3, [pc, #384]	@ (800275c <StartMotorTask+0x2dc>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	2bbd      	cmp	r3, #189	@ 0xbd
 80025de:	d93d      	bls.n	800265c <StartMotorTask+0x1dc>
	        pwmVal_L = PID_Angle(error_angle, 0);
 80025e0:	2000      	movs	r0, #0
 80025e2:	ed97 0b02 	vldr	d0, [r7, #8]
 80025e6:	f7ff fa4d 	bl	8001a84 <PID_Angle>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b57      	ldr	r3, [pc, #348]	@ (800274c <StartMotorTask+0x2cc>)
 80025f0:	801a      	strh	r2, [r3, #0]
	        pwmVal_R = pwmVal_L * (0.59); //RIGHT = SLAVE
 80025f2:	4b56      	ldr	r3, [pc, #344]	@ (800274c <StartMotorTask+0x2cc>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff94 	bl	8000524 <__aeabi_i2d>
 80025fc:	a350      	add	r3, pc, #320	@ (adr r3, 8002740 <StartMotorTask+0x2c0>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fd fff9 	bl	80005f8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe facb 	bl	8000ba8 <__aeabi_d2uiz>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	4b4c      	ldr	r3, [pc, #304]	@ (8002748 <StartMotorTask+0x2c8>)
 8002618:	801a      	strh	r2, [r3, #0]

	        if (error_angle < 0) {
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002626:	f7fe fa59 	bl	8000adc <__aeabi_dcmplt>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <StartMotorTask+0x1c6>
	          //RIGHT (WHEEL B) FORWARD
	          HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002630:	2201      	movs	r2, #1
 8002632:	2110      	movs	r1, #16
 8002634:	4848      	ldr	r0, [pc, #288]	@ (8002758 <StartMotorTask+0x2d8>)
 8002636:	f001 f9c1 	bl	80039bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	2120      	movs	r1, #32
 800263e:	4846      	ldr	r0, [pc, #280]	@ (8002758 <StartMotorTask+0x2d8>)
 8002640:	f001 f9bc 	bl	80039bc <HAL_GPIO_WritePin>
 8002644:	e112      	b.n	800286c <StartMotorTask+0x3ec>
	        } else {
	          //RIGHT (WHEEL B) BACKWARD
	          HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	2110      	movs	r1, #16
 800264a:	4843      	ldr	r0, [pc, #268]	@ (8002758 <StartMotorTask+0x2d8>)
 800264c:	f001 f9b6 	bl	80039bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	2120      	movs	r1, #32
 8002654:	4840      	ldr	r0, [pc, #256]	@ (8002758 <StartMotorTask+0x2d8>)
 8002656:	f001 f9b1 	bl	80039bc <HAL_GPIO_WritePin>
 800265a:	e107      	b.n	800286c <StartMotorTask+0x3ec>
	        }
	      }

	      else {
	        pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 800265c:	4b45      	ldr	r3, [pc, #276]	@ (8002774 <StartMotorTask+0x2f4>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b45      	ldr	r3, [pc, #276]	@ (8002778 <StartMotorTask+0x2f8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f98f 	bl	800198c <PID_Control>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd ff57 	bl	8000524 <__aeabi_i2d>
 8002676:	a330      	add	r3, pc, #192	@ (adr r3, 8002738 <StartMotorTask+0x2b8>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fd ffbc 	bl	80005f8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7fe fa8e 	bl	8000ba8 <__aeabi_d2uiz>
 800268c:	4603      	mov	r3, r0
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b2d      	ldr	r3, [pc, #180]	@ (8002748 <StartMotorTask+0x2c8>)
 8002692:	801a      	strh	r2, [r3, #0]
	        if (labs(leftTarget - leftEncoderVal)> labs(rightTarget - rightEncoderVal)) {
 8002694:	4b37      	ldr	r3, [pc, #220]	@ (8002774 <StartMotorTask+0x2f4>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b37      	ldr	r3, [pc, #220]	@ (8002778 <StartMotorTask+0x2f8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80026a2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80026a6:	4b35      	ldr	r3, [pc, #212]	@ (800277c <StartMotorTask+0x2fc>)
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <StartMotorTask+0x300>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1acb      	subs	r3, r1, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bfb8      	it	lt
 80026b4:	425b      	neglt	r3, r3
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dd03      	ble.n	80026c2 <StartMotorTask+0x242>
	          straightCorrection++;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e002      	b.n	80026c8 <StartMotorTask+0x248>
	        } else {
	          straightCorrection--;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
	        }
	        if (labs(leftTarget - leftEncoderVal) < 100) {
 80026c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <StartMotorTask+0x2f4>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <StartMotorTask+0x2f8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80026d6:	db08      	blt.n	80026ea <StartMotorTask+0x26a>
 80026d8:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <StartMotorTask+0x2f4>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <StartMotorTask+0x2f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b63      	cmp	r3, #99	@ 0x63
 80026e4:	dc01      	bgt.n	80026ea <StartMotorTask+0x26a>
	          straightCorrection = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
	        }
	        pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 80026ea:	4b24      	ldr	r3, [pc, #144]	@ (800277c <StartMotorTask+0x2fc>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <StartMotorTask+0x300>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f948 	bl	800198c <PID_Control>
 80026fc:	4603      	mov	r3, r0
	                + straightCorrection;
 80026fe:	b29a      	uxth	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4413      	add	r3, r2
 8002706:	b29a      	uxth	r2, r3
	        pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <StartMotorTask+0x2cc>)
 800270a:	801a      	strh	r2, [r3, #0]

	        if ((leftTarget - leftEncoderVal) < 0) {
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <StartMotorTask+0x2f4>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <StartMotorTask+0x2f8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	da67      	bge.n	80027ea <StartMotorTask+0x36a>
	          if (error_angle > 2) { // left +. right -.
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002726:	f7fe f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d029      	beq.n	8002784 <StartMotorTask+0x304>
	            pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <StartMotorTask+0x2dc>)
 8002732:	22a5      	movs	r2, #165	@ 0xa5
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	e099      	b.n	800286c <StartMotorTask+0x3ec>
 8002738:	78d4fdf4 	.word	0x78d4fdf4
 800273c:	3ff126e9 	.word	0x3ff126e9
 8002740:	ae147ae1 	.word	0xae147ae1
 8002744:	3fe2e147 	.word	0x3fe2e147
 8002748:	20000438 	.word	0x20000438
 800274c:	2000043a 	.word	0x2000043a
 8002750:	20000370 	.word	0x20000370
 8002754:	20000250 	.word	0x20000250
 8002758:	40020000 	.word	0x40020000
 800275c:	20000000 	.word	0x20000000
 8002760:	20000458 	.word	0x20000458
 8002764:	20000460 	.word	0x20000460
 8002768:	200004a0 	.word	0x200004a0
 800276c:	20000428 	.word	0x20000428
 8002770:	20000440 	.word	0x20000440
 8002774:	20000450 	.word	0x20000450
 8002778:	20000448 	.word	0x20000448
 800277c:	2000044c 	.word	0x2000044c
 8002780:	20000444 	.word	0x20000444
	          } else if (error_angle < -2) {
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800278c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002790:	f7fe f9a4 	bl	8000adc <__aeabi_dcmplt>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <StartMotorTask+0x322>
	            pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 800279a:	4b4a      	ldr	r3, [pc, #296]	@ (80028c4 <StartMotorTask+0x444>)
 800279c:	227f      	movs	r2, #127	@ 0x7f
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e064      	b.n	800286c <StartMotorTask+0x3ec>
	          } else {
	            pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	4b48      	ldr	r3, [pc, #288]	@ (80028c8 <StartMotorTask+0x448>)
 80027a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ac:	f7fd ff24 	bl	80005f8 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <StartMotorTask+0x44c>)
 80027be:	f7fe f845 	bl	800084c <__aeabi_ddiv>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b40      	ldr	r3, [pc, #256]	@ (80028d0 <StartMotorTask+0x450>)
 80027d0:	f7fd fd5c 	bl	800028c <__adddf3>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe f9e4 	bl	8000ba8 <__aeabi_d2uiz>
 80027e0:	4603      	mov	r3, r0
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <StartMotorTask+0x444>)
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e040      	b.n	800286c <StartMotorTask+0x3ec>
	          }
	        } else {
	          if (error_angle > 2) { // left +. right -.
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027f6:	f7fe f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <StartMotorTask+0x388>
	            pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002800:	4b30      	ldr	r3, [pc, #192]	@ (80028c4 <StartMotorTask+0x444>)
 8002802:	227f      	movs	r2, #127	@ 0x7f
 8002804:	801a      	strh	r2, [r3, #0]
 8002806:	e031      	b.n	800286c <StartMotorTask+0x3ec>
	          } else if (error_angle < -2) {
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002814:	f7fe f962 	bl	8000adc <__aeabi_dcmplt>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <StartMotorTask+0x3a6>
	            pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 800281e:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <StartMotorTask+0x444>)
 8002820:	22a5      	movs	r2, #165	@ 0xa5
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	e022      	b.n	800286c <StartMotorTask+0x3ec>
	          } else {
	            pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <StartMotorTask+0x454>)
 800282c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002830:	f7fd fee2 	bl	80005f8 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <StartMotorTask+0x44c>)
 8002842:	f7fe f803 	bl	800084c <__aeabi_ddiv>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <StartMotorTask+0x450>)
 8002854:	f7fd fd1a 	bl	800028c <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f9a2 	bl	8000ba8 <__aeabi_d2uiz>
 8002864:	4603      	mov	r3, r0
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <StartMotorTask+0x444>)
 800286a:	801a      	strh	r2, [r3, #0]
	        }
	        //line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
	      }
	    }

	    if (e_brake) {
 800286c:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <StartMotorTask+0x458>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <StartMotorTask+0x412>
	      pwmVal_L = pwmVal_R = 0;
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <StartMotorTask+0x45c>)
 8002876:	2200      	movs	r2, #0
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <StartMotorTask+0x45c>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <StartMotorTask+0x460>)
 8002880:	801a      	strh	r2, [r3, #0]
	      leftTarget = leftEncoderVal;
 8002882:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <StartMotorTask+0x464>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <StartMotorTask+0x468>)
 8002888:	6013      	str	r3, [r2, #0]
	      rightTarget = rightEncoderVal;
 800288a:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <StartMotorTask+0x46c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <StartMotorTask+0x470>)
 8002890:	6013      	str	r3, [r2, #0]
	    }

	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 8002892:	4b13      	ldr	r3, [pc, #76]	@ (80028e0 <StartMotorTask+0x460>)
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <StartMotorTask+0x474>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 800289c:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <StartMotorTask+0x45c>)
 800289e:	881a      	ldrh	r2, [r3, #0]
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <StartMotorTask+0x474>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	639a      	str	r2, [r3, #56]	@ 0x38
	    osDelay(10);//to small?
 80028a6:	200a      	movs	r0, #10
 80028a8:	f005 fc36 	bl	8008118 <osDelay>

	    if (times_acceptable > 1000) {
 80028ac:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <StartMotorTask+0x478>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028b4:	f77f ae18 	ble.w	80024e8 <StartMotorTask+0x68>
	      times_acceptable = 1001;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <StartMotorTask+0x478>)
 80028ba:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80028be:	601a      	str	r2, [r3, #0]
	  for (;;) {
 80028c0:	e612      	b.n	80024e8 <StartMotorTask+0x68>
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000
 80028c8:	40330000 	.word	0x40330000
 80028cc:	40140000 	.word	0x40140000
 80028d0:	40624000 	.word	0x40624000
 80028d4:	c0330000 	.word	0xc0330000
 80028d8:	20000440 	.word	0x20000440
 80028dc:	20000438 	.word	0x20000438
 80028e0:	2000043a 	.word	0x2000043a
 80028e4:	20000448 	.word	0x20000448
 80028e8:	20000450 	.word	0x20000450
 80028ec:	20000444 	.word	0x20000444
 80028f0:	2000044c 	.word	0x2000044c
 80028f4:	20000370 	.word	0x20000370
 80028f8:	2000043c 	.word	0x2000043c
 80028fc:	00000000 	.word	0x00000000

08002900 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
  /* Infinite loop */

			gyroInit();
 8002908:	f7ff faa4 	bl	8001e54 <gyroInit>
			uint8_t val[2] = { 0, 0 };
 800290c:	2300      	movs	r3, #0
 800290e:	813b      	strh	r3, [r7, #8]

			int16_t angularSpeed = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	817b      	strh	r3, [r7, #10]

			uint32_t tick = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
			double offset = 0;
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double garbage = 0;
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			int i = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
			osDelay(50);
 8002934:	2032      	movs	r0, #50	@ 0x32
 8002936:	f005 fbef 	bl	8008118 <osDelay>
			while (i < 1000) {					//sample 1000 for calibration
 800293a:	e048      	b.n	80029ce <StartGyroTask+0xce>
				osDelay(1);
 800293c:	2001      	movs	r0, #1
 800293e:	f005 fbeb 	bl	8008118 <osDelay>
				readByte(0x37, val);
 8002942:	f107 0308 	add.w	r3, r7, #8
 8002946:	4619      	mov	r1, r3
 8002948:	2037      	movs	r0, #55	@ 0x37
 800294a:	f7ff fa35 	bl	8001db8 <readByte>
				angularSpeed =  val[1] | (val[0] << 8);
 800294e:	7a7b      	ldrb	r3, [r7, #9]
 8002950:	b21a      	sxth	r2, r3
 8002952:	7a3b      	ldrb	r3, [r7, #8]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	b21b      	sxth	r3, r3
 8002958:	4313      	orrs	r3, r2
 800295a:	817b      	strh	r3, [r7, #10]

				garbage = garbage + (double) ((double) angularSpeed)
 800295c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fddf 	bl	8000524 <__aeabi_i2d>
 8002966:	4604      	mov	r4, r0
 8002968:	460d      	mov	r5, r1
						* ((HAL_GetTick() - tick) / 16400.0);
 800296a:	f000 fcb7 	bl	80032dc <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fdc5 	bl	8000504 <__aeabi_ui2d>
 800297a:	a346      	add	r3, pc, #280	@ (adr r3, 8002a94 <StartGyroTask+0x194>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd ff64 	bl	800084c <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4620      	mov	r0, r4
 800298a:	4629      	mov	r1, r5
 800298c:	f7fd fe34 	bl	80005f8 <__aeabi_dmul>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
				garbage = garbage + (double) ((double) angularSpeed)
 8002994:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002998:	f7fd fc78 	bl	800028c <__adddf3>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
				offset = offset + angularSpeed;		//CALIBRATION OFFSET
 80029a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdbb 	bl	8000524 <__aeabi_i2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029b6:	f7fd fc69 	bl	800028c <__adddf3>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	e9c7 2306 	strd	r2, r3, [r7, #24]
				tick = HAL_GetTick();
 80029c2:	f000 fc8b 	bl	80032dc <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	@ 0x24
				i++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3301      	adds	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
			while (i < 1000) {					//sample 1000 for calibration
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029d4:	dbb2      	blt.n	800293c <StartGyroTask+0x3c>
			}
			offset = offset / i;
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7fd fda4 	bl	8000524 <__aeabi_i2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029e4:	f7fd ff32 	bl	800084c <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	e9c7 2306 	strd	r2, r3, [r7, #24]

			tick = HAL_GetTick();
 80029f0:	f000 fc74 	bl	80032dc <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	@ 0x24
			/* Infinite loop */
			for (;;) {

				osDelay(100);
 80029f6:	2064      	movs	r0, #100	@ 0x64
 80029f8:	f005 fb8e 	bl	8008118 <osDelay>
				readByte(0x37, val);
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	4619      	mov	r1, r3
 8002a02:	2037      	movs	r0, #55	@ 0x37
 8002a04:	f7ff f9d8 	bl	8001db8 <readByte>
				angularSpeed = val[1] | (val[0] << 8);
 8002a08:	7a7b      	ldrb	r3, [r7, #9]
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	7a3b      	ldrb	r3, [r7, #8]
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	817b      	strh	r3, [r7, #10]
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 8002a16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd82 	bl	8000524 <__aeabi_i2d>
 8002a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a24:	f7fd fc30 	bl	8000288 <__aeabi_dsub>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0);	//calculate angle change by time diff
 8002a30:	f000 fc54 	bl	80032dc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fd62 	bl	8000504 <__aeabi_ui2d>
 8002a40:	a314      	add	r3, pc, #80	@ (adr r3, 8002a94 <StartGyroTask+0x194>)
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f7fd ff01 	bl	800084c <__aeabi_ddiv>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fd fdd1 	bl	80005f8 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <StartGyroTask+0x190>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fc12 	bl	800028c <__adddf3>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4908      	ldr	r1, [pc, #32]	@ (8002a90 <StartGyroTask+0x190>)
 8002a6e:	e9c1 2300 	strd	r2, r3, [r1]
				i = i- angularSpeed;
 8002a72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	60fb      	str	r3, [r7, #12]
				i++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
				tick = HAL_GetTick();
 8002a82:	f000 fc2b 	bl	80032dc <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	@ 0x24
				osDelay(100);
 8002a88:	bf00      	nop
 8002a8a:	e7b4      	b.n	80029f6 <StartGyroTask+0xf6>
 8002a8c:	f3af 8000 	nop.w
 8002a90:	20000460 	.word	0x20000460
 8002a94:	00000000 	.word	0x00000000
 8002a98:	40d00400 	.word	0x40d00400

08002a9c <StartUltrasoundTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUltrasoundTask */
void StartUltrasoundTask(void *argument)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltrasoundTask */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	480a      	ldr	r0, [pc, #40]	@ (8002ad0 <StartUltrasoundTask+0x34>)
 8002aa8:	f002 fdf6 	bl	8005698 <HAL_TIM_IC_Start_IT>

	/* Infinite loop */
//osDelay(4000);
  for(;;)
  {
	  Ultrasonic_Read();
 8002aac:	f7ff f8c0 	bl	8001c30 <Ultrasonic_Read>
	  //osDelay(10);
//    if(uintPart <10)
//    {
//    	HAL_UART_Transmit(&huart3, "U\0", 2, 0xFFFF); //stop and reset robot, send U to RPI
//    	OLED_ShowString(0, 50, "ULTRASOUND TRIG");
	  if(uintPart <10) {
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <StartUltrasoundTask+0x38>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	dc03      	bgt.n	8002ac0 <StartUltrasoundTask+0x24>
	        obstacle_detected = 1;
 8002ab8:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <StartUltrasoundTask+0x3c>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e002      	b.n	8002ac6 <StartUltrasoundTask+0x2a>
	        // Send "O" (Obstacle) message to RPi via UART
	        //HAL_UART_Transmit(&huart3, (uint8_t*)"O\0", 2, 0xFFFF);
	        //OLED_ShowString(0, 50, "OBSTACLE DETECTED");
	      } else {
	        obstacle_detected = 0;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <StartUltrasoundTask+0x3c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
	        //OLED_ShowString(0, 50, "                 "); // Clear message
	      }

	      osDelay(10); // Adjust delay as needed
 8002ac6:	200a      	movs	r0, #10
 8002ac8:	f005 fb26 	bl	8008118 <osDelay>
	  Ultrasonic_Read();
 8002acc:	e7ee      	b.n	8002aac <StartUltrasoundTask+0x10>
 8002ace:	bf00      	nop
 8002ad0:	20000328 	.word	0x20000328
 8002ad4:	20000480 	.word	0x20000480
 8002ad8:	200004a0 	.word	0x200004a0

08002adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <Error_Handler+0x8>

08002ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <HAL_MspInit+0x64>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a15      	ldr	r2, [pc, #84]	@ (8002b4c <HAL_MspInit+0x64>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_MspInit+0x64>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <HAL_MspInit+0x64>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HAL_MspInit+0x64>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <HAL_MspInit+0x64>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	210f      	movs	r1, #15
 8002b2a:	f06f 0001 	mvn.w	r0, #1
 8002b2e:	f000 fce0 	bl	80034f2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2105      	movs	r1, #5
 8002b36:	2005      	movs	r0, #5
 8002b38:	f000 fcdb 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002b3c:	2005      	movs	r0, #5
 8002b3e:	f000 fcf4 	bl	800352a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	@ (8002bd4 <HAL_I2C_MspInit+0x84>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d12c      	bne.n	8002bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b94:	2312      	movs	r3, #18
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480c      	ldr	r0, [pc, #48]	@ (8002bdc <HAL_I2C_MspInit+0x8c>)
 8002bac:	f000 fd6a 	bl	8003684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	4a07      	ldr	r2, [pc, #28]	@ (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	@ 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40005400 	.word	0x40005400
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020400 	.word	0x40020400

08002be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	@ (8002c8c <HAL_TIM_Base_MspInit+0xac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b22      	ldr	r3, [pc, #136]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	4a21      	ldr	r2, [pc, #132]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c12:	4b1f      	ldr	r3, [pc, #124]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c1e:	e030      	b.n	8002c82 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <HAL_TIM_Base_MspInit+0xb4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d12b      	bne.n	8002c82 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <HAL_TIM_Base_MspInit+0xb0>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002c62:	23c0      	movs	r3, #192	@ 0xc0
 8002c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c72:	2303      	movs	r3, #3
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4806      	ldr	r0, [pc, #24]	@ (8002c98 <HAL_TIM_Base_MspInit+0xb8>)
 8002c7e:	f000 fd01 	bl	8003684 <HAL_GPIO_Init>
}
 8002c82:	bf00      	nop
 8002c84:	3728      	adds	r7, #40	@ 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40010400 	.word	0x40010400
 8002c98:	40020800 	.word	0x40020800

08002c9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	@ 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cbc:	d14b      	bne.n	8002d56 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cce:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a37      	ldr	r2, [pc, #220]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	4a30      	ldr	r2, [pc, #192]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d06:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d24:	2301      	movs	r3, #1
 8002d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4825      	ldr	r0, [pc, #148]	@ (8002dc4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002d30:	f000 fca8 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d34:	2308      	movs	r3, #8
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d44:	2301      	movs	r3, #1
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	481e      	ldr	r0, [pc, #120]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002d50:	f000 fc98 	bl	8003684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d54:	e030      	b.n	8002db8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_TIM_Encoder_MspInit+0x130>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d12b      	bne.n	8002db8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	4b16      	ldr	r3, [pc, #88]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	4a15      	ldr	r2, [pc, #84]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d98:	23c0      	movs	r3, #192	@ 0xc0
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002da8:	2302      	movs	r3, #2
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4804      	ldr	r0, [pc, #16]	@ (8002dc4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002db4:	f000 fc66 	bl	8003684 <HAL_GPIO_Init>
}
 8002db8:	bf00      	nop
 8002dba:	3730      	adds	r7, #48	@ 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	@ 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <HAL_TIM_IC_MspInit+0x94>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d134      	bne.n	8002e5c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <HAL_TIM_IC_MspInit+0x98>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002e68 <HAL_TIM_IC_MspInit+0x98>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_TIM_IC_MspInit+0x98>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <HAL_TIM_IC_MspInit+0x98>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <HAL_TIM_IC_MspInit+0x98>)
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_TIM_IC_MspInit+0x98>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8002e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	4809      	ldr	r0, [pc, #36]	@ (8002e6c <HAL_TIM_IC_MspInit+0x9c>)
 8002e48:	f000 fc1c 	bl	8003684 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2105      	movs	r1, #5
 8002e50:	201e      	movs	r0, #30
 8002e52:	f000 fb4e 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e56:	201e      	movs	r0, #30
 8002e58:	f000 fb67 	bl	800352a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002e5c:	bf00      	nop
 8002e5e:	3728      	adds	r7, #40	@ 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020c00 	.word	0x40020c00

08002e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <HAL_TIM_MspPostInit+0x68>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d11e      	bne.n	8002ed0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_TIM_MspPostInit+0x6c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a10      	ldr	r2, [pc, #64]	@ (8002edc <HAL_TIM_MspPostInit+0x6c>)
 8002e9c:	f043 0310 	orr.w	r3, r3, #16
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <HAL_TIM_MspPostInit+0x6c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002eae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002eb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4805      	ldr	r0, [pc, #20]	@ (8002ee0 <HAL_TIM_MspPostInit+0x70>)
 8002ecc:	f000 fbda 	bl	8003684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ed0:	bf00      	nop
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <HAL_UART_MspInit+0x94>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d134      	bne.n	8002f70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_UART_MspInit+0x98>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f7c <HAL_UART_MspInit+0x98>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_UART_MspInit+0x98>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_UART_MspInit+0x98>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <HAL_UART_MspInit+0x98>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f32:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <HAL_UART_MspInit+0x98>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f50:	2307      	movs	r3, #7
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4809      	ldr	r0, [pc, #36]	@ (8002f80 <HAL_UART_MspInit+0x9c>)
 8002f5c:	f000 fb92 	bl	8003684 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2105      	movs	r1, #5
 8002f64:	2027      	movs	r0, #39	@ 0x27
 8002f66:	f000 fac4 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f6a:	2027      	movs	r0, #39	@ 0x27
 8002f6c:	f000 fadd 	bl	800352a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002f70:	bf00      	nop
 8002f72:	3728      	adds	r7, #40	@ 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40020800 	.word	0x40020800

08002f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <NMI_Handler+0x4>

08002f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//int count =0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <HardFault_Handler+0x4>

08002f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <MemManage_Handler+0x4>

08002f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <BusFault_Handler+0x4>

08002fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <UsageFault_Handler+0x4>

08002fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fbe:	f000 f979 	bl	80032b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002fc2:	f006 fcd1 	bl	8009968 <xTaskGetSchedulerState>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d001      	beq.n	8002fd0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002fcc:	f007 facc 	bl	800a568 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fe8:	4802      	ldr	r0, [pc, #8]	@ (8002ff4 <TIM4_IRQHandler+0x10>)
 8002fea:	f002 fdb1 	bl	8005b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000328 	.word	0x20000328

08002ff8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ffc:	4802      	ldr	r0, [pc, #8]	@ (8003008 <USART3_IRQHandler+0x10>)
 8002ffe:	f004 f803 	bl	8007008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200003b8 	.word	0x200003b8

0800300c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return 1;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_kill>:

int _kill(int pid, int sig)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003026:	f008 fd21 	bl	800ba6c <__errno>
 800302a:	4603      	mov	r3, r0
 800302c:	2216      	movs	r2, #22
 800302e:	601a      	str	r2, [r3, #0]
  return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_exit>:

void _exit (int status)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ffe7 	bl	800301c <_kill>
  while (1) {}    /* Make sure we hang here */
 800304e:	bf00      	nop
 8003050:	e7fd      	b.n	800304e <_exit+0x12>

08003052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e00a      	b.n	800307a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003064:	f3af 8000 	nop.w
 8003068:	4601      	mov	r1, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	60ba      	str	r2, [r7, #8]
 8003070:	b2ca      	uxtb	r2, r1
 8003072:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3301      	adds	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	429a      	cmp	r2, r3
 8003080:	dbf0      	blt.n	8003064 <_read+0x12>
  }

  return len;
 8003082:	687b      	ldr	r3, [r7, #4]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e009      	b.n	80030b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	60ba      	str	r2, [r7, #8]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	dbf1      	blt.n	800309e <_write+0x12>
  }
  return len;
 80030ba:	687b      	ldr	r3, [r7, #4]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_close>:

int _close(int file)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030ec:	605a      	str	r2, [r3, #4]
  return 0;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <_isatty>:

int _isatty(int file)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003104:	2301      	movs	r3, #1
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	@ (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f008 fc86 	bl	800ba6c <__errno>
 8003160:	4603      	mov	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <_sbrk+0x64>)
 800317c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20020000 	.word	0x20020000
 800318c:	00000400 	.word	0x00000400
 8003190:	200004a4 	.word	0x200004a4
 8003194:	20005348 	.word	0x20005348

08003198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800319c:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <SystemInit+0x20>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a2:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <SystemInit+0x20>)
 80031a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <Reset_Handler>:
 80031bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031f4 <LoopFillZerobss+0xe>
 80031c0:	f7ff ffea 	bl	8003198 <SystemInit>
 80031c4:	480c      	ldr	r0, [pc, #48]	@ (80031f8 <LoopFillZerobss+0x12>)
 80031c6:	490d      	ldr	r1, [pc, #52]	@ (80031fc <LoopFillZerobss+0x16>)
 80031c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <LoopFillZerobss+0x1a>)
 80031ca:	2300      	movs	r3, #0
 80031cc:	e002      	b.n	80031d4 <LoopCopyDataInit>

080031ce <CopyDataInit>:
 80031ce:	58d4      	ldr	r4, [r2, r3]
 80031d0:	50c4      	str	r4, [r0, r3]
 80031d2:	3304      	adds	r3, #4

080031d4 <LoopCopyDataInit>:
 80031d4:	18c4      	adds	r4, r0, r3
 80031d6:	428c      	cmp	r4, r1
 80031d8:	d3f9      	bcc.n	80031ce <CopyDataInit>
 80031da:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <LoopFillZerobss+0x1e>)
 80031dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003208 <LoopFillZerobss+0x22>)
 80031de:	2300      	movs	r3, #0
 80031e0:	e001      	b.n	80031e6 <LoopFillZerobss>

080031e2 <FillZerobss>:
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	3204      	adds	r2, #4

080031e6 <LoopFillZerobss>:
 80031e6:	42a2      	cmp	r2, r4
 80031e8:	d3fb      	bcc.n	80031e2 <FillZerobss>
 80031ea:	f008 fc45 	bl	800ba78 <__libc_init_array>
 80031ee:	f7fd fe89 	bl	8000f04 <main>
 80031f2:	4770      	bx	lr
 80031f4:	20020000 	.word	0x20020000
 80031f8:	20000000 	.word	0x20000000
 80031fc:	200001dc 	.word	0x200001dc
 8003200:	0800eba0 	.word	0x0800eba0
 8003204:	200001e0 	.word	0x200001e0
 8003208:	20005348 	.word	0x20005348

0800320c <ADC_IRQHandler>:
 800320c:	e7fe      	b.n	800320c <ADC_IRQHandler>
	...

08003210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003214:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0d      	ldr	r2, [pc, #52]	@ (8003250 <HAL_Init+0x40>)
 800321a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800321e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_Init+0x40>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <HAL_Init+0x40>)
 8003226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800322a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <HAL_Init+0x40>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a07      	ldr	r2, [pc, #28]	@ (8003250 <HAL_Init+0x40>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003238:	2003      	movs	r0, #3
 800323a:	f000 f94f 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800323e:	200f      	movs	r0, #15
 8003240:	f000 f808 	bl	8003254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003244:	f7ff fc50 	bl	8002ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023c00 	.word	0x40023c00

08003254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800325c:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <HAL_InitTick+0x54>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_InitTick+0x58>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800326a:	fbb3 f3f1 	udiv	r3, r3, r1
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f967 	bl	8003546 <HAL_SYSTICK_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e00e      	b.n	80032a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d80a      	bhi.n	800329e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003288:	2200      	movs	r2, #0
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f000 f92f 	bl	80034f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003294:	4a06      	ldr	r2, [pc, #24]	@ (80032b0 <HAL_InitTick+0x5c>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000004 	.word	0x20000004
 80032ac:	2000000c 	.word	0x2000000c
 80032b0:	20000008 	.word	0x20000008

080032b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_IncTick+0x20>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <HAL_IncTick+0x24>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <HAL_IncTick+0x24>)
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c
 80032d8:	200004a8 	.word	0x200004a8

080032dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return uwTick;
 80032e0:	4b03      	ldr	r3, [pc, #12]	@ (80032f0 <HAL_GetTick+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	200004a8 	.word	0x200004a8

080032f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7ff ffee 	bl	80032dc <HAL_GetTick>
 8003300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d005      	beq.n	800331a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <HAL_Delay+0x44>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800331a:	bf00      	nop
 800331c:	f7ff ffde 	bl	80032dc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	429a      	cmp	r2, r3
 800332a:	d8f7      	bhi.n	800331c <HAL_Delay+0x28>
  {
  }
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000000c 	.word	0x2000000c

0800333c <__NVIC_SetPriorityGrouping>:
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800334c:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003358:	4013      	ands	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_GetPriorityGrouping>:
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <__NVIC_GetPriorityGrouping+0x18>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0307 	and.w	r3, r3, #7
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_EnableIRQ>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0b      	blt.n	80033ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	@ (80033d8 <__NVIC_EnableIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	@ (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	@ (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	@ 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	@ 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff8e 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff29 	bl	800333c <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003504:	f7ff ff3e 	bl	8003384 <__NVIC_GetPriorityGrouping>
 8003508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7ff ff8e 	bl	8003430 <NVIC_EncodePriority>
 8003514:	4602      	mov	r2, r0
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff5d 	bl	80033dc <__NVIC_SetPriority>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff31 	bl	80033a0 <__NVIC_EnableIRQ>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffa2 	bl	8003498 <SysTick_Config>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff feb6 	bl	80032dc <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d008      	beq.n	8003590 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2280      	movs	r2, #128	@ 0x80
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e052      	b.n	8003636 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0216 	bic.w	r2, r2, #22
 800359e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <HAL_DMA_Abort+0x62>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0208 	bic.w	r2, r2, #8
 80035ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e0:	e013      	b.n	800360a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e2:	f7ff fe7b 	bl	80032dc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d90c      	bls.n	800360a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e015      	b.n	8003636 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e4      	bne.n	80035e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361c:	223f      	movs	r2, #63	@ 0x3f
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d004      	beq.n	800365c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2280      	movs	r2, #128	@ 0x80
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e00c      	b.n	8003676 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2205      	movs	r2, #5
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	@ 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e16b      	b.n	8003978 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	f040 815a 	bne.w	8003972 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d005      	beq.n	80036d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d130      	bne.n	8003738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 0201 	and.w	r2, r3, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b03      	cmp	r3, #3
 8003742:	d017      	beq.n	8003774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d123      	bne.n	80037c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	220f      	movs	r2, #15
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	08da      	lsrs	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3208      	adds	r2, #8
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0203 	and.w	r2, r3, #3
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80b4 	beq.w	8003972 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b60      	ldr	r3, [pc, #384]	@ (8003990 <HAL_GPIO_Init+0x30c>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	4a5f      	ldr	r2, [pc, #380]	@ (8003990 <HAL_GPIO_Init+0x30c>)
 8003814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003818:	6453      	str	r3, [r2, #68]	@ 0x44
 800381a:	4b5d      	ldr	r3, [pc, #372]	@ (8003990 <HAL_GPIO_Init+0x30c>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003826:	4a5b      	ldr	r2, [pc, #364]	@ (8003994 <HAL_GPIO_Init+0x310>)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_GPIO_Init+0x314>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02b      	beq.n	80038aa <HAL_GPIO_Init+0x226>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a51      	ldr	r2, [pc, #324]	@ (800399c <HAL_GPIO_Init+0x318>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d025      	beq.n	80038a6 <HAL_GPIO_Init+0x222>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a50      	ldr	r2, [pc, #320]	@ (80039a0 <HAL_GPIO_Init+0x31c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_GPIO_Init+0x21e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4f      	ldr	r2, [pc, #316]	@ (80039a4 <HAL_GPIO_Init+0x320>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d019      	beq.n	800389e <HAL_GPIO_Init+0x21a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4e      	ldr	r2, [pc, #312]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_GPIO_Init+0x216>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4d      	ldr	r2, [pc, #308]	@ (80039ac <HAL_GPIO_Init+0x328>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_GPIO_Init+0x212>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4c      	ldr	r2, [pc, #304]	@ (80039b0 <HAL_GPIO_Init+0x32c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <HAL_GPIO_Init+0x20e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4b      	ldr	r2, [pc, #300]	@ (80039b4 <HAL_GPIO_Init+0x330>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_GPIO_Init+0x20a>
 800388a:	2307      	movs	r3, #7
 800388c:	e00e      	b.n	80038ac <HAL_GPIO_Init+0x228>
 800388e:	2308      	movs	r3, #8
 8003890:	e00c      	b.n	80038ac <HAL_GPIO_Init+0x228>
 8003892:	2306      	movs	r3, #6
 8003894:	e00a      	b.n	80038ac <HAL_GPIO_Init+0x228>
 8003896:	2305      	movs	r3, #5
 8003898:	e008      	b.n	80038ac <HAL_GPIO_Init+0x228>
 800389a:	2304      	movs	r3, #4
 800389c:	e006      	b.n	80038ac <HAL_GPIO_Init+0x228>
 800389e:	2303      	movs	r3, #3
 80038a0:	e004      	b.n	80038ac <HAL_GPIO_Init+0x228>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e002      	b.n	80038ac <HAL_GPIO_Init+0x228>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_GPIO_Init+0x228>
 80038aa:	2300      	movs	r3, #0
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	f002 0203 	and.w	r2, r2, #3
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	4093      	lsls	r3, r2
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038bc:	4935      	ldr	r1, [pc, #212]	@ (8003994 <HAL_GPIO_Init+0x310>)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b3b      	ldr	r3, [pc, #236]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a32      	ldr	r2, [pc, #200]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b30      	ldr	r3, [pc, #192]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a27      	ldr	r2, [pc, #156]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800391e:	4b26      	ldr	r3, [pc, #152]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003942:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800396c:	4a12      	ldr	r2, [pc, #72]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3301      	adds	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	f67f ae90 	bls.w	80036a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3724      	adds	r7, #36	@ 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	40013800 	.word	0x40013800
 8003998:	40020000 	.word	0x40020000
 800399c:	40020400 	.word	0x40020400
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020c00 	.word	0x40020c00
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40021400 	.word	0x40021400
 80039b0:	40021800 	.word	0x40021800
 80039b4:	40021c00 	.word	0x40021c00
 80039b8:	40013c00 	.word	0x40013c00

080039bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
 80039c8:	4613      	mov	r3, r2
 80039ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039cc:	787b      	ldrb	r3, [r7, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039d8:	e003      	b.n	80039e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	041a      	lsls	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	619a      	str	r2, [r3, #24]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	041a      	lsls	r2, r3, #16
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43d9      	mvns	r1, r3
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	400b      	ands	r3, r1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	619a      	str	r2, [r3, #24]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e12b      	b.n	8003c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff f880 	bl	8002b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	@ 0x24
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a88:	f001 fc1e 	bl	80052c8 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a81      	ldr	r2, [pc, #516]	@ (8003c98 <HAL_I2C_Init+0x274>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d807      	bhi.n	8003aa8 <HAL_I2C_Init+0x84>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a80      	ldr	r2, [pc, #512]	@ (8003c9c <HAL_I2C_Init+0x278>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	bf94      	ite	ls
 8003aa0:	2301      	movls	r3, #1
 8003aa2:	2300      	movhi	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e006      	b.n	8003ab6 <HAL_I2C_Init+0x92>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8003ca0 <HAL_I2C_Init+0x27c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bf94      	ite	ls
 8003ab0:	2301      	movls	r3, #1
 8003ab2:	2300      	movhi	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0e7      	b.n	8003c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a78      	ldr	r2, [pc, #480]	@ (8003ca4 <HAL_I2C_Init+0x280>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0c9b      	lsrs	r3, r3, #18
 8003ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a6a      	ldr	r2, [pc, #424]	@ (8003c98 <HAL_I2C_Init+0x274>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d802      	bhi.n	8003af8 <HAL_I2C_Init+0xd4>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3301      	adds	r3, #1
 8003af6:	e009      	b.n	8003b0c <HAL_I2C_Init+0xe8>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	4a69      	ldr	r2, [pc, #420]	@ (8003ca8 <HAL_I2C_Init+0x284>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	495c      	ldr	r1, [pc, #368]	@ (8003c98 <HAL_I2C_Init+0x274>)
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	d819      	bhi.n	8003b60 <HAL_I2C_Init+0x13c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e59      	subs	r1, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3a:	1c59      	adds	r1, r3, #1
 8003b3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b40:	400b      	ands	r3, r1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_I2C_Init+0x138>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e59      	subs	r1, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	e051      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e04f      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d111      	bne.n	8003b8c <HAL_I2C_Init+0x168>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e58      	subs	r0, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	440b      	add	r3, r1
 8003b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e012      	b.n	8003bb2 <HAL_I2C_Init+0x18e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	0099      	lsls	r1, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Init+0x196>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e022      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10e      	bne.n	8003be0 <HAL_I2C_Init+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1e58      	subs	r0, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	440b      	add	r3, r1
 8003bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bde:	e00f      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	6809      	ldr	r1, [r1, #0]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6911      	ldr	r1, [r2, #16]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	000186a0 	.word	0x000186a0
 8003c9c:	001e847f 	.word	0x001e847f
 8003ca0:	003d08ff 	.word	0x003d08ff
 8003ca4:	431bde83 	.word	0x431bde83
 8003ca8:	10624dd3 	.word	0x10624dd3

08003cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	460b      	mov	r3, r1
 8003cba:	817b      	strh	r3, [r7, #10]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc0:	f7ff fb0c 	bl	80032dc <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	f040 80e0 	bne.w	8003e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2319      	movs	r3, #25
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4970      	ldr	r1, [pc, #448]	@ (8003ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fc64 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0d3      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2C_Master_Transmit+0x50>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0cc      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d007      	beq.n	8003d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	@ 0x21
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	893a      	ldrh	r2, [r7, #8]
 8003d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a50      	ldr	r2, [pc, #320]	@ (8003ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d64:	8979      	ldrh	r1, [r7, #10]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 face 	bl	800430c <I2C_MasterRequestWrite>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e08d      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d90:	e066      	b.n	8003e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fd22 	bl	80047e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06b      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11b      	bne.n	8003e34 <HAL_I2C_Master_Transmit+0x188>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6a39      	ldr	r1, [r7, #32]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fd19 	bl	8004870 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d107      	bne.n	8003e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e01a      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d194      	bne.n	8003d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	00100002 	.word	0x00100002
 8003ea4:	ffff0000 	.word	0xffff0000

08003ea8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	@ 0x30
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	817b      	strh	r3, [r7, #10]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7ff fa0e 	bl	80032dc <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	f040 8217 	bne.w	80042fe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	2319      	movs	r3, #25
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	497c      	ldr	r1, [pc, #496]	@ (80040cc <HAL_I2C_Master_Receive+0x224>)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fb66 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e20a      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2C_Master_Receive+0x50>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e203      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d007      	beq.n	8003f1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2222      	movs	r2, #34	@ 0x22
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2210      	movs	r2, #16
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a5c      	ldr	r2, [pc, #368]	@ (80040d0 <HAL_I2C_Master_Receive+0x228>)
 8003f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f60:	8979      	ldrh	r1, [r7, #10]
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fa52 	bl	8004410 <I2C_MasterRequestRead>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e1c4      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d113      	bne.n	8003fa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e198      	b.n	80042d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d11b      	bne.n	8003fe6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e178      	b.n	80042d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d11b      	bne.n	8004026 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800400c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	e158      	b.n	80042d8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800404c:	e144      	b.n	80042d8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	2b03      	cmp	r3, #3
 8004054:	f200 80f1 	bhi.w	800423a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405c:	2b01      	cmp	r3, #1
 800405e:	d123      	bne.n	80040a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004062:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fc4b 	bl	8004900 <I2C_WaitOnRXNEFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e145      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040a6:	e117      	b.n	80042d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d14e      	bne.n	800414e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	2200      	movs	r2, #0
 80040b8:	4906      	ldr	r1, [pc, #24]	@ (80040d4 <HAL_I2C_Master_Receive+0x22c>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa76 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e11a      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
 80040ca:	bf00      	nop
 80040cc:	00100002 	.word	0x00100002
 80040d0:	ffff0000 	.word	0xffff0000
 80040d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800414c:	e0c4      	b.n	80042d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	2200      	movs	r2, #0
 8004156:	496c      	ldr	r1, [pc, #432]	@ (8004308 <HAL_I2C_Master_Receive+0x460>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fa27 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0cb      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	2200      	movs	r2, #0
 80041b2:	4955      	ldr	r1, [pc, #340]	@ (8004308 <HAL_I2C_Master_Receive+0x460>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f9f9 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e09d      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004238:	e04e      	b.n	80042d8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb5e 	bl	8004900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e058      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d124      	bne.n	80042d8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	2b03      	cmp	r3, #3
 8004294:	d107      	bne.n	80042a6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f aeb6 	bne.w	800404e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3728      	adds	r7, #40	@ 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	00010004 	.word	0x00010004

0800430c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	460b      	mov	r3, r1
 800431a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d006      	beq.n	8004336 <I2C_MasterRequestWrite+0x2a>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d003      	beq.n	8004336 <I2C_MasterRequestWrite+0x2a>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004334:	d108      	bne.n	8004348 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e00b      	b.n	8004360 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	2b12      	cmp	r3, #18
 800434e:	d107      	bne.n	8004360 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800435e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f91d 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004386:	d103      	bne.n	8004390 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e035      	b.n	8004400 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800439c:	d108      	bne.n	80043b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800439e:	897b      	ldrh	r3, [r7, #10]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043ac:	611a      	str	r2, [r3, #16]
 80043ae:	e01b      	b.n	80043e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	11db      	asrs	r3, r3, #7
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0306 	and.w	r3, r3, #6
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f063 030f 	orn	r3, r3, #15
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	490e      	ldr	r1, [pc, #56]	@ (8004408 <I2C_MasterRequestWrite+0xfc>)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f966 	bl	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e010      	b.n	8004400 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4907      	ldr	r1, [pc, #28]	@ (800440c <I2C_MasterRequestWrite+0x100>)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f956 	bl	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	00010008 	.word	0x00010008
 800440c:	00010002 	.word	0x00010002

08004410 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	460b      	mov	r3, r1
 800441e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004434:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d006      	beq.n	800444a <I2C_MasterRequestRead+0x3a>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d003      	beq.n	800444a <I2C_MasterRequestRead+0x3a>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004448:	d108      	bne.n	800445c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e00b      	b.n	8004474 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	2b11      	cmp	r3, #17
 8004462:	d107      	bne.n	8004474 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f893 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449a:	d103      	bne.n	80044a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e079      	b.n	800459c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044b0:	d108      	bne.n	80044c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044b2:	897b      	ldrh	r3, [r7, #10]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	611a      	str	r2, [r3, #16]
 80044c2:	e05f      	b.n	8004584 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044c4:	897b      	ldrh	r3, [r7, #10]
 80044c6:	11db      	asrs	r3, r3, #7
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 0306 	and.w	r3, r3, #6
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f063 030f 	orn	r3, r3, #15
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4930      	ldr	r1, [pc, #192]	@ (80045a4 <I2C_MasterRequestRead+0x194>)
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f8dc 	bl	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e054      	b.n	800459c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4929      	ldr	r1, [pc, #164]	@ (80045a8 <I2C_MasterRequestRead+0x198>)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f8cc 	bl	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e044      	b.n	800459c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004536:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f831 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00d      	beq.n	800456c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455e:	d103      	bne.n	8004568 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e017      	b.n	800459c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800456c:	897b      	ldrh	r3, [r7, #10]
 800456e:	11db      	asrs	r3, r3, #7
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f003 0306 	and.w	r3, r3, #6
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f063 030e 	orn	r3, r3, #14
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4907      	ldr	r1, [pc, #28]	@ (80045a8 <I2C_MasterRequestRead+0x198>)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f888 	bl	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	00010008 	.word	0x00010008
 80045a8:	00010002 	.word	0x00010002

080045ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045bc:	e048      	b.n	8004650 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d044      	beq.n	8004650 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fe fe89 	bl	80032dc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d139      	bne.n	8004650 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d10d      	bne.n	8004602 <I2C_WaitOnFlagUntilTimeout+0x56>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	43da      	mvns	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4013      	ands	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf0c      	ite	eq
 80045f8:	2301      	moveq	r3, #1
 80045fa:	2300      	movne	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	e00c      	b.n	800461c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	43da      	mvns	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	429a      	cmp	r2, r3
 8004620:	d116      	bne.n	8004650 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e023      	b.n	8004698 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	0c1b      	lsrs	r3, r3, #16
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d10d      	bne.n	8004676 <I2C_WaitOnFlagUntilTimeout+0xca>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	43da      	mvns	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	e00c      	b.n	8004690 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	43da      	mvns	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4013      	ands	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	429a      	cmp	r2, r3
 8004694:	d093      	beq.n	80045be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046ae:	e071      	b.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046be:	d123      	bne.n	8004708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	f043 0204 	orr.w	r2, r3, #4
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e067      	b.n	80047d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d041      	beq.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004710:	f7fe fde4 	bl	80032dc <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d136      	bne.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10c      	bne.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	43da      	mvns	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e00b      	b.n	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	43da      	mvns	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e021      	b.n	80047d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10c      	bne.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	43da      	mvns	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e00b      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f47f af6d 	bne.w	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ec:	e034      	b.n	8004858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f8e3 	bl	80049ba <I2C_IsAcknowledgeFailed>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e034      	b.n	8004868 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d028      	beq.n	8004858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004806:	f7fe fd69 	bl	80032dc <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	429a      	cmp	r2, r3
 8004814:	d302      	bcc.n	800481c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11d      	bne.n	8004858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b80      	cmp	r3, #128	@ 0x80
 8004828:	d016      	beq.n	8004858 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	f043 0220 	orr.w	r2, r3, #32
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e007      	b.n	8004868 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b80      	cmp	r3, #128	@ 0x80
 8004864:	d1c3      	bne.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800487c:	e034      	b.n	80048e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f89b 	bl	80049ba <I2C_IsAcknowledgeFailed>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e034      	b.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d028      	beq.n	80048e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fe fd21 	bl	80032dc <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11d      	bne.n	80048e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d016      	beq.n	80048e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e007      	b.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d1c3      	bne.n	800487e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800490c:	e049      	b.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b10      	cmp	r3, #16
 800491a:	d119      	bne.n	8004950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0210 	mvn.w	r2, #16
 8004924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e030      	b.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004950:	f7fe fcc4 	bl	80032dc <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d11d      	bne.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d016      	beq.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e007      	b.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d1ae      	bne.n	800490e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d0:	d11b      	bne.n	8004a0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004a24:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <HAL_PWR_EnableBkUpAccess+0x24>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004a2a:	687b      	ldr	r3, [r7, #4]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	420e0020 	.word	0x420e0020
 8004a3c:	40007000 	.word	0x40007000

08004a40 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004a46:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004a52:	687b      	ldr	r3, [r7, #4]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	420e0020 	.word	0x420e0020
 8004a64:	40007000 	.word	0x40007000

08004a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e267      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d075      	beq.n	8004b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a86:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d00c      	beq.n	8004aac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a92:	4b85      	ldr	r3, [pc, #532]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d112      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9e:	4b82      	ldr	r3, [pc, #520]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	4b7e      	ldr	r3, [pc, #504]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05b      	beq.n	8004b70 <HAL_RCC_OscConfig+0x108>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d157      	bne.n	8004b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e242      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d106      	bne.n	8004adc <HAL_RCC_OscConfig+0x74>
 8004ace:	4b76      	ldr	r3, [pc, #472]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a75      	ldr	r2, [pc, #468]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x98>
 8004ae6:	4b70      	ldr	r3, [pc, #448]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a6f      	ldr	r2, [pc, #444]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6c      	ldr	r2, [pc, #432]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004b00:	4b69      	ldr	r3, [pc, #420]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a68      	ldr	r2, [pc, #416]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b66      	ldr	r3, [pc, #408]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a65      	ldr	r2, [pc, #404]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fe fbdc 	bl	80032dc <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fe fbd8 	bl	80032dc <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	@ 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e207      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xc0>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fe fbc8 	bl	80032dc <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fe fbc4 	bl	80032dc <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	@ 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1f3      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	4b51      	ldr	r3, [pc, #324]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0xe8>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b44      	ldr	r3, [pc, #272]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d116      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x152>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e1c7      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4937      	ldr	r1, [pc, #220]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	e03a      	b.n	8004c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <HAL_RCC_OscConfig+0x244>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7fe fb7d 	bl	80032dc <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be6:	f7fe fb79 	bl	80032dc <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1a8      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b28      	ldr	r3, [pc, #160]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4925      	ldr	r1, [pc, #148]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1a:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x244>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fe fb5c 	bl	80032dc <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c28:	f7fe fb58 	bl	80032dc <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e187      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d036      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5a:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <HAL_RCC_OscConfig+0x248>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fe fb3c 	bl	80032dc <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fe fb38 	bl	80032dc <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e167      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x200>
 8004c86:	e01b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c88:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <HAL_RCC_OscConfig+0x248>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fe fb25 	bl	80032dc <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	e00e      	b.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fe fb21 	bl	80032dc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d907      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e150      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	42470000 	.word	0x42470000
 8004cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb4:	4b88      	ldr	r3, [pc, #544]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ea      	bne.n	8004c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8097 	beq.w	8004dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cd2:	4b81      	ldr	r3, [pc, #516]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cee:	4b7a      	ldr	r3, [pc, #488]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfe:	4b77      	ldr	r3, [pc, #476]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d118      	bne.n	8004d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0a:	4b74      	ldr	r3, [pc, #464]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a73      	ldr	r2, [pc, #460]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d16:	f7fe fae1 	bl	80032dc <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1e:	f7fe fadd 	bl	80032dc <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e10c      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d30:	4b6a      	ldr	r3, [pc, #424]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d106      	bne.n	8004d52 <HAL_RCC_OscConfig+0x2ea>
 8004d44:	4b64      	ldr	r3, [pc, #400]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	4a63      	ldr	r2, [pc, #396]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d50:	e01c      	b.n	8004d8c <HAL_RCC_OscConfig+0x324>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x30c>
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d60:	f043 0304 	orr.w	r3, r3, #4
 8004d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d66:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d72:	e00b      	b.n	8004d8c <HAL_RCC_OscConfig+0x324>
 8004d74:	4b58      	ldr	r3, [pc, #352]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	4a57      	ldr	r2, [pc, #348]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d80:	4b55      	ldr	r3, [pc, #340]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d84:	4a54      	ldr	r2, [pc, #336]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d86:	f023 0304 	bic.w	r3, r3, #4
 8004d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fe faa2 	bl	80032dc <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fe fa9e 	bl	80032dc <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0cb      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db2:	4b49      	ldr	r3, [pc, #292]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ee      	beq.n	8004d9c <HAL_RCC_OscConfig+0x334>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc0:	f7fe fa8c 	bl	80032dc <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7fe fa88 	bl	80032dc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0b5      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dde:	4b3e      	ldr	r3, [pc, #248]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ee      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4b39      	ldr	r3, [pc, #228]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	4a38      	ldr	r2, [pc, #224]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a1 	beq.w	8004f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e06:	4b34      	ldr	r3, [pc, #208]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d05c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d141      	bne.n	8004e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ee0 <HAL_RCC_OscConfig+0x478>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fe fa5c 	bl	80032dc <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fe fa58 	bl	80032dc <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e087      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	491b      	ldr	r1, [pc, #108]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <HAL_RCC_OscConfig+0x478>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fe fa31 	bl	80032dc <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fe fa2d 	bl	80032dc <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e05c      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e90:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x416>
 8004e9c:	e054      	b.n	8004f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_RCC_OscConfig+0x478>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fe fa1a 	bl	80032dc <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fe fa16 	bl	80032dc <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e045      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x444>
 8004eca:	e03d      	b.n	8004f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e038      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f54 <HAL_RCC_OscConfig+0x4ec>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d028      	beq.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d121      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d11a      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0cc      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b68      	ldr	r3, [pc, #416]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d90c      	bls.n	8004f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b65      	ldr	r3, [pc, #404]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f82:	4b63      	ldr	r3, [pc, #396]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0b8      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fac:	4b59      	ldr	r3, [pc, #356]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a58      	ldr	r2, [pc, #352]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc4:	4b53      	ldr	r3, [pc, #332]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4a52      	ldr	r2, [pc, #328]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd0:	4b50      	ldr	r3, [pc, #320]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	494d      	ldr	r1, [pc, #308]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d044      	beq.n	8005078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	4b47      	ldr	r3, [pc, #284]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d119      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d003      	beq.n	8005016 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005012:	2b03      	cmp	r3, #3
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	4b3f      	ldr	r3, [pc, #252]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e06f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005026:	4b3b      	ldr	r3, [pc, #236]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e067      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005036:	4b37      	ldr	r3, [pc, #220]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4934      	ldr	r1, [pc, #208]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005048:	f7fe f948 	bl	80032dc <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fe f944 	bl	80032dc <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e04f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 020c 	and.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d1eb      	bne.n	8005050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005078:	4b25      	ldr	r3, [pc, #148]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d20c      	bcs.n	80050a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b22      	ldr	r3, [pc, #136]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e032      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050ac:	4b19      	ldr	r3, [pc, #100]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4916      	ldr	r1, [pc, #88]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ca:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	490e      	ldr	r1, [pc, #56]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050de:	f000 f821 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80050e2:	4602      	mov	r2, r0
 80050e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	490a      	ldr	r1, [pc, #40]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 80050f0:	5ccb      	ldrb	r3, [r1, r3]
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	4a09      	ldr	r2, [pc, #36]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050fa:	4b09      	ldr	r3, [pc, #36]	@ (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe f8a8 	bl	8003254 <HAL_InitTick>

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023c00 	.word	0x40023c00
 8005114:	40023800 	.word	0x40023800
 8005118:	0800dda4 	.word	0x0800dda4
 800511c:	20000004 	.word	0x20000004
 8005120:	20000008 	.word	0x20000008

08005124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005128:	b090      	sub	sp, #64	@ 0x40
 800512a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800513c:	4b59      	ldr	r3, [pc, #356]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	2b08      	cmp	r3, #8
 8005146:	d00d      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x40>
 8005148:	2b08      	cmp	r3, #8
 800514a:	f200 80a1 	bhi.w	8005290 <HAL_RCC_GetSysClockFreq+0x16c>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x34>
 8005152:	2b04      	cmp	r3, #4
 8005154:	d003      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x3a>
 8005156:	e09b      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005158:	4b53      	ldr	r3, [pc, #332]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800515c:	e09b      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800515e:	4b53      	ldr	r3, [pc, #332]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005162:	e098      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005164:	4b4f      	ldr	r3, [pc, #316]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800516e:	4b4d      	ldr	r3, [pc, #308]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d028      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800517a:	4b4a      	ldr	r3, [pc, #296]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	099b      	lsrs	r3, r3, #6
 8005180:	2200      	movs	r2, #0
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	627a      	str	r2, [r7, #36]	@ 0x24
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800518c:	2100      	movs	r1, #0
 800518e:	4b47      	ldr	r3, [pc, #284]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005190:	fb03 f201 	mul.w	r2, r3, r1
 8005194:	2300      	movs	r3, #0
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	4413      	add	r3, r2
 800519c:	4a43      	ldr	r2, [pc, #268]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x188>)
 800519e:	fba0 1202 	umull	r1, r2, r0, r2
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a4:	460a      	mov	r2, r1
 80051a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051aa:	4413      	add	r3, r2
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	2200      	movs	r2, #0
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	61fa      	str	r2, [r7, #28]
 80051b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80051be:	f7fb fd13 	bl	8000be8 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4613      	mov	r3, r2
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ca:	e053      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051cc:	4b35      	ldr	r3, [pc, #212]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	099b      	lsrs	r3, r3, #6
 80051d2:	2200      	movs	r2, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	617a      	str	r2, [r7, #20]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80051de:	f04f 0b00 	mov.w	fp, #0
 80051e2:	4652      	mov	r2, sl
 80051e4:	465b      	mov	r3, fp
 80051e6:	f04f 0000 	mov.w	r0, #0
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	0159      	lsls	r1, r3, #5
 80051f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f4:	0150      	lsls	r0, r2, #5
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	ebb2 080a 	subs.w	r8, r2, sl
 80051fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800520e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005216:	ebb2 0408 	subs.w	r4, r2, r8
 800521a:	eb63 0509 	sbc.w	r5, r3, r9
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	00eb      	lsls	r3, r5, #3
 8005228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522c:	00e2      	lsls	r2, r4, #3
 800522e:	4614      	mov	r4, r2
 8005230:	461d      	mov	r5, r3
 8005232:	eb14 030a 	adds.w	r3, r4, sl
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	eb45 030b 	adc.w	r3, r5, fp
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800524a:	4629      	mov	r1, r5
 800524c:	028b      	lsls	r3, r1, #10
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005254:	4621      	mov	r1, r4
 8005256:	028a      	lsls	r2, r1, #10
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525e:	2200      	movs	r2, #0
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	60fa      	str	r2, [r7, #12]
 8005264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005268:	f7fb fcbe 	bl	8000be8 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005274:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005292:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005298:	4618      	mov	r0, r3
 800529a:	3740      	adds	r7, #64	@ 0x40
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	00f42400 	.word	0x00f42400
 80052ac:	017d7840 	.word	0x017d7840

080052b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b4:	4b03      	ldr	r3, [pc, #12]	@ (80052c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b6:	681b      	ldr	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000004 	.word	0x20000004

080052c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052cc:	f7ff fff0 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052d0:	4602      	mov	r2, r0
 80052d2:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	0a9b      	lsrs	r3, r3, #10
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	4903      	ldr	r1, [pc, #12]	@ (80052ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80052de:	5ccb      	ldrb	r3, [r1, r3]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40023800 	.word	0x40023800
 80052ec:	0800ddb4 	.word	0x0800ddb4

080052f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f4:	f7ff ffdc 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	0b5b      	lsrs	r3, r3, #13
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	@ (8005314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40023800 	.word	0x40023800
 8005314:	0800ddb4 	.word	0x0800ddb4

08005318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e041      	b.n	80053ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fd fc4e 	bl	8002be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f000 ff7c 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e041      	b.n	800544c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f839 	bl	8005454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f000 ff2d 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d109      	bne.n	800548c <HAL_TIM_PWM_Start+0x24>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e022      	b.n	80054d2 <HAL_TIM_PWM_Start+0x6a>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b04      	cmp	r3, #4
 8005490:	d109      	bne.n	80054a6 <HAL_TIM_PWM_Start+0x3e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b01      	cmp	r3, #1
 800549c:	bf14      	ite	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	2300      	moveq	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	e015      	b.n	80054d2 <HAL_TIM_PWM_Start+0x6a>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d109      	bne.n	80054c0 <HAL_TIM_PWM_Start+0x58>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e008      	b.n	80054d2 <HAL_TIM_PWM_Start+0x6a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e07c      	b.n	80055d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start+0x82>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e8:	e013      	b.n	8005512 <HAL_TIM_PWM_Start+0xaa>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0x92>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f8:	e00b      	b.n	8005512 <HAL_TIM_PWM_Start+0xaa>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xa2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005508:	e003      	b.n	8005512 <HAL_TIM_PWM_Start+0xaa>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f001 faba 	bl	8006a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2d      	ldr	r2, [pc, #180]	@ (80055dc <HAL_TIM_PWM_Start+0x174>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <HAL_TIM_PWM_Start+0xcc>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a2c      	ldr	r2, [pc, #176]	@ (80055e0 <HAL_TIM_PWM_Start+0x178>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d101      	bne.n	8005538 <HAL_TIM_PWM_Start+0xd0>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <HAL_TIM_PWM_Start+0xd2>
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a22      	ldr	r2, [pc, #136]	@ (80055dc <HAL_TIM_PWM_Start+0x174>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d022      	beq.n	800559e <HAL_TIM_PWM_Start+0x136>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005560:	d01d      	beq.n	800559e <HAL_TIM_PWM_Start+0x136>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1f      	ldr	r2, [pc, #124]	@ (80055e4 <HAL_TIM_PWM_Start+0x17c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d018      	beq.n	800559e <HAL_TIM_PWM_Start+0x136>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1d      	ldr	r2, [pc, #116]	@ (80055e8 <HAL_TIM_PWM_Start+0x180>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <HAL_TIM_PWM_Start+0x136>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <HAL_TIM_PWM_Start+0x184>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_TIM_PWM_Start+0x136>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a16      	ldr	r2, [pc, #88]	@ (80055e0 <HAL_TIM_PWM_Start+0x178>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_TIM_PWM_Start+0x136>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a18      	ldr	r2, [pc, #96]	@ (80055f0 <HAL_TIM_PWM_Start+0x188>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIM_PWM_Start+0x136>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a16      	ldr	r2, [pc, #88]	@ (80055f4 <HAL_TIM_PWM_Start+0x18c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d111      	bne.n	80055c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b06      	cmp	r3, #6
 80055ae:	d010      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c0:	e007      	b.n	80055d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40010400 	.word	0x40010400
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40001800 	.word	0x40001800

080055f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e041      	b.n	800568e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fd fbd6 	bl	8002dd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 fe0c 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_TIM_IC_Start_IT+0x1e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	e013      	b.n	80056de <HAL_TIM_IC_Start_IT+0x46>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_IC_Start_IT+0x2e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	e00b      	b.n	80056de <HAL_TIM_IC_Start_IT+0x46>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_IC_Start_IT+0x3e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	e003      	b.n	80056de <HAL_TIM_IC_Start_IT+0x46>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <HAL_TIM_IC_Start_IT+0x58>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e013      	b.n	8005718 <HAL_TIM_IC_Start_IT+0x80>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d104      	bne.n	8005700 <HAL_TIM_IC_Start_IT+0x68>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e00b      	b.n	8005718 <HAL_TIM_IC_Start_IT+0x80>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b08      	cmp	r3, #8
 8005704:	d104      	bne.n	8005710 <HAL_TIM_IC_Start_IT+0x78>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e003      	b.n	8005718 <HAL_TIM_IC_Start_IT+0x80>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005716:	b2db      	uxtb	r3, r3
 8005718:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800571a:	7bbb      	ldrb	r3, [r7, #14]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d102      	bne.n	8005726 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005720:	7b7b      	ldrb	r3, [r7, #13]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d001      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0cc      	b.n	80058c4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <HAL_TIM_IC_Start_IT+0xa2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005738:	e013      	b.n	8005762 <HAL_TIM_IC_Start_IT+0xca>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d104      	bne.n	800574a <HAL_TIM_IC_Start_IT+0xb2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005748:	e00b      	b.n	8005762 <HAL_TIM_IC_Start_IT+0xca>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d104      	bne.n	800575a <HAL_TIM_IC_Start_IT+0xc2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005758:	e003      	b.n	8005762 <HAL_TIM_IC_Start_IT+0xca>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <HAL_TIM_IC_Start_IT+0xda>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005770:	e013      	b.n	800579a <HAL_TIM_IC_Start_IT+0x102>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b04      	cmp	r3, #4
 8005776:	d104      	bne.n	8005782 <HAL_TIM_IC_Start_IT+0xea>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005780:	e00b      	b.n	800579a <HAL_TIM_IC_Start_IT+0x102>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d104      	bne.n	8005792 <HAL_TIM_IC_Start_IT+0xfa>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005790:	e003      	b.n	800579a <HAL_TIM_IC_Start_IT+0x102>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d841      	bhi.n	8005824 <HAL_TIM_IC_Start_IT+0x18c>
 80057a0:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <HAL_TIM_IC_Start_IT+0x110>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057dd 	.word	0x080057dd
 80057ac:	08005825 	.word	0x08005825
 80057b0:	08005825 	.word	0x08005825
 80057b4:	08005825 	.word	0x08005825
 80057b8:	080057ef 	.word	0x080057ef
 80057bc:	08005825 	.word	0x08005825
 80057c0:	08005825 	.word	0x08005825
 80057c4:	08005825 	.word	0x08005825
 80057c8:	08005801 	.word	0x08005801
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005825 	.word	0x08005825
 80057d4:	08005825 	.word	0x08005825
 80057d8:	08005813 	.word	0x08005813
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0202 	orr.w	r2, r2, #2
 80057ea:	60da      	str	r2, [r3, #12]
      break;
 80057ec:	e01d      	b.n	800582a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0204 	orr.w	r2, r2, #4
 80057fc:	60da      	str	r2, [r3, #12]
      break;
 80057fe:	e014      	b.n	800582a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	60da      	str	r2, [r3, #12]
      break;
 8005810:	e00b      	b.n	800582a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0210 	orr.w	r2, r2, #16
 8005820:	60da      	str	r2, [r3, #12]
      break;
 8005822:	e002      	b.n	800582a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	bf00      	nop
  }

  if (status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d148      	bne.n	80058c2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2201      	movs	r2, #1
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f001 f92b 	bl	8006a94 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a22      	ldr	r2, [pc, #136]	@ (80058cc <HAL_TIM_IC_Start_IT+0x234>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x1f6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005850:	d01d      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x1f6>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1e      	ldr	r2, [pc, #120]	@ (80058d0 <HAL_TIM_IC_Start_IT+0x238>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x1f6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1c      	ldr	r2, [pc, #112]	@ (80058d4 <HAL_TIM_IC_Start_IT+0x23c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x1f6>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <HAL_TIM_IC_Start_IT+0x240>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x1f6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a19      	ldr	r2, [pc, #100]	@ (80058dc <HAL_TIM_IC_Start_IT+0x244>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x1f6>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a18      	ldr	r2, [pc, #96]	@ (80058e0 <HAL_TIM_IC_Start_IT+0x248>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_TIM_IC_Start_IT+0x1f6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a16      	ldr	r2, [pc, #88]	@ (80058e4 <HAL_TIM_IC_Start_IT+0x24c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d111      	bne.n	80058b2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b06      	cmp	r3, #6
 800589e:	d010      	beq.n	80058c2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	e007      	b.n	80058c2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40010400 	.word	0x40010400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40001800 	.word	0x40001800

080058e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e097      	b.n	8005a2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fd f9c3 	bl	8002c9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 fc89 	bl	8006254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	4313      	orrs	r3, r2
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005988:	f023 030c 	bic.w	r3, r3, #12
 800598c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005994:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	4313      	orrs	r3, r2
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	031b      	lsls	r3, r3, #12
 80059b8:	4313      	orrs	r3, r2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	4313      	orrs	r3, r2
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d110      	bne.n	8005a86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d102      	bne.n	8005a70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a6a:	7b7b      	ldrb	r3, [r7, #13]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d001      	beq.n	8005a74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e069      	b.n	8005b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a84:	e031      	b.n	8005aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d110      	bne.n	8005aae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a92:	7b3b      	ldrb	r3, [r7, #12]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d001      	beq.n	8005a9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e055      	b.n	8005b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005aac:	e01d      	b.n	8005aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d108      	bne.n	8005ac6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d105      	bne.n	8005ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aba:	7b7b      	ldrb	r3, [r7, #13]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d102      	bne.n	8005ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ac0:	7b3b      	ldrb	r3, [r7, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e03e      	b.n	8005b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_TIM_Encoder_Start+0xc4>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d008      	beq.n	8005b08 <HAL_TIM_Encoder_Start+0xd4>
 8005af6:	e00f      	b.n	8005b18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2201      	movs	r2, #1
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 ffc7 	bl	8006a94 <TIM_CCxChannelCmd>
      break;
 8005b06:	e016      	b.n	8005b36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	2104      	movs	r1, #4
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 ffbf 	bl	8006a94 <TIM_CCxChannelCmd>
      break;
 8005b16:	e00e      	b.n	8005b36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 ffb7 	bl	8006a94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	2104      	movs	r1, #4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 ffb0 	bl	8006a94 <TIM_CCxChannelCmd>
      break;
 8005b34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d020      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01b      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0202 	mvn.w	r2, #2
 8005b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc f868 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005ba0:	e005      	b.n	8005bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fb38 	bl	8006218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fb3f 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d020      	beq.n	8005c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01b      	beq.n	8005c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0204 	mvn.w	r2, #4
 8005bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fc f842 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fb12 	bl	8006218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb19 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d020      	beq.n	8005c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01b      	beq.n	8005c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0208 	mvn.w	r2, #8
 8005c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2204      	movs	r2, #4
 8005c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fc f81c 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 faec 	bl	8006218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 faf3 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d020      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0210 	mvn.w	r2, #16
 8005c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fb fff6 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005c84:	e005      	b.n	8005c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fac6 	bl	8006218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 facd 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00c      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0201 	mvn.w	r2, #1
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 faa4 	bl	8006204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 ffd8 	bl	8006c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa9e 	bl	8006240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00c      	beq.n	8005d28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0220 	mvn.w	r2, #32
 8005d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 ffaa 	bl	8006c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e088      	b.n	8005e60 <HAL_TIM_IC_ConfigChannel+0x130>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11b      	bne.n	8005d94 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d6c:	f000 fcce 	bl	800670c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 020c 	bic.w	r2, r2, #12
 8005d7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	619a      	str	r2, [r3, #24]
 8005d92:	e060      	b.n	8005e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d11c      	bne.n	8005dd4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005daa:	f000 fd52 	bl	8006852 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005dbc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6999      	ldr	r1, [r3, #24]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	021a      	lsls	r2, r3, #8
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	619a      	str	r2, [r3, #24]
 8005dd2:	e040      	b.n	8005e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d11b      	bne.n	8005e12 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005dea:	f000 fd9f 	bl	800692c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 020c 	bic.w	r2, r2, #12
 8005dfc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	61da      	str	r2, [r3, #28]
 8005e10:	e021      	b.n	8005e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d11c      	bne.n	8005e52 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e28:	f000 fdbc 	bl	80069a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69da      	ldr	r2, [r3, #28]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e3a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69d9      	ldr	r1, [r3, #28]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	021a      	lsls	r2, r3, #8
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	61da      	str	r2, [r3, #28]
 8005e50:	e001      	b.n	8005e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e0ae      	b.n	8005fe4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b0c      	cmp	r3, #12
 8005e92:	f200 809f 	bhi.w	8005fd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e96:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ed1 	.word	0x08005ed1
 8005ea0:	08005fd5 	.word	0x08005fd5
 8005ea4:	08005fd5 	.word	0x08005fd5
 8005ea8:	08005fd5 	.word	0x08005fd5
 8005eac:	08005f11 	.word	0x08005f11
 8005eb0:	08005fd5 	.word	0x08005fd5
 8005eb4:	08005fd5 	.word	0x08005fd5
 8005eb8:	08005fd5 	.word	0x08005fd5
 8005ebc:	08005f53 	.word	0x08005f53
 8005ec0:	08005fd5 	.word	0x08005fd5
 8005ec4:	08005fd5 	.word	0x08005fd5
 8005ec8:	08005fd5 	.word	0x08005fd5
 8005ecc:	08005f93 	.word	0x08005f93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fa68 	bl	80063ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0208 	orr.w	r2, r2, #8
 8005eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0204 	bic.w	r2, r2, #4
 8005efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6999      	ldr	r1, [r3, #24]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	619a      	str	r2, [r3, #24]
      break;
 8005f0e:	e064      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fab8 	bl	800648c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6999      	ldr	r1, [r3, #24]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	021a      	lsls	r2, r3, #8
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	619a      	str	r2, [r3, #24]
      break;
 8005f50:	e043      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fb0d 	bl	8006578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0208 	orr.w	r2, r2, #8
 8005f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0204 	bic.w	r2, r2, #4
 8005f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69d9      	ldr	r1, [r3, #28]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	61da      	str	r2, [r3, #28]
      break;
 8005f90:	e023      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fb61 	bl	8006660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69d9      	ldr	r1, [r3, #28]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	021a      	lsls	r2, r3, #8
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	61da      	str	r2, [r3, #28]
      break;
 8005fd2:	e002      	b.n	8005fda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_TIM_ConfigClockSource+0x1c>
 8006004:	2302      	movs	r3, #2
 8006006:	e0b4      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x186>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800602e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006040:	d03e      	beq.n	80060c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006046:	f200 8087 	bhi.w	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604e:	f000 8086 	beq.w	800615e <HAL_TIM_ConfigClockSource+0x172>
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006056:	d87f      	bhi.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 8006058:	2b70      	cmp	r3, #112	@ 0x70
 800605a:	d01a      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0xa6>
 800605c:	2b70      	cmp	r3, #112	@ 0x70
 800605e:	d87b      	bhi.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 8006060:	2b60      	cmp	r3, #96	@ 0x60
 8006062:	d050      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x11a>
 8006064:	2b60      	cmp	r3, #96	@ 0x60
 8006066:	d877      	bhi.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b50      	cmp	r3, #80	@ 0x50
 800606a:	d03c      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0xfa>
 800606c:	2b50      	cmp	r3, #80	@ 0x50
 800606e:	d873      	bhi.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d058      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x13a>
 8006074:	2b40      	cmp	r3, #64	@ 0x40
 8006076:	d86f      	bhi.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b30      	cmp	r3, #48	@ 0x30
 800607a:	d064      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x15a>
 800607c:	2b30      	cmp	r3, #48	@ 0x30
 800607e:	d86b      	bhi.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b20      	cmp	r3, #32
 8006082:	d060      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x15a>
 8006084:	2b20      	cmp	r3, #32
 8006086:	d867      	bhi.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d05c      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	2b10      	cmp	r3, #16
 800608e:	d05a      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x15a>
 8006090:	e062      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060a2:	f000 fcd7 	bl	8006a54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	609a      	str	r2, [r3, #8]
      break;
 80060be:	e04f      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060d0:	f000 fcc0 	bl	8006a54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060e2:	609a      	str	r2, [r3, #8]
      break;
 80060e4:	e03c      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f2:	461a      	mov	r2, r3
 80060f4:	f000 fb7e 	bl	80067f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2150      	movs	r1, #80	@ 0x50
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fc8d 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 8006104:	e02c      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006112:	461a      	mov	r2, r3
 8006114:	f000 fbda 	bl	80068cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2160      	movs	r1, #96	@ 0x60
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fc7d 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 8006124:	e01c      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006132:	461a      	mov	r2, r3
 8006134:	f000 fb5e 	bl	80067f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2140      	movs	r1, #64	@ 0x40
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fc6d 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 8006144:	e00c      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f000 fc64 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 8006156:	e003      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	73fb      	strb	r3, [r7, #15]
      break;
 800615c:	e000      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800615e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d831      	bhi.n	80061f4 <HAL_TIM_ReadCapturedValue+0x78>
 8006190:	a201      	add	r2, pc, #4	@ (adr r2, 8006198 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006196:	bf00      	nop
 8006198:	080061cd 	.word	0x080061cd
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	080061f5 	.word	0x080061f5
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	080061d7 	.word	0x080061d7
 80061ac:	080061f5 	.word	0x080061f5
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080061f5 	.word	0x080061f5
 80061c8:	080061eb 	.word	0x080061eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d2:	60fb      	str	r3, [r7, #12]

      break;
 80061d4:	e00f      	b.n	80061f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061dc:	60fb      	str	r3, [r7, #12]

      break;
 80061de:	e00a      	b.n	80061f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e6:	60fb      	str	r3, [r7, #12]

      break;
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	60fb      	str	r3, [r7, #12]

      break;
 80061f2:	e000      	b.n	80061f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061f4:	bf00      	nop
  }

  return tmpreg;
 80061f6:	68fb      	ldr	r3, [r7, #12]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a46      	ldr	r2, [pc, #280]	@ (8006380 <TIM_Base_SetConfig+0x12c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a43      	ldr	r2, [pc, #268]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a42      	ldr	r2, [pc, #264]	@ (8006388 <TIM_Base_SetConfig+0x134>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a41      	ldr	r2, [pc, #260]	@ (800638c <TIM_Base_SetConfig+0x138>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a40      	ldr	r2, [pc, #256]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d108      	bne.n	80062a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a35      	ldr	r2, [pc, #212]	@ (8006380 <TIM_Base_SetConfig+0x12c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b4:	d027      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a32      	ldr	r2, [pc, #200]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d023      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a31      	ldr	r2, [pc, #196]	@ (8006388 <TIM_Base_SetConfig+0x134>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a30      	ldr	r2, [pc, #192]	@ (800638c <TIM_Base_SetConfig+0x138>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d017      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006394 <TIM_Base_SetConfig+0x140>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006398 <TIM_Base_SetConfig+0x144>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2c      	ldr	r2, [pc, #176]	@ (800639c <TIM_Base_SetConfig+0x148>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2b      	ldr	r2, [pc, #172]	@ (80063a0 <TIM_Base_SetConfig+0x14c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	@ (80063a4 <TIM_Base_SetConfig+0x150>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a29      	ldr	r2, [pc, #164]	@ (80063a8 <TIM_Base_SetConfig+0x154>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a10      	ldr	r2, [pc, #64]	@ (8006380 <TIM_Base_SetConfig+0x12c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a12      	ldr	r2, [pc, #72]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d105      	bne.n	8006372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]
  }
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40010400 	.word	0x40010400
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800
 80063a0:	40001800 	.word	0x40001800
 80063a4:	40001c00 	.word	0x40001c00
 80063a8:	40002000 	.word	0x40002000

080063ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f023 0201 	bic.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 0302 	bic.w	r3, r3, #2
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a20      	ldr	r2, [pc, #128]	@ (8006484 <TIM_OC1_SetConfig+0xd8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC1_SetConfig+0x64>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <TIM_OC1_SetConfig+0xdc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10c      	bne.n	800642a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0308 	bic.w	r3, r3, #8
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0304 	bic.w	r3, r3, #4
 8006428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a15      	ldr	r2, [pc, #84]	@ (8006484 <TIM_OC1_SetConfig+0xd8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_OC1_SetConfig+0x8e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a14      	ldr	r2, [pc, #80]	@ (8006488 <TIM_OC1_SetConfig+0xdc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d111      	bne.n	800645e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400

0800648c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f023 0210 	bic.w	r2, r3, #16
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0320 	bic.w	r3, r3, #32
 80064d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a22      	ldr	r2, [pc, #136]	@ (8006570 <TIM_OC2_SetConfig+0xe4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <TIM_OC2_SetConfig+0x68>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a21      	ldr	r2, [pc, #132]	@ (8006574 <TIM_OC2_SetConfig+0xe8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d10d      	bne.n	8006510 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800650e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a17      	ldr	r2, [pc, #92]	@ (8006570 <TIM_OC2_SetConfig+0xe4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <TIM_OC2_SetConfig+0x94>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a16      	ldr	r2, [pc, #88]	@ (8006574 <TIM_OC2_SetConfig+0xe8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d113      	bne.n	8006548 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800652e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	621a      	str	r2, [r3, #32]
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400

08006578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a21      	ldr	r2, [pc, #132]	@ (8006658 <TIM_OC3_SetConfig+0xe0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_OC3_SetConfig+0x66>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a20      	ldr	r2, [pc, #128]	@ (800665c <TIM_OC3_SetConfig+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d10d      	bne.n	80065fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a16      	ldr	r2, [pc, #88]	@ (8006658 <TIM_OC3_SetConfig+0xe0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d003      	beq.n	800660a <TIM_OC3_SetConfig+0x92>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a15      	ldr	r2, [pc, #84]	@ (800665c <TIM_OC3_SetConfig+0xe4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d113      	bne.n	8006632 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	621a      	str	r2, [r3, #32]
}
 800664c:	bf00      	nop
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	40010000 	.word	0x40010000
 800665c:	40010400 	.word	0x40010400

08006660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	031b      	lsls	r3, r3, #12
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a12      	ldr	r2, [pc, #72]	@ (8006704 <TIM_OC4_SetConfig+0xa4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC4_SetConfig+0x68>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a11      	ldr	r2, [pc, #68]	@ (8006708 <TIM_OC4_SetConfig+0xa8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d109      	bne.n	80066dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	019b      	lsls	r3, r3, #6
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40010000 	.word	0x40010000
 8006708:	40010400 	.word	0x40010400

0800670c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f023 0201 	bic.w	r2, r3, #1
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a28      	ldr	r2, [pc, #160]	@ (80067d8 <TIM_TI1_SetConfig+0xcc>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d01b      	beq.n	8006772 <TIM_TI1_SetConfig+0x66>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006740:	d017      	beq.n	8006772 <TIM_TI1_SetConfig+0x66>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4a25      	ldr	r2, [pc, #148]	@ (80067dc <TIM_TI1_SetConfig+0xd0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <TIM_TI1_SetConfig+0x66>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a24      	ldr	r2, [pc, #144]	@ (80067e0 <TIM_TI1_SetConfig+0xd4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00f      	beq.n	8006772 <TIM_TI1_SetConfig+0x66>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a23      	ldr	r2, [pc, #140]	@ (80067e4 <TIM_TI1_SetConfig+0xd8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00b      	beq.n	8006772 <TIM_TI1_SetConfig+0x66>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4a22      	ldr	r2, [pc, #136]	@ (80067e8 <TIM_TI1_SetConfig+0xdc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d007      	beq.n	8006772 <TIM_TI1_SetConfig+0x66>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4a21      	ldr	r2, [pc, #132]	@ (80067ec <TIM_TI1_SetConfig+0xe0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d003      	beq.n	8006772 <TIM_TI1_SetConfig+0x66>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a20      	ldr	r2, [pc, #128]	@ (80067f0 <TIM_TI1_SetConfig+0xe4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <TIM_TI1_SetConfig+0x6a>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <TIM_TI1_SetConfig+0x6c>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e003      	b.n	8006796 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800679c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f023 030a 	bic.w	r3, r3, #10
 80067b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 030a 	and.w	r3, r3, #10
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40010400 	.word	0x40010400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40001800 	.word	0x40001800

080067f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0201 	bic.w	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800681e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f023 030a 	bic.w	r3, r3, #10
 8006830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006852:	b480      	push	{r7}
 8006854:	b087      	sub	sp, #28
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0210 	bic.w	r2, r3, #16
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	031b      	lsls	r3, r3, #12
 8006896:	b29b      	uxth	r3, r3
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	621a      	str	r2, [r3, #32]
}
 80068c0:	bf00      	nop
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f023 0210 	bic.w	r2, r3, #16
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	031b      	lsls	r3, r3, #12
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006908:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006968:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	b2db      	uxtb	r3, r3
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800697c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	031b      	lsls	r3, r3, #12
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80069f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	031b      	lsls	r3, r3, #12
 80069fc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	621a      	str	r2, [r3, #32]
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f043 0307 	orr.w	r3, r3, #7
 8006a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	609a      	str	r2, [r3, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	021a      	lsls	r2, r3, #8
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	609a      	str	r2, [r3, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1a      	ldr	r2, [r3, #32]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e05a      	b.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a21      	ldr	r2, [pc, #132]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d022      	beq.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b44:	d01d      	beq.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d018      	beq.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00e      	beq.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d009      	beq.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a17      	ldr	r2, [pc, #92]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a15      	ldr	r2, [pc, #84]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d10c      	bne.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40010400 	.word	0x40010400
 8006bd0:	40014000 	.word	0x40014000
 8006bd4:	40001800 	.word	0x40001800

08006bd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e03d      	b.n	8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e042      	b.n	8006d3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fc f90a 	bl	8002ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2224      	movs	r2, #36	@ 0x24
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fe91 	bl	8007a10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d175      	bne.n	8006e50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_UART_Transmit+0x2c>
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e06e      	b.n	8006e52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2221      	movs	r2, #33	@ 0x21
 8006d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d82:	f7fc faab 	bl	80032dc <HAL_GetTick>
 8006d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	88fa      	ldrh	r2, [r7, #6]
 8006d92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d9c:	d108      	bne.n	8006db0 <HAL_UART_Transmit+0x6c>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	e003      	b.n	8006db8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006db8:	e02e      	b.n	8006e18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2180      	movs	r1, #128	@ 0x80
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fbdb 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e03a      	b.n	8006e52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	3302      	adds	r3, #2
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	e007      	b.n	8006e0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	3301      	adds	r3, #1
 8006e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1cb      	bne.n	8006dba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2140      	movs	r1, #64	@ 0x40
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fba7 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e006      	b.n	8006e52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e000      	b.n	8006e52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
  }
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	4613      	mov	r3, r2
 8006e66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d112      	bne.n	8006e9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <HAL_UART_Receive_IT+0x26>
 8006e7a:	88fb      	ldrh	r3, [r7, #6]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e00b      	b.n	8006e9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fbce 	bl	8007632 <UART_Start_Receive_IT>
 8006e96:	4603      	mov	r3, r0
 8006e98:	e000      	b.n	8006e9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b09a      	sub	sp, #104	@ 0x68
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ecc:	657a      	str	r2, [r7, #84]	@ 0x54
 8006ece:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ed2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f00:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e5      	bne.n	8006ee0 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d119      	bne.n	8006f50 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f023 0310 	bic.w	r3, r3, #16
 8006f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5a:	2b40      	cmp	r3, #64	@ 0x40
 8006f5c:	d13f      	bne.n	8006fde <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3314      	adds	r3, #20
 8006f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3314      	adds	r3, #20
 8006f7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f7e:	61ba      	str	r2, [r7, #24]
 8006f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6979      	ldr	r1, [r7, #20]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e5      	bne.n	8006f5e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d013      	beq.n	8006fc2 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9e:	4a19      	ldr	r2, [pc, #100]	@ (8007004 <HAL_UART_AbortReceive_IT+0x160>)
 8006fa0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fc fb49 	bl	800363e <HAL_DMA_Abort_IT>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d022      	beq.n	8006ff8 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	e01a      	b.n	8006ff8 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fabc 	bl	8007554 <HAL_UART_AbortReceiveCpltCallback>
 8006fdc:	e00c      	b.n	8006ff8 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 faae 	bl	8007554 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3768      	adds	r7, #104	@ 0x68
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	08007795 	.word	0x08007795

08007008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b0ba      	sub	sp, #232	@ 0xe8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800702e:	2300      	movs	r3, #0
 8007030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007034:	2300      	movs	r3, #0
 8007036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10f      	bne.n	800706e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <HAL_UART_IRQHandler+0x66>
 800705a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fc14 	bl	8007894 <UART_Receive_IT>
      return;
 800706c:	e25b      	b.n	8007526 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800706e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80de 	beq.w	8007234 <HAL_UART_IRQHandler+0x22c>
 8007078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80d1 	beq.w	8007234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <HAL_UART_IRQHandler+0xae>
 800709e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ae:	f043 0201 	orr.w	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00b      	beq.n	80070da <HAL_UART_IRQHandler+0xd2>
 80070c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	f043 0202 	orr.w	r2, r3, #2
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00b      	beq.n	80070fe <HAL_UART_IRQHandler+0xf6>
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f6:	f043 0204 	orr.w	r2, r3, #4
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d011      	beq.n	800712e <HAL_UART_IRQHandler+0x126>
 800710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d105      	bne.n	8007122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007126:	f043 0208 	orr.w	r2, r3, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 81f2 	beq.w	800751c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_UART_IRQHandler+0x14e>
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fb9f 	bl	8007894 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007160:	2b40      	cmp	r3, #64	@ 0x40
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d103      	bne.n	8007182 <HAL_UART_IRQHandler+0x17a>
 800717a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d04f      	beq.n	8007222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa8f 	bl	80076a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007192:	2b40      	cmp	r3, #64	@ 0x40
 8007194:	d141      	bne.n	800721a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3314      	adds	r3, #20
 800719c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3314      	adds	r3, #20
 80071be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1d9      	bne.n	8007196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d013      	beq.n	8007212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ee:	4a7e      	ldr	r2, [pc, #504]	@ (80073e8 <HAL_UART_IRQHandler+0x3e0>)
 80071f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fc fa21 	bl	800363e <HAL_DMA_Abort_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d016      	beq.n	8007230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	e00e      	b.n	8007230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f994 	bl	8007540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	e00a      	b.n	8007230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f990 	bl	8007540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007220:	e006      	b.n	8007230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f98c 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800722e:	e175      	b.n	800751c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007230:	bf00      	nop
    return;
 8007232:	e173      	b.n	800751c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	2b01      	cmp	r3, #1
 800723a:	f040 814f 	bne.w	80074dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8148 	beq.w	80074dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800724c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8141 	beq.w	80074dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800725a:	2300      	movs	r3, #0
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727a:	2b40      	cmp	r3, #64	@ 0x40
 800727c:	f040 80b6 	bne.w	80073ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800728c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8145 	beq.w	8007520 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800729a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800729e:	429a      	cmp	r2, r3
 80072a0:	f080 813e 	bcs.w	8007520 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b6:	f000 8088 	beq.w	80073ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	330c      	adds	r3, #12
 80072c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80072e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1d9      	bne.n	80072ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3314      	adds	r3, #20
 800730c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800732a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800732e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800733c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e1      	bne.n	8007306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800736c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e3      	bne.n	8007342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800739a:	f023 0310 	bic.w	r3, r3, #16
 800739e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e3      	bne.n	8007388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fc f8ca 	bl	800355e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073d8:	b29b      	uxth	r3, r3
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	b29b      	uxth	r3, r3
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8c1 	bl	8007568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073e6:	e09b      	b.n	8007520 <HAL_UART_IRQHandler+0x518>
 80073e8:	0800776d 	.word	0x0800776d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 808e 	beq.w	8007524 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8089 	beq.w	8007524 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330c      	adds	r3, #12
 8007418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	330c      	adds	r3, #12
 8007432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007436:	647a      	str	r2, [r7, #68]	@ 0x44
 8007438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800743c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e3      	bne.n	8007412 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3314      	adds	r3, #20
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	623b      	str	r3, [r7, #32]
   return(result);
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3314      	adds	r3, #20
 800746a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800746e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e3      	bne.n	800744a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	330c      	adds	r3, #12
 80074b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80074b4:	61fa      	str	r2, [r7, #28]
 80074b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	69b9      	ldr	r1, [r7, #24]
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	617b      	str	r3, [r7, #20]
   return(result);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e3      	bne.n	8007490 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f847 	bl	8007568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074da:	e023      	b.n	8007524 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d009      	beq.n	80074fc <HAL_UART_IRQHandler+0x4f4>
 80074e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f965 	bl	80077c4 <UART_Transmit_IT>
    return;
 80074fa:	e014      	b.n	8007526 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <HAL_UART_IRQHandler+0x51e>
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f9a5 	bl	8007864 <UART_EndTransmit_IT>
    return;
 800751a:	e004      	b.n	8007526 <HAL_UART_IRQHandler+0x51e>
    return;
 800751c:	bf00      	nop
 800751e:	e002      	b.n	8007526 <HAL_UART_IRQHandler+0x51e>
      return;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <HAL_UART_IRQHandler+0x51e>
      return;
 8007524:	bf00      	nop
  }
}
 8007526:	37e8      	adds	r7, #232	@ 0xe8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	4613      	mov	r3, r2
 800758e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007590:	e03b      	b.n	800760a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d037      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759a:	f7fb fe9f 	bl	80032dc <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	6a3a      	ldr	r2, [r7, #32]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d302      	bcc.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e03a      	b.n	800762a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d023      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0x8a>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b80      	cmp	r3, #128	@ 0x80
 80075c6:	d020      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0x8a>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b40      	cmp	r3, #64	@ 0x40
 80075cc:	d01d      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d116      	bne.n	800760a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f857 	bl	80076a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2208      	movs	r2, #8
 80075fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e00f      	b.n	800762a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4013      	ands	r3, r2
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	429a      	cmp	r2, r3
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	429a      	cmp	r2, r3
 8007626:	d0b4      	beq.n	8007592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	4613      	mov	r3, r2
 800763e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	88fa      	ldrh	r2, [r7, #6]
 8007650:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2222      	movs	r2, #34	@ 0x22
 800765c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d007      	beq.n	8007678 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007676:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695a      	ldr	r2, [r3, #20]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0220 	orr.w	r2, r2, #32
 8007696:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b095      	sub	sp, #84	@ 0x54
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e5      	bne.n	80076ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3314      	adds	r3, #20
 80076e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f023 0301 	bic.w	r3, r3, #1
 80076f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e5      	bne.n	80076e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771a:	2b01      	cmp	r3, #1
 800771c:	d119      	bne.n	8007752 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	60bb      	str	r3, [r7, #8]
   return(result);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f023 0310 	bic.w	r3, r3, #16
 8007734:	647b      	str	r3, [r7, #68]	@ 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800773e:	61ba      	str	r2, [r7, #24]
 8007740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	613b      	str	r3, [r7, #16]
   return(result);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e5      	bne.n	800771e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007760:	bf00      	nop
 8007762:	3754      	adds	r7, #84	@ 0x54
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff feda 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff fecc 	bl	8007554 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b21      	cmp	r3, #33	@ 0x21
 80077d6:	d13e      	bne.n	8007856 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e0:	d114      	bne.n	800780c <UART_Transmit_IT+0x48>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d110      	bne.n	800780c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	1c9a      	adds	r2, r3, #2
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	621a      	str	r2, [r3, #32]
 800780a:	e008      	b.n	800781e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	1c59      	adds	r1, r3, #1
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6211      	str	r1, [r2, #32]
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29b      	uxth	r3, r3
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4619      	mov	r1, r3
 800782c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10f      	bne.n	8007852 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007840:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007850:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	e000      	b.n	8007858 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007856:	2302      	movs	r3, #2
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800787a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff fe51 	bl	800752c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08c      	sub	sp, #48	@ 0x30
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b22      	cmp	r3, #34	@ 0x22
 80078a6:	f040 80ae 	bne.w	8007a06 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078b2:	d117      	bne.n	80078e4 <UART_Receive_IT+0x50>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d113      	bne.n	80078e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078bc:	2300      	movs	r3, #0
 80078be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	1c9a      	adds	r2, r3, #2
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80078e2:	e026      	b.n	8007932 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f6:	d007      	beq.n	8007908 <UART_Receive_IT+0x74>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <UART_Receive_IT+0x82>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d106      	bne.n	8007916 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	b2da      	uxtb	r2, r3
 8007910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e008      	b.n	8007928 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007922:	b2da      	uxtb	r2, r3
 8007924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007926:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4619      	mov	r1, r3
 8007940:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007942:	2b00      	cmp	r3, #0
 8007944:	d15d      	bne.n	8007a02 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0220 	bic.w	r2, r2, #32
 8007954:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007964:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	695a      	ldr	r2, [r3, #20]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0201 	bic.w	r2, r2, #1
 8007974:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007988:	2b01      	cmp	r3, #1
 800798a:	d135      	bne.n	80079f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	330c      	adds	r3, #12
 8007998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	613b      	str	r3, [r7, #16]
   return(result);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f023 0310 	bic.w	r3, r3, #16
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b2:	623a      	str	r2, [r7, #32]
 80079b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	69f9      	ldr	r1, [r7, #28]
 80079b8:	6a3a      	ldr	r2, [r7, #32]
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	61bb      	str	r3, [r7, #24]
   return(result);
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e5      	bne.n	8007992 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d10a      	bne.n	80079ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff fdb9 	bl	8007568 <HAL_UARTEx_RxEventCallback>
 80079f6:	e002      	b.n	80079fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7f9 fec1 	bl	8001780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e002      	b.n	8007a08 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e000      	b.n	8007a08 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a06:	2302      	movs	r3, #2
  }
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3730      	adds	r7, #48	@ 0x30
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a14:	b0c0      	sub	sp, #256	@ 0x100
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2c:	68d9      	ldr	r1, [r3, #12]
 8007a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	ea40 0301 	orr.w	r3, r0, r1
 8007a38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a68:	f021 010c 	bic.w	r1, r1, #12
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a76:	430b      	orrs	r3, r1
 8007a78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8a:	6999      	ldr	r1, [r3, #24]
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	ea40 0301 	orr.w	r3, r0, r1
 8007a96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4b8f      	ldr	r3, [pc, #572]	@ (8007cdc <UART_SetConfig+0x2cc>)
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d005      	beq.n	8007ab0 <UART_SetConfig+0xa0>
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8007ce0 <UART_SetConfig+0x2d0>)
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d104      	bne.n	8007aba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ab0:	f7fd fc1e 	bl	80052f0 <HAL_RCC_GetPCLK2Freq>
 8007ab4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ab8:	e003      	b.n	8007ac2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aba:	f7fd fc05 	bl	80052c8 <HAL_RCC_GetPCLK1Freq>
 8007abe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007acc:	f040 810c 	bne.w	8007ce8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ada:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ade:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	462b      	mov	r3, r5
 8007ae6:	1891      	adds	r1, r2, r2
 8007ae8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007aea:	415b      	adcs	r3, r3
 8007aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007af2:	4621      	mov	r1, r4
 8007af4:	eb12 0801 	adds.w	r8, r2, r1
 8007af8:	4629      	mov	r1, r5
 8007afa:	eb43 0901 	adc.w	r9, r3, r1
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b12:	4690      	mov	r8, r2
 8007b14:	4699      	mov	r9, r3
 8007b16:	4623      	mov	r3, r4
 8007b18:	eb18 0303 	adds.w	r3, r8, r3
 8007b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b20:	462b      	mov	r3, r5
 8007b22:	eb49 0303 	adc.w	r3, r9, r3
 8007b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b3e:	460b      	mov	r3, r1
 8007b40:	18db      	adds	r3, r3, r3
 8007b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b44:	4613      	mov	r3, r2
 8007b46:	eb42 0303 	adc.w	r3, r2, r3
 8007b4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b54:	f7f9 f848 	bl	8000be8 <__aeabi_uldivmod>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4b61      	ldr	r3, [pc, #388]	@ (8007ce4 <UART_SetConfig+0x2d4>)
 8007b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	011c      	lsls	r4, r3, #4
 8007b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b78:	4642      	mov	r2, r8
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	1891      	adds	r1, r2, r2
 8007b7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b80:	415b      	adcs	r3, r3
 8007b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b88:	4641      	mov	r1, r8
 8007b8a:	eb12 0a01 	adds.w	sl, r2, r1
 8007b8e:	4649      	mov	r1, r9
 8007b90:	eb43 0b01 	adc.w	fp, r3, r1
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ba0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba8:	4692      	mov	sl, r2
 8007baa:	469b      	mov	fp, r3
 8007bac:	4643      	mov	r3, r8
 8007bae:	eb1a 0303 	adds.w	r3, sl, r3
 8007bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	eb4b 0303 	adc.w	r3, fp, r3
 8007bbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	18db      	adds	r3, r3, r3
 8007bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bda:	4613      	mov	r3, r2
 8007bdc:	eb42 0303 	adc.w	r3, r2, r3
 8007be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007be6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007bea:	f7f8 fffd 	bl	8000be8 <__aeabi_uldivmod>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ce4 <UART_SetConfig+0x2d4>)
 8007bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	2264      	movs	r2, #100	@ 0x64
 8007bfe:	fb02 f303 	mul.w	r3, r2, r3
 8007c02:	1acb      	subs	r3, r1, r3
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ce4 <UART_SetConfig+0x2d4>)
 8007c0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c18:	441c      	add	r4, r3
 8007c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	1891      	adds	r1, r2, r2
 8007c32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c34:	415b      	adcs	r3, r3
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	1851      	adds	r1, r2, r1
 8007c40:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c42:	4649      	mov	r1, r9
 8007c44:	414b      	adcs	r3, r1
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c54:	4659      	mov	r1, fp
 8007c56:	00cb      	lsls	r3, r1, #3
 8007c58:	4651      	mov	r1, sl
 8007c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c5e:	4651      	mov	r1, sl
 8007c60:	00ca      	lsls	r2, r1, #3
 8007c62:	4610      	mov	r0, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	4642      	mov	r2, r8
 8007c6a:	189b      	adds	r3, r3, r2
 8007c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c70:	464b      	mov	r3, r9
 8007c72:	460a      	mov	r2, r1
 8007c74:	eb42 0303 	adc.w	r3, r2, r3
 8007c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c90:	460b      	mov	r3, r1
 8007c92:	18db      	adds	r3, r3, r3
 8007c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c96:	4613      	mov	r3, r2
 8007c98:	eb42 0303 	adc.w	r3, r2, r3
 8007c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ca2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ca6:	f7f8 ff9f 	bl	8000be8 <__aeabi_uldivmod>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce4 <UART_SetConfig+0x2d4>)
 8007cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	2164      	movs	r1, #100	@ 0x64
 8007cb8:	fb01 f303 	mul.w	r3, r1, r3
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	3332      	adds	r3, #50	@ 0x32
 8007cc2:	4a08      	ldr	r2, [pc, #32]	@ (8007ce4 <UART_SetConfig+0x2d4>)
 8007cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc8:	095b      	lsrs	r3, r3, #5
 8007cca:	f003 0207 	and.w	r2, r3, #7
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4422      	add	r2, r4
 8007cd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cd8:	e106      	b.n	8007ee8 <UART_SetConfig+0x4d8>
 8007cda:	bf00      	nop
 8007cdc:	40011000 	.word	0x40011000
 8007ce0:	40011400 	.word	0x40011400
 8007ce4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007cf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007cfa:	4642      	mov	r2, r8
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	1891      	adds	r1, r2, r2
 8007d00:	6239      	str	r1, [r7, #32]
 8007d02:	415b      	adcs	r3, r3
 8007d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	1854      	adds	r4, r2, r1
 8007d0e:	4649      	mov	r1, r9
 8007d10:	eb43 0501 	adc.w	r5, r3, r1
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	00eb      	lsls	r3, r5, #3
 8007d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d22:	00e2      	lsls	r2, r4, #3
 8007d24:	4614      	mov	r4, r2
 8007d26:	461d      	mov	r5, r3
 8007d28:	4643      	mov	r3, r8
 8007d2a:	18e3      	adds	r3, r4, r3
 8007d2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d30:	464b      	mov	r3, r9
 8007d32:	eb45 0303 	adc.w	r3, r5, r3
 8007d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d56:	4629      	mov	r1, r5
 8007d58:	008b      	lsls	r3, r1, #2
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d60:	4621      	mov	r1, r4
 8007d62:	008a      	lsls	r2, r1, #2
 8007d64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d68:	f7f8 ff3e 	bl	8000be8 <__aeabi_uldivmod>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4b60      	ldr	r3, [pc, #384]	@ (8007ef4 <UART_SetConfig+0x4e4>)
 8007d72:	fba3 2302 	umull	r2, r3, r3, r2
 8007d76:	095b      	lsrs	r3, r3, #5
 8007d78:	011c      	lsls	r4, r3, #4
 8007d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	464b      	mov	r3, r9
 8007d90:	1891      	adds	r1, r2, r2
 8007d92:	61b9      	str	r1, [r7, #24]
 8007d94:	415b      	adcs	r3, r3
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	1851      	adds	r1, r2, r1
 8007da0:	6139      	str	r1, [r7, #16]
 8007da2:	4649      	mov	r1, r9
 8007da4:	414b      	adcs	r3, r1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007db4:	4659      	mov	r1, fp
 8007db6:	00cb      	lsls	r3, r1, #3
 8007db8:	4651      	mov	r1, sl
 8007dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dbe:	4651      	mov	r1, sl
 8007dc0:	00ca      	lsls	r2, r1, #3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4642      	mov	r2, r8
 8007dca:	189b      	adds	r3, r3, r2
 8007dcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	eb42 0303 	adc.w	r3, r2, r3
 8007dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007de6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007df4:	4649      	mov	r1, r9
 8007df6:	008b      	lsls	r3, r1, #2
 8007df8:	4641      	mov	r1, r8
 8007dfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dfe:	4641      	mov	r1, r8
 8007e00:	008a      	lsls	r2, r1, #2
 8007e02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e06:	f7f8 feef 	bl	8000be8 <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4b38      	ldr	r3, [pc, #224]	@ (8007ef4 <UART_SetConfig+0x4e4>)
 8007e12:	fba3 2301 	umull	r2, r3, r3, r1
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	2264      	movs	r2, #100	@ 0x64
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	1acb      	subs	r3, r1, r3
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	3332      	adds	r3, #50	@ 0x32
 8007e24:	4a33      	ldr	r2, [pc, #204]	@ (8007ef4 <UART_SetConfig+0x4e4>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e30:	441c      	add	r4, r3
 8007e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e36:	2200      	movs	r2, #0
 8007e38:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	1891      	adds	r1, r2, r2
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	415b      	adcs	r3, r3
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e50:	4641      	mov	r1, r8
 8007e52:	1851      	adds	r1, r2, r1
 8007e54:	6039      	str	r1, [r7, #0]
 8007e56:	4649      	mov	r1, r9
 8007e58:	414b      	adcs	r3, r1
 8007e5a:	607b      	str	r3, [r7, #4]
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e68:	4659      	mov	r1, fp
 8007e6a:	00cb      	lsls	r3, r1, #3
 8007e6c:	4651      	mov	r1, sl
 8007e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e72:	4651      	mov	r1, sl
 8007e74:	00ca      	lsls	r2, r1, #3
 8007e76:	4610      	mov	r0, r2
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	189b      	adds	r3, r3, r2
 8007e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e82:	464b      	mov	r3, r9
 8007e84:	460a      	mov	r2, r1
 8007e86:	eb42 0303 	adc.w	r3, r2, r3
 8007e8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e96:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	008b      	lsls	r3, r1, #2
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eae:	4641      	mov	r1, r8
 8007eb0:	008a      	lsls	r2, r1, #2
 8007eb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007eb6:	f7f8 fe97 	bl	8000be8 <__aeabi_uldivmod>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <UART_SetConfig+0x4e4>)
 8007ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	2164      	movs	r1, #100	@ 0x64
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	3332      	adds	r3, #50	@ 0x32
 8007ed2:	4a08      	ldr	r2, [pc, #32]	@ (8007ef4 <UART_SetConfig+0x4e4>)
 8007ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	f003 020f 	and.w	r2, r3, #15
 8007ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4422      	add	r2, r4
 8007ee6:	609a      	str	r2, [r3, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef4:	51eb851f 	.word	0x51eb851f

08007ef8 <__NVIC_SetPriority>:
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	6039      	str	r1, [r7, #0]
 8007f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db0a      	blt.n	8007f22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	490c      	ldr	r1, [pc, #48]	@ (8007f44 <__NVIC_SetPriority+0x4c>)
 8007f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f16:	0112      	lsls	r2, r2, #4
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007f20:	e00a      	b.n	8007f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	4908      	ldr	r1, [pc, #32]	@ (8007f48 <__NVIC_SetPriority+0x50>)
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	3b04      	subs	r3, #4
 8007f30:	0112      	lsls	r2, r2, #4
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	440b      	add	r3, r1
 8007f36:	761a      	strb	r2, [r3, #24]
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	e000e100 	.word	0xe000e100
 8007f48:	e000ed00 	.word	0xe000ed00

08007f4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f50:	2100      	movs	r1, #0
 8007f52:	f06f 0004 	mvn.w	r0, #4
 8007f56:	f7ff ffcf 	bl	8007ef8 <__NVIC_SetPriority>
#endif
}
 8007f5a:	bf00      	nop
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f66:	f3ef 8305 	mrs	r3, IPSR
 8007f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f72:	f06f 0305 	mvn.w	r3, #5
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	e00c      	b.n	8007f94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa4 <osKernelInitialize+0x44>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d105      	bne.n	8007f8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f82:	4b08      	ldr	r3, [pc, #32]	@ (8007fa4 <osKernelInitialize+0x44>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	607b      	str	r3, [r7, #4]
 8007f8c:	e002      	b.n	8007f94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f94:	687b      	ldr	r3, [r7, #4]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200004ac 	.word	0x200004ac

08007fa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fae:	f3ef 8305 	mrs	r3, IPSR
 8007fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8007fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007fba:	f06f 0305 	mvn.w	r3, #5
 8007fbe:	607b      	str	r3, [r7, #4]
 8007fc0:	e010      	b.n	8007fe4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <osKernelStart+0x48>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d109      	bne.n	8007fde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fca:	f7ff ffbf 	bl	8007f4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fce:	4b08      	ldr	r3, [pc, #32]	@ (8007ff0 <osKernelStart+0x48>)
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fd4:	f001 f87a 	bl	80090cc <vTaskStartScheduler>
      stat = osOK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	e002      	b.n	8007fe4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fe4:	687b      	ldr	r3, [r7, #4]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	200004ac 	.word	0x200004ac

08007ff4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08e      	sub	sp, #56	@ 0x38
 8007ff8:	af04      	add	r7, sp, #16
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008004:	f3ef 8305 	mrs	r3, IPSR
 8008008:	617b      	str	r3, [r7, #20]
  return(result);
 800800a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800800c:	2b00      	cmp	r3, #0
 800800e:	d17e      	bne.n	800810e <osThreadNew+0x11a>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d07b      	beq.n	800810e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008016:	2380      	movs	r3, #128	@ 0x80
 8008018:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800801a:	2318      	movs	r3, #24
 800801c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008022:	f04f 33ff 	mov.w	r3, #4294967295
 8008026:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d045      	beq.n	80080ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <osThreadNew+0x48>
        name = attr->name;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <osThreadNew+0x6e>
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2b38      	cmp	r3, #56	@ 0x38
 8008054:	d805      	bhi.n	8008062 <osThreadNew+0x6e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <osThreadNew+0x72>
        return (NULL);
 8008062:	2300      	movs	r3, #0
 8008064:	e054      	b.n	8008110 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	089b      	lsrs	r3, r3, #2
 8008074:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00e      	beq.n	800809c <osThreadNew+0xa8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b5b      	cmp	r3, #91	@ 0x5b
 8008084:	d90a      	bls.n	800809c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800808a:	2b00      	cmp	r3, #0
 800808c:	d006      	beq.n	800809c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <osThreadNew+0xa8>
        mem = 1;
 8008096:	2301      	movs	r3, #1
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	e010      	b.n	80080be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10c      	bne.n	80080be <osThreadNew+0xca>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <osThreadNew+0xca>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d104      	bne.n	80080be <osThreadNew+0xca>
          mem = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	e001      	b.n	80080be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d110      	bne.n	80080e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080cc:	9202      	str	r2, [sp, #8]
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6a3a      	ldr	r2, [r7, #32]
 80080d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fe1a 	bl	8008d14 <xTaskCreateStatic>
 80080e0:	4603      	mov	r3, r0
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	e013      	b.n	800810e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d110      	bne.n	800810e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	f107 0310 	add.w	r3, r7, #16
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fe68 	bl	8008dd4 <xTaskCreate>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d001      	beq.n	800810e <osThreadNew+0x11a>
            hTask = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800810e:	693b      	ldr	r3, [r7, #16]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3728      	adds	r7, #40	@ 0x28
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008120:	f3ef 8305 	mrs	r3, IPSR
 8008124:	60bb      	str	r3, [r7, #8]
  return(result);
 8008126:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <osDelay+0x1c>
    stat = osErrorISR;
 800812c:	f06f 0305 	mvn.w	r3, #5
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	e007      	b.n	8008144 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <osDelay+0x2c>
      vTaskDelay(ticks);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 ff8e 	bl	8009060 <vTaskDelay>
    }
  }

  return (stat);
 8008144:	68fb      	ldr	r3, [r7, #12]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4a07      	ldr	r2, [pc, #28]	@ (800817c <vApplicationGetIdleTaskMemory+0x2c>)
 8008160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4a06      	ldr	r2, [pc, #24]	@ (8008180 <vApplicationGetIdleTaskMemory+0x30>)
 8008166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2280      	movs	r2, #128	@ 0x80
 800816c:	601a      	str	r2, [r3, #0]
}
 800816e:	bf00      	nop
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	200004b0 	.word	0x200004b0
 8008180:	2000050c 	.word	0x2000050c

08008184 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a07      	ldr	r2, [pc, #28]	@ (80081b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008194:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4a06      	ldr	r2, [pc, #24]	@ (80081b4 <vApplicationGetTimerTaskMemory+0x30>)
 800819a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	2000070c 	.word	0x2000070c
 80081b4:	20000768 	.word	0x20000768

080081b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f103 0208 	add.w	r2, r3, #8
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295
 80081d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f103 0208 	add.w	r2, r3, #8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f103 0208 	add.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
}
 800824e:	bf00      	nop
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d103      	bne.n	800827a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	e00c      	b.n	8008294 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3308      	adds	r3, #8
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e002      	b.n	8008288 <vListInsert+0x2e>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d2f6      	bcs.n	8008282 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]
}
 80082c0:	bf00      	nop
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6892      	ldr	r2, [r2, #8]
 80082e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6852      	ldr	r2, [r2, #4]
 80082ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d103      	bne.n	8008300 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	1e5a      	subs	r2, r3, #1
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10b      	bne.n	800834c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800834c:	f002 f87c 	bl	800a448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008358:	68f9      	ldr	r1, [r7, #12]
 800835a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	441a      	add	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800837c:	3b01      	subs	r3, #1
 800837e:	68f9      	ldr	r1, [r7, #12]
 8008380:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008382:	fb01 f303 	mul.w	r3, r1, r3
 8008386:	441a      	add	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	22ff      	movs	r2, #255	@ 0xff
 8008390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	22ff      	movs	r2, #255	@ 0xff
 8008398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d114      	bne.n	80083cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01a      	beq.n	80083e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3310      	adds	r3, #16
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f91a 	bl	80095e8 <xTaskRemoveFromEventList>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d012      	beq.n	80083e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083ba:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <xQueueGenericReset+0xd0>)
 80083bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	e009      	b.n	80083e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3310      	adds	r3, #16
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fef1 	bl	80081b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3324      	adds	r3, #36	@ 0x24
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff feec 	bl	80081b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083e0:	f002 f864 	bl	800a4ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083e4:	2301      	movs	r3, #1
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08e      	sub	sp, #56	@ 0x38
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10b      	bne.n	8008420 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800841a:	bf00      	nop
 800841c:	bf00      	nop
 800841e:	e7fd      	b.n	800841c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10b      	bne.n	800843e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <xQueueGenericCreateStatic+0x56>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <xQueueGenericCreateStatic+0x5a>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <xQueueGenericCreateStatic+0x5c>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	623b      	str	r3, [r7, #32]
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <xQueueGenericCreateStatic+0x84>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <xQueueGenericCreateStatic+0x88>
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <xQueueGenericCreateStatic+0x8a>
 800847c:	2300      	movs	r3, #0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	61fb      	str	r3, [r7, #28]
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	e7fd      	b.n	8008496 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800849a:	2350      	movs	r3, #80	@ 0x50
 800849c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b50      	cmp	r3, #80	@ 0x50
 80084a2:	d00b      	beq.n	80084bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	61bb      	str	r3, [r7, #24]
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80084c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00d      	beq.n	80084e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	4613      	mov	r3, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f805 	bl	80084ee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3730      	adds	r7, #48	@ 0x30
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d103      	bne.n	800850a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	e002      	b.n	8008510 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800851c:	2101      	movs	r1, #1
 800851e:	69b8      	ldr	r0, [r7, #24]
 8008520:	f7ff fefe 	bl	8008320 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08e      	sub	sp, #56	@ 0x38
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008542:	2300      	movs	r3, #0
 8008544:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <xQueueGenericSend+0x34>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <xQueueGenericSend+0x42>
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <xQueueGenericSend+0x46>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <xQueueGenericSend+0x48>
 800857a:	2300      	movs	r3, #0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10b      	bne.n	8008598 <xQueueGenericSend+0x64>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008592:	bf00      	nop
 8008594:	bf00      	nop
 8008596:	e7fd      	b.n	8008594 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d103      	bne.n	80085a6 <xQueueGenericSend+0x72>
 800859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d101      	bne.n	80085aa <xQueueGenericSend+0x76>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <xQueueGenericSend+0x78>
 80085aa:	2300      	movs	r3, #0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <xQueueGenericSend+0x94>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	623b      	str	r3, [r7, #32]
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085c8:	f001 f9ce 	bl	8009968 <xTaskGetSchedulerState>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <xQueueGenericSend+0xa4>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <xQueueGenericSend+0xa8>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <xQueueGenericSend+0xaa>
 80085dc:	2300      	movs	r3, #0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10b      	bne.n	80085fa <xQueueGenericSend+0xc6>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	61fb      	str	r3, [r7, #28]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085fa:	f001 ff25 	bl	800a448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008606:	429a      	cmp	r2, r3
 8008608:	d302      	bcc.n	8008610 <xQueueGenericSend+0xdc>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d129      	bne.n	8008664 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008616:	f000 fa0f 	bl	8008a38 <prvCopyDataToQueue>
 800861a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d010      	beq.n	8008646 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	3324      	adds	r3, #36	@ 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f000 ffdd 	bl	80095e8 <xTaskRemoveFromEventList>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d013      	beq.n	800865c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008634:	4b3f      	ldr	r3, [pc, #252]	@ (8008734 <xQueueGenericSend+0x200>)
 8008636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	e00a      	b.n	800865c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800864c:	4b39      	ldr	r3, [pc, #228]	@ (8008734 <xQueueGenericSend+0x200>)
 800864e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800865c:	f001 ff26 	bl	800a4ac <vPortExitCritical>
				return pdPASS;
 8008660:	2301      	movs	r3, #1
 8008662:	e063      	b.n	800872c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d103      	bne.n	8008672 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800866a:	f001 ff1f 	bl	800a4ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800866e:	2300      	movs	r3, #0
 8008670:	e05c      	b.n	800872c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008674:	2b00      	cmp	r3, #0
 8008676:	d106      	bne.n	8008686 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008678:	f107 0314 	add.w	r3, r7, #20
 800867c:	4618      	mov	r0, r3
 800867e:	f001 f817 	bl	80096b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008682:	2301      	movs	r3, #1
 8008684:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008686:	f001 ff11 	bl	800a4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800868a:	f000 fd87 	bl	800919c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800868e:	f001 fedb 	bl	800a448 <vPortEnterCritical>
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008698:	b25b      	sxtb	r3, r3
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d103      	bne.n	80086a8 <xQueueGenericSend+0x174>
 80086a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086ae:	b25b      	sxtb	r3, r3
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b4:	d103      	bne.n	80086be <xQueueGenericSend+0x18a>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086be:	f001 fef5 	bl	800a4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086c2:	1d3a      	adds	r2, r7, #4
 80086c4:	f107 0314 	add.w	r3, r7, #20
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 f806 	bl	80096dc <xTaskCheckForTimeOut>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d124      	bne.n	8008720 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086d8:	f000 faa6 	bl	8008c28 <prvIsQueueFull>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d018      	beq.n	8008714 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	3310      	adds	r3, #16
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 ff2a 	bl	8009544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086f2:	f000 fa31 	bl	8008b58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086f6:	f000 fd5f 	bl	80091b8 <xTaskResumeAll>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f47f af7c 	bne.w	80085fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008702:	4b0c      	ldr	r3, [pc, #48]	@ (8008734 <xQueueGenericSend+0x200>)
 8008704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	e772      	b.n	80085fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008714:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008716:	f000 fa1f 	bl	8008b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800871a:	f000 fd4d 	bl	80091b8 <xTaskResumeAll>
 800871e:	e76c      	b.n	80085fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008722:	f000 fa19 	bl	8008b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008726:	f000 fd47 	bl	80091b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800872a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800872c:	4618      	mov	r0, r3
 800872e:	3738      	adds	r7, #56	@ 0x38
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b090      	sub	sp, #64	@ 0x40
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10b      	bne.n	8008768 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <xQueueGenericSendFromISR+0x3e>
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <xQueueGenericSendFromISR+0x42>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueGenericSendFromISR+0x44>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10b      	bne.n	8008798 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008792:	bf00      	nop
 8008794:	bf00      	nop
 8008796:	e7fd      	b.n	8008794 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d103      	bne.n	80087a6 <xQueueGenericSendFromISR+0x6e>
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d101      	bne.n	80087aa <xQueueGenericSendFromISR+0x72>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <xQueueGenericSendFromISR+0x74>
 80087aa:	2300      	movs	r3, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10b      	bne.n	80087c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	623b      	str	r3, [r7, #32]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087c8:	f001 ff1e 	bl	800a608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087cc:	f3ef 8211 	mrs	r2, BASEPRI
 80087d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	61fa      	str	r2, [r7, #28]
 80087e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d302      	bcc.n	80087fa <xQueueGenericSendFromISR+0xc2>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d12f      	bne.n	800885a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008808:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	68b9      	ldr	r1, [r7, #8]
 800880e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008810:	f000 f912 	bl	8008a38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008814:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d112      	bne.n	8008844 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800881e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008822:	2b00      	cmp	r3, #0
 8008824:	d016      	beq.n	8008854 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	3324      	adds	r3, #36	@ 0x24
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fedc 	bl	80095e8 <xTaskRemoveFromEventList>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e007      	b.n	8008854 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008848:	3301      	adds	r3, #1
 800884a:	b2db      	uxtb	r3, r3
 800884c:	b25a      	sxtb	r2, r3
 800884e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008858:	e001      	b.n	800885e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008860:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008868:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800886a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800886c:	4618      	mov	r0, r3
 800886e:	3740      	adds	r7, #64	@ 0x40
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08c      	sub	sp, #48	@ 0x30
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008880:	2300      	movs	r3, #0
 8008882:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <xQueueReceive+0x32>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	623b      	str	r3, [r7, #32]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d103      	bne.n	80088b4 <xQueueReceive+0x40>
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <xQueueReceive+0x44>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <xQueueReceive+0x46>
 80088b8:	2300      	movs	r3, #0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10b      	bne.n	80088d6 <xQueueReceive+0x62>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	61fb      	str	r3, [r7, #28]
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	e7fd      	b.n	80088d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088d6:	f001 f847 	bl	8009968 <xTaskGetSchedulerState>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <xQueueReceive+0x72>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <xQueueReceive+0x76>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <xQueueReceive+0x78>
 80088ea:	2300      	movs	r3, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <xQueueReceive+0x94>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	61bb      	str	r3, [r7, #24]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008908:	f001 fd9e 	bl	800a448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800890c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01f      	beq.n	8008958 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008918:	68b9      	ldr	r1, [r7, #8]
 800891a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800891c:	f000 f8f6 	bl	8008b0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	1e5a      	subs	r2, r3, #1
 8008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008926:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00f      	beq.n	8008950 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	3310      	adds	r3, #16
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fe57 	bl	80095e8 <xTaskRemoveFromEventList>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d007      	beq.n	8008950 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008940:	4b3c      	ldr	r3, [pc, #240]	@ (8008a34 <xQueueReceive+0x1c0>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008950:	f001 fdac 	bl	800a4ac <vPortExitCritical>
				return pdPASS;
 8008954:	2301      	movs	r3, #1
 8008956:	e069      	b.n	8008a2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800895e:	f001 fda5 	bl	800a4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008962:	2300      	movs	r3, #0
 8008964:	e062      	b.n	8008a2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800896c:	f107 0310 	add.w	r3, r7, #16
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fe9d 	bl	80096b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008976:	2301      	movs	r3, #1
 8008978:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800897a:	f001 fd97 	bl	800a4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800897e:	f000 fc0d 	bl	800919c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008982:	f001 fd61 	bl	800a448 <vPortEnterCritical>
 8008986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800898c:	b25b      	sxtb	r3, r3
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d103      	bne.n	800899c <xQueueReceive+0x128>
 8008994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089a2:	b25b      	sxtb	r3, r3
 80089a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a8:	d103      	bne.n	80089b2 <xQueueReceive+0x13e>
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089b2:	f001 fd7b 	bl	800a4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089b6:	1d3a      	adds	r2, r7, #4
 80089b8:	f107 0310 	add.w	r3, r7, #16
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fe8c 	bl	80096dc <xTaskCheckForTimeOut>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d123      	bne.n	8008a12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089cc:	f000 f916 	bl	8008bfc <prvIsQueueEmpty>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d017      	beq.n	8008a06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	3324      	adds	r3, #36	@ 0x24
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 fdb0 	bl	8009544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089e6:	f000 f8b7 	bl	8008b58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089ea:	f000 fbe5 	bl	80091b8 <xTaskResumeAll>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d189      	bne.n	8008908 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80089f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a34 <xQueueReceive+0x1c0>)
 80089f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	e780      	b.n	8008908 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a08:	f000 f8a6 	bl	8008b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a0c:	f000 fbd4 	bl	80091b8 <xTaskResumeAll>
 8008a10:	e77a      	b.n	8008908 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a14:	f000 f8a0 	bl	8008b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a18:	f000 fbce 	bl	80091b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a1e:	f000 f8ed 	bl	8008bfc <prvIsQueueEmpty>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f43f af6f 	beq.w	8008908 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3730      	adds	r7, #48	@ 0x30
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10d      	bne.n	8008a72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d14d      	bne.n	8008afa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 ff9e 	bl	80099a4 <xTaskPriorityDisinherit>
 8008a68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	609a      	str	r2, [r3, #8]
 8008a70:	e043      	b.n	8008afa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d119      	bne.n	8008aac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6858      	ldr	r0, [r3, #4]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	461a      	mov	r2, r3
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	f003 f81f 	bl	800bac6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a90:	441a      	add	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d32b      	bcc.n	8008afa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	605a      	str	r2, [r3, #4]
 8008aaa:	e026      	b.n	8008afa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68d8      	ldr	r0, [r3, #12]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	f003 f805 	bl	800bac6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac4:	425b      	negs	r3, r3
 8008ac6:	441a      	add	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d207      	bcs.n	8008ae8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae0:	425b      	negs	r3, r3
 8008ae2:	441a      	add	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d105      	bne.n	8008afa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008b02:	697b      	ldr	r3, [r7, #20]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d018      	beq.n	8008b50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b26:	441a      	add	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d303      	bcc.n	8008b40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68d9      	ldr	r1, [r3, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6838      	ldr	r0, [r7, #0]
 8008b4c:	f002 ffbb 	bl	800bac6 <memcpy>
	}
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b60:	f001 fc72 	bl	800a448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b6c:	e011      	b.n	8008b92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d012      	beq.n	8008b9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3324      	adds	r3, #36	@ 0x24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fd34 	bl	80095e8 <xTaskRemoveFromEventList>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b86:	f000 fe0d 	bl	80097a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	dce9      	bgt.n	8008b6e <prvUnlockQueue+0x16>
 8008b9a:	e000      	b.n	8008b9e <prvUnlockQueue+0x46>
					break;
 8008b9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	22ff      	movs	r2, #255	@ 0xff
 8008ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ba6:	f001 fc81 	bl	800a4ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008baa:	f001 fc4d 	bl	800a448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bb6:	e011      	b.n	8008bdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d012      	beq.n	8008be6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3310      	adds	r3, #16
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fd0f 	bl	80095e8 <xTaskRemoveFromEventList>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bd0:	f000 fde8 	bl	80097a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dce9      	bgt.n	8008bb8 <prvUnlockQueue+0x60>
 8008be4:	e000      	b.n	8008be8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008be6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	22ff      	movs	r2, #255	@ 0xff
 8008bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008bf0:	f001 fc5c 	bl	800a4ac <vPortExitCritical>
}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c04:	f001 fc20 	bl	800a448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c10:	2301      	movs	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	e001      	b.n	8008c1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c1a:	f001 fc47 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c30:	f001 fc0a 	bl	800a448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d102      	bne.n	8008c46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e001      	b.n	8008c4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c4a:	f001 fc2f 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	e014      	b.n	8008c92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c68:	4a0f      	ldr	r2, [pc, #60]	@ (8008ca8 <vQueueAddToRegistry+0x50>)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c74:	490c      	ldr	r1, [pc, #48]	@ (8008ca8 <vQueueAddToRegistry+0x50>)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca8 <vQueueAddToRegistry+0x50>)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4413      	add	r3, r2
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c8a:	e006      	b.n	8008c9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b07      	cmp	r3, #7
 8008c96:	d9e7      	bls.n	8008c68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20000b68 	.word	0x20000b68

08008cac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cbc:	f001 fbc4 	bl	800a448 <vPortEnterCritical>
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cc6:	b25b      	sxtb	r3, r3
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d103      	bne.n	8008cd6 <vQueueWaitForMessageRestricted+0x2a>
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cdc:	b25b      	sxtb	r3, r3
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d103      	bne.n	8008cec <vQueueWaitForMessageRestricted+0x40>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cec:	f001 fbde 	bl	800a4ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	3324      	adds	r3, #36	@ 0x24
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fc45 	bl	8009590 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d06:	6978      	ldr	r0, [r7, #20]
 8008d08:	f7ff ff26 	bl	8008b58 <prvUnlockQueue>
	}
 8008d0c:	bf00      	nop
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08e      	sub	sp, #56	@ 0x38
 8008d18:	af04      	add	r7, sp, #16
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10b      	bne.n	8008d40 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	623b      	str	r3, [r7, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	61fb      	str	r3, [r7, #28]
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	e7fd      	b.n	8008d5a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d5e:	235c      	movs	r3, #92	@ 0x5c
 8008d60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d66:	d00b      	beq.n	8008d80 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	61bb      	str	r3, [r7, #24]
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01e      	beq.n	8008dc6 <xTaskCreateStatic+0xb2>
 8008d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01b      	beq.n	8008dc6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008da0:	2300      	movs	r3, #0
 8008da2:	9303      	str	r3, [sp, #12]
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	9302      	str	r3, [sp, #8]
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 f850 	bl	8008e5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008dc0:	f000 f8de 	bl	8008f80 <prvAddNewTaskToReadyList>
 8008dc4:	e001      	b.n	8008dca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008dca:	697b      	ldr	r3, [r7, #20]
	}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3728      	adds	r7, #40	@ 0x28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08c      	sub	sp, #48	@ 0x30
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 fc4f 	bl	800a68c <pvPortMalloc>
 8008dee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00e      	beq.n	8008e14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008df6:	205c      	movs	r0, #92	@ 0x5c
 8008df8:	f001 fc48 	bl	800a68c <pvPortMalloc>
 8008dfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e0a:	e005      	b.n	8008e18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e0c:	6978      	ldr	r0, [r7, #20]
 8008e0e:	f001 fd0b 	bl	800a828 <vPortFree>
 8008e12:	e001      	b.n	8008e18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d017      	beq.n	8008e4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e26:	88fa      	ldrh	r2, [r7, #6]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f80e 	bl	8008e5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e42:	69f8      	ldr	r0, [r7, #28]
 8008e44:	f000 f89c 	bl	8008f80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	61bb      	str	r3, [r7, #24]
 8008e4c:	e002      	b.n	8008e54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e54:	69bb      	ldr	r3, [r7, #24]
	}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3720      	adds	r7, #32
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b088      	sub	sp, #32
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	461a      	mov	r2, r3
 8008e76:	21a5      	movs	r1, #165	@ 0xa5
 8008e78:	f002 fda5 	bl	800b9c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e86:	3b01      	subs	r3, #1
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	f023 0307 	bic.w	r3, r3, #7
 8008e94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	617b      	str	r3, [r7, #20]
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	e7fd      	b.n	8008eb4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d01f      	beq.n	8008efe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	e012      	b.n	8008eea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	7819      	ldrb	r1, [r3, #0]
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3334      	adds	r3, #52	@ 0x34
 8008ed4:	460a      	mov	r2, r1
 8008ed6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	4413      	add	r3, r2
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d006      	beq.n	8008ef2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	61fb      	str	r3, [r7, #28]
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	2b0f      	cmp	r3, #15
 8008eee:	d9e9      	bls.n	8008ec4 <prvInitialiseNewTask+0x66>
 8008ef0:	e000      	b.n	8008ef4 <prvInitialiseNewTask+0x96>
			{
				break;
 8008ef2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008efc:	e003      	b.n	8008f06 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f08:	2b37      	cmp	r3, #55	@ 0x37
 8008f0a:	d901      	bls.n	8008f10 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f0c:	2337      	movs	r3, #55	@ 0x37
 8008f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f1a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1e:	2200      	movs	r2, #0
 8008f20:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	3304      	adds	r3, #4
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff f966 	bl	80081f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	3318      	adds	r3, #24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff f961 	bl	80081f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	2200      	movs	r2, #0
 8008f50:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	68f9      	ldr	r1, [r7, #12]
 8008f5e:	69b8      	ldr	r0, [r7, #24]
 8008f60:	f001 f93e 	bl	800a1e0 <pxPortInitialiseStack>
 8008f64:	4602      	mov	r2, r0
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f76:	bf00      	nop
 8008f78:	3720      	adds	r7, #32
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f88:	f001 fa5e 	bl	800a448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8009044 <prvAddNewTaskToReadyList+0xc4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	4a2c      	ldr	r2, [pc, #176]	@ (8009044 <prvAddNewTaskToReadyList+0xc4>)
 8008f94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f96:	4b2c      	ldr	r3, [pc, #176]	@ (8009048 <prvAddNewTaskToReadyList+0xc8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d109      	bne.n	8008fb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8009048 <prvAddNewTaskToReadyList+0xc8>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fa4:	4b27      	ldr	r3, [pc, #156]	@ (8009044 <prvAddNewTaskToReadyList+0xc4>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d110      	bne.n	8008fce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fac:	f000 fc1e 	bl	80097ec <prvInitialiseTaskLists>
 8008fb0:	e00d      	b.n	8008fce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fb2:	4b26      	ldr	r3, [pc, #152]	@ (800904c <prvAddNewTaskToReadyList+0xcc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fba:	4b23      	ldr	r3, [pc, #140]	@ (8009048 <prvAddNewTaskToReadyList+0xc8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d802      	bhi.n	8008fce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8009048 <prvAddNewTaskToReadyList+0xc8>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fce:	4b20      	ldr	r3, [pc, #128]	@ (8009050 <prvAddNewTaskToReadyList+0xd0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8009050 <prvAddNewTaskToReadyList+0xd0>)
 8008fd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009050 <prvAddNewTaskToReadyList+0xd0>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8009054 <prvAddNewTaskToReadyList+0xd4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d903      	bls.n	8008ff4 <prvAddNewTaskToReadyList+0x74>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff0:	4a18      	ldr	r2, [pc, #96]	@ (8009054 <prvAddNewTaskToReadyList+0xd4>)
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4a15      	ldr	r2, [pc, #84]	@ (8009058 <prvAddNewTaskToReadyList+0xd8>)
 8009002:	441a      	add	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f7ff f901 	bl	8008212 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009010:	f001 fa4c 	bl	800a4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009014:	4b0d      	ldr	r3, [pc, #52]	@ (800904c <prvAddNewTaskToReadyList+0xcc>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00e      	beq.n	800903a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800901c:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <prvAddNewTaskToReadyList+0xc8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009026:	429a      	cmp	r2, r3
 8009028:	d207      	bcs.n	800903a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800902a:	4b0c      	ldr	r3, [pc, #48]	@ (800905c <prvAddNewTaskToReadyList+0xdc>)
 800902c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	2000107c 	.word	0x2000107c
 8009048:	20000ba8 	.word	0x20000ba8
 800904c:	20001088 	.word	0x20001088
 8009050:	20001098 	.word	0x20001098
 8009054:	20001084 	.word	0x20001084
 8009058:	20000bac 	.word	0x20000bac
 800905c:	e000ed04 	.word	0xe000ed04

08009060 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009068:	2300      	movs	r3, #0
 800906a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d018      	beq.n	80090a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009072:	4b14      	ldr	r3, [pc, #80]	@ (80090c4 <vTaskDelay+0x64>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <vTaskDelay+0x32>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	60bb      	str	r3, [r7, #8]
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009092:	f000 f883 	bl	800919c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009096:	2100      	movs	r1, #0
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fcf3 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800909e:	f000 f88b 	bl	80091b8 <xTaskResumeAll>
 80090a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d107      	bne.n	80090ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80090aa:	4b07      	ldr	r3, [pc, #28]	@ (80090c8 <vTaskDelay+0x68>)
 80090ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090ba:	bf00      	nop
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200010a4 	.word	0x200010a4
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08a      	sub	sp, #40	@ 0x28
 80090d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090da:	463a      	mov	r2, r7
 80090dc:	1d39      	adds	r1, r7, #4
 80090de:	f107 0308 	add.w	r3, r7, #8
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff f834 	bl	8008150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	9202      	str	r2, [sp, #8]
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	2300      	movs	r3, #0
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	2300      	movs	r3, #0
 80090f8:	460a      	mov	r2, r1
 80090fa:	4922      	ldr	r1, [pc, #136]	@ (8009184 <vTaskStartScheduler+0xb8>)
 80090fc:	4822      	ldr	r0, [pc, #136]	@ (8009188 <vTaskStartScheduler+0xbc>)
 80090fe:	f7ff fe09 	bl	8008d14 <xTaskCreateStatic>
 8009102:	4603      	mov	r3, r0
 8009104:	4a21      	ldr	r2, [pc, #132]	@ (800918c <vTaskStartScheduler+0xc0>)
 8009106:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009108:	4b20      	ldr	r3, [pc, #128]	@ (800918c <vTaskStartScheduler+0xc0>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009110:	2301      	movs	r3, #1
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	e001      	b.n	800911a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d102      	bne.n	8009126 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009120:	f000 fd04 	bl	8009b2c <xTimerCreateTimerTask>
 8009124:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d116      	bne.n	800915a <vTaskStartScheduler+0x8e>
	__asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	613b      	str	r3, [r7, #16]
}
 800913e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009140:	4b13      	ldr	r3, [pc, #76]	@ (8009190 <vTaskStartScheduler+0xc4>)
 8009142:	f04f 32ff 	mov.w	r2, #4294967295
 8009146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009148:	4b12      	ldr	r3, [pc, #72]	@ (8009194 <vTaskStartScheduler+0xc8>)
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800914e:	4b12      	ldr	r3, [pc, #72]	@ (8009198 <vTaskStartScheduler+0xcc>)
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009154:	f001 f8d4 	bl	800a300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009158:	e00f      	b.n	800917a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d10b      	bne.n	800917a <vTaskStartScheduler+0xae>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	60fb      	str	r3, [r7, #12]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <vTaskStartScheduler+0xaa>
}
 800917a:	bf00      	nop
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	0800dc48 	.word	0x0800dc48
 8009188:	080097bd 	.word	0x080097bd
 800918c:	200010a0 	.word	0x200010a0
 8009190:	2000109c 	.word	0x2000109c
 8009194:	20001088 	.word	0x20001088
 8009198:	20001080 	.word	0x20001080

0800919c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091a0:	4b04      	ldr	r3, [pc, #16]	@ (80091b4 <vTaskSuspendAll+0x18>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	4a03      	ldr	r2, [pc, #12]	@ (80091b4 <vTaskSuspendAll+0x18>)
 80091a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091aa:	bf00      	nop
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	200010a4 	.word	0x200010a4

080091b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091c6:	4b42      	ldr	r3, [pc, #264]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	603b      	str	r3, [r7, #0]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091e6:	f001 f92f 	bl	800a448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091ea:	4b39      	ldr	r3, [pc, #228]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	4a37      	ldr	r2, [pc, #220]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091f4:	4b36      	ldr	r3, [pc, #216]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d162      	bne.n	80092c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091fc:	4b35      	ldr	r3, [pc, #212]	@ (80092d4 <xTaskResumeAll+0x11c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d05e      	beq.n	80092c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009204:	e02f      	b.n	8009266 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009206:	4b34      	ldr	r3, [pc, #208]	@ (80092d8 <xTaskResumeAll+0x120>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3318      	adds	r3, #24
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff f85a 	bl	80082cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff f855 	bl	80082cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009226:	4b2d      	ldr	r3, [pc, #180]	@ (80092dc <xTaskResumeAll+0x124>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d903      	bls.n	8009236 <xTaskResumeAll+0x7e>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009232:	4a2a      	ldr	r2, [pc, #168]	@ (80092dc <xTaskResumeAll+0x124>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4a27      	ldr	r2, [pc, #156]	@ (80092e0 <xTaskResumeAll+0x128>)
 8009244:	441a      	add	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3304      	adds	r3, #4
 800924a:	4619      	mov	r1, r3
 800924c:	4610      	mov	r0, r2
 800924e:	f7fe ffe0 	bl	8008212 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009256:	4b23      	ldr	r3, [pc, #140]	@ (80092e4 <xTaskResumeAll+0x12c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925c:	429a      	cmp	r2, r3
 800925e:	d302      	bcc.n	8009266 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009260:	4b21      	ldr	r3, [pc, #132]	@ (80092e8 <xTaskResumeAll+0x130>)
 8009262:	2201      	movs	r2, #1
 8009264:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009266:	4b1c      	ldr	r3, [pc, #112]	@ (80092d8 <xTaskResumeAll+0x120>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1cb      	bne.n	8009206 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009274:	f000 fb58 	bl	8009928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009278:	4b1c      	ldr	r3, [pc, #112]	@ (80092ec <xTaskResumeAll+0x134>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d010      	beq.n	80092a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009284:	f000 f846 	bl	8009314 <xTaskIncrementTick>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800928e:	4b16      	ldr	r3, [pc, #88]	@ (80092e8 <xTaskResumeAll+0x130>)
 8009290:	2201      	movs	r2, #1
 8009292:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3b01      	subs	r3, #1
 8009298:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1f1      	bne.n	8009284 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80092a0:	4b12      	ldr	r3, [pc, #72]	@ (80092ec <xTaskResumeAll+0x134>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092a6:	4b10      	ldr	r3, [pc, #64]	@ (80092e8 <xTaskResumeAll+0x130>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d009      	beq.n	80092c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092ae:	2301      	movs	r3, #1
 80092b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092b2:	4b0f      	ldr	r3, [pc, #60]	@ (80092f0 <xTaskResumeAll+0x138>)
 80092b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092c2:	f001 f8f3 	bl	800a4ac <vPortExitCritical>

	return xAlreadyYielded;
 80092c6:	68bb      	ldr	r3, [r7, #8]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	200010a4 	.word	0x200010a4
 80092d4:	2000107c 	.word	0x2000107c
 80092d8:	2000103c 	.word	0x2000103c
 80092dc:	20001084 	.word	0x20001084
 80092e0:	20000bac 	.word	0x20000bac
 80092e4:	20000ba8 	.word	0x20000ba8
 80092e8:	20001090 	.word	0x20001090
 80092ec:	2000108c 	.word	0x2000108c
 80092f0:	e000ed04 	.word	0xe000ed04

080092f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092fa:	4b05      	ldr	r3, [pc, #20]	@ (8009310 <xTaskGetTickCount+0x1c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009300:	687b      	ldr	r3, [r7, #4]
}
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20001080 	.word	0x20001080

08009314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800931e:	4b4f      	ldr	r3, [pc, #316]	@ (800945c <xTaskIncrementTick+0x148>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f040 8090 	bne.w	8009448 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009328:	4b4d      	ldr	r3, [pc, #308]	@ (8009460 <xTaskIncrementTick+0x14c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3301      	adds	r3, #1
 800932e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009330:	4a4b      	ldr	r2, [pc, #300]	@ (8009460 <xTaskIncrementTick+0x14c>)
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d121      	bne.n	8009380 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800933c:	4b49      	ldr	r3, [pc, #292]	@ (8009464 <xTaskIncrementTick+0x150>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00b      	beq.n	800935e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	603b      	str	r3, [r7, #0]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <xTaskIncrementTick+0x46>
 800935e:	4b41      	ldr	r3, [pc, #260]	@ (8009464 <xTaskIncrementTick+0x150>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	4b40      	ldr	r3, [pc, #256]	@ (8009468 <xTaskIncrementTick+0x154>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a3e      	ldr	r2, [pc, #248]	@ (8009464 <xTaskIncrementTick+0x150>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	4a3e      	ldr	r2, [pc, #248]	@ (8009468 <xTaskIncrementTick+0x154>)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4b3e      	ldr	r3, [pc, #248]	@ (800946c <xTaskIncrementTick+0x158>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3301      	adds	r3, #1
 8009378:	4a3c      	ldr	r2, [pc, #240]	@ (800946c <xTaskIncrementTick+0x158>)
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	f000 fad4 	bl	8009928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009380:	4b3b      	ldr	r3, [pc, #236]	@ (8009470 <xTaskIncrementTick+0x15c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	429a      	cmp	r2, r3
 8009388:	d349      	bcc.n	800941e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800938a:	4b36      	ldr	r3, [pc, #216]	@ (8009464 <xTaskIncrementTick+0x150>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009394:	4b36      	ldr	r3, [pc, #216]	@ (8009470 <xTaskIncrementTick+0x15c>)
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	601a      	str	r2, [r3, #0]
					break;
 800939c:	e03f      	b.n	800941e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939e:	4b31      	ldr	r3, [pc, #196]	@ (8009464 <xTaskIncrementTick+0x150>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d203      	bcs.n	80093be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009470 <xTaskIncrementTick+0x15c>)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093bc:	e02f      	b.n	800941e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe ff82 	bl	80082cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	3318      	adds	r3, #24
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe ff79 	bl	80082cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093de:	4b25      	ldr	r3, [pc, #148]	@ (8009474 <xTaskIncrementTick+0x160>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d903      	bls.n	80093ee <xTaskIncrementTick+0xda>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ea:	4a22      	ldr	r2, [pc, #136]	@ (8009474 <xTaskIncrementTick+0x160>)
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009478 <xTaskIncrementTick+0x164>)
 80093fc:	441a      	add	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	3304      	adds	r3, #4
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f7fe ff04 	bl	8008212 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940e:	4b1b      	ldr	r3, [pc, #108]	@ (800947c <xTaskIncrementTick+0x168>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	429a      	cmp	r2, r3
 8009416:	d3b8      	bcc.n	800938a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800941c:	e7b5      	b.n	800938a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800941e:	4b17      	ldr	r3, [pc, #92]	@ (800947c <xTaskIncrementTick+0x168>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009424:	4914      	ldr	r1, [pc, #80]	@ (8009478 <xTaskIncrementTick+0x164>)
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	440b      	add	r3, r1
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d901      	bls.n	800943a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009436:	2301      	movs	r3, #1
 8009438:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800943a:	4b11      	ldr	r3, [pc, #68]	@ (8009480 <xTaskIncrementTick+0x16c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d007      	beq.n	8009452 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009442:	2301      	movs	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	e004      	b.n	8009452 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009448:	4b0e      	ldr	r3, [pc, #56]	@ (8009484 <xTaskIncrementTick+0x170>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	4a0d      	ldr	r2, [pc, #52]	@ (8009484 <xTaskIncrementTick+0x170>)
 8009450:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009452:	697b      	ldr	r3, [r7, #20]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	200010a4 	.word	0x200010a4
 8009460:	20001080 	.word	0x20001080
 8009464:	20001034 	.word	0x20001034
 8009468:	20001038 	.word	0x20001038
 800946c:	20001094 	.word	0x20001094
 8009470:	2000109c 	.word	0x2000109c
 8009474:	20001084 	.word	0x20001084
 8009478:	20000bac 	.word	0x20000bac
 800947c:	20000ba8 	.word	0x20000ba8
 8009480:	20001090 	.word	0x20001090
 8009484:	2000108c 	.word	0x2000108c

08009488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800948e:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <vTaskSwitchContext+0xa8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009496:	4b27      	ldr	r3, [pc, #156]	@ (8009534 <vTaskSwitchContext+0xac>)
 8009498:	2201      	movs	r2, #1
 800949a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800949c:	e042      	b.n	8009524 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800949e:	4b25      	ldr	r3, [pc, #148]	@ (8009534 <vTaskSwitchContext+0xac>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a4:	4b24      	ldr	r3, [pc, #144]	@ (8009538 <vTaskSwitchContext+0xb0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	e011      	b.n	80094d0 <vTaskSwitchContext+0x48>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10b      	bne.n	80094ca <vTaskSwitchContext+0x42>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	607b      	str	r3, [r7, #4]
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	e7fd      	b.n	80094c6 <vTaskSwitchContext+0x3e>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	491a      	ldr	r1, [pc, #104]	@ (800953c <vTaskSwitchContext+0xb4>)
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0e3      	beq.n	80094ac <vTaskSwitchContext+0x24>
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4a13      	ldr	r2, [pc, #76]	@ (800953c <vTaskSwitchContext+0xb4>)
 80094f0:	4413      	add	r3, r2
 80094f2:	60bb      	str	r3, [r7, #8]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	605a      	str	r2, [r3, #4]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	3308      	adds	r3, #8
 8009506:	429a      	cmp	r2, r3
 8009508:	d104      	bne.n	8009514 <vTaskSwitchContext+0x8c>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	605a      	str	r2, [r3, #4]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	4a09      	ldr	r2, [pc, #36]	@ (8009540 <vTaskSwitchContext+0xb8>)
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	4a06      	ldr	r2, [pc, #24]	@ (8009538 <vTaskSwitchContext+0xb0>)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6013      	str	r3, [r2, #0]
}
 8009524:	bf00      	nop
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	200010a4 	.word	0x200010a4
 8009534:	20001090 	.word	0x20001090
 8009538:	20001084 	.word	0x20001084
 800953c:	20000bac 	.word	0x20000bac
 8009540:	20000ba8 	.word	0x20000ba8

08009544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10b      	bne.n	800956c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60fb      	str	r3, [r7, #12]
}
 8009566:	bf00      	nop
 8009568:	bf00      	nop
 800956a:	e7fd      	b.n	8009568 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800956c:	4b07      	ldr	r3, [pc, #28]	@ (800958c <vTaskPlaceOnEventList+0x48>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3318      	adds	r3, #24
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7fe fe70 	bl	800825a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800957a:	2101      	movs	r1, #1
 800957c:	6838      	ldr	r0, [r7, #0]
 800957e:	f000 fa81 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000ba8 	.word	0x20000ba8

08009590 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	617b      	str	r3, [r7, #20]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095ba:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3318      	adds	r3, #24
 80095c0:	4619      	mov	r1, r3
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7fe fe25 	bl	8008212 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
 80095d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	68b8      	ldr	r0, [r7, #8]
 80095d8:	f000 fa54 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
	}
 80095dc:	bf00      	nop
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000ba8 	.word	0x20000ba8

080095e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10b      	bne.n	8009616 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60fb      	str	r3, [r7, #12]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	3318      	adds	r3, #24
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fe56 	bl	80082cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009620:	4b1d      	ldr	r3, [pc, #116]	@ (8009698 <xTaskRemoveFromEventList+0xb0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d11d      	bne.n	8009664 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	3304      	adds	r3, #4
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe fe4d 	bl	80082cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009636:	4b19      	ldr	r3, [pc, #100]	@ (800969c <xTaskRemoveFromEventList+0xb4>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d903      	bls.n	8009646 <xTaskRemoveFromEventList+0x5e>
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	4a16      	ldr	r2, [pc, #88]	@ (800969c <xTaskRemoveFromEventList+0xb4>)
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4a13      	ldr	r2, [pc, #76]	@ (80096a0 <xTaskRemoveFromEventList+0xb8>)
 8009654:	441a      	add	r2, r3
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	3304      	adds	r3, #4
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f7fe fdd8 	bl	8008212 <vListInsertEnd>
 8009662:	e005      	b.n	8009670 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	3318      	adds	r3, #24
 8009668:	4619      	mov	r1, r3
 800966a:	480e      	ldr	r0, [pc, #56]	@ (80096a4 <xTaskRemoveFromEventList+0xbc>)
 800966c:	f7fe fdd1 	bl	8008212 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009674:	4b0c      	ldr	r3, [pc, #48]	@ (80096a8 <xTaskRemoveFromEventList+0xc0>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967a:	429a      	cmp	r2, r3
 800967c:	d905      	bls.n	800968a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800967e:	2301      	movs	r3, #1
 8009680:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009682:	4b0a      	ldr	r3, [pc, #40]	@ (80096ac <xTaskRemoveFromEventList+0xc4>)
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e001      	b.n	800968e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800968a:	2300      	movs	r3, #0
 800968c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800968e:	697b      	ldr	r3, [r7, #20]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	200010a4 	.word	0x200010a4
 800969c:	20001084 	.word	0x20001084
 80096a0:	20000bac 	.word	0x20000bac
 80096a4:	2000103c 	.word	0x2000103c
 80096a8:	20000ba8 	.word	0x20000ba8
 80096ac:	20001090 	.word	0x20001090

080096b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096b8:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <vTaskInternalSetTimeOutState+0x24>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096c0:	4b05      	ldr	r3, [pc, #20]	@ (80096d8 <vTaskInternalSetTimeOutState+0x28>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	605a      	str	r2, [r3, #4]
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	20001094 	.word	0x20001094
 80096d8:	20001080 	.word	0x20001080

080096dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10b      	bne.n	8009704 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	613b      	str	r3, [r7, #16]
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	e7fd      	b.n	8009700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	60fb      	str	r3, [r7, #12]
}
 800971c:	bf00      	nop
 800971e:	bf00      	nop
 8009720:	e7fd      	b.n	800971e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009722:	f000 fe91 	bl	800a448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009726:	4b1d      	ldr	r3, [pc, #116]	@ (800979c <xTaskCheckForTimeOut+0xc0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	69ba      	ldr	r2, [r7, #24]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973e:	d102      	bne.n	8009746 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	e023      	b.n	800978e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	4b15      	ldr	r3, [pc, #84]	@ (80097a0 <xTaskCheckForTimeOut+0xc4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d007      	beq.n	8009762 <xTaskCheckForTimeOut+0x86>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	429a      	cmp	r2, r3
 800975a:	d302      	bcc.n	8009762 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800975c:	2301      	movs	r3, #1
 800975e:	61fb      	str	r3, [r7, #28]
 8009760:	e015      	b.n	800978e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	429a      	cmp	r2, r3
 800976a:	d20b      	bcs.n	8009784 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	1ad2      	subs	r2, r2, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff ff99 	bl	80096b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	e004      	b.n	800978e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800978a:	2301      	movs	r3, #1
 800978c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800978e:	f000 fe8d 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8009792:	69fb      	ldr	r3, [r7, #28]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3720      	adds	r7, #32
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20001080 	.word	0x20001080
 80097a0:	20001094 	.word	0x20001094

080097a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097a8:	4b03      	ldr	r3, [pc, #12]	@ (80097b8 <vTaskMissedYield+0x14>)
 80097aa:	2201      	movs	r2, #1
 80097ac:	601a      	str	r2, [r3, #0]
}
 80097ae:	bf00      	nop
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	20001090 	.word	0x20001090

080097bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097c4:	f000 f852 	bl	800986c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097c8:	4b06      	ldr	r3, [pc, #24]	@ (80097e4 <prvIdleTask+0x28>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d9f9      	bls.n	80097c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097d0:	4b05      	ldr	r3, [pc, #20]	@ (80097e8 <prvIdleTask+0x2c>)
 80097d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097e0:	e7f0      	b.n	80097c4 <prvIdleTask+0x8>
 80097e2:	bf00      	nop
 80097e4:	20000bac 	.word	0x20000bac
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097f2:	2300      	movs	r3, #0
 80097f4:	607b      	str	r3, [r7, #4]
 80097f6:	e00c      	b.n	8009812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4a12      	ldr	r2, [pc, #72]	@ (800984c <prvInitialiseTaskLists+0x60>)
 8009804:	4413      	add	r3, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe fcd6 	bl	80081b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3301      	adds	r3, #1
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b37      	cmp	r3, #55	@ 0x37
 8009816:	d9ef      	bls.n	80097f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009818:	480d      	ldr	r0, [pc, #52]	@ (8009850 <prvInitialiseTaskLists+0x64>)
 800981a:	f7fe fccd 	bl	80081b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800981e:	480d      	ldr	r0, [pc, #52]	@ (8009854 <prvInitialiseTaskLists+0x68>)
 8009820:	f7fe fcca 	bl	80081b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009824:	480c      	ldr	r0, [pc, #48]	@ (8009858 <prvInitialiseTaskLists+0x6c>)
 8009826:	f7fe fcc7 	bl	80081b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800982a:	480c      	ldr	r0, [pc, #48]	@ (800985c <prvInitialiseTaskLists+0x70>)
 800982c:	f7fe fcc4 	bl	80081b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009830:	480b      	ldr	r0, [pc, #44]	@ (8009860 <prvInitialiseTaskLists+0x74>)
 8009832:	f7fe fcc1 	bl	80081b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <prvInitialiseTaskLists+0x78>)
 8009838:	4a05      	ldr	r2, [pc, #20]	@ (8009850 <prvInitialiseTaskLists+0x64>)
 800983a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800983c:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <prvInitialiseTaskLists+0x7c>)
 800983e:	4a05      	ldr	r2, [pc, #20]	@ (8009854 <prvInitialiseTaskLists+0x68>)
 8009840:	601a      	str	r2, [r3, #0]
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000bac 	.word	0x20000bac
 8009850:	2000100c 	.word	0x2000100c
 8009854:	20001020 	.word	0x20001020
 8009858:	2000103c 	.word	0x2000103c
 800985c:	20001050 	.word	0x20001050
 8009860:	20001068 	.word	0x20001068
 8009864:	20001034 	.word	0x20001034
 8009868:	20001038 	.word	0x20001038

0800986c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009872:	e019      	b.n	80098a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009874:	f000 fde8 	bl	800a448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009878:	4b10      	ldr	r3, [pc, #64]	@ (80098bc <prvCheckTasksWaitingTermination+0x50>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3304      	adds	r3, #4
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fd21 	bl	80082cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800988a:	4b0d      	ldr	r3, [pc, #52]	@ (80098c0 <prvCheckTasksWaitingTermination+0x54>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3b01      	subs	r3, #1
 8009890:	4a0b      	ldr	r2, [pc, #44]	@ (80098c0 <prvCheckTasksWaitingTermination+0x54>)
 8009892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009894:	4b0b      	ldr	r3, [pc, #44]	@ (80098c4 <prvCheckTasksWaitingTermination+0x58>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3b01      	subs	r3, #1
 800989a:	4a0a      	ldr	r2, [pc, #40]	@ (80098c4 <prvCheckTasksWaitingTermination+0x58>)
 800989c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800989e:	f000 fe05 	bl	800a4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f810 	bl	80098c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098a8:	4b06      	ldr	r3, [pc, #24]	@ (80098c4 <prvCheckTasksWaitingTermination+0x58>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e1      	bne.n	8009874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20001050 	.word	0x20001050
 80098c0:	2000107c 	.word	0x2000107c
 80098c4:	20001064 	.word	0x20001064

080098c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d108      	bne.n	80098ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 ffa2 	bl	800a828 <vPortFree>
				vPortFree( pxTCB );
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 ff9f 	bl	800a828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098ea:	e019      	b.n	8009920 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d103      	bne.n	80098fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 ff96 	bl	800a828 <vPortFree>
	}
 80098fc:	e010      	b.n	8009920 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009904:	2b02      	cmp	r3, #2
 8009906:	d00b      	beq.n	8009920 <prvDeleteTCB+0x58>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60fb      	str	r3, [r7, #12]
}
 800991a:	bf00      	nop
 800991c:	bf00      	nop
 800991e:	e7fd      	b.n	800991c <prvDeleteTCB+0x54>
	}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800992e:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <prvResetNextTaskUnblockTime+0x38>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009938:	4b0a      	ldr	r3, [pc, #40]	@ (8009964 <prvResetNextTaskUnblockTime+0x3c>)
 800993a:	f04f 32ff 	mov.w	r2, #4294967295
 800993e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009940:	e008      	b.n	8009954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009942:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <prvResetNextTaskUnblockTime+0x38>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4a04      	ldr	r2, [pc, #16]	@ (8009964 <prvResetNextTaskUnblockTime+0x3c>)
 8009952:	6013      	str	r3, [r2, #0]
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	20001034 	.word	0x20001034
 8009964:	2000109c 	.word	0x2000109c

08009968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800996e:	4b0b      	ldr	r3, [pc, #44]	@ (800999c <xTaskGetSchedulerState+0x34>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d102      	bne.n	800997c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009976:	2301      	movs	r3, #1
 8009978:	607b      	str	r3, [r7, #4]
 800997a:	e008      	b.n	800998e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800997c:	4b08      	ldr	r3, [pc, #32]	@ (80099a0 <xTaskGetSchedulerState+0x38>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009984:	2302      	movs	r3, #2
 8009986:	607b      	str	r3, [r7, #4]
 8009988:	e001      	b.n	800998e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800998a:	2300      	movs	r3, #0
 800998c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800998e:	687b      	ldr	r3, [r7, #4]
	}
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	20001088 	.word	0x20001088
 80099a0:	200010a4 	.word	0x200010a4

080099a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d058      	beq.n	8009a6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009a78 <xTaskPriorityDisinherit+0xd4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d00b      	beq.n	80099dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	60fb      	str	r3, [r7, #12]
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	e7fd      	b.n	80099d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60bb      	str	r3, [r7, #8]
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a00:	1e5a      	subs	r2, r3, #1
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d02c      	beq.n	8009a6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d128      	bne.n	8009a6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fc54 	bl	80082cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a7c <xTaskPriorityDisinherit+0xd8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d903      	bls.n	8009a4c <xTaskPriorityDisinherit+0xa8>
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a48:	4a0c      	ldr	r2, [pc, #48]	@ (8009a7c <xTaskPriorityDisinherit+0xd8>)
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4a09      	ldr	r2, [pc, #36]	@ (8009a80 <xTaskPriorityDisinherit+0xdc>)
 8009a5a:	441a      	add	r2, r3
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7fe fbd5 	bl	8008212 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a6c:	697b      	ldr	r3, [r7, #20]
	}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20000ba8 	.word	0x20000ba8
 8009a7c:	20001084 	.word	0x20001084
 8009a80:	20000bac 	.word	0x20000bac

08009a84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a8e:	4b21      	ldr	r3, [pc, #132]	@ (8009b14 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a94:	4b20      	ldr	r3, [pc, #128]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fc16 	bl	80082cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa6:	d10a      	bne.n	8009abe <prvAddCurrentTaskToDelayedList+0x3a>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d007      	beq.n	8009abe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aae:	4b1a      	ldr	r3, [pc, #104]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4819      	ldr	r0, [pc, #100]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ab8:	f7fe fbab 	bl	8008212 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009abc:	e026      	b.n	8009b0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ac6:	4b14      	ldr	r3, [pc, #80]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d209      	bcs.n	8009aea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ad6:	4b12      	ldr	r3, [pc, #72]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	4b0f      	ldr	r3, [pc, #60]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fe fbb9 	bl	800825a <vListInsert>
}
 8009ae8:	e010      	b.n	8009b0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aea:	4b0e      	ldr	r3, [pc, #56]	@ (8009b24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	4610      	mov	r0, r2
 8009af8:	f7fe fbaf 	bl	800825a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d202      	bcs.n	8009b0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b06:	4a08      	ldr	r2, [pc, #32]	@ (8009b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6013      	str	r3, [r2, #0]
}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20001080 	.word	0x20001080
 8009b18:	20000ba8 	.word	0x20000ba8
 8009b1c:	20001068 	.word	0x20001068
 8009b20:	20001038 	.word	0x20001038
 8009b24:	20001034 	.word	0x20001034
 8009b28:	2000109c 	.word	0x2000109c

08009b2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	@ 0x28
 8009b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b36:	f000 fb13 	bl	800a160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb0 <xTimerCreateTimerTask+0x84>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d021      	beq.n	8009b86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b4a:	1d3a      	adds	r2, r7, #4
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	f107 030c 	add.w	r3, r7, #12
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fb15 	bl	8008184 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	9202      	str	r2, [sp, #8]
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	2302      	movs	r3, #2
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	460a      	mov	r2, r1
 8009b6c:	4911      	ldr	r1, [pc, #68]	@ (8009bb4 <xTimerCreateTimerTask+0x88>)
 8009b6e:	4812      	ldr	r0, [pc, #72]	@ (8009bb8 <xTimerCreateTimerTask+0x8c>)
 8009b70:	f7ff f8d0 	bl	8008d14 <xTaskCreateStatic>
 8009b74:	4603      	mov	r3, r0
 8009b76:	4a11      	ldr	r2, [pc, #68]	@ (8009bbc <xTimerCreateTimerTask+0x90>)
 8009b78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b7a:	4b10      	ldr	r3, [pc, #64]	@ (8009bbc <xTimerCreateTimerTask+0x90>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b82:	2301      	movs	r3, #1
 8009b84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	613b      	str	r3, [r7, #16]
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ba4:	697b      	ldr	r3, [r7, #20]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200010d8 	.word	0x200010d8
 8009bb4:	0800dc50 	.word	0x0800dc50
 8009bb8:	08009cf9 	.word	0x08009cf9
 8009bbc:	200010dc 	.word	0x200010dc

08009bc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	@ 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	623b      	str	r3, [r7, #32]
}
 8009bea:	bf00      	nop
 8009bec:	bf00      	nop
 8009bee:	e7fd      	b.n	8009bec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bf0:	4b19      	ldr	r3, [pc, #100]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d02a      	beq.n	8009c4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	dc18      	bgt.n	8009c3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c0a:	f7ff fead 	bl	8009968 <xTaskGetSchedulerState>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d109      	bne.n	8009c28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c14:	4b10      	ldr	r3, [pc, #64]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009c16:	6818      	ldr	r0, [r3, #0]
 8009c18:	f107 0110 	add.w	r1, r7, #16
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c20:	f7fe fc88 	bl	8008534 <xQueueGenericSend>
 8009c24:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c26:	e012      	b.n	8009c4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c28:	4b0b      	ldr	r3, [pc, #44]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	f107 0110 	add.w	r1, r7, #16
 8009c30:	2300      	movs	r3, #0
 8009c32:	2200      	movs	r2, #0
 8009c34:	f7fe fc7e 	bl	8008534 <xQueueGenericSend>
 8009c38:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c3a:	e008      	b.n	8009c4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c3c:	4b06      	ldr	r3, [pc, #24]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	f107 0110 	add.w	r1, r7, #16
 8009c44:	2300      	movs	r3, #0
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	f7fe fd76 	bl	8008738 <xQueueGenericSendFromISR>
 8009c4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3728      	adds	r7, #40	@ 0x28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	200010d8 	.word	0x200010d8

08009c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c66:	4b23      	ldr	r3, [pc, #140]	@ (8009cf4 <prvProcessExpiredTimer+0x98>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fb29 	bl	80082cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d023      	beq.n	8009cd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	699a      	ldr	r2, [r3, #24]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	18d1      	adds	r1, r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	6978      	ldr	r0, [r7, #20]
 8009c96:	f000 f8d5 	bl	8009e44 <prvInsertTimerInActiveList>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d020      	beq.n	8009ce2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	6978      	ldr	r0, [r7, #20]
 8009cac:	f7ff ff88 	bl	8009bc0 <xTimerGenericCommand>
 8009cb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d114      	bne.n	8009ce2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	60fb      	str	r3, [r7, #12]
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	e7fd      	b.n	8009ccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cd6:	f023 0301 	bic.w	r3, r3, #1
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	6978      	ldr	r0, [r7, #20]
 8009ce8:	4798      	blx	r3
}
 8009cea:	bf00      	nop
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	200010d0 	.word	0x200010d0

08009cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 f859 	bl	8009dbc <prvGetNextExpireTime>
 8009d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f805 	bl	8009d20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d16:	f000 f8d7 	bl	8009ec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d1a:	bf00      	nop
 8009d1c:	e7f0      	b.n	8009d00 <prvTimerTask+0x8>
	...

08009d20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d2a:	f7ff fa37 	bl	800919c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f866 	bl	8009e04 <prvSampleTimeNow>
 8009d38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d130      	bne.n	8009da2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <prvProcessTimerOrBlockTask+0x3c>
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d806      	bhi.n	8009d5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d4e:	f7ff fa33 	bl	80091b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d52:	68f9      	ldr	r1, [r7, #12]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff ff81 	bl	8009c5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d5a:	e024      	b.n	8009da6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d008      	beq.n	8009d74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d62:	4b13      	ldr	r3, [pc, #76]	@ (8009db0 <prvProcessTimerOrBlockTask+0x90>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <prvProcessTimerOrBlockTask+0x50>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e000      	b.n	8009d72 <prvProcessTimerOrBlockTask+0x52>
 8009d70:	2300      	movs	r3, #0
 8009d72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d74:	4b0f      	ldr	r3, [pc, #60]	@ (8009db4 <prvProcessTimerOrBlockTask+0x94>)
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f7fe ff93 	bl	8008cac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d86:	f7ff fa17 	bl	80091b8 <xTaskResumeAll>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d90:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <prvProcessTimerOrBlockTask+0x98>)
 8009d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	f3bf 8f6f 	isb	sy
}
 8009da0:	e001      	b.n	8009da6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009da2:	f7ff fa09 	bl	80091b8 <xTaskResumeAll>
}
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	200010d4 	.word	0x200010d4
 8009db4:	200010d8 	.word	0x200010d8
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e00 <prvGetNextExpireTime+0x44>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <prvGetNextExpireTime+0x16>
 8009dce:	2201      	movs	r2, #1
 8009dd0:	e000      	b.n	8009dd4 <prvGetNextExpireTime+0x18>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d105      	bne.n	8009dec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009de0:	4b07      	ldr	r3, [pc, #28]	@ (8009e00 <prvGetNextExpireTime+0x44>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	e001      	b.n	8009df0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	200010d0 	.word	0x200010d0

08009e04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e0c:	f7ff fa72 	bl	80092f4 <xTaskGetTickCount>
 8009e10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e12:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <prvSampleTimeNow+0x3c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d205      	bcs.n	8009e28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e1c:	f000 f93a 	bl	800a094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e002      	b.n	8009e2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e2e:	4a04      	ldr	r2, [pc, #16]	@ (8009e40 <prvSampleTimeNow+0x3c>)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e34:	68fb      	ldr	r3, [r7, #12]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200010e0 	.word	0x200010e0

08009e44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d812      	bhi.n	8009e90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	1ad2      	subs	r2, r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d302      	bcc.n	8009e7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	e01b      	b.n	8009eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e7e:	4b10      	ldr	r3, [pc, #64]	@ (8009ec0 <prvInsertTimerInActiveList+0x7c>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4619      	mov	r1, r3
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f7fe f9e6 	bl	800825a <vListInsert>
 8009e8e:	e012      	b.n	8009eb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d206      	bcs.n	8009ea6 <prvInsertTimerInActiveList+0x62>
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d302      	bcc.n	8009ea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	e007      	b.n	8009eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ea6:	4b07      	ldr	r3, [pc, #28]	@ (8009ec4 <prvInsertTimerInActiveList+0x80>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7fe f9d2 	bl	800825a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009eb6:	697b      	ldr	r3, [r7, #20]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	200010d4 	.word	0x200010d4
 8009ec4:	200010d0 	.word	0x200010d0

08009ec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08e      	sub	sp, #56	@ 0x38
 8009ecc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ece:	e0ce      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	da19      	bge.n	8009f0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ed6:	1d3b      	adds	r3, r7, #4
 8009ed8:	3304      	adds	r3, #4
 8009eda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	61fb      	str	r3, [r7, #28]
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	e7fd      	b.n	8009ef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f00:	6850      	ldr	r0, [r2, #4]
 8009f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f04:	6892      	ldr	r2, [r2, #8]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f2c0 80ae 	blt.w	800a06e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f20:	3304      	adds	r3, #4
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe f9d2 	bl	80082cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f28:	463b      	mov	r3, r7
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff ff6a 	bl	8009e04 <prvSampleTimeNow>
 8009f30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b09      	cmp	r3, #9
 8009f36:	f200 8097 	bhi.w	800a068 <prvProcessReceivedCommands+0x1a0>
 8009f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <prvProcessReceivedCommands+0x78>)
 8009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f40:	08009f69 	.word	0x08009f69
 8009f44:	08009f69 	.word	0x08009f69
 8009f48:	08009f69 	.word	0x08009f69
 8009f4c:	08009fdf 	.word	0x08009fdf
 8009f50:	08009ff3 	.word	0x08009ff3
 8009f54:	0800a03f 	.word	0x0800a03f
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f69 	.word	0x08009f69
 8009f60:	08009fdf 	.word	0x08009fdf
 8009f64:	08009ff3 	.word	0x08009ff3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f6e:	f043 0301 	orr.w	r3, r3, #1
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	18d1      	adds	r1, r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f88:	f7ff ff5c 	bl	8009e44 <prvInsertTimerInActiveList>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d06c      	beq.n	800a06c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d061      	beq.n	800a06c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	441a      	add	r2, r3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fba:	f7ff fe01 	bl	8009bc0 <xTimerGenericCommand>
 8009fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d152      	bne.n	800a06c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	61bb      	str	r3, [r7, #24]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ff0:	e03d      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ff8:	f043 0301 	orr.w	r3, r3, #1
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	617b      	str	r3, [r7, #20]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	699a      	ldr	r2, [r3, #24]
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	18d1      	adds	r1, r2, r3
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a038:	f7ff ff04 	bl	8009e44 <prvInsertTimerInActiveList>
					break;
 800a03c:	e017      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d103      	bne.n	800a054 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a04c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a04e:	f000 fbeb 	bl	800a828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a052:	e00c      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a066:	e002      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
					break;
 800a06c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a06e:	4b08      	ldr	r3, [pc, #32]	@ (800a090 <prvProcessReceivedCommands+0x1c8>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	1d39      	adds	r1, r7, #4
 800a074:	2200      	movs	r2, #0
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fbfc 	bl	8008874 <xQueueReceive>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f47f af26 	bne.w	8009ed0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3730      	adds	r7, #48	@ 0x30
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	200010d8 	.word	0x200010d8

0800a094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a09a:	e049      	b.n	800a130 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a09c:	4b2e      	ldr	r3, [pc, #184]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fe f909 	bl	80082cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d02f      	beq.n	800a130 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d90e      	bls.n	800a100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f7fe f8ae 	bl	800825a <vListInsert>
 800a0fe:	e017      	b.n	800a130 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a100:	2300      	movs	r3, #0
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	2300      	movs	r3, #0
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	2100      	movs	r1, #0
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fd58 	bl	8009bc0 <xTimerGenericCommand>
 800a110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	603b      	str	r3, [r7, #0]
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a130:	4b09      	ldr	r3, [pc, #36]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1b0      	bne.n	800a09c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a13a:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a140:	4b06      	ldr	r3, [pc, #24]	@ (800a15c <prvSwitchTimerLists+0xc8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a04      	ldr	r2, [pc, #16]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a146:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a148:	4a04      	ldr	r2, [pc, #16]	@ (800a15c <prvSwitchTimerLists+0xc8>)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	6013      	str	r3, [r2, #0]
}
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	200010d0 	.word	0x200010d0
 800a15c:	200010d4 	.word	0x200010d4

0800a160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a166:	f000 f96f 	bl	800a448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a16a:	4b15      	ldr	r3, [pc, #84]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d120      	bne.n	800a1b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a172:	4814      	ldr	r0, [pc, #80]	@ (800a1c4 <prvCheckForValidListAndQueue+0x64>)
 800a174:	f7fe f820 	bl	80081b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a178:	4813      	ldr	r0, [pc, #76]	@ (800a1c8 <prvCheckForValidListAndQueue+0x68>)
 800a17a:	f7fe f81d 	bl	80081b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a17e:	4b13      	ldr	r3, [pc, #76]	@ (800a1cc <prvCheckForValidListAndQueue+0x6c>)
 800a180:	4a10      	ldr	r2, [pc, #64]	@ (800a1c4 <prvCheckForValidListAndQueue+0x64>)
 800a182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a184:	4b12      	ldr	r3, [pc, #72]	@ (800a1d0 <prvCheckForValidListAndQueue+0x70>)
 800a186:	4a10      	ldr	r2, [pc, #64]	@ (800a1c8 <prvCheckForValidListAndQueue+0x68>)
 800a188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a18a:	2300      	movs	r3, #0
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4b11      	ldr	r3, [pc, #68]	@ (800a1d4 <prvCheckForValidListAndQueue+0x74>)
 800a190:	4a11      	ldr	r2, [pc, #68]	@ (800a1d8 <prvCheckForValidListAndQueue+0x78>)
 800a192:	2110      	movs	r1, #16
 800a194:	200a      	movs	r0, #10
 800a196:	f7fe f92d 	bl	80083f4 <xQueueGenericCreateStatic>
 800a19a:	4603      	mov	r3, r0
 800a19c:	4a08      	ldr	r2, [pc, #32]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a19e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1a0:	4b07      	ldr	r3, [pc, #28]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1a8:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	490b      	ldr	r1, [pc, #44]	@ (800a1dc <prvCheckForValidListAndQueue+0x7c>)
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fd52 	bl	8008c58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1b4:	f000 f97a 	bl	800a4ac <vPortExitCritical>
}
 800a1b8:	bf00      	nop
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200010d8 	.word	0x200010d8
 800a1c4:	200010a8 	.word	0x200010a8
 800a1c8:	200010bc 	.word	0x200010bc
 800a1cc:	200010d0 	.word	0x200010d0
 800a1d0:	200010d4 	.word	0x200010d4
 800a1d4:	20001184 	.word	0x20001184
 800a1d8:	200010e4 	.word	0x200010e4
 800a1dc:	0800dc58 	.word	0x0800dc58

0800a1e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b04      	subs	r3, #4
 800a1f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f023 0201 	bic.w	r2, r3, #1
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3b04      	subs	r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a210:	4a0c      	ldr	r2, [pc, #48]	@ (800a244 <pxPortInitialiseStack+0x64>)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b14      	subs	r3, #20
 800a21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3b04      	subs	r3, #4
 800a226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f06f 0202 	mvn.w	r2, #2
 800a22e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3b20      	subs	r3, #32
 800a234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a236:	68fb      	ldr	r3, [r7, #12]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	0800a249 	.word	0x0800a249

0800a248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a252:	4b13      	ldr	r3, [pc, #76]	@ (800a2a0 <prvTaskExitError+0x58>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d00b      	beq.n	800a274 <prvTaskExitError+0x2c>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	60fb      	str	r3, [r7, #12]
}
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	e7fd      	b.n	800a270 <prvTaskExitError+0x28>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60bb      	str	r3, [r7, #8]
}
 800a286:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a288:	bf00      	nop
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0fc      	beq.n	800a28a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	20000010 	.word	0x20000010
	...

0800a2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2b0:	4b07      	ldr	r3, [pc, #28]	@ (800a2d0 <pxCurrentTCBConst2>)
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	f380 8809 	msr	PSP, r0
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8811 	msr	BASEPRI, r0
 800a2ca:	4770      	bx	lr
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst2>:
 800a2d0:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2d8:	4808      	ldr	r0, [pc, #32]	@ (800a2fc <prvPortStartFirstTask+0x24>)
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	f380 8808 	msr	MSP, r0
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8814 	msr	CONTROL, r0
 800a2ea:	b662      	cpsie	i
 800a2ec:	b661      	cpsie	f
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	df00      	svc	0
 800a2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2fa:	bf00      	nop
 800a2fc:	e000ed08 	.word	0xe000ed08

0800a300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a306:	4b47      	ldr	r3, [pc, #284]	@ (800a424 <xPortStartScheduler+0x124>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a47      	ldr	r2, [pc, #284]	@ (800a428 <xPortStartScheduler+0x128>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10b      	bne.n	800a328 <xPortStartScheduler+0x28>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	613b      	str	r3, [r7, #16]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a328:	4b3e      	ldr	r3, [pc, #248]	@ (800a424 <xPortStartScheduler+0x124>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a3f      	ldr	r2, [pc, #252]	@ (800a42c <xPortStartScheduler+0x12c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d10b      	bne.n	800a34a <xPortStartScheduler+0x4a>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a34a:	4b39      	ldr	r3, [pc, #228]	@ (800a430 <xPortStartScheduler+0x130>)
 800a34c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	22ff      	movs	r2, #255	@ 0xff
 800a35a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	4b31      	ldr	r3, [pc, #196]	@ (800a434 <xPortStartScheduler+0x134>)
 800a370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a372:	4b31      	ldr	r3, [pc, #196]	@ (800a438 <xPortStartScheduler+0x138>)
 800a374:	2207      	movs	r2, #7
 800a376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a378:	e009      	b.n	800a38e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a37a:	4b2f      	ldr	r3, [pc, #188]	@ (800a438 <xPortStartScheduler+0x138>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3b01      	subs	r3, #1
 800a380:	4a2d      	ldr	r2, [pc, #180]	@ (800a438 <xPortStartScheduler+0x138>)
 800a382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a396:	2b80      	cmp	r3, #128	@ 0x80
 800a398:	d0ef      	beq.n	800a37a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a39a:	4b27      	ldr	r3, [pc, #156]	@ (800a438 <xPortStartScheduler+0x138>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f1c3 0307 	rsb	r3, r3, #7
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d00b      	beq.n	800a3be <xPortStartScheduler+0xbe>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	60bb      	str	r3, [r7, #8]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3be:	4b1e      	ldr	r3, [pc, #120]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3d0:	4a19      	ldr	r2, [pc, #100]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3dc:	4b17      	ldr	r3, [pc, #92]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a16      	ldr	r2, [pc, #88]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3e8:	4b14      	ldr	r3, [pc, #80]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a13      	ldr	r2, [pc, #76]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3f4:	f000 f8da 	bl	800a5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3f8:	4b11      	ldr	r3, [pc, #68]	@ (800a440 <xPortStartScheduler+0x140>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3fe:	f000 f8f9 	bl	800a5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a402:	4b10      	ldr	r3, [pc, #64]	@ (800a444 <xPortStartScheduler+0x144>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a0f      	ldr	r2, [pc, #60]	@ (800a444 <xPortStartScheduler+0x144>)
 800a408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a40c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a40e:	f7ff ff63 	bl	800a2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a412:	f7ff f839 	bl	8009488 <vTaskSwitchContext>
	prvTaskExitError();
 800a416:	f7ff ff17 	bl	800a248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	e000ed00 	.word	0xe000ed00
 800a428:	410fc271 	.word	0x410fc271
 800a42c:	410fc270 	.word	0x410fc270
 800a430:	e000e400 	.word	0xe000e400
 800a434:	200011d4 	.word	0x200011d4
 800a438:	200011d8 	.word	0x200011d8
 800a43c:	e000ed20 	.word	0xe000ed20
 800a440:	20000010 	.word	0x20000010
 800a444:	e000ef34 	.word	0xe000ef34

0800a448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a462:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	4a0e      	ldr	r2, [pc, #56]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a46c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d110      	bne.n	800a496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a474:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a8 <vPortEnterCritical+0x60>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <vPortEnterCritical+0x4e>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	603b      	str	r3, [r7, #0]
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	e7fd      	b.n	800a492 <vPortEnterCritical+0x4a>
	}
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000010 	.word	0x20000010
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4b2:	4b12      	ldr	r3, [pc, #72]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <vPortExitCritical+0x26>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	607b      	str	r3, [r7, #4]
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	e7fd      	b.n	800a4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	4a08      	ldr	r2, [pc, #32]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <vPortExitCritical+0x44>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f383 8811 	msr	BASEPRI, r3
}
 800a4ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	20000010 	.word	0x20000010

0800a500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a500:	f3ef 8009 	mrs	r0, PSP
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <pxCurrentTCBConst>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	f01e 0f10 	tst.w	lr, #16
 800a510:	bf08      	it	eq
 800a512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a524:	f380 8811 	msr	BASEPRI, r0
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f7fe ffaa 	bl	8009488 <vTaskSwitchContext>
 800a534:	f04f 0000 	mov.w	r0, #0
 800a538:	f380 8811 	msr	BASEPRI, r0
 800a53c:	bc09      	pop	{r0, r3}
 800a53e:	6819      	ldr	r1, [r3, #0]
 800a540:	6808      	ldr	r0, [r1, #0]
 800a542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a546:	f01e 0f10 	tst.w	lr, #16
 800a54a:	bf08      	it	eq
 800a54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a550:	f380 8809 	msr	PSP, r0
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst>:
 800a560:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	607b      	str	r3, [r7, #4]
}
 800a580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a582:	f7fe fec7 	bl	8009314 <xTaskIncrementTick>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a58c:	4b06      	ldr	r3, [pc, #24]	@ (800a5a8 <xPortSysTickHandler+0x40>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
}
 800a59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e4 <vPortSetupTimerInterrupt+0x38>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <vPortSetupTimerInterrupt+0x3c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5ec <vPortSetupTimerInterrupt+0x40>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	099b      	lsrs	r3, r3, #6
 800a5c8:	4a09      	ldr	r2, [pc, #36]	@ (800a5f0 <vPortSetupTimerInterrupt+0x44>)
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ce:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5d0:	2207      	movs	r2, #7
 800a5d2:	601a      	str	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	e000e010 	.word	0xe000e010
 800a5e4:	e000e018 	.word	0xe000e018
 800a5e8:	20000004 	.word	0x20000004
 800a5ec:	10624dd3 	.word	0x10624dd3
 800a5f0:	e000e014 	.word	0xe000e014

0800a5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a604 <vPortEnableVFP+0x10>
 800a5f8:	6801      	ldr	r1, [r0, #0]
 800a5fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5fe:	6001      	str	r1, [r0, #0]
 800a600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a602:	bf00      	nop
 800a604:	e000ed88 	.word	0xe000ed88

0800a608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a60e:	f3ef 8305 	mrs	r3, IPSR
 800a612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b0f      	cmp	r3, #15
 800a618:	d915      	bls.n	800a646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a61a:	4a18      	ldr	r2, [pc, #96]	@ (800a67c <vPortValidateInterruptPriority+0x74>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4413      	add	r3, r2
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a624:	4b16      	ldr	r3, [pc, #88]	@ (800a680 <vPortValidateInterruptPriority+0x78>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	7afa      	ldrb	r2, [r7, #11]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d20b      	bcs.n	800a646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	607b      	str	r3, [r7, #4]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a646:	4b0f      	ldr	r3, [pc, #60]	@ (800a684 <vPortValidateInterruptPriority+0x7c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a64e:	4b0e      	ldr	r3, [pc, #56]	@ (800a688 <vPortValidateInterruptPriority+0x80>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d90b      	bls.n	800a66e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	603b      	str	r3, [r7, #0]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <vPortValidateInterruptPriority+0x62>
	}
 800a66e:	bf00      	nop
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	e000e3f0 	.word	0xe000e3f0
 800a680:	200011d4 	.word	0x200011d4
 800a684:	e000ed0c 	.word	0xe000ed0c
 800a688:	200011d8 	.word	0x200011d8

0800a68c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	@ 0x28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a698:	f7fe fd80 	bl	800919c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a69c:	4b5c      	ldr	r3, [pc, #368]	@ (800a810 <pvPortMalloc+0x184>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6a4:	f000 f924 	bl	800a8f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <pvPortMalloc+0x188>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f040 8095 	bne.w	800a7e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01e      	beq.n	800a6fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6bc:	2208      	movs	r2, #8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d015      	beq.n	800a6fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f023 0307 	bic.w	r3, r3, #7
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <pvPortMalloc+0x6e>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	617b      	str	r3, [r7, #20]
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	e7fd      	b.n	800a6f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d06f      	beq.n	800a7e0 <pvPortMalloc+0x154>
 800a700:	4b45      	ldr	r3, [pc, #276]	@ (800a818 <pvPortMalloc+0x18c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	429a      	cmp	r2, r3
 800a708:	d86a      	bhi.n	800a7e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a70a:	4b44      	ldr	r3, [pc, #272]	@ (800a81c <pvPortMalloc+0x190>)
 800a70c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a70e:	4b43      	ldr	r3, [pc, #268]	@ (800a81c <pvPortMalloc+0x190>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a714:	e004      	b.n	800a720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	429a      	cmp	r2, r3
 800a728:	d903      	bls.n	800a732 <pvPortMalloc+0xa6>
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f1      	bne.n	800a716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a732:	4b37      	ldr	r3, [pc, #220]	@ (800a810 <pvPortMalloc+0x184>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a738:	429a      	cmp	r2, r3
 800a73a:	d051      	beq.n	800a7e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2208      	movs	r2, #8
 800a742:	4413      	add	r3, r2
 800a744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	1ad2      	subs	r2, r2, r3
 800a756:	2308      	movs	r3, #8
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d920      	bls.n	800a7a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4413      	add	r3, r2
 800a764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	f003 0307 	and.w	r3, r3, #7
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00b      	beq.n	800a788 <pvPortMalloc+0xfc>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a79a:	69b8      	ldr	r0, [r7, #24]
 800a79c:	f000 f90a 	bl	800a9b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a820 <pvPortMalloc+0x194>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d203      	bcs.n	800a7c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7ba:	4b17      	ldr	r3, [pc, #92]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a18      	ldr	r2, [pc, #96]	@ (800a820 <pvPortMalloc+0x194>)
 800a7c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <pvPortMalloc+0x188>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7d6:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <pvPortMalloc+0x198>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	4a11      	ldr	r2, [pc, #68]	@ (800a824 <pvPortMalloc+0x198>)
 800a7de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7e0:	f7fe fcea 	bl	80091b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <pvPortMalloc+0x17a>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60fb      	str	r3, [r7, #12]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <pvPortMalloc+0x176>
	return pvReturn;
 800a806:	69fb      	ldr	r3, [r7, #28]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3728      	adds	r7, #40	@ 0x28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20004de4 	.word	0x20004de4
 800a814:	20004df8 	.word	0x20004df8
 800a818:	20004de8 	.word	0x20004de8
 800a81c:	20004ddc 	.word	0x20004ddc
 800a820:	20004dec 	.word	0x20004dec
 800a824:	20004df0 	.word	0x20004df0

0800a828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d04f      	beq.n	800a8da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a83a:	2308      	movs	r3, #8
 800a83c:	425b      	negs	r3, r3
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4413      	add	r3, r2
 800a842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	4b25      	ldr	r3, [pc, #148]	@ (800a8e4 <vPortFree+0xbc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4013      	ands	r3, r2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10b      	bne.n	800a86e <vPortFree+0x46>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	60fb      	str	r3, [r7, #12]
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	e7fd      	b.n	800a86a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <vPortFree+0x66>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	60bb      	str	r3, [r7, #8]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	4b14      	ldr	r3, [pc, #80]	@ (800a8e4 <vPortFree+0xbc>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4013      	ands	r3, r2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01e      	beq.n	800a8da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11a      	bne.n	800a8da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <vPortFree+0xbc>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	43db      	mvns	r3, r3
 800a8ae:	401a      	ands	r2, r3
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8b4:	f7fe fc72 	bl	800919c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e8 <vPortFree+0xc0>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4a09      	ldr	r2, [pc, #36]	@ (800a8e8 <vPortFree+0xc0>)
 800a8c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8c6:	6938      	ldr	r0, [r7, #16]
 800a8c8:	f000 f874 	bl	800a9b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8cc:	4b07      	ldr	r3, [pc, #28]	@ (800a8ec <vPortFree+0xc4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	4a06      	ldr	r2, [pc, #24]	@ (800a8ec <vPortFree+0xc4>)
 800a8d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8d6:	f7fe fc6f 	bl	80091b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8da:	bf00      	nop
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20004df8 	.word	0x20004df8
 800a8e8:	20004de8 	.word	0x20004de8
 800a8ec:	20004df4 	.word	0x20004df4

0800a8f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a8fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8fc:	4b27      	ldr	r3, [pc, #156]	@ (800a99c <prvHeapInit+0xac>)
 800a8fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00c      	beq.n	800a924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3307      	adds	r3, #7
 800a90e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0307 	bic.w	r3, r3, #7
 800a916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	4a1f      	ldr	r2, [pc, #124]	@ (800a99c <prvHeapInit+0xac>)
 800a920:	4413      	add	r3, r2
 800a922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a928:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <prvHeapInit+0xb0>)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a92e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9a0 <prvHeapInit+0xb0>)
 800a930:	2200      	movs	r2, #0
 800a932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	4413      	add	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a93c:	2208      	movs	r2, #8
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1a9b      	subs	r3, r3, r2
 800a942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4a15      	ldr	r2, [pc, #84]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a952:	4b14      	ldr	r3, [pc, #80]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2200      	movs	r2, #0
 800a958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a95a:	4b12      	ldr	r3, [pc, #72]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	1ad2      	subs	r2, r2, r3
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a970:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4a0a      	ldr	r2, [pc, #40]	@ (800a9a8 <prvHeapInit+0xb8>)
 800a97e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4a09      	ldr	r2, [pc, #36]	@ (800a9ac <prvHeapInit+0xbc>)
 800a986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a988:	4b09      	ldr	r3, [pc, #36]	@ (800a9b0 <prvHeapInit+0xc0>)
 800a98a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a98e:	601a      	str	r2, [r3, #0]
}
 800a990:	bf00      	nop
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	200011dc 	.word	0x200011dc
 800a9a0:	20004ddc 	.word	0x20004ddc
 800a9a4:	20004de4 	.word	0x20004de4
 800a9a8:	20004dec 	.word	0x20004dec
 800a9ac:	20004de8 	.word	0x20004de8
 800a9b0:	20004df8 	.word	0x20004df8

0800a9b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9bc:	4b28      	ldr	r3, [pc, #160]	@ (800aa60 <prvInsertBlockIntoFreeList+0xac>)
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	e002      	b.n	800a9c8 <prvInsertBlockIntoFreeList+0x14>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d8f7      	bhi.n	800a9c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4413      	add	r3, r2
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d108      	bne.n	800a9f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	441a      	add	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d118      	bne.n	800aa3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	4b15      	ldr	r3, [pc, #84]	@ (800aa64 <prvInsertBlockIntoFreeList+0xb0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d00d      	beq.n	800aa32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	441a      	add	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	e008      	b.n	800aa44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa32:	4b0c      	ldr	r3, [pc, #48]	@ (800aa64 <prvInsertBlockIntoFreeList+0xb0>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	e003      	b.n	800aa44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d002      	beq.n	800aa52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	20004ddc 	.word	0x20004ddc
 800aa64:	20004de4 	.word	0x20004de4

0800aa68 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800aa6e:	2300      	movs	r3, #0
 800aa70:	71fb      	strb	r3, [r7, #7]
 800aa72:	e026      	b.n	800aac2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800aa74:	79fb      	ldrb	r3, [r7, #7]
 800aa76:	3b50      	subs	r3, #80	@ 0x50
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 f82b 	bl	800aad8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800aa82:	2100      	movs	r1, #0
 800aa84:	2000      	movs	r0, #0
 800aa86:	f000 f827 	bl	800aad8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	2010      	movs	r0, #16
 800aa8e:	f000 f823 	bl	800aad8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800aa92:	2300      	movs	r3, #0
 800aa94:	71bb      	strb	r3, [r7, #6]
 800aa96:	e00d      	b.n	800aab4 <OLED_Refresh_Gram+0x4c>
 800aa98:	79ba      	ldrb	r2, [r7, #6]
 800aa9a:	79fb      	ldrb	r3, [r7, #7]
 800aa9c:	490d      	ldr	r1, [pc, #52]	@ (800aad4 <OLED_Refresh_Gram+0x6c>)
 800aa9e:	00d2      	lsls	r2, r2, #3
 800aaa0:	440a      	add	r2, r1
 800aaa2:	4413      	add	r3, r2
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f815 	bl	800aad8 <OLED_WR_Byte>
 800aaae:	79bb      	ldrb	r3, [r7, #6]
 800aab0:	3301      	adds	r3, #1
 800aab2:	71bb      	strb	r3, [r7, #6]
 800aab4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	daed      	bge.n	800aa98 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	3301      	adds	r3, #1
 800aac0:	71fb      	strb	r3, [r7, #7]
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2b07      	cmp	r3, #7
 800aac6:	d9d5      	bls.n	800aa74 <OLED_Refresh_Gram+0xc>
	}   
}
 800aac8:	bf00      	nop
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	20004dfc 	.word	0x20004dfc

0800aad8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	460a      	mov	r2, r1
 800aae2:	71fb      	strb	r3, [r7, #7]
 800aae4:	4613      	mov	r3, r2
 800aae6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800aae8:	79bb      	ldrb	r3, [r7, #6]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d006      	beq.n	800aafc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aaf4:	481c      	ldr	r0, [pc, #112]	@ (800ab68 <OLED_WR_Byte+0x90>)
 800aaf6:	f7f8 ff61 	bl	80039bc <HAL_GPIO_WritePin>
 800aafa:	e005      	b.n	800ab08 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800aafc:	2200      	movs	r2, #0
 800aafe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ab02:	4819      	ldr	r0, [pc, #100]	@ (800ab68 <OLED_WR_Byte+0x90>)
 800ab04:	f7f8 ff5a 	bl	80039bc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]
 800ab0c:	e01e      	b.n	800ab4c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2120      	movs	r1, #32
 800ab12:	4815      	ldr	r0, [pc, #84]	@ (800ab68 <OLED_WR_Byte+0x90>)
 800ab14:	f7f8 ff52 	bl	80039bc <HAL_GPIO_WritePin>
		if(dat&0x80)
 800ab18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da05      	bge.n	800ab2c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800ab20:	2201      	movs	r2, #1
 800ab22:	2140      	movs	r1, #64	@ 0x40
 800ab24:	4810      	ldr	r0, [pc, #64]	@ (800ab68 <OLED_WR_Byte+0x90>)
 800ab26:	f7f8 ff49 	bl	80039bc <HAL_GPIO_WritePin>
 800ab2a:	e004      	b.n	800ab36 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2140      	movs	r1, #64	@ 0x40
 800ab30:	480d      	ldr	r0, [pc, #52]	@ (800ab68 <OLED_WR_Byte+0x90>)
 800ab32:	f7f8 ff43 	bl	80039bc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800ab36:	2201      	movs	r2, #1
 800ab38:	2120      	movs	r1, #32
 800ab3a:	480b      	ldr	r0, [pc, #44]	@ (800ab68 <OLED_WR_Byte+0x90>)
 800ab3c:	f7f8 ff3e 	bl	80039bc <HAL_GPIO_WritePin>
		dat<<=1;   
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	73fb      	strb	r3, [r7, #15]
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	2b07      	cmp	r3, #7
 800ab50:	d9dd      	bls.n	800ab0e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800ab52:	2201      	movs	r2, #1
 800ab54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ab58:	4803      	ldr	r0, [pc, #12]	@ (800ab68 <OLED_WR_Byte+0x90>)
 800ab5a:	f7f8 ff2f 	bl	80039bc <HAL_GPIO_WritePin>
} 
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	40021000 	.word	0x40021000

0800ab6c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800ab72:	2300      	movs	r3, #0
 800ab74:	71fb      	strb	r3, [r7, #7]
 800ab76:	e014      	b.n	800aba2 <OLED_Clear+0x36>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	71bb      	strb	r3, [r7, #6]
 800ab7c:	e00a      	b.n	800ab94 <OLED_Clear+0x28>
 800ab7e:	79ba      	ldrb	r2, [r7, #6]
 800ab80:	79fb      	ldrb	r3, [r7, #7]
 800ab82:	490c      	ldr	r1, [pc, #48]	@ (800abb4 <OLED_Clear+0x48>)
 800ab84:	00d2      	lsls	r2, r2, #3
 800ab86:	440a      	add	r2, r1
 800ab88:	4413      	add	r3, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	701a      	strb	r2, [r3, #0]
 800ab8e:	79bb      	ldrb	r3, [r7, #6]
 800ab90:	3301      	adds	r3, #1
 800ab92:	71bb      	strb	r3, [r7, #6]
 800ab94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	daf0      	bge.n	800ab7e <OLED_Clear+0x12>
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	71fb      	strb	r3, [r7, #7]
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	2b07      	cmp	r3, #7
 800aba6:	d9e7      	bls.n	800ab78 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800aba8:	f7ff ff5e 	bl	800aa68 <OLED_Refresh_Gram>
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20004dfc 	.word	0x20004dfc

0800abb8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	71fb      	strb	r3, [r7, #7]
 800abc2:	460b      	mov	r3, r1
 800abc4:	71bb      	strb	r3, [r7, #6]
 800abc6:	4613      	mov	r3, r2
 800abc8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800abce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	db41      	blt.n	800ac5a <OLED_DrawPoint+0xa2>
 800abd6:	79bb      	ldrb	r3, [r7, #6]
 800abd8:	2b3f      	cmp	r3, #63	@ 0x3f
 800abda:	d83e      	bhi.n	800ac5a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800abdc:	79bb      	ldrb	r3, [r7, #6]
 800abde:	08db      	lsrs	r3, r3, #3
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f1c3 0307 	rsb	r3, r3, #7
 800abe6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800abe8:	79bb      	ldrb	r3, [r7, #6]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800abf0:	7b7b      	ldrb	r3, [r7, #13]
 800abf2:	f1c3 0307 	rsb	r3, r3, #7
 800abf6:	2201      	movs	r2, #1
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800abfe:	797b      	ldrb	r3, [r7, #5]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d012      	beq.n	800ac2a <OLED_DrawPoint+0x72>
 800ac04:	79fa      	ldrb	r2, [r7, #7]
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	4917      	ldr	r1, [pc, #92]	@ (800ac68 <OLED_DrawPoint+0xb0>)
 800ac0a:	00d2      	lsls	r2, r2, #3
 800ac0c:	440a      	add	r2, r1
 800ac0e:	4413      	add	r3, r2
 800ac10:	7818      	ldrb	r0, [r3, #0]
 800ac12:	79fa      	ldrb	r2, [r7, #7]
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	7bf9      	ldrb	r1, [r7, #15]
 800ac18:	4301      	orrs	r1, r0
 800ac1a:	b2c8      	uxtb	r0, r1
 800ac1c:	4912      	ldr	r1, [pc, #72]	@ (800ac68 <OLED_DrawPoint+0xb0>)
 800ac1e:	00d2      	lsls	r2, r2, #3
 800ac20:	440a      	add	r2, r1
 800ac22:	4413      	add	r3, r2
 800ac24:	4602      	mov	r2, r0
 800ac26:	701a      	strb	r2, [r3, #0]
 800ac28:	e018      	b.n	800ac5c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800ac2a:	79fa      	ldrb	r2, [r7, #7]
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	490e      	ldr	r1, [pc, #56]	@ (800ac68 <OLED_DrawPoint+0xb0>)
 800ac30:	00d2      	lsls	r2, r2, #3
 800ac32:	440a      	add	r2, r1
 800ac34:	4413      	add	r3, r2
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	b25a      	sxtb	r2, r3
 800ac3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac3e:	43db      	mvns	r3, r3
 800ac40:	b25b      	sxtb	r3, r3
 800ac42:	4013      	ands	r3, r2
 800ac44:	b259      	sxtb	r1, r3
 800ac46:	79fa      	ldrb	r2, [r7, #7]
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
 800ac4a:	b2c8      	uxtb	r0, r1
 800ac4c:	4906      	ldr	r1, [pc, #24]	@ (800ac68 <OLED_DrawPoint+0xb0>)
 800ac4e:	00d2      	lsls	r2, r2, #3
 800ac50:	440a      	add	r2, r1
 800ac52:	4413      	add	r3, r2
 800ac54:	4602      	mov	r2, r0
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	e000      	b.n	800ac5c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800ac5a:	bf00      	nop
}
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	20004dfc 	.word	0x20004dfc

0800ac6c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800ac6c:	b590      	push	{r4, r7, lr}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	4611      	mov	r1, r2
 800ac78:	461a      	mov	r2, r3
 800ac7a:	4623      	mov	r3, r4
 800ac7c:	71fb      	strb	r3, [r7, #7]
 800ac7e:	4603      	mov	r3, r0
 800ac80:	71bb      	strb	r3, [r7, #6]
 800ac82:	460b      	mov	r3, r1
 800ac84:	717b      	strb	r3, [r7, #5]
 800ac86:	4613      	mov	r3, r2
 800ac88:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800ac8a:	79bb      	ldrb	r3, [r7, #6]
 800ac8c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800ac8e:	797b      	ldrb	r3, [r7, #5]
 800ac90:	3b20      	subs	r3, #32
 800ac92:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800ac94:	2300      	movs	r3, #0
 800ac96:	73bb      	strb	r3, [r7, #14]
 800ac98:	e04d      	b.n	800ad36 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800ac9a:	793b      	ldrb	r3, [r7, #4]
 800ac9c:	2b0c      	cmp	r3, #12
 800ac9e:	d10b      	bne.n	800acb8 <OLED_ShowChar+0x4c>
 800aca0:	797a      	ldrb	r2, [r7, #5]
 800aca2:	7bb9      	ldrb	r1, [r7, #14]
 800aca4:	4828      	ldr	r0, [pc, #160]	@ (800ad48 <OLED_ShowChar+0xdc>)
 800aca6:	4613      	mov	r3, r2
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4403      	add	r3, r0
 800acb0:	440b      	add	r3, r1
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	73fb      	strb	r3, [r7, #15]
 800acb6:	e007      	b.n	800acc8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800acb8:	797a      	ldrb	r2, [r7, #5]
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	4923      	ldr	r1, [pc, #140]	@ (800ad4c <OLED_ShowChar+0xe0>)
 800acbe:	0112      	lsls	r2, r2, #4
 800acc0:	440a      	add	r2, r1
 800acc2:	4413      	add	r3, r2
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800acc8:	2300      	movs	r3, #0
 800acca:	737b      	strb	r3, [r7, #13]
 800accc:	e02d      	b.n	800ad2a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800acce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	da07      	bge.n	800ace6 <OLED_ShowChar+0x7a>
 800acd6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800acda:	79b9      	ldrb	r1, [r7, #6]
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff ff6a 	bl	800abb8 <OLED_DrawPoint>
 800ace4:	e00c      	b.n	800ad00 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800ace6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acea:	2b00      	cmp	r3, #0
 800acec:	bf0c      	ite	eq
 800acee:	2301      	moveq	r3, #1
 800acf0:	2300      	movne	r3, #0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	79b9      	ldrb	r1, [r7, #6]
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff ff5c 	bl	800abb8 <OLED_DrawPoint>
			temp<<=1;
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	73fb      	strb	r3, [r7, #15]
			y++;
 800ad06:	79bb      	ldrb	r3, [r7, #6]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800ad0c:	79ba      	ldrb	r2, [r7, #6]
 800ad0e:	7b3b      	ldrb	r3, [r7, #12]
 800ad10:	1ad2      	subs	r2, r2, r3
 800ad12:	793b      	ldrb	r3, [r7, #4]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d105      	bne.n	800ad24 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800ad18:	7b3b      	ldrb	r3, [r7, #12]
 800ad1a:	71bb      	strb	r3, [r7, #6]
				x++;
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	71fb      	strb	r3, [r7, #7]
				break;
 800ad22:	e005      	b.n	800ad30 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800ad24:	7b7b      	ldrb	r3, [r7, #13]
 800ad26:	3301      	adds	r3, #1
 800ad28:	737b      	strb	r3, [r7, #13]
 800ad2a:	7b7b      	ldrb	r3, [r7, #13]
 800ad2c:	2b07      	cmp	r3, #7
 800ad2e:	d9ce      	bls.n	800acce <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	3301      	adds	r3, #1
 800ad34:	73bb      	strb	r3, [r7, #14]
 800ad36:	7bba      	ldrb	r2, [r7, #14]
 800ad38:	793b      	ldrb	r3, [r7, #4]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d3ad      	bcc.n	800ac9a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800ad3e:	bf00      	nop
 800ad40:	bf00      	nop
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd90      	pop	{r4, r7, pc}
 800ad48:	0800ddbc 	.word	0x0800ddbc
 800ad4c:	0800e230 	.word	0x0800e230

0800ad50 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af02      	add	r7, sp, #8
 800ad56:	4603      	mov	r3, r0
 800ad58:	603a      	str	r2, [r7, #0]
 800ad5a:	71fb      	strb	r3, [r7, #7]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800ad60:	e01f      	b.n	800ada2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800ad62:	79fb      	ldrb	r3, [r7, #7]
 800ad64:	2b7a      	cmp	r3, #122	@ 0x7a
 800ad66:	d904      	bls.n	800ad72 <OLED_ShowString+0x22>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	71fb      	strb	r3, [r7, #7]
 800ad6c:	79bb      	ldrb	r3, [r7, #6]
 800ad6e:	3310      	adds	r3, #16
 800ad70:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800ad72:	79bb      	ldrb	r3, [r7, #6]
 800ad74:	2b3a      	cmp	r3, #58	@ 0x3a
 800ad76:	d905      	bls.n	800ad84 <OLED_ShowString+0x34>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	71fb      	strb	r3, [r7, #7]
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	71bb      	strb	r3, [r7, #6]
 800ad80:	f7ff fef4 	bl	800ab6c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781a      	ldrb	r2, [r3, #0]
 800ad88:	79b9      	ldrb	r1, [r7, #6]
 800ad8a:	79f8      	ldrb	r0, [r7, #7]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	230c      	movs	r3, #12
 800ad92:	f7ff ff6b 	bl	800ac6c <OLED_ShowChar>
        x+=8;
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	3308      	adds	r3, #8
 800ad9a:	71fb      	strb	r3, [r7, #7]
        p++;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1db      	bne.n	800ad62 <OLED_ShowString+0x12>
    }  
}	 
 800adaa:	bf00      	nop
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <OLED_Init>:

void OLED_Init(void)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800adb8:	f7f9 fe2e 	bl	8004a18 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800adbc:	4b41      	ldr	r3, [pc, #260]	@ (800aec4 <OLED_Init+0x110>)
 800adbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc0:	4a40      	ldr	r2, [pc, #256]	@ (800aec4 <OLED_Init+0x110>)
 800adc2:	f023 0301 	bic.w	r3, r3, #1
 800adc6:	6713      	str	r3, [r2, #112]	@ 0x70
 800adc8:	4b3e      	ldr	r3, [pc, #248]	@ (800aec4 <OLED_Init+0x110>)
 800adca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adcc:	4a3d      	ldr	r2, [pc, #244]	@ (800aec4 <OLED_Init+0x110>)
 800adce:	f023 0304 	bic.w	r3, r3, #4
 800add2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800add4:	f7f9 fe34 	bl	8004a40 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800add8:	2200      	movs	r2, #0
 800adda:	2180      	movs	r1, #128	@ 0x80
 800addc:	483a      	ldr	r0, [pc, #232]	@ (800aec8 <OLED_Init+0x114>)
 800adde:	f7f8 fded 	bl	80039bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800ade2:	2064      	movs	r0, #100	@ 0x64
 800ade4:	f7f8 fa86 	bl	80032f4 <HAL_Delay>
	OLED_RST_Set();
 800ade8:	2201      	movs	r2, #1
 800adea:	2180      	movs	r1, #128	@ 0x80
 800adec:	4836      	ldr	r0, [pc, #216]	@ (800aec8 <OLED_Init+0x114>)
 800adee:	f7f8 fde5 	bl	80039bc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800adf2:	2100      	movs	r1, #0
 800adf4:	20ae      	movs	r0, #174	@ 0xae
 800adf6:	f7ff fe6f 	bl	800aad8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800adfa:	2100      	movs	r1, #0
 800adfc:	20d5      	movs	r0, #213	@ 0xd5
 800adfe:	f7ff fe6b 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800ae02:	2100      	movs	r1, #0
 800ae04:	2050      	movs	r0, #80	@ 0x50
 800ae06:	f7ff fe67 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	20a8      	movs	r0, #168	@ 0xa8
 800ae0e:	f7ff fe63 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800ae12:	2100      	movs	r1, #0
 800ae14:	203f      	movs	r0, #63	@ 0x3f
 800ae16:	f7ff fe5f 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	20d3      	movs	r0, #211	@ 0xd3
 800ae1e:	f7ff fe5b 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800ae22:	2100      	movs	r1, #0
 800ae24:	2000      	movs	r0, #0
 800ae26:	f7ff fe57 	bl	800aad8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	2040      	movs	r0, #64	@ 0x40
 800ae2e:	f7ff fe53 	bl	800aad8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ae32:	2100      	movs	r1, #0
 800ae34:	208d      	movs	r0, #141	@ 0x8d
 800ae36:	f7ff fe4f 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	2014      	movs	r0, #20
 800ae3e:	f7ff fe4b 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ae42:	2100      	movs	r1, #0
 800ae44:	2020      	movs	r0, #32
 800ae46:	f7ff fe47 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	2002      	movs	r0, #2
 800ae4e:	f7ff fe43 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800ae52:	2100      	movs	r1, #0
 800ae54:	20a1      	movs	r0, #161	@ 0xa1
 800ae56:	f7ff fe3f 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	20c0      	movs	r0, #192	@ 0xc0
 800ae5e:	f7ff fe3b 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ae62:	2100      	movs	r1, #0
 800ae64:	20da      	movs	r0, #218	@ 0xda
 800ae66:	f7ff fe37 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	2012      	movs	r0, #18
 800ae6e:	f7ff fe33 	bl	800aad8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800ae72:	2100      	movs	r1, #0
 800ae74:	2081      	movs	r0, #129	@ 0x81
 800ae76:	f7ff fe2f 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	20ef      	movs	r0, #239	@ 0xef
 800ae7e:	f7ff fe2b 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800ae82:	2100      	movs	r1, #0
 800ae84:	20d9      	movs	r0, #217	@ 0xd9
 800ae86:	f7ff fe27 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	20f1      	movs	r0, #241	@ 0xf1
 800ae8e:	f7ff fe23 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800ae92:	2100      	movs	r1, #0
 800ae94:	20db      	movs	r0, #219	@ 0xdb
 800ae96:	f7ff fe1f 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	2030      	movs	r0, #48	@ 0x30
 800ae9e:	f7ff fe1b 	bl	800aad8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800aea2:	2100      	movs	r1, #0
 800aea4:	20a4      	movs	r0, #164	@ 0xa4
 800aea6:	f7ff fe17 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800aeaa:	2100      	movs	r1, #0
 800aeac:	20a6      	movs	r0, #166	@ 0xa6
 800aeae:	f7ff fe13 	bl	800aad8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	20af      	movs	r0, #175	@ 0xaf
 800aeb6:	f7ff fe0f 	bl	800aad8 <OLED_WR_Byte>
	OLED_Clear(); 
 800aeba:	f7ff fe57 	bl	800ab6c <OLED_Clear>
 800aebe:	bf00      	nop
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	40023800 	.word	0x40023800
 800aec8:	40021000 	.word	0x40021000

0800aecc <__cvt>:
 800aecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	ec57 6b10 	vmov	r6, r7, d0
 800aed4:	2f00      	cmp	r7, #0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4619      	mov	r1, r3
 800aeda:	463b      	mov	r3, r7
 800aedc:	bfbb      	ittet	lt
 800aede:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aee2:	461f      	movlt	r7, r3
 800aee4:	2300      	movge	r3, #0
 800aee6:	232d      	movlt	r3, #45	@ 0x2d
 800aee8:	700b      	strb	r3, [r1, #0]
 800aeea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aef0:	4691      	mov	r9, r2
 800aef2:	f023 0820 	bic.w	r8, r3, #32
 800aef6:	bfbc      	itt	lt
 800aef8:	4632      	movlt	r2, r6
 800aefa:	4616      	movlt	r6, r2
 800aefc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af00:	d005      	beq.n	800af0e <__cvt+0x42>
 800af02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af06:	d100      	bne.n	800af0a <__cvt+0x3e>
 800af08:	3401      	adds	r4, #1
 800af0a:	2102      	movs	r1, #2
 800af0c:	e000      	b.n	800af10 <__cvt+0x44>
 800af0e:	2103      	movs	r1, #3
 800af10:	ab03      	add	r3, sp, #12
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	ab02      	add	r3, sp, #8
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	ec47 6b10 	vmov	d0, r6, r7
 800af1c:	4653      	mov	r3, sl
 800af1e:	4622      	mov	r2, r4
 800af20:	f000 fe6a 	bl	800bbf8 <_dtoa_r>
 800af24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af28:	4605      	mov	r5, r0
 800af2a:	d119      	bne.n	800af60 <__cvt+0x94>
 800af2c:	f019 0f01 	tst.w	r9, #1
 800af30:	d00e      	beq.n	800af50 <__cvt+0x84>
 800af32:	eb00 0904 	add.w	r9, r0, r4
 800af36:	2200      	movs	r2, #0
 800af38:	2300      	movs	r3, #0
 800af3a:	4630      	mov	r0, r6
 800af3c:	4639      	mov	r1, r7
 800af3e:	f7f5 fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af42:	b108      	cbz	r0, 800af48 <__cvt+0x7c>
 800af44:	f8cd 900c 	str.w	r9, [sp, #12]
 800af48:	2230      	movs	r2, #48	@ 0x30
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	454b      	cmp	r3, r9
 800af4e:	d31e      	bcc.n	800af8e <__cvt+0xc2>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af54:	1b5b      	subs	r3, r3, r5
 800af56:	4628      	mov	r0, r5
 800af58:	6013      	str	r3, [r2, #0]
 800af5a:	b004      	add	sp, #16
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af64:	eb00 0904 	add.w	r9, r0, r4
 800af68:	d1e5      	bne.n	800af36 <__cvt+0x6a>
 800af6a:	7803      	ldrb	r3, [r0, #0]
 800af6c:	2b30      	cmp	r3, #48	@ 0x30
 800af6e:	d10a      	bne.n	800af86 <__cvt+0xba>
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 800af7c:	b918      	cbnz	r0, 800af86 <__cvt+0xba>
 800af7e:	f1c4 0401 	rsb	r4, r4, #1
 800af82:	f8ca 4000 	str.w	r4, [sl]
 800af86:	f8da 3000 	ldr.w	r3, [sl]
 800af8a:	4499      	add	r9, r3
 800af8c:	e7d3      	b.n	800af36 <__cvt+0x6a>
 800af8e:	1c59      	adds	r1, r3, #1
 800af90:	9103      	str	r1, [sp, #12]
 800af92:	701a      	strb	r2, [r3, #0]
 800af94:	e7d9      	b.n	800af4a <__cvt+0x7e>

0800af96 <__exponent>:
 800af96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af98:	2900      	cmp	r1, #0
 800af9a:	bfba      	itte	lt
 800af9c:	4249      	neglt	r1, r1
 800af9e:	232d      	movlt	r3, #45	@ 0x2d
 800afa0:	232b      	movge	r3, #43	@ 0x2b
 800afa2:	2909      	cmp	r1, #9
 800afa4:	7002      	strb	r2, [r0, #0]
 800afa6:	7043      	strb	r3, [r0, #1]
 800afa8:	dd29      	ble.n	800affe <__exponent+0x68>
 800afaa:	f10d 0307 	add.w	r3, sp, #7
 800afae:	461d      	mov	r5, r3
 800afb0:	270a      	movs	r7, #10
 800afb2:	461a      	mov	r2, r3
 800afb4:	fbb1 f6f7 	udiv	r6, r1, r7
 800afb8:	fb07 1416 	mls	r4, r7, r6, r1
 800afbc:	3430      	adds	r4, #48	@ 0x30
 800afbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800afc2:	460c      	mov	r4, r1
 800afc4:	2c63      	cmp	r4, #99	@ 0x63
 800afc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800afca:	4631      	mov	r1, r6
 800afcc:	dcf1      	bgt.n	800afb2 <__exponent+0x1c>
 800afce:	3130      	adds	r1, #48	@ 0x30
 800afd0:	1e94      	subs	r4, r2, #2
 800afd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800afd6:	1c41      	adds	r1, r0, #1
 800afd8:	4623      	mov	r3, r4
 800afda:	42ab      	cmp	r3, r5
 800afdc:	d30a      	bcc.n	800aff4 <__exponent+0x5e>
 800afde:	f10d 0309 	add.w	r3, sp, #9
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	42ac      	cmp	r4, r5
 800afe6:	bf88      	it	hi
 800afe8:	2300      	movhi	r3, #0
 800afea:	3302      	adds	r3, #2
 800afec:	4403      	add	r3, r0
 800afee:	1a18      	subs	r0, r3, r0
 800aff0:	b003      	add	sp, #12
 800aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aff8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800affc:	e7ed      	b.n	800afda <__exponent+0x44>
 800affe:	2330      	movs	r3, #48	@ 0x30
 800b000:	3130      	adds	r1, #48	@ 0x30
 800b002:	7083      	strb	r3, [r0, #2]
 800b004:	70c1      	strb	r1, [r0, #3]
 800b006:	1d03      	adds	r3, r0, #4
 800b008:	e7f1      	b.n	800afee <__exponent+0x58>
	...

0800b00c <_printf_float>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	b08d      	sub	sp, #52	@ 0x34
 800b012:	460c      	mov	r4, r1
 800b014:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b018:	4616      	mov	r6, r2
 800b01a:	461f      	mov	r7, r3
 800b01c:	4605      	mov	r5, r0
 800b01e:	f000 fcdb 	bl	800b9d8 <_localeconv_r>
 800b022:	6803      	ldr	r3, [r0, #0]
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	4618      	mov	r0, r3
 800b028:	f7f5 f922 	bl	8000270 <strlen>
 800b02c:	2300      	movs	r3, #0
 800b02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b030:	f8d8 3000 	ldr.w	r3, [r8]
 800b034:	9005      	str	r0, [sp, #20]
 800b036:	3307      	adds	r3, #7
 800b038:	f023 0307 	bic.w	r3, r3, #7
 800b03c:	f103 0208 	add.w	r2, r3, #8
 800b040:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b044:	f8d4 b000 	ldr.w	fp, [r4]
 800b048:	f8c8 2000 	str.w	r2, [r8]
 800b04c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b050:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b054:	9307      	str	r3, [sp, #28]
 800b056:	f8cd 8018 	str.w	r8, [sp, #24]
 800b05a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b05e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b062:	4b9c      	ldr	r3, [pc, #624]	@ (800b2d4 <_printf_float+0x2c8>)
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	f7f5 fd60 	bl	8000b2c <__aeabi_dcmpun>
 800b06c:	bb70      	cbnz	r0, 800b0cc <_printf_float+0xc0>
 800b06e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b072:	4b98      	ldr	r3, [pc, #608]	@ (800b2d4 <_printf_float+0x2c8>)
 800b074:	f04f 32ff 	mov.w	r2, #4294967295
 800b078:	f7f5 fd3a 	bl	8000af0 <__aeabi_dcmple>
 800b07c:	bb30      	cbnz	r0, 800b0cc <_printf_float+0xc0>
 800b07e:	2200      	movs	r2, #0
 800b080:	2300      	movs	r3, #0
 800b082:	4640      	mov	r0, r8
 800b084:	4649      	mov	r1, r9
 800b086:	f7f5 fd29 	bl	8000adc <__aeabi_dcmplt>
 800b08a:	b110      	cbz	r0, 800b092 <_printf_float+0x86>
 800b08c:	232d      	movs	r3, #45	@ 0x2d
 800b08e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b092:	4a91      	ldr	r2, [pc, #580]	@ (800b2d8 <_printf_float+0x2cc>)
 800b094:	4b91      	ldr	r3, [pc, #580]	@ (800b2dc <_printf_float+0x2d0>)
 800b096:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b09a:	bf94      	ite	ls
 800b09c:	4690      	movls	r8, r2
 800b09e:	4698      	movhi	r8, r3
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	f02b 0304 	bic.w	r3, fp, #4
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	f04f 0900 	mov.w	r9, #0
 800b0ae:	9700      	str	r7, [sp, #0]
 800b0b0:	4633      	mov	r3, r6
 800b0b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f000 f9d2 	bl	800b460 <_printf_common>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	f040 808d 	bne.w	800b1dc <_printf_float+0x1d0>
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	b00d      	add	sp, #52	@ 0x34
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	4642      	mov	r2, r8
 800b0ce:	464b      	mov	r3, r9
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	f7f5 fd2a 	bl	8000b2c <__aeabi_dcmpun>
 800b0d8:	b140      	cbz	r0, 800b0ec <_printf_float+0xe0>
 800b0da:	464b      	mov	r3, r9
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bfbc      	itt	lt
 800b0e0:	232d      	movlt	r3, #45	@ 0x2d
 800b0e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b0e6:	4a7e      	ldr	r2, [pc, #504]	@ (800b2e0 <_printf_float+0x2d4>)
 800b0e8:	4b7e      	ldr	r3, [pc, #504]	@ (800b2e4 <_printf_float+0x2d8>)
 800b0ea:	e7d4      	b.n	800b096 <_printf_float+0x8a>
 800b0ec:	6863      	ldr	r3, [r4, #4]
 800b0ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b0f2:	9206      	str	r2, [sp, #24]
 800b0f4:	1c5a      	adds	r2, r3, #1
 800b0f6:	d13b      	bne.n	800b170 <_printf_float+0x164>
 800b0f8:	2306      	movs	r3, #6
 800b0fa:	6063      	str	r3, [r4, #4]
 800b0fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b100:	2300      	movs	r3, #0
 800b102:	6022      	str	r2, [r4, #0]
 800b104:	9303      	str	r3, [sp, #12]
 800b106:	ab0a      	add	r3, sp, #40	@ 0x28
 800b108:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b10c:	ab09      	add	r3, sp, #36	@ 0x24
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	6861      	ldr	r1, [r4, #4]
 800b112:	ec49 8b10 	vmov	d0, r8, r9
 800b116:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b11a:	4628      	mov	r0, r5
 800b11c:	f7ff fed6 	bl	800aecc <__cvt>
 800b120:	9b06      	ldr	r3, [sp, #24]
 800b122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b124:	2b47      	cmp	r3, #71	@ 0x47
 800b126:	4680      	mov	r8, r0
 800b128:	d129      	bne.n	800b17e <_printf_float+0x172>
 800b12a:	1cc8      	adds	r0, r1, #3
 800b12c:	db02      	blt.n	800b134 <_printf_float+0x128>
 800b12e:	6863      	ldr	r3, [r4, #4]
 800b130:	4299      	cmp	r1, r3
 800b132:	dd41      	ble.n	800b1b8 <_printf_float+0x1ac>
 800b134:	f1aa 0a02 	sub.w	sl, sl, #2
 800b138:	fa5f fa8a 	uxtb.w	sl, sl
 800b13c:	3901      	subs	r1, #1
 800b13e:	4652      	mov	r2, sl
 800b140:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b144:	9109      	str	r1, [sp, #36]	@ 0x24
 800b146:	f7ff ff26 	bl	800af96 <__exponent>
 800b14a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b14c:	1813      	adds	r3, r2, r0
 800b14e:	2a01      	cmp	r2, #1
 800b150:	4681      	mov	r9, r0
 800b152:	6123      	str	r3, [r4, #16]
 800b154:	dc02      	bgt.n	800b15c <_printf_float+0x150>
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	07d2      	lsls	r2, r2, #31
 800b15a:	d501      	bpl.n	800b160 <_printf_float+0x154>
 800b15c:	3301      	adds	r3, #1
 800b15e:	6123      	str	r3, [r4, #16]
 800b160:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0a2      	beq.n	800b0ae <_printf_float+0xa2>
 800b168:	232d      	movs	r3, #45	@ 0x2d
 800b16a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b16e:	e79e      	b.n	800b0ae <_printf_float+0xa2>
 800b170:	9a06      	ldr	r2, [sp, #24]
 800b172:	2a47      	cmp	r2, #71	@ 0x47
 800b174:	d1c2      	bne.n	800b0fc <_printf_float+0xf0>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1c0      	bne.n	800b0fc <_printf_float+0xf0>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e7bd      	b.n	800b0fa <_printf_float+0xee>
 800b17e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b182:	d9db      	bls.n	800b13c <_printf_float+0x130>
 800b184:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b188:	d118      	bne.n	800b1bc <_printf_float+0x1b0>
 800b18a:	2900      	cmp	r1, #0
 800b18c:	6863      	ldr	r3, [r4, #4]
 800b18e:	dd0b      	ble.n	800b1a8 <_printf_float+0x19c>
 800b190:	6121      	str	r1, [r4, #16]
 800b192:	b913      	cbnz	r3, 800b19a <_printf_float+0x18e>
 800b194:	6822      	ldr	r2, [r4, #0]
 800b196:	07d0      	lsls	r0, r2, #31
 800b198:	d502      	bpl.n	800b1a0 <_printf_float+0x194>
 800b19a:	3301      	adds	r3, #1
 800b19c:	440b      	add	r3, r1
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b1a2:	f04f 0900 	mov.w	r9, #0
 800b1a6:	e7db      	b.n	800b160 <_printf_float+0x154>
 800b1a8:	b913      	cbnz	r3, 800b1b0 <_printf_float+0x1a4>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	07d2      	lsls	r2, r2, #31
 800b1ae:	d501      	bpl.n	800b1b4 <_printf_float+0x1a8>
 800b1b0:	3302      	adds	r3, #2
 800b1b2:	e7f4      	b.n	800b19e <_printf_float+0x192>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e7f2      	b.n	800b19e <_printf_float+0x192>
 800b1b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	db05      	blt.n	800b1ce <_printf_float+0x1c2>
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	6121      	str	r1, [r4, #16]
 800b1c6:	07d8      	lsls	r0, r3, #31
 800b1c8:	d5ea      	bpl.n	800b1a0 <_printf_float+0x194>
 800b1ca:	1c4b      	adds	r3, r1, #1
 800b1cc:	e7e7      	b.n	800b19e <_printf_float+0x192>
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	bfd4      	ite	le
 800b1d2:	f1c1 0202 	rsble	r2, r1, #2
 800b1d6:	2201      	movgt	r2, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	e7e0      	b.n	800b19e <_printf_float+0x192>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	055a      	lsls	r2, r3, #21
 800b1e0:	d407      	bmi.n	800b1f2 <_printf_float+0x1e6>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d12b      	bne.n	800b248 <_printf_float+0x23c>
 800b1f0:	e767      	b.n	800b0c2 <_printf_float+0xb6>
 800b1f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1f6:	f240 80dd 	bls.w	800b3b4 <_printf_float+0x3a8>
 800b1fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1fe:	2200      	movs	r2, #0
 800b200:	2300      	movs	r3, #0
 800b202:	f7f5 fc61 	bl	8000ac8 <__aeabi_dcmpeq>
 800b206:	2800      	cmp	r0, #0
 800b208:	d033      	beq.n	800b272 <_printf_float+0x266>
 800b20a:	4a37      	ldr	r2, [pc, #220]	@ (800b2e8 <_printf_float+0x2dc>)
 800b20c:	2301      	movs	r3, #1
 800b20e:	4631      	mov	r1, r6
 800b210:	4628      	mov	r0, r5
 800b212:	47b8      	blx	r7
 800b214:	3001      	adds	r0, #1
 800b216:	f43f af54 	beq.w	800b0c2 <_printf_float+0xb6>
 800b21a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b21e:	4543      	cmp	r3, r8
 800b220:	db02      	blt.n	800b228 <_printf_float+0x21c>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	07d8      	lsls	r0, r3, #31
 800b226:	d50f      	bpl.n	800b248 <_printf_float+0x23c>
 800b228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b22c:	4631      	mov	r1, r6
 800b22e:	4628      	mov	r0, r5
 800b230:	47b8      	blx	r7
 800b232:	3001      	adds	r0, #1
 800b234:	f43f af45 	beq.w	800b0c2 <_printf_float+0xb6>
 800b238:	f04f 0900 	mov.w	r9, #0
 800b23c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b240:	f104 0a1a 	add.w	sl, r4, #26
 800b244:	45c8      	cmp	r8, r9
 800b246:	dc09      	bgt.n	800b25c <_printf_float+0x250>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	079b      	lsls	r3, r3, #30
 800b24c:	f100 8103 	bmi.w	800b456 <_printf_float+0x44a>
 800b250:	68e0      	ldr	r0, [r4, #12]
 800b252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b254:	4298      	cmp	r0, r3
 800b256:	bfb8      	it	lt
 800b258:	4618      	movlt	r0, r3
 800b25a:	e734      	b.n	800b0c6 <_printf_float+0xba>
 800b25c:	2301      	movs	r3, #1
 800b25e:	4652      	mov	r2, sl
 800b260:	4631      	mov	r1, r6
 800b262:	4628      	mov	r0, r5
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	f43f af2b 	beq.w	800b0c2 <_printf_float+0xb6>
 800b26c:	f109 0901 	add.w	r9, r9, #1
 800b270:	e7e8      	b.n	800b244 <_printf_float+0x238>
 800b272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	dc39      	bgt.n	800b2ec <_printf_float+0x2e0>
 800b278:	4a1b      	ldr	r2, [pc, #108]	@ (800b2e8 <_printf_float+0x2dc>)
 800b27a:	2301      	movs	r3, #1
 800b27c:	4631      	mov	r1, r6
 800b27e:	4628      	mov	r0, r5
 800b280:	47b8      	blx	r7
 800b282:	3001      	adds	r0, #1
 800b284:	f43f af1d 	beq.w	800b0c2 <_printf_float+0xb6>
 800b288:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b28c:	ea59 0303 	orrs.w	r3, r9, r3
 800b290:	d102      	bne.n	800b298 <_printf_float+0x28c>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	07d9      	lsls	r1, r3, #31
 800b296:	d5d7      	bpl.n	800b248 <_printf_float+0x23c>
 800b298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f af0d 	beq.w	800b0c2 <_printf_float+0xb6>
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	f104 0b1a 	add.w	fp, r4, #26
 800b2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b2:	425b      	negs	r3, r3
 800b2b4:	4553      	cmp	r3, sl
 800b2b6:	dc01      	bgt.n	800b2bc <_printf_float+0x2b0>
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	e793      	b.n	800b1e4 <_printf_float+0x1d8>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	465a      	mov	r2, fp
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f43f aefb 	beq.w	800b0c2 <_printf_float+0xb6>
 800b2cc:	f10a 0a01 	add.w	sl, sl, #1
 800b2d0:	e7ee      	b.n	800b2b0 <_printf_float+0x2a4>
 800b2d2:	bf00      	nop
 800b2d4:	7fefffff 	.word	0x7fefffff
 800b2d8:	0800e820 	.word	0x0800e820
 800b2dc:	0800e824 	.word	0x0800e824
 800b2e0:	0800e828 	.word	0x0800e828
 800b2e4:	0800e82c 	.word	0x0800e82c
 800b2e8:	0800e830 	.word	0x0800e830
 800b2ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b2f2:	4553      	cmp	r3, sl
 800b2f4:	bfa8      	it	ge
 800b2f6:	4653      	movge	r3, sl
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	4699      	mov	r9, r3
 800b2fc:	dc36      	bgt.n	800b36c <_printf_float+0x360>
 800b2fe:	f04f 0b00 	mov.w	fp, #0
 800b302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b306:	f104 021a 	add.w	r2, r4, #26
 800b30a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b30c:	9306      	str	r3, [sp, #24]
 800b30e:	eba3 0309 	sub.w	r3, r3, r9
 800b312:	455b      	cmp	r3, fp
 800b314:	dc31      	bgt.n	800b37a <_printf_float+0x36e>
 800b316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b318:	459a      	cmp	sl, r3
 800b31a:	dc3a      	bgt.n	800b392 <_printf_float+0x386>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	07da      	lsls	r2, r3, #31
 800b320:	d437      	bmi.n	800b392 <_printf_float+0x386>
 800b322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b324:	ebaa 0903 	sub.w	r9, sl, r3
 800b328:	9b06      	ldr	r3, [sp, #24]
 800b32a:	ebaa 0303 	sub.w	r3, sl, r3
 800b32e:	4599      	cmp	r9, r3
 800b330:	bfa8      	it	ge
 800b332:	4699      	movge	r9, r3
 800b334:	f1b9 0f00 	cmp.w	r9, #0
 800b338:	dc33      	bgt.n	800b3a2 <_printf_float+0x396>
 800b33a:	f04f 0800 	mov.w	r8, #0
 800b33e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b342:	f104 0b1a 	add.w	fp, r4, #26
 800b346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b348:	ebaa 0303 	sub.w	r3, sl, r3
 800b34c:	eba3 0309 	sub.w	r3, r3, r9
 800b350:	4543      	cmp	r3, r8
 800b352:	f77f af79 	ble.w	800b248 <_printf_float+0x23c>
 800b356:	2301      	movs	r3, #1
 800b358:	465a      	mov	r2, fp
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b8      	blx	r7
 800b360:	3001      	adds	r0, #1
 800b362:	f43f aeae 	beq.w	800b0c2 <_printf_float+0xb6>
 800b366:	f108 0801 	add.w	r8, r8, #1
 800b36a:	e7ec      	b.n	800b346 <_printf_float+0x33a>
 800b36c:	4642      	mov	r2, r8
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	d1c2      	bne.n	800b2fe <_printf_float+0x2f2>
 800b378:	e6a3      	b.n	800b0c2 <_printf_float+0xb6>
 800b37a:	2301      	movs	r3, #1
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	9206      	str	r2, [sp, #24]
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	f43f ae9c 	beq.w	800b0c2 <_printf_float+0xb6>
 800b38a:	9a06      	ldr	r2, [sp, #24]
 800b38c:	f10b 0b01 	add.w	fp, fp, #1
 800b390:	e7bb      	b.n	800b30a <_printf_float+0x2fe>
 800b392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	d1c0      	bne.n	800b322 <_printf_float+0x316>
 800b3a0:	e68f      	b.n	800b0c2 <_printf_float+0xb6>
 800b3a2:	9a06      	ldr	r2, [sp, #24]
 800b3a4:	464b      	mov	r3, r9
 800b3a6:	4442      	add	r2, r8
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	d1c3      	bne.n	800b33a <_printf_float+0x32e>
 800b3b2:	e686      	b.n	800b0c2 <_printf_float+0xb6>
 800b3b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3b8:	f1ba 0f01 	cmp.w	sl, #1
 800b3bc:	dc01      	bgt.n	800b3c2 <_printf_float+0x3b6>
 800b3be:	07db      	lsls	r3, r3, #31
 800b3c0:	d536      	bpl.n	800b430 <_printf_float+0x424>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4642      	mov	r2, r8
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	47b8      	blx	r7
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	f43f ae78 	beq.w	800b0c2 <_printf_float+0xb6>
 800b3d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3d6:	4631      	mov	r1, r6
 800b3d8:	4628      	mov	r0, r5
 800b3da:	47b8      	blx	r7
 800b3dc:	3001      	adds	r0, #1
 800b3de:	f43f ae70 	beq.w	800b0c2 <_printf_float+0xb6>
 800b3e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3ee:	f7f5 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3f2:	b9c0      	cbnz	r0, 800b426 <_printf_float+0x41a>
 800b3f4:	4653      	mov	r3, sl
 800b3f6:	f108 0201 	add.w	r2, r8, #1
 800b3fa:	4631      	mov	r1, r6
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	47b8      	blx	r7
 800b400:	3001      	adds	r0, #1
 800b402:	d10c      	bne.n	800b41e <_printf_float+0x412>
 800b404:	e65d      	b.n	800b0c2 <_printf_float+0xb6>
 800b406:	2301      	movs	r3, #1
 800b408:	465a      	mov	r2, fp
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	f43f ae56 	beq.w	800b0c2 <_printf_float+0xb6>
 800b416:	f108 0801 	add.w	r8, r8, #1
 800b41a:	45d0      	cmp	r8, sl
 800b41c:	dbf3      	blt.n	800b406 <_printf_float+0x3fa>
 800b41e:	464b      	mov	r3, r9
 800b420:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b424:	e6df      	b.n	800b1e6 <_printf_float+0x1da>
 800b426:	f04f 0800 	mov.w	r8, #0
 800b42a:	f104 0b1a 	add.w	fp, r4, #26
 800b42e:	e7f4      	b.n	800b41a <_printf_float+0x40e>
 800b430:	2301      	movs	r3, #1
 800b432:	4642      	mov	r2, r8
 800b434:	e7e1      	b.n	800b3fa <_printf_float+0x3ee>
 800b436:	2301      	movs	r3, #1
 800b438:	464a      	mov	r2, r9
 800b43a:	4631      	mov	r1, r6
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b8      	blx	r7
 800b440:	3001      	adds	r0, #1
 800b442:	f43f ae3e 	beq.w	800b0c2 <_printf_float+0xb6>
 800b446:	f108 0801 	add.w	r8, r8, #1
 800b44a:	68e3      	ldr	r3, [r4, #12]
 800b44c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b44e:	1a5b      	subs	r3, r3, r1
 800b450:	4543      	cmp	r3, r8
 800b452:	dcf0      	bgt.n	800b436 <_printf_float+0x42a>
 800b454:	e6fc      	b.n	800b250 <_printf_float+0x244>
 800b456:	f04f 0800 	mov.w	r8, #0
 800b45a:	f104 0919 	add.w	r9, r4, #25
 800b45e:	e7f4      	b.n	800b44a <_printf_float+0x43e>

0800b460 <_printf_common>:
 800b460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b464:	4616      	mov	r6, r2
 800b466:	4698      	mov	r8, r3
 800b468:	688a      	ldr	r2, [r1, #8]
 800b46a:	690b      	ldr	r3, [r1, #16]
 800b46c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b470:	4293      	cmp	r3, r2
 800b472:	bfb8      	it	lt
 800b474:	4613      	movlt	r3, r2
 800b476:	6033      	str	r3, [r6, #0]
 800b478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b47c:	4607      	mov	r7, r0
 800b47e:	460c      	mov	r4, r1
 800b480:	b10a      	cbz	r2, 800b486 <_printf_common+0x26>
 800b482:	3301      	adds	r3, #1
 800b484:	6033      	str	r3, [r6, #0]
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	0699      	lsls	r1, r3, #26
 800b48a:	bf42      	ittt	mi
 800b48c:	6833      	ldrmi	r3, [r6, #0]
 800b48e:	3302      	addmi	r3, #2
 800b490:	6033      	strmi	r3, [r6, #0]
 800b492:	6825      	ldr	r5, [r4, #0]
 800b494:	f015 0506 	ands.w	r5, r5, #6
 800b498:	d106      	bne.n	800b4a8 <_printf_common+0x48>
 800b49a:	f104 0a19 	add.w	sl, r4, #25
 800b49e:	68e3      	ldr	r3, [r4, #12]
 800b4a0:	6832      	ldr	r2, [r6, #0]
 800b4a2:	1a9b      	subs	r3, r3, r2
 800b4a4:	42ab      	cmp	r3, r5
 800b4a6:	dc26      	bgt.n	800b4f6 <_printf_common+0x96>
 800b4a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4ac:	6822      	ldr	r2, [r4, #0]
 800b4ae:	3b00      	subs	r3, #0
 800b4b0:	bf18      	it	ne
 800b4b2:	2301      	movne	r3, #1
 800b4b4:	0692      	lsls	r2, r2, #26
 800b4b6:	d42b      	bmi.n	800b510 <_printf_common+0xb0>
 800b4b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4bc:	4641      	mov	r1, r8
 800b4be:	4638      	mov	r0, r7
 800b4c0:	47c8      	blx	r9
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	d01e      	beq.n	800b504 <_printf_common+0xa4>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	6922      	ldr	r2, [r4, #16]
 800b4ca:	f003 0306 	and.w	r3, r3, #6
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	bf02      	ittt	eq
 800b4d2:	68e5      	ldreq	r5, [r4, #12]
 800b4d4:	6833      	ldreq	r3, [r6, #0]
 800b4d6:	1aed      	subeq	r5, r5, r3
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	bf0c      	ite	eq
 800b4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4e0:	2500      	movne	r5, #0
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	bfc4      	itt	gt
 800b4e6:	1a9b      	subgt	r3, r3, r2
 800b4e8:	18ed      	addgt	r5, r5, r3
 800b4ea:	2600      	movs	r6, #0
 800b4ec:	341a      	adds	r4, #26
 800b4ee:	42b5      	cmp	r5, r6
 800b4f0:	d11a      	bne.n	800b528 <_printf_common+0xc8>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e008      	b.n	800b508 <_printf_common+0xa8>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4652      	mov	r2, sl
 800b4fa:	4641      	mov	r1, r8
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	47c8      	blx	r9
 800b500:	3001      	adds	r0, #1
 800b502:	d103      	bne.n	800b50c <_printf_common+0xac>
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50c:	3501      	adds	r5, #1
 800b50e:	e7c6      	b.n	800b49e <_printf_common+0x3e>
 800b510:	18e1      	adds	r1, r4, r3
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	2030      	movs	r0, #48	@ 0x30
 800b516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b51a:	4422      	add	r2, r4
 800b51c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b524:	3302      	adds	r3, #2
 800b526:	e7c7      	b.n	800b4b8 <_printf_common+0x58>
 800b528:	2301      	movs	r3, #1
 800b52a:	4622      	mov	r2, r4
 800b52c:	4641      	mov	r1, r8
 800b52e:	4638      	mov	r0, r7
 800b530:	47c8      	blx	r9
 800b532:	3001      	adds	r0, #1
 800b534:	d0e6      	beq.n	800b504 <_printf_common+0xa4>
 800b536:	3601      	adds	r6, #1
 800b538:	e7d9      	b.n	800b4ee <_printf_common+0x8e>
	...

0800b53c <_printf_i>:
 800b53c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	7e0f      	ldrb	r7, [r1, #24]
 800b542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b544:	2f78      	cmp	r7, #120	@ 0x78
 800b546:	4691      	mov	r9, r2
 800b548:	4680      	mov	r8, r0
 800b54a:	460c      	mov	r4, r1
 800b54c:	469a      	mov	sl, r3
 800b54e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b552:	d807      	bhi.n	800b564 <_printf_i+0x28>
 800b554:	2f62      	cmp	r7, #98	@ 0x62
 800b556:	d80a      	bhi.n	800b56e <_printf_i+0x32>
 800b558:	2f00      	cmp	r7, #0
 800b55a:	f000 80d2 	beq.w	800b702 <_printf_i+0x1c6>
 800b55e:	2f58      	cmp	r7, #88	@ 0x58
 800b560:	f000 80b9 	beq.w	800b6d6 <_printf_i+0x19a>
 800b564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b56c:	e03a      	b.n	800b5e4 <_printf_i+0xa8>
 800b56e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b572:	2b15      	cmp	r3, #21
 800b574:	d8f6      	bhi.n	800b564 <_printf_i+0x28>
 800b576:	a101      	add	r1, pc, #4	@ (adr r1, 800b57c <_printf_i+0x40>)
 800b578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b57c:	0800b5d5 	.word	0x0800b5d5
 800b580:	0800b5e9 	.word	0x0800b5e9
 800b584:	0800b565 	.word	0x0800b565
 800b588:	0800b565 	.word	0x0800b565
 800b58c:	0800b565 	.word	0x0800b565
 800b590:	0800b565 	.word	0x0800b565
 800b594:	0800b5e9 	.word	0x0800b5e9
 800b598:	0800b565 	.word	0x0800b565
 800b59c:	0800b565 	.word	0x0800b565
 800b5a0:	0800b565 	.word	0x0800b565
 800b5a4:	0800b565 	.word	0x0800b565
 800b5a8:	0800b6e9 	.word	0x0800b6e9
 800b5ac:	0800b613 	.word	0x0800b613
 800b5b0:	0800b6a3 	.word	0x0800b6a3
 800b5b4:	0800b565 	.word	0x0800b565
 800b5b8:	0800b565 	.word	0x0800b565
 800b5bc:	0800b70b 	.word	0x0800b70b
 800b5c0:	0800b565 	.word	0x0800b565
 800b5c4:	0800b613 	.word	0x0800b613
 800b5c8:	0800b565 	.word	0x0800b565
 800b5cc:	0800b565 	.word	0x0800b565
 800b5d0:	0800b6ab 	.word	0x0800b6ab
 800b5d4:	6833      	ldr	r3, [r6, #0]
 800b5d6:	1d1a      	adds	r2, r3, #4
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6032      	str	r2, [r6, #0]
 800b5dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e09d      	b.n	800b724 <_printf_i+0x1e8>
 800b5e8:	6833      	ldr	r3, [r6, #0]
 800b5ea:	6820      	ldr	r0, [r4, #0]
 800b5ec:	1d19      	adds	r1, r3, #4
 800b5ee:	6031      	str	r1, [r6, #0]
 800b5f0:	0606      	lsls	r6, r0, #24
 800b5f2:	d501      	bpl.n	800b5f8 <_printf_i+0xbc>
 800b5f4:	681d      	ldr	r5, [r3, #0]
 800b5f6:	e003      	b.n	800b600 <_printf_i+0xc4>
 800b5f8:	0645      	lsls	r5, r0, #25
 800b5fa:	d5fb      	bpl.n	800b5f4 <_printf_i+0xb8>
 800b5fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b600:	2d00      	cmp	r5, #0
 800b602:	da03      	bge.n	800b60c <_printf_i+0xd0>
 800b604:	232d      	movs	r3, #45	@ 0x2d
 800b606:	426d      	negs	r5, r5
 800b608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b60c:	4859      	ldr	r0, [pc, #356]	@ (800b774 <_printf_i+0x238>)
 800b60e:	230a      	movs	r3, #10
 800b610:	e011      	b.n	800b636 <_printf_i+0xfa>
 800b612:	6821      	ldr	r1, [r4, #0]
 800b614:	6833      	ldr	r3, [r6, #0]
 800b616:	0608      	lsls	r0, r1, #24
 800b618:	f853 5b04 	ldr.w	r5, [r3], #4
 800b61c:	d402      	bmi.n	800b624 <_printf_i+0xe8>
 800b61e:	0649      	lsls	r1, r1, #25
 800b620:	bf48      	it	mi
 800b622:	b2ad      	uxthmi	r5, r5
 800b624:	2f6f      	cmp	r7, #111	@ 0x6f
 800b626:	4853      	ldr	r0, [pc, #332]	@ (800b774 <_printf_i+0x238>)
 800b628:	6033      	str	r3, [r6, #0]
 800b62a:	bf14      	ite	ne
 800b62c:	230a      	movne	r3, #10
 800b62e:	2308      	moveq	r3, #8
 800b630:	2100      	movs	r1, #0
 800b632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b636:	6866      	ldr	r6, [r4, #4]
 800b638:	60a6      	str	r6, [r4, #8]
 800b63a:	2e00      	cmp	r6, #0
 800b63c:	bfa2      	ittt	ge
 800b63e:	6821      	ldrge	r1, [r4, #0]
 800b640:	f021 0104 	bicge.w	r1, r1, #4
 800b644:	6021      	strge	r1, [r4, #0]
 800b646:	b90d      	cbnz	r5, 800b64c <_printf_i+0x110>
 800b648:	2e00      	cmp	r6, #0
 800b64a:	d04b      	beq.n	800b6e4 <_printf_i+0x1a8>
 800b64c:	4616      	mov	r6, r2
 800b64e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b652:	fb03 5711 	mls	r7, r3, r1, r5
 800b656:	5dc7      	ldrb	r7, [r0, r7]
 800b658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b65c:	462f      	mov	r7, r5
 800b65e:	42bb      	cmp	r3, r7
 800b660:	460d      	mov	r5, r1
 800b662:	d9f4      	bls.n	800b64e <_printf_i+0x112>
 800b664:	2b08      	cmp	r3, #8
 800b666:	d10b      	bne.n	800b680 <_printf_i+0x144>
 800b668:	6823      	ldr	r3, [r4, #0]
 800b66a:	07df      	lsls	r7, r3, #31
 800b66c:	d508      	bpl.n	800b680 <_printf_i+0x144>
 800b66e:	6923      	ldr	r3, [r4, #16]
 800b670:	6861      	ldr	r1, [r4, #4]
 800b672:	4299      	cmp	r1, r3
 800b674:	bfde      	ittt	le
 800b676:	2330      	movle	r3, #48	@ 0x30
 800b678:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b67c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b680:	1b92      	subs	r2, r2, r6
 800b682:	6122      	str	r2, [r4, #16]
 800b684:	f8cd a000 	str.w	sl, [sp]
 800b688:	464b      	mov	r3, r9
 800b68a:	aa03      	add	r2, sp, #12
 800b68c:	4621      	mov	r1, r4
 800b68e:	4640      	mov	r0, r8
 800b690:	f7ff fee6 	bl	800b460 <_printf_common>
 800b694:	3001      	adds	r0, #1
 800b696:	d14a      	bne.n	800b72e <_printf_i+0x1f2>
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	b004      	add	sp, #16
 800b69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	f043 0320 	orr.w	r3, r3, #32
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	4833      	ldr	r0, [pc, #204]	@ (800b778 <_printf_i+0x23c>)
 800b6ac:	2778      	movs	r7, #120	@ 0x78
 800b6ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	6831      	ldr	r1, [r6, #0]
 800b6b6:	061f      	lsls	r7, r3, #24
 800b6b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6bc:	d402      	bmi.n	800b6c4 <_printf_i+0x188>
 800b6be:	065f      	lsls	r7, r3, #25
 800b6c0:	bf48      	it	mi
 800b6c2:	b2ad      	uxthmi	r5, r5
 800b6c4:	6031      	str	r1, [r6, #0]
 800b6c6:	07d9      	lsls	r1, r3, #31
 800b6c8:	bf44      	itt	mi
 800b6ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ce:	6023      	strmi	r3, [r4, #0]
 800b6d0:	b11d      	cbz	r5, 800b6da <_printf_i+0x19e>
 800b6d2:	2310      	movs	r3, #16
 800b6d4:	e7ac      	b.n	800b630 <_printf_i+0xf4>
 800b6d6:	4827      	ldr	r0, [pc, #156]	@ (800b774 <_printf_i+0x238>)
 800b6d8:	e7e9      	b.n	800b6ae <_printf_i+0x172>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	f023 0320 	bic.w	r3, r3, #32
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	e7f6      	b.n	800b6d2 <_printf_i+0x196>
 800b6e4:	4616      	mov	r6, r2
 800b6e6:	e7bd      	b.n	800b664 <_printf_i+0x128>
 800b6e8:	6833      	ldr	r3, [r6, #0]
 800b6ea:	6825      	ldr	r5, [r4, #0]
 800b6ec:	6961      	ldr	r1, [r4, #20]
 800b6ee:	1d18      	adds	r0, r3, #4
 800b6f0:	6030      	str	r0, [r6, #0]
 800b6f2:	062e      	lsls	r6, r5, #24
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	d501      	bpl.n	800b6fc <_printf_i+0x1c0>
 800b6f8:	6019      	str	r1, [r3, #0]
 800b6fa:	e002      	b.n	800b702 <_printf_i+0x1c6>
 800b6fc:	0668      	lsls	r0, r5, #25
 800b6fe:	d5fb      	bpl.n	800b6f8 <_printf_i+0x1bc>
 800b700:	8019      	strh	r1, [r3, #0]
 800b702:	2300      	movs	r3, #0
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	4616      	mov	r6, r2
 800b708:	e7bc      	b.n	800b684 <_printf_i+0x148>
 800b70a:	6833      	ldr	r3, [r6, #0]
 800b70c:	1d1a      	adds	r2, r3, #4
 800b70e:	6032      	str	r2, [r6, #0]
 800b710:	681e      	ldr	r6, [r3, #0]
 800b712:	6862      	ldr	r2, [r4, #4]
 800b714:	2100      	movs	r1, #0
 800b716:	4630      	mov	r0, r6
 800b718:	f7f4 fd5a 	bl	80001d0 <memchr>
 800b71c:	b108      	cbz	r0, 800b722 <_printf_i+0x1e6>
 800b71e:	1b80      	subs	r0, r0, r6
 800b720:	6060      	str	r0, [r4, #4]
 800b722:	6863      	ldr	r3, [r4, #4]
 800b724:	6123      	str	r3, [r4, #16]
 800b726:	2300      	movs	r3, #0
 800b728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b72c:	e7aa      	b.n	800b684 <_printf_i+0x148>
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	4632      	mov	r2, r6
 800b732:	4649      	mov	r1, r9
 800b734:	4640      	mov	r0, r8
 800b736:	47d0      	blx	sl
 800b738:	3001      	adds	r0, #1
 800b73a:	d0ad      	beq.n	800b698 <_printf_i+0x15c>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	079b      	lsls	r3, r3, #30
 800b740:	d413      	bmi.n	800b76a <_printf_i+0x22e>
 800b742:	68e0      	ldr	r0, [r4, #12]
 800b744:	9b03      	ldr	r3, [sp, #12]
 800b746:	4298      	cmp	r0, r3
 800b748:	bfb8      	it	lt
 800b74a:	4618      	movlt	r0, r3
 800b74c:	e7a6      	b.n	800b69c <_printf_i+0x160>
 800b74e:	2301      	movs	r3, #1
 800b750:	4632      	mov	r2, r6
 800b752:	4649      	mov	r1, r9
 800b754:	4640      	mov	r0, r8
 800b756:	47d0      	blx	sl
 800b758:	3001      	adds	r0, #1
 800b75a:	d09d      	beq.n	800b698 <_printf_i+0x15c>
 800b75c:	3501      	adds	r5, #1
 800b75e:	68e3      	ldr	r3, [r4, #12]
 800b760:	9903      	ldr	r1, [sp, #12]
 800b762:	1a5b      	subs	r3, r3, r1
 800b764:	42ab      	cmp	r3, r5
 800b766:	dcf2      	bgt.n	800b74e <_printf_i+0x212>
 800b768:	e7eb      	b.n	800b742 <_printf_i+0x206>
 800b76a:	2500      	movs	r5, #0
 800b76c:	f104 0619 	add.w	r6, r4, #25
 800b770:	e7f5      	b.n	800b75e <_printf_i+0x222>
 800b772:	bf00      	nop
 800b774:	0800e832 	.word	0x0800e832
 800b778:	0800e843 	.word	0x0800e843

0800b77c <std>:
 800b77c:	2300      	movs	r3, #0
 800b77e:	b510      	push	{r4, lr}
 800b780:	4604      	mov	r4, r0
 800b782:	e9c0 3300 	strd	r3, r3, [r0]
 800b786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b78a:	6083      	str	r3, [r0, #8]
 800b78c:	8181      	strh	r1, [r0, #12]
 800b78e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b790:	81c2      	strh	r2, [r0, #14]
 800b792:	6183      	str	r3, [r0, #24]
 800b794:	4619      	mov	r1, r3
 800b796:	2208      	movs	r2, #8
 800b798:	305c      	adds	r0, #92	@ 0x5c
 800b79a:	f000 f914 	bl	800b9c6 <memset>
 800b79e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d4 <std+0x58>)
 800b7a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d8 <std+0x5c>)
 800b7a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7dc <std+0x60>)
 800b7a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e0 <std+0x64>)
 800b7ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e4 <std+0x68>)
 800b7b0:	6224      	str	r4, [r4, #32]
 800b7b2:	429c      	cmp	r4, r3
 800b7b4:	d006      	beq.n	800b7c4 <std+0x48>
 800b7b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7ba:	4294      	cmp	r4, r2
 800b7bc:	d002      	beq.n	800b7c4 <std+0x48>
 800b7be:	33d0      	adds	r3, #208	@ 0xd0
 800b7c0:	429c      	cmp	r4, r3
 800b7c2:	d105      	bne.n	800b7d0 <std+0x54>
 800b7c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7cc:	f000 b978 	b.w	800bac0 <__retarget_lock_init_recursive>
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800b941 	.word	0x0800b941
 800b7d8:	0800b963 	.word	0x0800b963
 800b7dc:	0800b99b 	.word	0x0800b99b
 800b7e0:	0800b9bf 	.word	0x0800b9bf
 800b7e4:	200051fc 	.word	0x200051fc

0800b7e8 <stdio_exit_handler>:
 800b7e8:	4a02      	ldr	r2, [pc, #8]	@ (800b7f4 <stdio_exit_handler+0xc>)
 800b7ea:	4903      	ldr	r1, [pc, #12]	@ (800b7f8 <stdio_exit_handler+0x10>)
 800b7ec:	4803      	ldr	r0, [pc, #12]	@ (800b7fc <stdio_exit_handler+0x14>)
 800b7ee:	f000 b869 	b.w	800b8c4 <_fwalk_sglue>
 800b7f2:	bf00      	nop
 800b7f4:	20000014 	.word	0x20000014
 800b7f8:	0800d43d 	.word	0x0800d43d
 800b7fc:	20000024 	.word	0x20000024

0800b800 <cleanup_stdio>:
 800b800:	6841      	ldr	r1, [r0, #4]
 800b802:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <cleanup_stdio+0x34>)
 800b804:	4299      	cmp	r1, r3
 800b806:	b510      	push	{r4, lr}
 800b808:	4604      	mov	r4, r0
 800b80a:	d001      	beq.n	800b810 <cleanup_stdio+0x10>
 800b80c:	f001 fe16 	bl	800d43c <_fflush_r>
 800b810:	68a1      	ldr	r1, [r4, #8]
 800b812:	4b09      	ldr	r3, [pc, #36]	@ (800b838 <cleanup_stdio+0x38>)
 800b814:	4299      	cmp	r1, r3
 800b816:	d002      	beq.n	800b81e <cleanup_stdio+0x1e>
 800b818:	4620      	mov	r0, r4
 800b81a:	f001 fe0f 	bl	800d43c <_fflush_r>
 800b81e:	68e1      	ldr	r1, [r4, #12]
 800b820:	4b06      	ldr	r3, [pc, #24]	@ (800b83c <cleanup_stdio+0x3c>)
 800b822:	4299      	cmp	r1, r3
 800b824:	d004      	beq.n	800b830 <cleanup_stdio+0x30>
 800b826:	4620      	mov	r0, r4
 800b828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b82c:	f001 be06 	b.w	800d43c <_fflush_r>
 800b830:	bd10      	pop	{r4, pc}
 800b832:	bf00      	nop
 800b834:	200051fc 	.word	0x200051fc
 800b838:	20005264 	.word	0x20005264
 800b83c:	200052cc 	.word	0x200052cc

0800b840 <global_stdio_init.part.0>:
 800b840:	b510      	push	{r4, lr}
 800b842:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <global_stdio_init.part.0+0x30>)
 800b844:	4c0b      	ldr	r4, [pc, #44]	@ (800b874 <global_stdio_init.part.0+0x34>)
 800b846:	4a0c      	ldr	r2, [pc, #48]	@ (800b878 <global_stdio_init.part.0+0x38>)
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	4620      	mov	r0, r4
 800b84c:	2200      	movs	r2, #0
 800b84e:	2104      	movs	r1, #4
 800b850:	f7ff ff94 	bl	800b77c <std>
 800b854:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b858:	2201      	movs	r2, #1
 800b85a:	2109      	movs	r1, #9
 800b85c:	f7ff ff8e 	bl	800b77c <std>
 800b860:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b864:	2202      	movs	r2, #2
 800b866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b86a:	2112      	movs	r1, #18
 800b86c:	f7ff bf86 	b.w	800b77c <std>
 800b870:	20005334 	.word	0x20005334
 800b874:	200051fc 	.word	0x200051fc
 800b878:	0800b7e9 	.word	0x0800b7e9

0800b87c <__sfp_lock_acquire>:
 800b87c:	4801      	ldr	r0, [pc, #4]	@ (800b884 <__sfp_lock_acquire+0x8>)
 800b87e:	f000 b920 	b.w	800bac2 <__retarget_lock_acquire_recursive>
 800b882:	bf00      	nop
 800b884:	2000533d 	.word	0x2000533d

0800b888 <__sfp_lock_release>:
 800b888:	4801      	ldr	r0, [pc, #4]	@ (800b890 <__sfp_lock_release+0x8>)
 800b88a:	f000 b91b 	b.w	800bac4 <__retarget_lock_release_recursive>
 800b88e:	bf00      	nop
 800b890:	2000533d 	.word	0x2000533d

0800b894 <__sinit>:
 800b894:	b510      	push	{r4, lr}
 800b896:	4604      	mov	r4, r0
 800b898:	f7ff fff0 	bl	800b87c <__sfp_lock_acquire>
 800b89c:	6a23      	ldr	r3, [r4, #32]
 800b89e:	b11b      	cbz	r3, 800b8a8 <__sinit+0x14>
 800b8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8a4:	f7ff bff0 	b.w	800b888 <__sfp_lock_release>
 800b8a8:	4b04      	ldr	r3, [pc, #16]	@ (800b8bc <__sinit+0x28>)
 800b8aa:	6223      	str	r3, [r4, #32]
 800b8ac:	4b04      	ldr	r3, [pc, #16]	@ (800b8c0 <__sinit+0x2c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1f5      	bne.n	800b8a0 <__sinit+0xc>
 800b8b4:	f7ff ffc4 	bl	800b840 <global_stdio_init.part.0>
 800b8b8:	e7f2      	b.n	800b8a0 <__sinit+0xc>
 800b8ba:	bf00      	nop
 800b8bc:	0800b801 	.word	0x0800b801
 800b8c0:	20005334 	.word	0x20005334

0800b8c4 <_fwalk_sglue>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	4688      	mov	r8, r1
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	2600      	movs	r6, #0
 800b8d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b8d8:	d505      	bpl.n	800b8e6 <_fwalk_sglue+0x22>
 800b8da:	6824      	ldr	r4, [r4, #0]
 800b8dc:	2c00      	cmp	r4, #0
 800b8de:	d1f7      	bne.n	800b8d0 <_fwalk_sglue+0xc>
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d907      	bls.n	800b8fc <_fwalk_sglue+0x38>
 800b8ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	d003      	beq.n	800b8fc <_fwalk_sglue+0x38>
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	47c0      	blx	r8
 800b8fa:	4306      	orrs	r6, r0
 800b8fc:	3568      	adds	r5, #104	@ 0x68
 800b8fe:	e7e9      	b.n	800b8d4 <_fwalk_sglue+0x10>

0800b900 <siprintf>:
 800b900:	b40e      	push	{r1, r2, r3}
 800b902:	b500      	push	{lr}
 800b904:	b09c      	sub	sp, #112	@ 0x70
 800b906:	ab1d      	add	r3, sp, #116	@ 0x74
 800b908:	9002      	str	r0, [sp, #8]
 800b90a:	9006      	str	r0, [sp, #24]
 800b90c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b910:	4809      	ldr	r0, [pc, #36]	@ (800b938 <siprintf+0x38>)
 800b912:	9107      	str	r1, [sp, #28]
 800b914:	9104      	str	r1, [sp, #16]
 800b916:	4909      	ldr	r1, [pc, #36]	@ (800b93c <siprintf+0x3c>)
 800b918:	f853 2b04 	ldr.w	r2, [r3], #4
 800b91c:	9105      	str	r1, [sp, #20]
 800b91e:	6800      	ldr	r0, [r0, #0]
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	a902      	add	r1, sp, #8
 800b924:	f001 fc0a 	bl	800d13c <_svfiprintf_r>
 800b928:	9b02      	ldr	r3, [sp, #8]
 800b92a:	2200      	movs	r2, #0
 800b92c:	701a      	strb	r2, [r3, #0]
 800b92e:	b01c      	add	sp, #112	@ 0x70
 800b930:	f85d eb04 	ldr.w	lr, [sp], #4
 800b934:	b003      	add	sp, #12
 800b936:	4770      	bx	lr
 800b938:	20000020 	.word	0x20000020
 800b93c:	ffff0208 	.word	0xffff0208

0800b940 <__sread>:
 800b940:	b510      	push	{r4, lr}
 800b942:	460c      	mov	r4, r1
 800b944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b948:	f000 f86c 	bl	800ba24 <_read_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	bfab      	itete	ge
 800b950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b952:	89a3      	ldrhlt	r3, [r4, #12]
 800b954:	181b      	addge	r3, r3, r0
 800b956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b95a:	bfac      	ite	ge
 800b95c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b95e:	81a3      	strhlt	r3, [r4, #12]
 800b960:	bd10      	pop	{r4, pc}

0800b962 <__swrite>:
 800b962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b966:	461f      	mov	r7, r3
 800b968:	898b      	ldrh	r3, [r1, #12]
 800b96a:	05db      	lsls	r3, r3, #23
 800b96c:	4605      	mov	r5, r0
 800b96e:	460c      	mov	r4, r1
 800b970:	4616      	mov	r6, r2
 800b972:	d505      	bpl.n	800b980 <__swrite+0x1e>
 800b974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b978:	2302      	movs	r3, #2
 800b97a:	2200      	movs	r2, #0
 800b97c:	f000 f840 	bl	800ba00 <_lseek_r>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	4632      	mov	r2, r6
 800b98e:	463b      	mov	r3, r7
 800b990:	4628      	mov	r0, r5
 800b992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	f000 b857 	b.w	800ba48 <_write_r>

0800b99a <__sseek>:
 800b99a:	b510      	push	{r4, lr}
 800b99c:	460c      	mov	r4, r1
 800b99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a2:	f000 f82d 	bl	800ba00 <_lseek_r>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	bf15      	itete	ne
 800b9ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9b6:	81a3      	strheq	r3, [r4, #12]
 800b9b8:	bf18      	it	ne
 800b9ba:	81a3      	strhne	r3, [r4, #12]
 800b9bc:	bd10      	pop	{r4, pc}

0800b9be <__sclose>:
 800b9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c2:	f000 b80d 	b.w	800b9e0 <_close_r>

0800b9c6 <memset>:
 800b9c6:	4402      	add	r2, r0
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d100      	bne.n	800b9d0 <memset+0xa>
 800b9ce:	4770      	bx	lr
 800b9d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d4:	e7f9      	b.n	800b9ca <memset+0x4>
	...

0800b9d8 <_localeconv_r>:
 800b9d8:	4800      	ldr	r0, [pc, #0]	@ (800b9dc <_localeconv_r+0x4>)
 800b9da:	4770      	bx	lr
 800b9dc:	20000160 	.word	0x20000160

0800b9e0 <_close_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d06      	ldr	r5, [pc, #24]	@ (800b9fc <_close_r+0x1c>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	f7f7 fb6a 	bl	80030c4 <_close>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_close_r+0x1a>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_close_r+0x1a>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	20005338 	.word	0x20005338

0800ba00 <_lseek_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	@ (800ba20 <_lseek_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f7 fb7f 	bl	8003112 <_lseek>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_lseek_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_lseek_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20005338 	.word	0x20005338

0800ba24 <_read_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d07      	ldr	r5, [pc, #28]	@ (800ba44 <_read_r+0x20>)
 800ba28:	4604      	mov	r4, r0
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	2200      	movs	r2, #0
 800ba30:	602a      	str	r2, [r5, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f7f7 fb0d 	bl	8003052 <_read>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_read_r+0x1e>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_read_r+0x1e>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	20005338 	.word	0x20005338

0800ba48 <_write_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d07      	ldr	r5, [pc, #28]	@ (800ba68 <_write_r+0x20>)
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	4608      	mov	r0, r1
 800ba50:	4611      	mov	r1, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	602a      	str	r2, [r5, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f7f7 fb18 	bl	800308c <_write>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_write_r+0x1e>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_write_r+0x1e>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20005338 	.word	0x20005338

0800ba6c <__errno>:
 800ba6c:	4b01      	ldr	r3, [pc, #4]	@ (800ba74 <__errno+0x8>)
 800ba6e:	6818      	ldr	r0, [r3, #0]
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000020 	.word	0x20000020

0800ba78 <__libc_init_array>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	4d0d      	ldr	r5, [pc, #52]	@ (800bab0 <__libc_init_array+0x38>)
 800ba7c:	4c0d      	ldr	r4, [pc, #52]	@ (800bab4 <__libc_init_array+0x3c>)
 800ba7e:	1b64      	subs	r4, r4, r5
 800ba80:	10a4      	asrs	r4, r4, #2
 800ba82:	2600      	movs	r6, #0
 800ba84:	42a6      	cmp	r6, r4
 800ba86:	d109      	bne.n	800ba9c <__libc_init_array+0x24>
 800ba88:	4d0b      	ldr	r5, [pc, #44]	@ (800bab8 <__libc_init_array+0x40>)
 800ba8a:	4c0c      	ldr	r4, [pc, #48]	@ (800babc <__libc_init_array+0x44>)
 800ba8c:	f002 f866 	bl	800db5c <_init>
 800ba90:	1b64      	subs	r4, r4, r5
 800ba92:	10a4      	asrs	r4, r4, #2
 800ba94:	2600      	movs	r6, #0
 800ba96:	42a6      	cmp	r6, r4
 800ba98:	d105      	bne.n	800baa6 <__libc_init_array+0x2e>
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa0:	4798      	blx	r3
 800baa2:	3601      	adds	r6, #1
 800baa4:	e7ee      	b.n	800ba84 <__libc_init_array+0xc>
 800baa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baaa:	4798      	blx	r3
 800baac:	3601      	adds	r6, #1
 800baae:	e7f2      	b.n	800ba96 <__libc_init_array+0x1e>
 800bab0:	0800eb98 	.word	0x0800eb98
 800bab4:	0800eb98 	.word	0x0800eb98
 800bab8:	0800eb98 	.word	0x0800eb98
 800babc:	0800eb9c 	.word	0x0800eb9c

0800bac0 <__retarget_lock_init_recursive>:
 800bac0:	4770      	bx	lr

0800bac2 <__retarget_lock_acquire_recursive>:
 800bac2:	4770      	bx	lr

0800bac4 <__retarget_lock_release_recursive>:
 800bac4:	4770      	bx	lr

0800bac6 <memcpy>:
 800bac6:	440a      	add	r2, r1
 800bac8:	4291      	cmp	r1, r2
 800baca:	f100 33ff 	add.w	r3, r0, #4294967295
 800bace:	d100      	bne.n	800bad2 <memcpy+0xc>
 800bad0:	4770      	bx	lr
 800bad2:	b510      	push	{r4, lr}
 800bad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800badc:	4291      	cmp	r1, r2
 800bade:	d1f9      	bne.n	800bad4 <memcpy+0xe>
 800bae0:	bd10      	pop	{r4, pc}

0800bae2 <quorem>:
 800bae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae6:	6903      	ldr	r3, [r0, #16]
 800bae8:	690c      	ldr	r4, [r1, #16]
 800baea:	42a3      	cmp	r3, r4
 800baec:	4607      	mov	r7, r0
 800baee:	db7e      	blt.n	800bbee <quorem+0x10c>
 800baf0:	3c01      	subs	r4, #1
 800baf2:	f101 0814 	add.w	r8, r1, #20
 800baf6:	00a3      	lsls	r3, r4, #2
 800baf8:	f100 0514 	add.w	r5, r0, #20
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb14:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb18:	d32e      	bcc.n	800bb78 <quorem+0x96>
 800bb1a:	f04f 0a00 	mov.w	sl, #0
 800bb1e:	46c4      	mov	ip, r8
 800bb20:	46ae      	mov	lr, r5
 800bb22:	46d3      	mov	fp, sl
 800bb24:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb28:	b298      	uxth	r0, r3
 800bb2a:	fb06 a000 	mla	r0, r6, r0, sl
 800bb2e:	0c02      	lsrs	r2, r0, #16
 800bb30:	0c1b      	lsrs	r3, r3, #16
 800bb32:	fb06 2303 	mla	r3, r6, r3, r2
 800bb36:	f8de 2000 	ldr.w	r2, [lr]
 800bb3a:	b280      	uxth	r0, r0
 800bb3c:	b292      	uxth	r2, r2
 800bb3e:	1a12      	subs	r2, r2, r0
 800bb40:	445a      	add	r2, fp
 800bb42:	f8de 0000 	ldr.w	r0, [lr]
 800bb46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb54:	b292      	uxth	r2, r2
 800bb56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb5a:	45e1      	cmp	r9, ip
 800bb5c:	f84e 2b04 	str.w	r2, [lr], #4
 800bb60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb64:	d2de      	bcs.n	800bb24 <quorem+0x42>
 800bb66:	9b00      	ldr	r3, [sp, #0]
 800bb68:	58eb      	ldr	r3, [r5, r3]
 800bb6a:	b92b      	cbnz	r3, 800bb78 <quorem+0x96>
 800bb6c:	9b01      	ldr	r3, [sp, #4]
 800bb6e:	3b04      	subs	r3, #4
 800bb70:	429d      	cmp	r5, r3
 800bb72:	461a      	mov	r2, r3
 800bb74:	d32f      	bcc.n	800bbd6 <quorem+0xf4>
 800bb76:	613c      	str	r4, [r7, #16]
 800bb78:	4638      	mov	r0, r7
 800bb7a:	f001 f97b 	bl	800ce74 <__mcmp>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	db25      	blt.n	800bbce <quorem+0xec>
 800bb82:	4629      	mov	r1, r5
 800bb84:	2000      	movs	r0, #0
 800bb86:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb8a:	f8d1 c000 	ldr.w	ip, [r1]
 800bb8e:	fa1f fe82 	uxth.w	lr, r2
 800bb92:	fa1f f38c 	uxth.w	r3, ip
 800bb96:	eba3 030e 	sub.w	r3, r3, lr
 800bb9a:	4403      	add	r3, r0
 800bb9c:	0c12      	lsrs	r2, r2, #16
 800bb9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bba2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbac:	45c1      	cmp	r9, r8
 800bbae:	f841 3b04 	str.w	r3, [r1], #4
 800bbb2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbb6:	d2e6      	bcs.n	800bb86 <quorem+0xa4>
 800bbb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbc0:	b922      	cbnz	r2, 800bbcc <quorem+0xea>
 800bbc2:	3b04      	subs	r3, #4
 800bbc4:	429d      	cmp	r5, r3
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	d30b      	bcc.n	800bbe2 <quorem+0x100>
 800bbca:	613c      	str	r4, [r7, #16]
 800bbcc:	3601      	adds	r6, #1
 800bbce:	4630      	mov	r0, r6
 800bbd0:	b003      	add	sp, #12
 800bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd6:	6812      	ldr	r2, [r2, #0]
 800bbd8:	3b04      	subs	r3, #4
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	d1cb      	bne.n	800bb76 <quorem+0x94>
 800bbde:	3c01      	subs	r4, #1
 800bbe0:	e7c6      	b.n	800bb70 <quorem+0x8e>
 800bbe2:	6812      	ldr	r2, [r2, #0]
 800bbe4:	3b04      	subs	r3, #4
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	d1ef      	bne.n	800bbca <quorem+0xe8>
 800bbea:	3c01      	subs	r4, #1
 800bbec:	e7ea      	b.n	800bbc4 <quorem+0xe2>
 800bbee:	2000      	movs	r0, #0
 800bbf0:	e7ee      	b.n	800bbd0 <quorem+0xee>
 800bbf2:	0000      	movs	r0, r0
 800bbf4:	0000      	movs	r0, r0
	...

0800bbf8 <_dtoa_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	69c7      	ldr	r7, [r0, #28]
 800bbfe:	b099      	sub	sp, #100	@ 0x64
 800bc00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc04:	ec55 4b10 	vmov	r4, r5, d0
 800bc08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bc0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc0c:	4683      	mov	fp, r0
 800bc0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc12:	b97f      	cbnz	r7, 800bc34 <_dtoa_r+0x3c>
 800bc14:	2010      	movs	r0, #16
 800bc16:	f000 fdfd 	bl	800c814 <malloc>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bc20:	b920      	cbnz	r0, 800bc2c <_dtoa_r+0x34>
 800bc22:	4ba7      	ldr	r3, [pc, #668]	@ (800bec0 <_dtoa_r+0x2c8>)
 800bc24:	21ef      	movs	r1, #239	@ 0xef
 800bc26:	48a7      	ldr	r0, [pc, #668]	@ (800bec4 <_dtoa_r+0x2cc>)
 800bc28:	f001 fc5a 	bl	800d4e0 <__assert_func>
 800bc2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc30:	6007      	str	r7, [r0, #0]
 800bc32:	60c7      	str	r7, [r0, #12]
 800bc34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc38:	6819      	ldr	r1, [r3, #0]
 800bc3a:	b159      	cbz	r1, 800bc54 <_dtoa_r+0x5c>
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	604a      	str	r2, [r1, #4]
 800bc40:	2301      	movs	r3, #1
 800bc42:	4093      	lsls	r3, r2
 800bc44:	608b      	str	r3, [r1, #8]
 800bc46:	4658      	mov	r0, fp
 800bc48:	f000 feda 	bl	800ca00 <_Bfree>
 800bc4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	1e2b      	subs	r3, r5, #0
 800bc56:	bfb9      	ittee	lt
 800bc58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc5c:	9303      	strlt	r3, [sp, #12]
 800bc5e:	2300      	movge	r3, #0
 800bc60:	6033      	strge	r3, [r6, #0]
 800bc62:	9f03      	ldr	r7, [sp, #12]
 800bc64:	4b98      	ldr	r3, [pc, #608]	@ (800bec8 <_dtoa_r+0x2d0>)
 800bc66:	bfbc      	itt	lt
 800bc68:	2201      	movlt	r2, #1
 800bc6a:	6032      	strlt	r2, [r6, #0]
 800bc6c:	43bb      	bics	r3, r7
 800bc6e:	d112      	bne.n	800bc96 <_dtoa_r+0x9e>
 800bc70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc7c:	4323      	orrs	r3, r4
 800bc7e:	f000 854d 	beq.w	800c71c <_dtoa_r+0xb24>
 800bc82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bedc <_dtoa_r+0x2e4>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 854f 	beq.w	800c72c <_dtoa_r+0xb34>
 800bc8e:	f10a 0303 	add.w	r3, sl, #3
 800bc92:	f000 bd49 	b.w	800c728 <_dtoa_r+0xb30>
 800bc96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	ec51 0b17 	vmov	r0, r1, d7
 800bca0:	2300      	movs	r3, #0
 800bca2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bca6:	f7f4 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcaa:	4680      	mov	r8, r0
 800bcac:	b158      	cbz	r0, 800bcc6 <_dtoa_r+0xce>
 800bcae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcb6:	b113      	cbz	r3, 800bcbe <_dtoa_r+0xc6>
 800bcb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcba:	4b84      	ldr	r3, [pc, #528]	@ (800becc <_dtoa_r+0x2d4>)
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bee0 <_dtoa_r+0x2e8>
 800bcc2:	f000 bd33 	b.w	800c72c <_dtoa_r+0xb34>
 800bcc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bcca:	aa16      	add	r2, sp, #88	@ 0x58
 800bccc:	a917      	add	r1, sp, #92	@ 0x5c
 800bcce:	4658      	mov	r0, fp
 800bcd0:	f001 f980 	bl	800cfd4 <__d2b>
 800bcd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bcd8:	4681      	mov	r9, r0
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	d077      	beq.n	800bdce <_dtoa_r+0x1d6>
 800bcde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bce0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bcf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bcf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4b74      	ldr	r3, [pc, #464]	@ (800bed0 <_dtoa_r+0x2d8>)
 800bcfe:	f7f4 fac3 	bl	8000288 <__aeabi_dsub>
 800bd02:	a369      	add	r3, pc, #420	@ (adr r3, 800bea8 <_dtoa_r+0x2b0>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	f7f4 fc76 	bl	80005f8 <__aeabi_dmul>
 800bd0c:	a368      	add	r3, pc, #416	@ (adr r3, 800beb0 <_dtoa_r+0x2b8>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fabb 	bl	800028c <__adddf3>
 800bd16:	4604      	mov	r4, r0
 800bd18:	4630      	mov	r0, r6
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	f7f4 fc02 	bl	8000524 <__aeabi_i2d>
 800bd20:	a365      	add	r3, pc, #404	@ (adr r3, 800beb8 <_dtoa_r+0x2c0>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fc67 	bl	80005f8 <__aeabi_dmul>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4620      	mov	r0, r4
 800bd30:	4629      	mov	r1, r5
 800bd32:	f7f4 faab 	bl	800028c <__adddf3>
 800bd36:	4604      	mov	r4, r0
 800bd38:	460d      	mov	r5, r1
 800bd3a:	f7f4 ff0d 	bl	8000b58 <__aeabi_d2iz>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4607      	mov	r7, r0
 800bd42:	2300      	movs	r3, #0
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fec8 	bl	8000adc <__aeabi_dcmplt>
 800bd4c:	b140      	cbz	r0, 800bd60 <_dtoa_r+0x168>
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f7f4 fbe8 	bl	8000524 <__aeabi_i2d>
 800bd54:	4622      	mov	r2, r4
 800bd56:	462b      	mov	r3, r5
 800bd58:	f7f4 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd5c:	b900      	cbnz	r0, 800bd60 <_dtoa_r+0x168>
 800bd5e:	3f01      	subs	r7, #1
 800bd60:	2f16      	cmp	r7, #22
 800bd62:	d851      	bhi.n	800be08 <_dtoa_r+0x210>
 800bd64:	4b5b      	ldr	r3, [pc, #364]	@ (800bed4 <_dtoa_r+0x2dc>)
 800bd66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd72:	f7f4 feb3 	bl	8000adc <__aeabi_dcmplt>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d048      	beq.n	800be0c <_dtoa_r+0x214>
 800bd7a:	3f01      	subs	r7, #1
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd82:	1b9b      	subs	r3, r3, r6
 800bd84:	1e5a      	subs	r2, r3, #1
 800bd86:	bf44      	itt	mi
 800bd88:	f1c3 0801 	rsbmi	r8, r3, #1
 800bd8c:	2300      	movmi	r3, #0
 800bd8e:	9208      	str	r2, [sp, #32]
 800bd90:	bf54      	ite	pl
 800bd92:	f04f 0800 	movpl.w	r8, #0
 800bd96:	9308      	strmi	r3, [sp, #32]
 800bd98:	2f00      	cmp	r7, #0
 800bd9a:	db39      	blt.n	800be10 <_dtoa_r+0x218>
 800bd9c:	9b08      	ldr	r3, [sp, #32]
 800bd9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bda0:	443b      	add	r3, r7
 800bda2:	9308      	str	r3, [sp, #32]
 800bda4:	2300      	movs	r3, #0
 800bda6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdaa:	2b09      	cmp	r3, #9
 800bdac:	d864      	bhi.n	800be78 <_dtoa_r+0x280>
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	bfc4      	itt	gt
 800bdb2:	3b04      	subgt	r3, #4
 800bdb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb8:	f1a3 0302 	sub.w	r3, r3, #2
 800bdbc:	bfcc      	ite	gt
 800bdbe:	2400      	movgt	r4, #0
 800bdc0:	2401      	movle	r4, #1
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d863      	bhi.n	800be8e <_dtoa_r+0x296>
 800bdc6:	e8df f003 	tbb	[pc, r3]
 800bdca:	372a      	.short	0x372a
 800bdcc:	5535      	.short	0x5535
 800bdce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bdd2:	441e      	add	r6, r3
 800bdd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bdd8:	2b20      	cmp	r3, #32
 800bdda:	bfc1      	itttt	gt
 800bddc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bde0:	409f      	lslgt	r7, r3
 800bde2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bde6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bdea:	bfd6      	itet	le
 800bdec:	f1c3 0320 	rsble	r3, r3, #32
 800bdf0:	ea47 0003 	orrgt.w	r0, r7, r3
 800bdf4:	fa04 f003 	lslle.w	r0, r4, r3
 800bdf8:	f7f4 fb84 	bl	8000504 <__aeabi_ui2d>
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be02:	3e01      	subs	r6, #1
 800be04:	9214      	str	r2, [sp, #80]	@ 0x50
 800be06:	e777      	b.n	800bcf8 <_dtoa_r+0x100>
 800be08:	2301      	movs	r3, #1
 800be0a:	e7b8      	b.n	800bd7e <_dtoa_r+0x186>
 800be0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800be0e:	e7b7      	b.n	800bd80 <_dtoa_r+0x188>
 800be10:	427b      	negs	r3, r7
 800be12:	930a      	str	r3, [sp, #40]	@ 0x28
 800be14:	2300      	movs	r3, #0
 800be16:	eba8 0807 	sub.w	r8, r8, r7
 800be1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be1c:	e7c4      	b.n	800bda8 <_dtoa_r+0x1b0>
 800be1e:	2300      	movs	r3, #0
 800be20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be24:	2b00      	cmp	r3, #0
 800be26:	dc35      	bgt.n	800be94 <_dtoa_r+0x29c>
 800be28:	2301      	movs	r3, #1
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	9307      	str	r3, [sp, #28]
 800be2e:	461a      	mov	r2, r3
 800be30:	920e      	str	r2, [sp, #56]	@ 0x38
 800be32:	e00b      	b.n	800be4c <_dtoa_r+0x254>
 800be34:	2301      	movs	r3, #1
 800be36:	e7f3      	b.n	800be20 <_dtoa_r+0x228>
 800be38:	2300      	movs	r3, #0
 800be3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	2b01      	cmp	r3, #1
 800be46:	9307      	str	r3, [sp, #28]
 800be48:	bfb8      	it	lt
 800be4a:	2301      	movlt	r3, #1
 800be4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be50:	2100      	movs	r1, #0
 800be52:	2204      	movs	r2, #4
 800be54:	f102 0514 	add.w	r5, r2, #20
 800be58:	429d      	cmp	r5, r3
 800be5a:	d91f      	bls.n	800be9c <_dtoa_r+0x2a4>
 800be5c:	6041      	str	r1, [r0, #4]
 800be5e:	4658      	mov	r0, fp
 800be60:	f000 fd8e 	bl	800c980 <_Balloc>
 800be64:	4682      	mov	sl, r0
 800be66:	2800      	cmp	r0, #0
 800be68:	d13c      	bne.n	800bee4 <_dtoa_r+0x2ec>
 800be6a:	4b1b      	ldr	r3, [pc, #108]	@ (800bed8 <_dtoa_r+0x2e0>)
 800be6c:	4602      	mov	r2, r0
 800be6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800be72:	e6d8      	b.n	800bc26 <_dtoa_r+0x2e>
 800be74:	2301      	movs	r3, #1
 800be76:	e7e0      	b.n	800be3a <_dtoa_r+0x242>
 800be78:	2401      	movs	r4, #1
 800be7a:	2300      	movs	r3, #0
 800be7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be80:	f04f 33ff 	mov.w	r3, #4294967295
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	9307      	str	r3, [sp, #28]
 800be88:	2200      	movs	r2, #0
 800be8a:	2312      	movs	r3, #18
 800be8c:	e7d0      	b.n	800be30 <_dtoa_r+0x238>
 800be8e:	2301      	movs	r3, #1
 800be90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be92:	e7f5      	b.n	800be80 <_dtoa_r+0x288>
 800be94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	9307      	str	r3, [sp, #28]
 800be9a:	e7d7      	b.n	800be4c <_dtoa_r+0x254>
 800be9c:	3101      	adds	r1, #1
 800be9e:	0052      	lsls	r2, r2, #1
 800bea0:	e7d8      	b.n	800be54 <_dtoa_r+0x25c>
 800bea2:	bf00      	nop
 800bea4:	f3af 8000 	nop.w
 800bea8:	636f4361 	.word	0x636f4361
 800beac:	3fd287a7 	.word	0x3fd287a7
 800beb0:	8b60c8b3 	.word	0x8b60c8b3
 800beb4:	3fc68a28 	.word	0x3fc68a28
 800beb8:	509f79fb 	.word	0x509f79fb
 800bebc:	3fd34413 	.word	0x3fd34413
 800bec0:	0800e861 	.word	0x0800e861
 800bec4:	0800e878 	.word	0x0800e878
 800bec8:	7ff00000 	.word	0x7ff00000
 800becc:	0800e831 	.word	0x0800e831
 800bed0:	3ff80000 	.word	0x3ff80000
 800bed4:	0800e970 	.word	0x0800e970
 800bed8:	0800e8d0 	.word	0x0800e8d0
 800bedc:	0800e85d 	.word	0x0800e85d
 800bee0:	0800e830 	.word	0x0800e830
 800bee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bee8:	6018      	str	r0, [r3, #0]
 800beea:	9b07      	ldr	r3, [sp, #28]
 800beec:	2b0e      	cmp	r3, #14
 800beee:	f200 80a4 	bhi.w	800c03a <_dtoa_r+0x442>
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	f000 80a1 	beq.w	800c03a <_dtoa_r+0x442>
 800bef8:	2f00      	cmp	r7, #0
 800befa:	dd33      	ble.n	800bf64 <_dtoa_r+0x36c>
 800befc:	4bad      	ldr	r3, [pc, #692]	@ (800c1b4 <_dtoa_r+0x5bc>)
 800befe:	f007 020f 	and.w	r2, r7, #15
 800bf02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf06:	ed93 7b00 	vldr	d7, [r3]
 800bf0a:	05f8      	lsls	r0, r7, #23
 800bf0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf14:	d516      	bpl.n	800bf44 <_dtoa_r+0x34c>
 800bf16:	4ba8      	ldr	r3, [pc, #672]	@ (800c1b8 <_dtoa_r+0x5c0>)
 800bf18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf20:	f7f4 fc94 	bl	800084c <__aeabi_ddiv>
 800bf24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf28:	f004 040f 	and.w	r4, r4, #15
 800bf2c:	2603      	movs	r6, #3
 800bf2e:	4da2      	ldr	r5, [pc, #648]	@ (800c1b8 <_dtoa_r+0x5c0>)
 800bf30:	b954      	cbnz	r4, 800bf48 <_dtoa_r+0x350>
 800bf32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf3a:	f7f4 fc87 	bl	800084c <__aeabi_ddiv>
 800bf3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf42:	e028      	b.n	800bf96 <_dtoa_r+0x39e>
 800bf44:	2602      	movs	r6, #2
 800bf46:	e7f2      	b.n	800bf2e <_dtoa_r+0x336>
 800bf48:	07e1      	lsls	r1, r4, #31
 800bf4a:	d508      	bpl.n	800bf5e <_dtoa_r+0x366>
 800bf4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf5c:	3601      	adds	r6, #1
 800bf5e:	1064      	asrs	r4, r4, #1
 800bf60:	3508      	adds	r5, #8
 800bf62:	e7e5      	b.n	800bf30 <_dtoa_r+0x338>
 800bf64:	f000 80d2 	beq.w	800c10c <_dtoa_r+0x514>
 800bf68:	427c      	negs	r4, r7
 800bf6a:	4b92      	ldr	r3, [pc, #584]	@ (800c1b4 <_dtoa_r+0x5bc>)
 800bf6c:	4d92      	ldr	r5, [pc, #584]	@ (800c1b8 <_dtoa_r+0x5c0>)
 800bf6e:	f004 020f 	and.w	r2, r4, #15
 800bf72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf7e:	f7f4 fb3b 	bl	80005f8 <__aeabi_dmul>
 800bf82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf86:	1124      	asrs	r4, r4, #4
 800bf88:	2300      	movs	r3, #0
 800bf8a:	2602      	movs	r6, #2
 800bf8c:	2c00      	cmp	r4, #0
 800bf8e:	f040 80b2 	bne.w	800c0f6 <_dtoa_r+0x4fe>
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1d3      	bne.n	800bf3e <_dtoa_r+0x346>
 800bf96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 80b7 	beq.w	800c110 <_dtoa_r+0x518>
 800bfa2:	4b86      	ldr	r3, [pc, #536]	@ (800c1bc <_dtoa_r+0x5c4>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	f7f4 fd97 	bl	8000adc <__aeabi_dcmplt>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	f000 80ae 	beq.w	800c110 <_dtoa_r+0x518>
 800bfb4:	9b07      	ldr	r3, [sp, #28]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f000 80aa 	beq.w	800c110 <_dtoa_r+0x518>
 800bfbc:	9b00      	ldr	r3, [sp, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dd37      	ble.n	800c032 <_dtoa_r+0x43a>
 800bfc2:	1e7b      	subs	r3, r7, #1
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	4b7d      	ldr	r3, [pc, #500]	@ (800c1c0 <_dtoa_r+0x5c8>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	4629      	mov	r1, r5
 800bfce:	f7f4 fb13 	bl	80005f8 <__aeabi_dmul>
 800bfd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfd6:	9c00      	ldr	r4, [sp, #0]
 800bfd8:	3601      	adds	r6, #1
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f7f4 faa2 	bl	8000524 <__aeabi_i2d>
 800bfe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfe4:	f7f4 fb08 	bl	80005f8 <__aeabi_dmul>
 800bfe8:	4b76      	ldr	r3, [pc, #472]	@ (800c1c4 <_dtoa_r+0x5cc>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	f7f4 f94e 	bl	800028c <__adddf3>
 800bff0:	4605      	mov	r5, r0
 800bff2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	f040 808d 	bne.w	800c116 <_dtoa_r+0x51e>
 800bffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c000:	4b71      	ldr	r3, [pc, #452]	@ (800c1c8 <_dtoa_r+0x5d0>)
 800c002:	2200      	movs	r2, #0
 800c004:	f7f4 f940 	bl	8000288 <__aeabi_dsub>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c010:	462a      	mov	r2, r5
 800c012:	4633      	mov	r3, r6
 800c014:	f7f4 fd80 	bl	8000b18 <__aeabi_dcmpgt>
 800c018:	2800      	cmp	r0, #0
 800c01a:	f040 828b 	bne.w	800c534 <_dtoa_r+0x93c>
 800c01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c022:	462a      	mov	r2, r5
 800c024:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c028:	f7f4 fd58 	bl	8000adc <__aeabi_dcmplt>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	f040 8128 	bne.w	800c282 <_dtoa_r+0x68a>
 800c032:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c036:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c03a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f2c0 815a 	blt.w	800c2f6 <_dtoa_r+0x6fe>
 800c042:	2f0e      	cmp	r7, #14
 800c044:	f300 8157 	bgt.w	800c2f6 <_dtoa_r+0x6fe>
 800c048:	4b5a      	ldr	r3, [pc, #360]	@ (800c1b4 <_dtoa_r+0x5bc>)
 800c04a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c04e:	ed93 7b00 	vldr	d7, [r3]
 800c052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c054:	2b00      	cmp	r3, #0
 800c056:	ed8d 7b00 	vstr	d7, [sp]
 800c05a:	da03      	bge.n	800c064 <_dtoa_r+0x46c>
 800c05c:	9b07      	ldr	r3, [sp, #28]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f340 8101 	ble.w	800c266 <_dtoa_r+0x66e>
 800c064:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c068:	4656      	mov	r6, sl
 800c06a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c06e:	4620      	mov	r0, r4
 800c070:	4629      	mov	r1, r5
 800c072:	f7f4 fbeb 	bl	800084c <__aeabi_ddiv>
 800c076:	f7f4 fd6f 	bl	8000b58 <__aeabi_d2iz>
 800c07a:	4680      	mov	r8, r0
 800c07c:	f7f4 fa52 	bl	8000524 <__aeabi_i2d>
 800c080:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c084:	f7f4 fab8 	bl	80005f8 <__aeabi_dmul>
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	4620      	mov	r0, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c094:	f7f4 f8f8 	bl	8000288 <__aeabi_dsub>
 800c098:	f806 4b01 	strb.w	r4, [r6], #1
 800c09c:	9d07      	ldr	r5, [sp, #28]
 800c09e:	eba6 040a 	sub.w	r4, r6, sl
 800c0a2:	42a5      	cmp	r5, r4
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	f040 8117 	bne.w	800c2da <_dtoa_r+0x6e2>
 800c0ac:	f7f4 f8ee 	bl	800028c <__adddf3>
 800c0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	f7f4 fd2e 	bl	8000b18 <__aeabi_dcmpgt>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	f040 80f9 	bne.w	800c2b4 <_dtoa_r+0x6bc>
 800c0c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ce:	b118      	cbz	r0, 800c0d8 <_dtoa_r+0x4e0>
 800c0d0:	f018 0f01 	tst.w	r8, #1
 800c0d4:	f040 80ee 	bne.w	800c2b4 <_dtoa_r+0x6bc>
 800c0d8:	4649      	mov	r1, r9
 800c0da:	4658      	mov	r0, fp
 800c0dc:	f000 fc90 	bl	800ca00 <_Bfree>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	7033      	strb	r3, [r6, #0]
 800c0e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0e6:	3701      	adds	r7, #1
 800c0e8:	601f      	str	r7, [r3, #0]
 800c0ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 831d 	beq.w	800c72c <_dtoa_r+0xb34>
 800c0f2:	601e      	str	r6, [r3, #0]
 800c0f4:	e31a      	b.n	800c72c <_dtoa_r+0xb34>
 800c0f6:	07e2      	lsls	r2, r4, #31
 800c0f8:	d505      	bpl.n	800c106 <_dtoa_r+0x50e>
 800c0fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0fe:	f7f4 fa7b 	bl	80005f8 <__aeabi_dmul>
 800c102:	3601      	adds	r6, #1
 800c104:	2301      	movs	r3, #1
 800c106:	1064      	asrs	r4, r4, #1
 800c108:	3508      	adds	r5, #8
 800c10a:	e73f      	b.n	800bf8c <_dtoa_r+0x394>
 800c10c:	2602      	movs	r6, #2
 800c10e:	e742      	b.n	800bf96 <_dtoa_r+0x39e>
 800c110:	9c07      	ldr	r4, [sp, #28]
 800c112:	9704      	str	r7, [sp, #16]
 800c114:	e761      	b.n	800bfda <_dtoa_r+0x3e2>
 800c116:	4b27      	ldr	r3, [pc, #156]	@ (800c1b4 <_dtoa_r+0x5bc>)
 800c118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c11a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c11e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c122:	4454      	add	r4, sl
 800c124:	2900      	cmp	r1, #0
 800c126:	d053      	beq.n	800c1d0 <_dtoa_r+0x5d8>
 800c128:	4928      	ldr	r1, [pc, #160]	@ (800c1cc <_dtoa_r+0x5d4>)
 800c12a:	2000      	movs	r0, #0
 800c12c:	f7f4 fb8e 	bl	800084c <__aeabi_ddiv>
 800c130:	4633      	mov	r3, r6
 800c132:	462a      	mov	r2, r5
 800c134:	f7f4 f8a8 	bl	8000288 <__aeabi_dsub>
 800c138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c13c:	4656      	mov	r6, sl
 800c13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c142:	f7f4 fd09 	bl	8000b58 <__aeabi_d2iz>
 800c146:	4605      	mov	r5, r0
 800c148:	f7f4 f9ec 	bl	8000524 <__aeabi_i2d>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c154:	f7f4 f898 	bl	8000288 <__aeabi_dsub>
 800c158:	3530      	adds	r5, #48	@ 0x30
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c162:	f806 5b01 	strb.w	r5, [r6], #1
 800c166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c16a:	f7f4 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d171      	bne.n	800c256 <_dtoa_r+0x65e>
 800c172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c176:	4911      	ldr	r1, [pc, #68]	@ (800c1bc <_dtoa_r+0x5c4>)
 800c178:	2000      	movs	r0, #0
 800c17a:	f7f4 f885 	bl	8000288 <__aeabi_dsub>
 800c17e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c182:	f7f4 fcab 	bl	8000adc <__aeabi_dcmplt>
 800c186:	2800      	cmp	r0, #0
 800c188:	f040 8095 	bne.w	800c2b6 <_dtoa_r+0x6be>
 800c18c:	42a6      	cmp	r6, r4
 800c18e:	f43f af50 	beq.w	800c032 <_dtoa_r+0x43a>
 800c192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c196:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <_dtoa_r+0x5c8>)
 800c198:	2200      	movs	r2, #0
 800c19a:	f7f4 fa2d 	bl	80005f8 <__aeabi_dmul>
 800c19e:	4b08      	ldr	r3, [pc, #32]	@ (800c1c0 <_dtoa_r+0x5c8>)
 800c1a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1aa:	f7f4 fa25 	bl	80005f8 <__aeabi_dmul>
 800c1ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1b2:	e7c4      	b.n	800c13e <_dtoa_r+0x546>
 800c1b4:	0800e970 	.word	0x0800e970
 800c1b8:	0800e948 	.word	0x0800e948
 800c1bc:	3ff00000 	.word	0x3ff00000
 800c1c0:	40240000 	.word	0x40240000
 800c1c4:	401c0000 	.word	0x401c0000
 800c1c8:	40140000 	.word	0x40140000
 800c1cc:	3fe00000 	.word	0x3fe00000
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f7f4 fa10 	bl	80005f8 <__aeabi_dmul>
 800c1d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800c1de:	4656      	mov	r6, sl
 800c1e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e4:	f7f4 fcb8 	bl	8000b58 <__aeabi_d2iz>
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	f7f4 f99b 	bl	8000524 <__aeabi_i2d>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f6:	f7f4 f847 	bl	8000288 <__aeabi_dsub>
 800c1fa:	3530      	adds	r5, #48	@ 0x30
 800c1fc:	f806 5b01 	strb.w	r5, [r6], #1
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	42a6      	cmp	r6, r4
 800c206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c20a:	f04f 0200 	mov.w	r2, #0
 800c20e:	d124      	bne.n	800c25a <_dtoa_r+0x662>
 800c210:	4bac      	ldr	r3, [pc, #688]	@ (800c4c4 <_dtoa_r+0x8cc>)
 800c212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c216:	f7f4 f839 	bl	800028c <__adddf3>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c222:	f7f4 fc79 	bl	8000b18 <__aeabi_dcmpgt>
 800c226:	2800      	cmp	r0, #0
 800c228:	d145      	bne.n	800c2b6 <_dtoa_r+0x6be>
 800c22a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c22e:	49a5      	ldr	r1, [pc, #660]	@ (800c4c4 <_dtoa_r+0x8cc>)
 800c230:	2000      	movs	r0, #0
 800c232:	f7f4 f829 	bl	8000288 <__aeabi_dsub>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c23e:	f7f4 fc4d 	bl	8000adc <__aeabi_dcmplt>
 800c242:	2800      	cmp	r0, #0
 800c244:	f43f aef5 	beq.w	800c032 <_dtoa_r+0x43a>
 800c248:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c24a:	1e73      	subs	r3, r6, #1
 800c24c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c24e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c252:	2b30      	cmp	r3, #48	@ 0x30
 800c254:	d0f8      	beq.n	800c248 <_dtoa_r+0x650>
 800c256:	9f04      	ldr	r7, [sp, #16]
 800c258:	e73e      	b.n	800c0d8 <_dtoa_r+0x4e0>
 800c25a:	4b9b      	ldr	r3, [pc, #620]	@ (800c4c8 <_dtoa_r+0x8d0>)
 800c25c:	f7f4 f9cc 	bl	80005f8 <__aeabi_dmul>
 800c260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c264:	e7bc      	b.n	800c1e0 <_dtoa_r+0x5e8>
 800c266:	d10c      	bne.n	800c282 <_dtoa_r+0x68a>
 800c268:	4b98      	ldr	r3, [pc, #608]	@ (800c4cc <_dtoa_r+0x8d4>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c270:	f7f4 f9c2 	bl	80005f8 <__aeabi_dmul>
 800c274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c278:	f7f4 fc44 	bl	8000b04 <__aeabi_dcmpge>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f000 8157 	beq.w	800c530 <_dtoa_r+0x938>
 800c282:	2400      	movs	r4, #0
 800c284:	4625      	mov	r5, r4
 800c286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c288:	43db      	mvns	r3, r3
 800c28a:	9304      	str	r3, [sp, #16]
 800c28c:	4656      	mov	r6, sl
 800c28e:	2700      	movs	r7, #0
 800c290:	4621      	mov	r1, r4
 800c292:	4658      	mov	r0, fp
 800c294:	f000 fbb4 	bl	800ca00 <_Bfree>
 800c298:	2d00      	cmp	r5, #0
 800c29a:	d0dc      	beq.n	800c256 <_dtoa_r+0x65e>
 800c29c:	b12f      	cbz	r7, 800c2aa <_dtoa_r+0x6b2>
 800c29e:	42af      	cmp	r7, r5
 800c2a0:	d003      	beq.n	800c2aa <_dtoa_r+0x6b2>
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	4658      	mov	r0, fp
 800c2a6:	f000 fbab 	bl	800ca00 <_Bfree>
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	4658      	mov	r0, fp
 800c2ae:	f000 fba7 	bl	800ca00 <_Bfree>
 800c2b2:	e7d0      	b.n	800c256 <_dtoa_r+0x65e>
 800c2b4:	9704      	str	r7, [sp, #16]
 800c2b6:	4633      	mov	r3, r6
 800c2b8:	461e      	mov	r6, r3
 800c2ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2be:	2a39      	cmp	r2, #57	@ 0x39
 800c2c0:	d107      	bne.n	800c2d2 <_dtoa_r+0x6da>
 800c2c2:	459a      	cmp	sl, r3
 800c2c4:	d1f8      	bne.n	800c2b8 <_dtoa_r+0x6c0>
 800c2c6:	9a04      	ldr	r2, [sp, #16]
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	9204      	str	r2, [sp, #16]
 800c2cc:	2230      	movs	r2, #48	@ 0x30
 800c2ce:	f88a 2000 	strb.w	r2, [sl]
 800c2d2:	781a      	ldrb	r2, [r3, #0]
 800c2d4:	3201      	adds	r2, #1
 800c2d6:	701a      	strb	r2, [r3, #0]
 800c2d8:	e7bd      	b.n	800c256 <_dtoa_r+0x65e>
 800c2da:	4b7b      	ldr	r3, [pc, #492]	@ (800c4c8 <_dtoa_r+0x8d0>)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f7f4 f98b 	bl	80005f8 <__aeabi_dmul>
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	460d      	mov	r5, r1
 800c2ea:	f7f4 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	f43f aebb 	beq.w	800c06a <_dtoa_r+0x472>
 800c2f4:	e6f0      	b.n	800c0d8 <_dtoa_r+0x4e0>
 800c2f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2f8:	2a00      	cmp	r2, #0
 800c2fa:	f000 80db 	beq.w	800c4b4 <_dtoa_r+0x8bc>
 800c2fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c300:	2a01      	cmp	r2, #1
 800c302:	f300 80bf 	bgt.w	800c484 <_dtoa_r+0x88c>
 800c306:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c308:	2a00      	cmp	r2, #0
 800c30a:	f000 80b7 	beq.w	800c47c <_dtoa_r+0x884>
 800c30e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c312:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c314:	4646      	mov	r6, r8
 800c316:	9a08      	ldr	r2, [sp, #32]
 800c318:	2101      	movs	r1, #1
 800c31a:	441a      	add	r2, r3
 800c31c:	4658      	mov	r0, fp
 800c31e:	4498      	add	r8, r3
 800c320:	9208      	str	r2, [sp, #32]
 800c322:	f000 fc21 	bl	800cb68 <__i2b>
 800c326:	4605      	mov	r5, r0
 800c328:	b15e      	cbz	r6, 800c342 <_dtoa_r+0x74a>
 800c32a:	9b08      	ldr	r3, [sp, #32]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dd08      	ble.n	800c342 <_dtoa_r+0x74a>
 800c330:	42b3      	cmp	r3, r6
 800c332:	9a08      	ldr	r2, [sp, #32]
 800c334:	bfa8      	it	ge
 800c336:	4633      	movge	r3, r6
 800c338:	eba8 0803 	sub.w	r8, r8, r3
 800c33c:	1af6      	subs	r6, r6, r3
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	9308      	str	r3, [sp, #32]
 800c342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c344:	b1f3      	cbz	r3, 800c384 <_dtoa_r+0x78c>
 800c346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 80b7 	beq.w	800c4bc <_dtoa_r+0x8c4>
 800c34e:	b18c      	cbz	r4, 800c374 <_dtoa_r+0x77c>
 800c350:	4629      	mov	r1, r5
 800c352:	4622      	mov	r2, r4
 800c354:	4658      	mov	r0, fp
 800c356:	f000 fcc7 	bl	800cce8 <__pow5mult>
 800c35a:	464a      	mov	r2, r9
 800c35c:	4601      	mov	r1, r0
 800c35e:	4605      	mov	r5, r0
 800c360:	4658      	mov	r0, fp
 800c362:	f000 fc17 	bl	800cb94 <__multiply>
 800c366:	4649      	mov	r1, r9
 800c368:	9004      	str	r0, [sp, #16]
 800c36a:	4658      	mov	r0, fp
 800c36c:	f000 fb48 	bl	800ca00 <_Bfree>
 800c370:	9b04      	ldr	r3, [sp, #16]
 800c372:	4699      	mov	r9, r3
 800c374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c376:	1b1a      	subs	r2, r3, r4
 800c378:	d004      	beq.n	800c384 <_dtoa_r+0x78c>
 800c37a:	4649      	mov	r1, r9
 800c37c:	4658      	mov	r0, fp
 800c37e:	f000 fcb3 	bl	800cce8 <__pow5mult>
 800c382:	4681      	mov	r9, r0
 800c384:	2101      	movs	r1, #1
 800c386:	4658      	mov	r0, fp
 800c388:	f000 fbee 	bl	800cb68 <__i2b>
 800c38c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c38e:	4604      	mov	r4, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 81cf 	beq.w	800c734 <_dtoa_r+0xb3c>
 800c396:	461a      	mov	r2, r3
 800c398:	4601      	mov	r1, r0
 800c39a:	4658      	mov	r0, fp
 800c39c:	f000 fca4 	bl	800cce8 <__pow5mult>
 800c3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	f300 8095 	bgt.w	800c4d4 <_dtoa_r+0x8dc>
 800c3aa:	9b02      	ldr	r3, [sp, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f040 8087 	bne.w	800c4c0 <_dtoa_r+0x8c8>
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f040 8089 	bne.w	800c4d0 <_dtoa_r+0x8d8>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3c4:	0d1b      	lsrs	r3, r3, #20
 800c3c6:	051b      	lsls	r3, r3, #20
 800c3c8:	b12b      	cbz	r3, 800c3d6 <_dtoa_r+0x7de>
 800c3ca:	9b08      	ldr	r3, [sp, #32]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	9308      	str	r3, [sp, #32]
 800c3d0:	f108 0801 	add.w	r8, r8, #1
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 81b0 	beq.w	800c740 <_dtoa_r+0xb48>
 800c3e0:	6923      	ldr	r3, [r4, #16]
 800c3e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3e6:	6918      	ldr	r0, [r3, #16]
 800c3e8:	f000 fb72 	bl	800cad0 <__hi0bits>
 800c3ec:	f1c0 0020 	rsb	r0, r0, #32
 800c3f0:	9b08      	ldr	r3, [sp, #32]
 800c3f2:	4418      	add	r0, r3
 800c3f4:	f010 001f 	ands.w	r0, r0, #31
 800c3f8:	d077      	beq.n	800c4ea <_dtoa_r+0x8f2>
 800c3fa:	f1c0 0320 	rsb	r3, r0, #32
 800c3fe:	2b04      	cmp	r3, #4
 800c400:	dd6b      	ble.n	800c4da <_dtoa_r+0x8e2>
 800c402:	9b08      	ldr	r3, [sp, #32]
 800c404:	f1c0 001c 	rsb	r0, r0, #28
 800c408:	4403      	add	r3, r0
 800c40a:	4480      	add	r8, r0
 800c40c:	4406      	add	r6, r0
 800c40e:	9308      	str	r3, [sp, #32]
 800c410:	f1b8 0f00 	cmp.w	r8, #0
 800c414:	dd05      	ble.n	800c422 <_dtoa_r+0x82a>
 800c416:	4649      	mov	r1, r9
 800c418:	4642      	mov	r2, r8
 800c41a:	4658      	mov	r0, fp
 800c41c:	f000 fcbe 	bl	800cd9c <__lshift>
 800c420:	4681      	mov	r9, r0
 800c422:	9b08      	ldr	r3, [sp, #32]
 800c424:	2b00      	cmp	r3, #0
 800c426:	dd05      	ble.n	800c434 <_dtoa_r+0x83c>
 800c428:	4621      	mov	r1, r4
 800c42a:	461a      	mov	r2, r3
 800c42c:	4658      	mov	r0, fp
 800c42e:	f000 fcb5 	bl	800cd9c <__lshift>
 800c432:	4604      	mov	r4, r0
 800c434:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c436:	2b00      	cmp	r3, #0
 800c438:	d059      	beq.n	800c4ee <_dtoa_r+0x8f6>
 800c43a:	4621      	mov	r1, r4
 800c43c:	4648      	mov	r0, r9
 800c43e:	f000 fd19 	bl	800ce74 <__mcmp>
 800c442:	2800      	cmp	r0, #0
 800c444:	da53      	bge.n	800c4ee <_dtoa_r+0x8f6>
 800c446:	1e7b      	subs	r3, r7, #1
 800c448:	9304      	str	r3, [sp, #16]
 800c44a:	4649      	mov	r1, r9
 800c44c:	2300      	movs	r3, #0
 800c44e:	220a      	movs	r2, #10
 800c450:	4658      	mov	r0, fp
 800c452:	f000 faf7 	bl	800ca44 <__multadd>
 800c456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c458:	4681      	mov	r9, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 8172 	beq.w	800c744 <_dtoa_r+0xb4c>
 800c460:	2300      	movs	r3, #0
 800c462:	4629      	mov	r1, r5
 800c464:	220a      	movs	r2, #10
 800c466:	4658      	mov	r0, fp
 800c468:	f000 faec 	bl	800ca44 <__multadd>
 800c46c:	9b00      	ldr	r3, [sp, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	4605      	mov	r5, r0
 800c472:	dc67      	bgt.n	800c544 <_dtoa_r+0x94c>
 800c474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c476:	2b02      	cmp	r3, #2
 800c478:	dc41      	bgt.n	800c4fe <_dtoa_r+0x906>
 800c47a:	e063      	b.n	800c544 <_dtoa_r+0x94c>
 800c47c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c47e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c482:	e746      	b.n	800c312 <_dtoa_r+0x71a>
 800c484:	9b07      	ldr	r3, [sp, #28]
 800c486:	1e5c      	subs	r4, r3, #1
 800c488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c48a:	42a3      	cmp	r3, r4
 800c48c:	bfbf      	itttt	lt
 800c48e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c490:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c492:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c494:	1ae3      	sublt	r3, r4, r3
 800c496:	bfb4      	ite	lt
 800c498:	18d2      	addlt	r2, r2, r3
 800c49a:	1b1c      	subge	r4, r3, r4
 800c49c:	9b07      	ldr	r3, [sp, #28]
 800c49e:	bfbc      	itt	lt
 800c4a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c4a2:	2400      	movlt	r4, #0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bfb5      	itete	lt
 800c4a8:	eba8 0603 	sublt.w	r6, r8, r3
 800c4ac:	9b07      	ldrge	r3, [sp, #28]
 800c4ae:	2300      	movlt	r3, #0
 800c4b0:	4646      	movge	r6, r8
 800c4b2:	e730      	b.n	800c316 <_dtoa_r+0x71e>
 800c4b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c4b8:	4646      	mov	r6, r8
 800c4ba:	e735      	b.n	800c328 <_dtoa_r+0x730>
 800c4bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4be:	e75c      	b.n	800c37a <_dtoa_r+0x782>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e788      	b.n	800c3d6 <_dtoa_r+0x7de>
 800c4c4:	3fe00000 	.word	0x3fe00000
 800c4c8:	40240000 	.word	0x40240000
 800c4cc:	40140000 	.word	0x40140000
 800c4d0:	9b02      	ldr	r3, [sp, #8]
 800c4d2:	e780      	b.n	800c3d6 <_dtoa_r+0x7de>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4d8:	e782      	b.n	800c3e0 <_dtoa_r+0x7e8>
 800c4da:	d099      	beq.n	800c410 <_dtoa_r+0x818>
 800c4dc:	9a08      	ldr	r2, [sp, #32]
 800c4de:	331c      	adds	r3, #28
 800c4e0:	441a      	add	r2, r3
 800c4e2:	4498      	add	r8, r3
 800c4e4:	441e      	add	r6, r3
 800c4e6:	9208      	str	r2, [sp, #32]
 800c4e8:	e792      	b.n	800c410 <_dtoa_r+0x818>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	e7f6      	b.n	800c4dc <_dtoa_r+0x8e4>
 800c4ee:	9b07      	ldr	r3, [sp, #28]
 800c4f0:	9704      	str	r7, [sp, #16]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	dc20      	bgt.n	800c538 <_dtoa_r+0x940>
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	dd1e      	ble.n	800c53c <_dtoa_r+0x944>
 800c4fe:	9b00      	ldr	r3, [sp, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	f47f aec0 	bne.w	800c286 <_dtoa_r+0x68e>
 800c506:	4621      	mov	r1, r4
 800c508:	2205      	movs	r2, #5
 800c50a:	4658      	mov	r0, fp
 800c50c:	f000 fa9a 	bl	800ca44 <__multadd>
 800c510:	4601      	mov	r1, r0
 800c512:	4604      	mov	r4, r0
 800c514:	4648      	mov	r0, r9
 800c516:	f000 fcad 	bl	800ce74 <__mcmp>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	f77f aeb3 	ble.w	800c286 <_dtoa_r+0x68e>
 800c520:	4656      	mov	r6, sl
 800c522:	2331      	movs	r3, #49	@ 0x31
 800c524:	f806 3b01 	strb.w	r3, [r6], #1
 800c528:	9b04      	ldr	r3, [sp, #16]
 800c52a:	3301      	adds	r3, #1
 800c52c:	9304      	str	r3, [sp, #16]
 800c52e:	e6ae      	b.n	800c28e <_dtoa_r+0x696>
 800c530:	9c07      	ldr	r4, [sp, #28]
 800c532:	9704      	str	r7, [sp, #16]
 800c534:	4625      	mov	r5, r4
 800c536:	e7f3      	b.n	800c520 <_dtoa_r+0x928>
 800c538:	9b07      	ldr	r3, [sp, #28]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f000 8104 	beq.w	800c74c <_dtoa_r+0xb54>
 800c544:	2e00      	cmp	r6, #0
 800c546:	dd05      	ble.n	800c554 <_dtoa_r+0x95c>
 800c548:	4629      	mov	r1, r5
 800c54a:	4632      	mov	r2, r6
 800c54c:	4658      	mov	r0, fp
 800c54e:	f000 fc25 	bl	800cd9c <__lshift>
 800c552:	4605      	mov	r5, r0
 800c554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c556:	2b00      	cmp	r3, #0
 800c558:	d05a      	beq.n	800c610 <_dtoa_r+0xa18>
 800c55a:	6869      	ldr	r1, [r5, #4]
 800c55c:	4658      	mov	r0, fp
 800c55e:	f000 fa0f 	bl	800c980 <_Balloc>
 800c562:	4606      	mov	r6, r0
 800c564:	b928      	cbnz	r0, 800c572 <_dtoa_r+0x97a>
 800c566:	4b84      	ldr	r3, [pc, #528]	@ (800c778 <_dtoa_r+0xb80>)
 800c568:	4602      	mov	r2, r0
 800c56a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c56e:	f7ff bb5a 	b.w	800bc26 <_dtoa_r+0x2e>
 800c572:	692a      	ldr	r2, [r5, #16]
 800c574:	3202      	adds	r2, #2
 800c576:	0092      	lsls	r2, r2, #2
 800c578:	f105 010c 	add.w	r1, r5, #12
 800c57c:	300c      	adds	r0, #12
 800c57e:	f7ff faa2 	bl	800bac6 <memcpy>
 800c582:	2201      	movs	r2, #1
 800c584:	4631      	mov	r1, r6
 800c586:	4658      	mov	r0, fp
 800c588:	f000 fc08 	bl	800cd9c <__lshift>
 800c58c:	f10a 0301 	add.w	r3, sl, #1
 800c590:	9307      	str	r3, [sp, #28]
 800c592:	9b00      	ldr	r3, [sp, #0]
 800c594:	4453      	add	r3, sl
 800c596:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c598:	9b02      	ldr	r3, [sp, #8]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	462f      	mov	r7, r5
 800c5a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	4648      	mov	r0, r9
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	f7ff fa98 	bl	800bae2 <quorem>
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	9002      	str	r0, [sp, #8]
 800c5b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5ba:	4648      	mov	r0, r9
 800c5bc:	f000 fc5a 	bl	800ce74 <__mcmp>
 800c5c0:	462a      	mov	r2, r5
 800c5c2:	9008      	str	r0, [sp, #32]
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	4658      	mov	r0, fp
 800c5c8:	f000 fc70 	bl	800ceac <__mdiff>
 800c5cc:	68c2      	ldr	r2, [r0, #12]
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	bb02      	cbnz	r2, 800c614 <_dtoa_r+0xa1c>
 800c5d2:	4601      	mov	r1, r0
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	f000 fc4d 	bl	800ce74 <__mcmp>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4658      	mov	r0, fp
 800c5e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5e2:	f000 fa0d 	bl	800ca00 <_Bfree>
 800c5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5ea:	9e07      	ldr	r6, [sp, #28]
 800c5ec:	ea43 0102 	orr.w	r1, r3, r2
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5f2:	4319      	orrs	r1, r3
 800c5f4:	d110      	bne.n	800c618 <_dtoa_r+0xa20>
 800c5f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5fa:	d029      	beq.n	800c650 <_dtoa_r+0xa58>
 800c5fc:	9b08      	ldr	r3, [sp, #32]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	dd02      	ble.n	800c608 <_dtoa_r+0xa10>
 800c602:	9b02      	ldr	r3, [sp, #8]
 800c604:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c608:	9b00      	ldr	r3, [sp, #0]
 800c60a:	f883 8000 	strb.w	r8, [r3]
 800c60e:	e63f      	b.n	800c290 <_dtoa_r+0x698>
 800c610:	4628      	mov	r0, r5
 800c612:	e7bb      	b.n	800c58c <_dtoa_r+0x994>
 800c614:	2201      	movs	r2, #1
 800c616:	e7e1      	b.n	800c5dc <_dtoa_r+0x9e4>
 800c618:	9b08      	ldr	r3, [sp, #32]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	db04      	blt.n	800c628 <_dtoa_r+0xa30>
 800c61e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c620:	430b      	orrs	r3, r1
 800c622:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c624:	430b      	orrs	r3, r1
 800c626:	d120      	bne.n	800c66a <_dtoa_r+0xa72>
 800c628:	2a00      	cmp	r2, #0
 800c62a:	dded      	ble.n	800c608 <_dtoa_r+0xa10>
 800c62c:	4649      	mov	r1, r9
 800c62e:	2201      	movs	r2, #1
 800c630:	4658      	mov	r0, fp
 800c632:	f000 fbb3 	bl	800cd9c <__lshift>
 800c636:	4621      	mov	r1, r4
 800c638:	4681      	mov	r9, r0
 800c63a:	f000 fc1b 	bl	800ce74 <__mcmp>
 800c63e:	2800      	cmp	r0, #0
 800c640:	dc03      	bgt.n	800c64a <_dtoa_r+0xa52>
 800c642:	d1e1      	bne.n	800c608 <_dtoa_r+0xa10>
 800c644:	f018 0f01 	tst.w	r8, #1
 800c648:	d0de      	beq.n	800c608 <_dtoa_r+0xa10>
 800c64a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c64e:	d1d8      	bne.n	800c602 <_dtoa_r+0xa0a>
 800c650:	9a00      	ldr	r2, [sp, #0]
 800c652:	2339      	movs	r3, #57	@ 0x39
 800c654:	7013      	strb	r3, [r2, #0]
 800c656:	4633      	mov	r3, r6
 800c658:	461e      	mov	r6, r3
 800c65a:	3b01      	subs	r3, #1
 800c65c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c660:	2a39      	cmp	r2, #57	@ 0x39
 800c662:	d052      	beq.n	800c70a <_dtoa_r+0xb12>
 800c664:	3201      	adds	r2, #1
 800c666:	701a      	strb	r2, [r3, #0]
 800c668:	e612      	b.n	800c290 <_dtoa_r+0x698>
 800c66a:	2a00      	cmp	r2, #0
 800c66c:	dd07      	ble.n	800c67e <_dtoa_r+0xa86>
 800c66e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c672:	d0ed      	beq.n	800c650 <_dtoa_r+0xa58>
 800c674:	9a00      	ldr	r2, [sp, #0]
 800c676:	f108 0301 	add.w	r3, r8, #1
 800c67a:	7013      	strb	r3, [r2, #0]
 800c67c:	e608      	b.n	800c290 <_dtoa_r+0x698>
 800c67e:	9b07      	ldr	r3, [sp, #28]
 800c680:	9a07      	ldr	r2, [sp, #28]
 800c682:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c688:	4293      	cmp	r3, r2
 800c68a:	d028      	beq.n	800c6de <_dtoa_r+0xae6>
 800c68c:	4649      	mov	r1, r9
 800c68e:	2300      	movs	r3, #0
 800c690:	220a      	movs	r2, #10
 800c692:	4658      	mov	r0, fp
 800c694:	f000 f9d6 	bl	800ca44 <__multadd>
 800c698:	42af      	cmp	r7, r5
 800c69a:	4681      	mov	r9, r0
 800c69c:	f04f 0300 	mov.w	r3, #0
 800c6a0:	f04f 020a 	mov.w	r2, #10
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	4658      	mov	r0, fp
 800c6a8:	d107      	bne.n	800c6ba <_dtoa_r+0xac2>
 800c6aa:	f000 f9cb 	bl	800ca44 <__multadd>
 800c6ae:	4607      	mov	r7, r0
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	9b07      	ldr	r3, [sp, #28]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	9307      	str	r3, [sp, #28]
 800c6b8:	e774      	b.n	800c5a4 <_dtoa_r+0x9ac>
 800c6ba:	f000 f9c3 	bl	800ca44 <__multadd>
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	220a      	movs	r2, #10
 800c6c6:	4658      	mov	r0, fp
 800c6c8:	f000 f9bc 	bl	800ca44 <__multadd>
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	e7f0      	b.n	800c6b2 <_dtoa_r+0xaba>
 800c6d0:	9b00      	ldr	r3, [sp, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bfcc      	ite	gt
 800c6d6:	461e      	movgt	r6, r3
 800c6d8:	2601      	movle	r6, #1
 800c6da:	4456      	add	r6, sl
 800c6dc:	2700      	movs	r7, #0
 800c6de:	4649      	mov	r1, r9
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	4658      	mov	r0, fp
 800c6e4:	f000 fb5a 	bl	800cd9c <__lshift>
 800c6e8:	4621      	mov	r1, r4
 800c6ea:	4681      	mov	r9, r0
 800c6ec:	f000 fbc2 	bl	800ce74 <__mcmp>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	dcb0      	bgt.n	800c656 <_dtoa_r+0xa5e>
 800c6f4:	d102      	bne.n	800c6fc <_dtoa_r+0xb04>
 800c6f6:	f018 0f01 	tst.w	r8, #1
 800c6fa:	d1ac      	bne.n	800c656 <_dtoa_r+0xa5e>
 800c6fc:	4633      	mov	r3, r6
 800c6fe:	461e      	mov	r6, r3
 800c700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c704:	2a30      	cmp	r2, #48	@ 0x30
 800c706:	d0fa      	beq.n	800c6fe <_dtoa_r+0xb06>
 800c708:	e5c2      	b.n	800c290 <_dtoa_r+0x698>
 800c70a:	459a      	cmp	sl, r3
 800c70c:	d1a4      	bne.n	800c658 <_dtoa_r+0xa60>
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	3301      	adds	r3, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	2331      	movs	r3, #49	@ 0x31
 800c716:	f88a 3000 	strb.w	r3, [sl]
 800c71a:	e5b9      	b.n	800c290 <_dtoa_r+0x698>
 800c71c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c71e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c77c <_dtoa_r+0xb84>
 800c722:	b11b      	cbz	r3, 800c72c <_dtoa_r+0xb34>
 800c724:	f10a 0308 	add.w	r3, sl, #8
 800c728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	4650      	mov	r0, sl
 800c72e:	b019      	add	sp, #100	@ 0x64
 800c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c736:	2b01      	cmp	r3, #1
 800c738:	f77f ae37 	ble.w	800c3aa <_dtoa_r+0x7b2>
 800c73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c740:	2001      	movs	r0, #1
 800c742:	e655      	b.n	800c3f0 <_dtoa_r+0x7f8>
 800c744:	9b00      	ldr	r3, [sp, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	f77f aed6 	ble.w	800c4f8 <_dtoa_r+0x900>
 800c74c:	4656      	mov	r6, sl
 800c74e:	4621      	mov	r1, r4
 800c750:	4648      	mov	r0, r9
 800c752:	f7ff f9c6 	bl	800bae2 <quorem>
 800c756:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c75a:	f806 8b01 	strb.w	r8, [r6], #1
 800c75e:	9b00      	ldr	r3, [sp, #0]
 800c760:	eba6 020a 	sub.w	r2, r6, sl
 800c764:	4293      	cmp	r3, r2
 800c766:	ddb3      	ble.n	800c6d0 <_dtoa_r+0xad8>
 800c768:	4649      	mov	r1, r9
 800c76a:	2300      	movs	r3, #0
 800c76c:	220a      	movs	r2, #10
 800c76e:	4658      	mov	r0, fp
 800c770:	f000 f968 	bl	800ca44 <__multadd>
 800c774:	4681      	mov	r9, r0
 800c776:	e7ea      	b.n	800c74e <_dtoa_r+0xb56>
 800c778:	0800e8d0 	.word	0x0800e8d0
 800c77c:	0800e854 	.word	0x0800e854

0800c780 <_free_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4605      	mov	r5, r0
 800c784:	2900      	cmp	r1, #0
 800c786:	d041      	beq.n	800c80c <_free_r+0x8c>
 800c788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c78c:	1f0c      	subs	r4, r1, #4
 800c78e:	2b00      	cmp	r3, #0
 800c790:	bfb8      	it	lt
 800c792:	18e4      	addlt	r4, r4, r3
 800c794:	f000 f8e8 	bl	800c968 <__malloc_lock>
 800c798:	4a1d      	ldr	r2, [pc, #116]	@ (800c810 <_free_r+0x90>)
 800c79a:	6813      	ldr	r3, [r2, #0]
 800c79c:	b933      	cbnz	r3, 800c7ac <_free_r+0x2c>
 800c79e:	6063      	str	r3, [r4, #4]
 800c7a0:	6014      	str	r4, [r2, #0]
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7a8:	f000 b8e4 	b.w	800c974 <__malloc_unlock>
 800c7ac:	42a3      	cmp	r3, r4
 800c7ae:	d908      	bls.n	800c7c2 <_free_r+0x42>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	1821      	adds	r1, r4, r0
 800c7b4:	428b      	cmp	r3, r1
 800c7b6:	bf01      	itttt	eq
 800c7b8:	6819      	ldreq	r1, [r3, #0]
 800c7ba:	685b      	ldreq	r3, [r3, #4]
 800c7bc:	1809      	addeq	r1, r1, r0
 800c7be:	6021      	streq	r1, [r4, #0]
 800c7c0:	e7ed      	b.n	800c79e <_free_r+0x1e>
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	b10b      	cbz	r3, 800c7cc <_free_r+0x4c>
 800c7c8:	42a3      	cmp	r3, r4
 800c7ca:	d9fa      	bls.n	800c7c2 <_free_r+0x42>
 800c7cc:	6811      	ldr	r1, [r2, #0]
 800c7ce:	1850      	adds	r0, r2, r1
 800c7d0:	42a0      	cmp	r0, r4
 800c7d2:	d10b      	bne.n	800c7ec <_free_r+0x6c>
 800c7d4:	6820      	ldr	r0, [r4, #0]
 800c7d6:	4401      	add	r1, r0
 800c7d8:	1850      	adds	r0, r2, r1
 800c7da:	4283      	cmp	r3, r0
 800c7dc:	6011      	str	r1, [r2, #0]
 800c7de:	d1e0      	bne.n	800c7a2 <_free_r+0x22>
 800c7e0:	6818      	ldr	r0, [r3, #0]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	6053      	str	r3, [r2, #4]
 800c7e6:	4408      	add	r0, r1
 800c7e8:	6010      	str	r0, [r2, #0]
 800c7ea:	e7da      	b.n	800c7a2 <_free_r+0x22>
 800c7ec:	d902      	bls.n	800c7f4 <_free_r+0x74>
 800c7ee:	230c      	movs	r3, #12
 800c7f0:	602b      	str	r3, [r5, #0]
 800c7f2:	e7d6      	b.n	800c7a2 <_free_r+0x22>
 800c7f4:	6820      	ldr	r0, [r4, #0]
 800c7f6:	1821      	adds	r1, r4, r0
 800c7f8:	428b      	cmp	r3, r1
 800c7fa:	bf04      	itt	eq
 800c7fc:	6819      	ldreq	r1, [r3, #0]
 800c7fe:	685b      	ldreq	r3, [r3, #4]
 800c800:	6063      	str	r3, [r4, #4]
 800c802:	bf04      	itt	eq
 800c804:	1809      	addeq	r1, r1, r0
 800c806:	6021      	streq	r1, [r4, #0]
 800c808:	6054      	str	r4, [r2, #4]
 800c80a:	e7ca      	b.n	800c7a2 <_free_r+0x22>
 800c80c:	bd38      	pop	{r3, r4, r5, pc}
 800c80e:	bf00      	nop
 800c810:	20005344 	.word	0x20005344

0800c814 <malloc>:
 800c814:	4b02      	ldr	r3, [pc, #8]	@ (800c820 <malloc+0xc>)
 800c816:	4601      	mov	r1, r0
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	f000 b825 	b.w	800c868 <_malloc_r>
 800c81e:	bf00      	nop
 800c820:	20000020 	.word	0x20000020

0800c824 <sbrk_aligned>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	4e0f      	ldr	r6, [pc, #60]	@ (800c864 <sbrk_aligned+0x40>)
 800c828:	460c      	mov	r4, r1
 800c82a:	6831      	ldr	r1, [r6, #0]
 800c82c:	4605      	mov	r5, r0
 800c82e:	b911      	cbnz	r1, 800c836 <sbrk_aligned+0x12>
 800c830:	f000 fe46 	bl	800d4c0 <_sbrk_r>
 800c834:	6030      	str	r0, [r6, #0]
 800c836:	4621      	mov	r1, r4
 800c838:	4628      	mov	r0, r5
 800c83a:	f000 fe41 	bl	800d4c0 <_sbrk_r>
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	d103      	bne.n	800c84a <sbrk_aligned+0x26>
 800c842:	f04f 34ff 	mov.w	r4, #4294967295
 800c846:	4620      	mov	r0, r4
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	1cc4      	adds	r4, r0, #3
 800c84c:	f024 0403 	bic.w	r4, r4, #3
 800c850:	42a0      	cmp	r0, r4
 800c852:	d0f8      	beq.n	800c846 <sbrk_aligned+0x22>
 800c854:	1a21      	subs	r1, r4, r0
 800c856:	4628      	mov	r0, r5
 800c858:	f000 fe32 	bl	800d4c0 <_sbrk_r>
 800c85c:	3001      	adds	r0, #1
 800c85e:	d1f2      	bne.n	800c846 <sbrk_aligned+0x22>
 800c860:	e7ef      	b.n	800c842 <sbrk_aligned+0x1e>
 800c862:	bf00      	nop
 800c864:	20005340 	.word	0x20005340

0800c868 <_malloc_r>:
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	1ccd      	adds	r5, r1, #3
 800c86e:	f025 0503 	bic.w	r5, r5, #3
 800c872:	3508      	adds	r5, #8
 800c874:	2d0c      	cmp	r5, #12
 800c876:	bf38      	it	cc
 800c878:	250c      	movcc	r5, #12
 800c87a:	2d00      	cmp	r5, #0
 800c87c:	4606      	mov	r6, r0
 800c87e:	db01      	blt.n	800c884 <_malloc_r+0x1c>
 800c880:	42a9      	cmp	r1, r5
 800c882:	d904      	bls.n	800c88e <_malloc_r+0x26>
 800c884:	230c      	movs	r3, #12
 800c886:	6033      	str	r3, [r6, #0]
 800c888:	2000      	movs	r0, #0
 800c88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c964 <_malloc_r+0xfc>
 800c892:	f000 f869 	bl	800c968 <__malloc_lock>
 800c896:	f8d8 3000 	ldr.w	r3, [r8]
 800c89a:	461c      	mov	r4, r3
 800c89c:	bb44      	cbnz	r4, 800c8f0 <_malloc_r+0x88>
 800c89e:	4629      	mov	r1, r5
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7ff ffbf 	bl	800c824 <sbrk_aligned>
 800c8a6:	1c43      	adds	r3, r0, #1
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	d158      	bne.n	800c95e <_malloc_r+0xf6>
 800c8ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c8b0:	4627      	mov	r7, r4
 800c8b2:	2f00      	cmp	r7, #0
 800c8b4:	d143      	bne.n	800c93e <_malloc_r+0xd6>
 800c8b6:	2c00      	cmp	r4, #0
 800c8b8:	d04b      	beq.n	800c952 <_malloc_r+0xea>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	4639      	mov	r1, r7
 800c8be:	4630      	mov	r0, r6
 800c8c0:	eb04 0903 	add.w	r9, r4, r3
 800c8c4:	f000 fdfc 	bl	800d4c0 <_sbrk_r>
 800c8c8:	4581      	cmp	r9, r0
 800c8ca:	d142      	bne.n	800c952 <_malloc_r+0xea>
 800c8cc:	6821      	ldr	r1, [r4, #0]
 800c8ce:	1a6d      	subs	r5, r5, r1
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f7ff ffa6 	bl	800c824 <sbrk_aligned>
 800c8d8:	3001      	adds	r0, #1
 800c8da:	d03a      	beq.n	800c952 <_malloc_r+0xea>
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	442b      	add	r3, r5
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	bb62      	cbnz	r2, 800c944 <_malloc_r+0xdc>
 800c8ea:	f8c8 7000 	str.w	r7, [r8]
 800c8ee:	e00f      	b.n	800c910 <_malloc_r+0xa8>
 800c8f0:	6822      	ldr	r2, [r4, #0]
 800c8f2:	1b52      	subs	r2, r2, r5
 800c8f4:	d420      	bmi.n	800c938 <_malloc_r+0xd0>
 800c8f6:	2a0b      	cmp	r2, #11
 800c8f8:	d917      	bls.n	800c92a <_malloc_r+0xc2>
 800c8fa:	1961      	adds	r1, r4, r5
 800c8fc:	42a3      	cmp	r3, r4
 800c8fe:	6025      	str	r5, [r4, #0]
 800c900:	bf18      	it	ne
 800c902:	6059      	strne	r1, [r3, #4]
 800c904:	6863      	ldr	r3, [r4, #4]
 800c906:	bf08      	it	eq
 800c908:	f8c8 1000 	streq.w	r1, [r8]
 800c90c:	5162      	str	r2, [r4, r5]
 800c90e:	604b      	str	r3, [r1, #4]
 800c910:	4630      	mov	r0, r6
 800c912:	f000 f82f 	bl	800c974 <__malloc_unlock>
 800c916:	f104 000b 	add.w	r0, r4, #11
 800c91a:	1d23      	adds	r3, r4, #4
 800c91c:	f020 0007 	bic.w	r0, r0, #7
 800c920:	1ac2      	subs	r2, r0, r3
 800c922:	bf1c      	itt	ne
 800c924:	1a1b      	subne	r3, r3, r0
 800c926:	50a3      	strne	r3, [r4, r2]
 800c928:	e7af      	b.n	800c88a <_malloc_r+0x22>
 800c92a:	6862      	ldr	r2, [r4, #4]
 800c92c:	42a3      	cmp	r3, r4
 800c92e:	bf0c      	ite	eq
 800c930:	f8c8 2000 	streq.w	r2, [r8]
 800c934:	605a      	strne	r2, [r3, #4]
 800c936:	e7eb      	b.n	800c910 <_malloc_r+0xa8>
 800c938:	4623      	mov	r3, r4
 800c93a:	6864      	ldr	r4, [r4, #4]
 800c93c:	e7ae      	b.n	800c89c <_malloc_r+0x34>
 800c93e:	463c      	mov	r4, r7
 800c940:	687f      	ldr	r7, [r7, #4]
 800c942:	e7b6      	b.n	800c8b2 <_malloc_r+0x4a>
 800c944:	461a      	mov	r2, r3
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	42a3      	cmp	r3, r4
 800c94a:	d1fb      	bne.n	800c944 <_malloc_r+0xdc>
 800c94c:	2300      	movs	r3, #0
 800c94e:	6053      	str	r3, [r2, #4]
 800c950:	e7de      	b.n	800c910 <_malloc_r+0xa8>
 800c952:	230c      	movs	r3, #12
 800c954:	6033      	str	r3, [r6, #0]
 800c956:	4630      	mov	r0, r6
 800c958:	f000 f80c 	bl	800c974 <__malloc_unlock>
 800c95c:	e794      	b.n	800c888 <_malloc_r+0x20>
 800c95e:	6005      	str	r5, [r0, #0]
 800c960:	e7d6      	b.n	800c910 <_malloc_r+0xa8>
 800c962:	bf00      	nop
 800c964:	20005344 	.word	0x20005344

0800c968 <__malloc_lock>:
 800c968:	4801      	ldr	r0, [pc, #4]	@ (800c970 <__malloc_lock+0x8>)
 800c96a:	f7ff b8aa 	b.w	800bac2 <__retarget_lock_acquire_recursive>
 800c96e:	bf00      	nop
 800c970:	2000533c 	.word	0x2000533c

0800c974 <__malloc_unlock>:
 800c974:	4801      	ldr	r0, [pc, #4]	@ (800c97c <__malloc_unlock+0x8>)
 800c976:	f7ff b8a5 	b.w	800bac4 <__retarget_lock_release_recursive>
 800c97a:	bf00      	nop
 800c97c:	2000533c 	.word	0x2000533c

0800c980 <_Balloc>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	69c6      	ldr	r6, [r0, #28]
 800c984:	4604      	mov	r4, r0
 800c986:	460d      	mov	r5, r1
 800c988:	b976      	cbnz	r6, 800c9a8 <_Balloc+0x28>
 800c98a:	2010      	movs	r0, #16
 800c98c:	f7ff ff42 	bl	800c814 <malloc>
 800c990:	4602      	mov	r2, r0
 800c992:	61e0      	str	r0, [r4, #28]
 800c994:	b920      	cbnz	r0, 800c9a0 <_Balloc+0x20>
 800c996:	4b18      	ldr	r3, [pc, #96]	@ (800c9f8 <_Balloc+0x78>)
 800c998:	4818      	ldr	r0, [pc, #96]	@ (800c9fc <_Balloc+0x7c>)
 800c99a:	216b      	movs	r1, #107	@ 0x6b
 800c99c:	f000 fda0 	bl	800d4e0 <__assert_func>
 800c9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9a4:	6006      	str	r6, [r0, #0]
 800c9a6:	60c6      	str	r6, [r0, #12]
 800c9a8:	69e6      	ldr	r6, [r4, #28]
 800c9aa:	68f3      	ldr	r3, [r6, #12]
 800c9ac:	b183      	cbz	r3, 800c9d0 <_Balloc+0x50>
 800c9ae:	69e3      	ldr	r3, [r4, #28]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9b6:	b9b8      	cbnz	r0, 800c9e8 <_Balloc+0x68>
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c9be:	1d72      	adds	r2, r6, #5
 800c9c0:	0092      	lsls	r2, r2, #2
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fdaa 	bl	800d51c <_calloc_r>
 800c9c8:	b160      	cbz	r0, 800c9e4 <_Balloc+0x64>
 800c9ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9ce:	e00e      	b.n	800c9ee <_Balloc+0x6e>
 800c9d0:	2221      	movs	r2, #33	@ 0x21
 800c9d2:	2104      	movs	r1, #4
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f000 fda1 	bl	800d51c <_calloc_r>
 800c9da:	69e3      	ldr	r3, [r4, #28]
 800c9dc:	60f0      	str	r0, [r6, #12]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1e4      	bne.n	800c9ae <_Balloc+0x2e>
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
 800c9e8:	6802      	ldr	r2, [r0, #0]
 800c9ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9f4:	e7f7      	b.n	800c9e6 <_Balloc+0x66>
 800c9f6:	bf00      	nop
 800c9f8:	0800e861 	.word	0x0800e861
 800c9fc:	0800e8e1 	.word	0x0800e8e1

0800ca00 <_Bfree>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	69c6      	ldr	r6, [r0, #28]
 800ca04:	4605      	mov	r5, r0
 800ca06:	460c      	mov	r4, r1
 800ca08:	b976      	cbnz	r6, 800ca28 <_Bfree+0x28>
 800ca0a:	2010      	movs	r0, #16
 800ca0c:	f7ff ff02 	bl	800c814 <malloc>
 800ca10:	4602      	mov	r2, r0
 800ca12:	61e8      	str	r0, [r5, #28]
 800ca14:	b920      	cbnz	r0, 800ca20 <_Bfree+0x20>
 800ca16:	4b09      	ldr	r3, [pc, #36]	@ (800ca3c <_Bfree+0x3c>)
 800ca18:	4809      	ldr	r0, [pc, #36]	@ (800ca40 <_Bfree+0x40>)
 800ca1a:	218f      	movs	r1, #143	@ 0x8f
 800ca1c:	f000 fd60 	bl	800d4e0 <__assert_func>
 800ca20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca24:	6006      	str	r6, [r0, #0]
 800ca26:	60c6      	str	r6, [r0, #12]
 800ca28:	b13c      	cbz	r4, 800ca3a <_Bfree+0x3a>
 800ca2a:	69eb      	ldr	r3, [r5, #28]
 800ca2c:	6862      	ldr	r2, [r4, #4]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca34:	6021      	str	r1, [r4, #0]
 800ca36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	0800e861 	.word	0x0800e861
 800ca40:	0800e8e1 	.word	0x0800e8e1

0800ca44 <__multadd>:
 800ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca48:	690d      	ldr	r5, [r1, #16]
 800ca4a:	4607      	mov	r7, r0
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	461e      	mov	r6, r3
 800ca50:	f101 0c14 	add.w	ip, r1, #20
 800ca54:	2000      	movs	r0, #0
 800ca56:	f8dc 3000 	ldr.w	r3, [ip]
 800ca5a:	b299      	uxth	r1, r3
 800ca5c:	fb02 6101 	mla	r1, r2, r1, r6
 800ca60:	0c1e      	lsrs	r6, r3, #16
 800ca62:	0c0b      	lsrs	r3, r1, #16
 800ca64:	fb02 3306 	mla	r3, r2, r6, r3
 800ca68:	b289      	uxth	r1, r1
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca70:	4285      	cmp	r5, r0
 800ca72:	f84c 1b04 	str.w	r1, [ip], #4
 800ca76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca7a:	dcec      	bgt.n	800ca56 <__multadd+0x12>
 800ca7c:	b30e      	cbz	r6, 800cac2 <__multadd+0x7e>
 800ca7e:	68a3      	ldr	r3, [r4, #8]
 800ca80:	42ab      	cmp	r3, r5
 800ca82:	dc19      	bgt.n	800cab8 <__multadd+0x74>
 800ca84:	6861      	ldr	r1, [r4, #4]
 800ca86:	4638      	mov	r0, r7
 800ca88:	3101      	adds	r1, #1
 800ca8a:	f7ff ff79 	bl	800c980 <_Balloc>
 800ca8e:	4680      	mov	r8, r0
 800ca90:	b928      	cbnz	r0, 800ca9e <__multadd+0x5a>
 800ca92:	4602      	mov	r2, r0
 800ca94:	4b0c      	ldr	r3, [pc, #48]	@ (800cac8 <__multadd+0x84>)
 800ca96:	480d      	ldr	r0, [pc, #52]	@ (800cacc <__multadd+0x88>)
 800ca98:	21ba      	movs	r1, #186	@ 0xba
 800ca9a:	f000 fd21 	bl	800d4e0 <__assert_func>
 800ca9e:	6922      	ldr	r2, [r4, #16]
 800caa0:	3202      	adds	r2, #2
 800caa2:	f104 010c 	add.w	r1, r4, #12
 800caa6:	0092      	lsls	r2, r2, #2
 800caa8:	300c      	adds	r0, #12
 800caaa:	f7ff f80c 	bl	800bac6 <memcpy>
 800caae:	4621      	mov	r1, r4
 800cab0:	4638      	mov	r0, r7
 800cab2:	f7ff ffa5 	bl	800ca00 <_Bfree>
 800cab6:	4644      	mov	r4, r8
 800cab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cabc:	3501      	adds	r5, #1
 800cabe:	615e      	str	r6, [r3, #20]
 800cac0:	6125      	str	r5, [r4, #16]
 800cac2:	4620      	mov	r0, r4
 800cac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac8:	0800e8d0 	.word	0x0800e8d0
 800cacc:	0800e8e1 	.word	0x0800e8e1

0800cad0 <__hi0bits>:
 800cad0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cad4:	4603      	mov	r3, r0
 800cad6:	bf36      	itet	cc
 800cad8:	0403      	lslcc	r3, r0, #16
 800cada:	2000      	movcs	r0, #0
 800cadc:	2010      	movcc	r0, #16
 800cade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cae2:	bf3c      	itt	cc
 800cae4:	021b      	lslcc	r3, r3, #8
 800cae6:	3008      	addcc	r0, #8
 800cae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800caec:	bf3c      	itt	cc
 800caee:	011b      	lslcc	r3, r3, #4
 800caf0:	3004      	addcc	r0, #4
 800caf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caf6:	bf3c      	itt	cc
 800caf8:	009b      	lslcc	r3, r3, #2
 800cafa:	3002      	addcc	r0, #2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	db05      	blt.n	800cb0c <__hi0bits+0x3c>
 800cb00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb04:	f100 0001 	add.w	r0, r0, #1
 800cb08:	bf08      	it	eq
 800cb0a:	2020      	moveq	r0, #32
 800cb0c:	4770      	bx	lr

0800cb0e <__lo0bits>:
 800cb0e:	6803      	ldr	r3, [r0, #0]
 800cb10:	4602      	mov	r2, r0
 800cb12:	f013 0007 	ands.w	r0, r3, #7
 800cb16:	d00b      	beq.n	800cb30 <__lo0bits+0x22>
 800cb18:	07d9      	lsls	r1, r3, #31
 800cb1a:	d421      	bmi.n	800cb60 <__lo0bits+0x52>
 800cb1c:	0798      	lsls	r0, r3, #30
 800cb1e:	bf49      	itett	mi
 800cb20:	085b      	lsrmi	r3, r3, #1
 800cb22:	089b      	lsrpl	r3, r3, #2
 800cb24:	2001      	movmi	r0, #1
 800cb26:	6013      	strmi	r3, [r2, #0]
 800cb28:	bf5c      	itt	pl
 800cb2a:	6013      	strpl	r3, [r2, #0]
 800cb2c:	2002      	movpl	r0, #2
 800cb2e:	4770      	bx	lr
 800cb30:	b299      	uxth	r1, r3
 800cb32:	b909      	cbnz	r1, 800cb38 <__lo0bits+0x2a>
 800cb34:	0c1b      	lsrs	r3, r3, #16
 800cb36:	2010      	movs	r0, #16
 800cb38:	b2d9      	uxtb	r1, r3
 800cb3a:	b909      	cbnz	r1, 800cb40 <__lo0bits+0x32>
 800cb3c:	3008      	adds	r0, #8
 800cb3e:	0a1b      	lsrs	r3, r3, #8
 800cb40:	0719      	lsls	r1, r3, #28
 800cb42:	bf04      	itt	eq
 800cb44:	091b      	lsreq	r3, r3, #4
 800cb46:	3004      	addeq	r0, #4
 800cb48:	0799      	lsls	r1, r3, #30
 800cb4a:	bf04      	itt	eq
 800cb4c:	089b      	lsreq	r3, r3, #2
 800cb4e:	3002      	addeq	r0, #2
 800cb50:	07d9      	lsls	r1, r3, #31
 800cb52:	d403      	bmi.n	800cb5c <__lo0bits+0x4e>
 800cb54:	085b      	lsrs	r3, r3, #1
 800cb56:	f100 0001 	add.w	r0, r0, #1
 800cb5a:	d003      	beq.n	800cb64 <__lo0bits+0x56>
 800cb5c:	6013      	str	r3, [r2, #0]
 800cb5e:	4770      	bx	lr
 800cb60:	2000      	movs	r0, #0
 800cb62:	4770      	bx	lr
 800cb64:	2020      	movs	r0, #32
 800cb66:	4770      	bx	lr

0800cb68 <__i2b>:
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	f7ff ff07 	bl	800c980 <_Balloc>
 800cb72:	4602      	mov	r2, r0
 800cb74:	b928      	cbnz	r0, 800cb82 <__i2b+0x1a>
 800cb76:	4b05      	ldr	r3, [pc, #20]	@ (800cb8c <__i2b+0x24>)
 800cb78:	4805      	ldr	r0, [pc, #20]	@ (800cb90 <__i2b+0x28>)
 800cb7a:	f240 1145 	movw	r1, #325	@ 0x145
 800cb7e:	f000 fcaf 	bl	800d4e0 <__assert_func>
 800cb82:	2301      	movs	r3, #1
 800cb84:	6144      	str	r4, [r0, #20]
 800cb86:	6103      	str	r3, [r0, #16]
 800cb88:	bd10      	pop	{r4, pc}
 800cb8a:	bf00      	nop
 800cb8c:	0800e8d0 	.word	0x0800e8d0
 800cb90:	0800e8e1 	.word	0x0800e8e1

0800cb94 <__multiply>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	4614      	mov	r4, r2
 800cb9a:	690a      	ldr	r2, [r1, #16]
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	bfa8      	it	ge
 800cba2:	4623      	movge	r3, r4
 800cba4:	460f      	mov	r7, r1
 800cba6:	bfa4      	itt	ge
 800cba8:	460c      	movge	r4, r1
 800cbaa:	461f      	movge	r7, r3
 800cbac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cbb0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cbb4:	68a3      	ldr	r3, [r4, #8]
 800cbb6:	6861      	ldr	r1, [r4, #4]
 800cbb8:	eb0a 0609 	add.w	r6, sl, r9
 800cbbc:	42b3      	cmp	r3, r6
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	bfb8      	it	lt
 800cbc2:	3101      	addlt	r1, #1
 800cbc4:	f7ff fedc 	bl	800c980 <_Balloc>
 800cbc8:	b930      	cbnz	r0, 800cbd8 <__multiply+0x44>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	4b44      	ldr	r3, [pc, #272]	@ (800cce0 <__multiply+0x14c>)
 800cbce:	4845      	ldr	r0, [pc, #276]	@ (800cce4 <__multiply+0x150>)
 800cbd0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbd4:	f000 fc84 	bl	800d4e0 <__assert_func>
 800cbd8:	f100 0514 	add.w	r5, r0, #20
 800cbdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbe0:	462b      	mov	r3, r5
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	4543      	cmp	r3, r8
 800cbe6:	d321      	bcc.n	800cc2c <__multiply+0x98>
 800cbe8:	f107 0114 	add.w	r1, r7, #20
 800cbec:	f104 0214 	add.w	r2, r4, #20
 800cbf0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cbf4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	1b13      	subs	r3, r2, r4
 800cbfc:	3b15      	subs	r3, #21
 800cbfe:	f023 0303 	bic.w	r3, r3, #3
 800cc02:	3304      	adds	r3, #4
 800cc04:	f104 0715 	add.w	r7, r4, #21
 800cc08:	42ba      	cmp	r2, r7
 800cc0a:	bf38      	it	cc
 800cc0c:	2304      	movcc	r3, #4
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	9b02      	ldr	r3, [sp, #8]
 800cc12:	9103      	str	r1, [sp, #12]
 800cc14:	428b      	cmp	r3, r1
 800cc16:	d80c      	bhi.n	800cc32 <__multiply+0x9e>
 800cc18:	2e00      	cmp	r6, #0
 800cc1a:	dd03      	ble.n	800cc24 <__multiply+0x90>
 800cc1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d05b      	beq.n	800ccdc <__multiply+0x148>
 800cc24:	6106      	str	r6, [r0, #16]
 800cc26:	b005      	add	sp, #20
 800cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2c:	f843 2b04 	str.w	r2, [r3], #4
 800cc30:	e7d8      	b.n	800cbe4 <__multiply+0x50>
 800cc32:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc36:	f1ba 0f00 	cmp.w	sl, #0
 800cc3a:	d024      	beq.n	800cc86 <__multiply+0xf2>
 800cc3c:	f104 0e14 	add.w	lr, r4, #20
 800cc40:	46a9      	mov	r9, r5
 800cc42:	f04f 0c00 	mov.w	ip, #0
 800cc46:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc4a:	f8d9 3000 	ldr.w	r3, [r9]
 800cc4e:	fa1f fb87 	uxth.w	fp, r7
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cc5c:	f8d9 7000 	ldr.w	r7, [r9]
 800cc60:	4463      	add	r3, ip
 800cc62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc66:	fb0a c70b 	mla	r7, sl, fp, ip
 800cc6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc74:	4572      	cmp	r2, lr
 800cc76:	f849 3b04 	str.w	r3, [r9], #4
 800cc7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc7e:	d8e2      	bhi.n	800cc46 <__multiply+0xb2>
 800cc80:	9b01      	ldr	r3, [sp, #4]
 800cc82:	f845 c003 	str.w	ip, [r5, r3]
 800cc86:	9b03      	ldr	r3, [sp, #12]
 800cc88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc8c:	3104      	adds	r1, #4
 800cc8e:	f1b9 0f00 	cmp.w	r9, #0
 800cc92:	d021      	beq.n	800ccd8 <__multiply+0x144>
 800cc94:	682b      	ldr	r3, [r5, #0]
 800cc96:	f104 0c14 	add.w	ip, r4, #20
 800cc9a:	46ae      	mov	lr, r5
 800cc9c:	f04f 0a00 	mov.w	sl, #0
 800cca0:	f8bc b000 	ldrh.w	fp, [ip]
 800cca4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cca8:	fb09 770b 	mla	r7, r9, fp, r7
 800ccac:	4457      	add	r7, sl
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ccb4:	f84e 3b04 	str.w	r3, [lr], #4
 800ccb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ccbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccc0:	f8be 3000 	ldrh.w	r3, [lr]
 800ccc4:	fb09 330a 	mla	r3, r9, sl, r3
 800ccc8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cccc:	4562      	cmp	r2, ip
 800ccce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccd2:	d8e5      	bhi.n	800cca0 <__multiply+0x10c>
 800ccd4:	9f01      	ldr	r7, [sp, #4]
 800ccd6:	51eb      	str	r3, [r5, r7]
 800ccd8:	3504      	adds	r5, #4
 800ccda:	e799      	b.n	800cc10 <__multiply+0x7c>
 800ccdc:	3e01      	subs	r6, #1
 800ccde:	e79b      	b.n	800cc18 <__multiply+0x84>
 800cce0:	0800e8d0 	.word	0x0800e8d0
 800cce4:	0800e8e1 	.word	0x0800e8e1

0800cce8 <__pow5mult>:
 800cce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccec:	4615      	mov	r5, r2
 800ccee:	f012 0203 	ands.w	r2, r2, #3
 800ccf2:	4607      	mov	r7, r0
 800ccf4:	460e      	mov	r6, r1
 800ccf6:	d007      	beq.n	800cd08 <__pow5mult+0x20>
 800ccf8:	4c25      	ldr	r4, [pc, #148]	@ (800cd90 <__pow5mult+0xa8>)
 800ccfa:	3a01      	subs	r2, #1
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd02:	f7ff fe9f 	bl	800ca44 <__multadd>
 800cd06:	4606      	mov	r6, r0
 800cd08:	10ad      	asrs	r5, r5, #2
 800cd0a:	d03d      	beq.n	800cd88 <__pow5mult+0xa0>
 800cd0c:	69fc      	ldr	r4, [r7, #28]
 800cd0e:	b97c      	cbnz	r4, 800cd30 <__pow5mult+0x48>
 800cd10:	2010      	movs	r0, #16
 800cd12:	f7ff fd7f 	bl	800c814 <malloc>
 800cd16:	4602      	mov	r2, r0
 800cd18:	61f8      	str	r0, [r7, #28]
 800cd1a:	b928      	cbnz	r0, 800cd28 <__pow5mult+0x40>
 800cd1c:	4b1d      	ldr	r3, [pc, #116]	@ (800cd94 <__pow5mult+0xac>)
 800cd1e:	481e      	ldr	r0, [pc, #120]	@ (800cd98 <__pow5mult+0xb0>)
 800cd20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd24:	f000 fbdc 	bl	800d4e0 <__assert_func>
 800cd28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd2c:	6004      	str	r4, [r0, #0]
 800cd2e:	60c4      	str	r4, [r0, #12]
 800cd30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd38:	b94c      	cbnz	r4, 800cd4e <__pow5mult+0x66>
 800cd3a:	f240 2171 	movw	r1, #625	@ 0x271
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7ff ff12 	bl	800cb68 <__i2b>
 800cd44:	2300      	movs	r3, #0
 800cd46:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	6003      	str	r3, [r0, #0]
 800cd4e:	f04f 0900 	mov.w	r9, #0
 800cd52:	07eb      	lsls	r3, r5, #31
 800cd54:	d50a      	bpl.n	800cd6c <__pow5mult+0x84>
 800cd56:	4631      	mov	r1, r6
 800cd58:	4622      	mov	r2, r4
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	f7ff ff1a 	bl	800cb94 <__multiply>
 800cd60:	4631      	mov	r1, r6
 800cd62:	4680      	mov	r8, r0
 800cd64:	4638      	mov	r0, r7
 800cd66:	f7ff fe4b 	bl	800ca00 <_Bfree>
 800cd6a:	4646      	mov	r6, r8
 800cd6c:	106d      	asrs	r5, r5, #1
 800cd6e:	d00b      	beq.n	800cd88 <__pow5mult+0xa0>
 800cd70:	6820      	ldr	r0, [r4, #0]
 800cd72:	b938      	cbnz	r0, 800cd84 <__pow5mult+0x9c>
 800cd74:	4622      	mov	r2, r4
 800cd76:	4621      	mov	r1, r4
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f7ff ff0b 	bl	800cb94 <__multiply>
 800cd7e:	6020      	str	r0, [r4, #0]
 800cd80:	f8c0 9000 	str.w	r9, [r0]
 800cd84:	4604      	mov	r4, r0
 800cd86:	e7e4      	b.n	800cd52 <__pow5mult+0x6a>
 800cd88:	4630      	mov	r0, r6
 800cd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd8e:	bf00      	nop
 800cd90:	0800e93c 	.word	0x0800e93c
 800cd94:	0800e861 	.word	0x0800e861
 800cd98:	0800e8e1 	.word	0x0800e8e1

0800cd9c <__lshift>:
 800cd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda0:	460c      	mov	r4, r1
 800cda2:	6849      	ldr	r1, [r1, #4]
 800cda4:	6923      	ldr	r3, [r4, #16]
 800cda6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdaa:	68a3      	ldr	r3, [r4, #8]
 800cdac:	4607      	mov	r7, r0
 800cdae:	4691      	mov	r9, r2
 800cdb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdb4:	f108 0601 	add.w	r6, r8, #1
 800cdb8:	42b3      	cmp	r3, r6
 800cdba:	db0b      	blt.n	800cdd4 <__lshift+0x38>
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	f7ff fddf 	bl	800c980 <_Balloc>
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	b948      	cbnz	r0, 800cdda <__lshift+0x3e>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	4b28      	ldr	r3, [pc, #160]	@ (800ce6c <__lshift+0xd0>)
 800cdca:	4829      	ldr	r0, [pc, #164]	@ (800ce70 <__lshift+0xd4>)
 800cdcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cdd0:	f000 fb86 	bl	800d4e0 <__assert_func>
 800cdd4:	3101      	adds	r1, #1
 800cdd6:	005b      	lsls	r3, r3, #1
 800cdd8:	e7ee      	b.n	800cdb8 <__lshift+0x1c>
 800cdda:	2300      	movs	r3, #0
 800cddc:	f100 0114 	add.w	r1, r0, #20
 800cde0:	f100 0210 	add.w	r2, r0, #16
 800cde4:	4618      	mov	r0, r3
 800cde6:	4553      	cmp	r3, sl
 800cde8:	db33      	blt.n	800ce52 <__lshift+0xb6>
 800cdea:	6920      	ldr	r0, [r4, #16]
 800cdec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdf0:	f104 0314 	add.w	r3, r4, #20
 800cdf4:	f019 091f 	ands.w	r9, r9, #31
 800cdf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce00:	d02b      	beq.n	800ce5a <__lshift+0xbe>
 800ce02:	f1c9 0e20 	rsb	lr, r9, #32
 800ce06:	468a      	mov	sl, r1
 800ce08:	2200      	movs	r2, #0
 800ce0a:	6818      	ldr	r0, [r3, #0]
 800ce0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ce10:	4310      	orrs	r0, r2
 800ce12:	f84a 0b04 	str.w	r0, [sl], #4
 800ce16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce1a:	459c      	cmp	ip, r3
 800ce1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce20:	d8f3      	bhi.n	800ce0a <__lshift+0x6e>
 800ce22:	ebac 0304 	sub.w	r3, ip, r4
 800ce26:	3b15      	subs	r3, #21
 800ce28:	f023 0303 	bic.w	r3, r3, #3
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	f104 0015 	add.w	r0, r4, #21
 800ce32:	4584      	cmp	ip, r0
 800ce34:	bf38      	it	cc
 800ce36:	2304      	movcc	r3, #4
 800ce38:	50ca      	str	r2, [r1, r3]
 800ce3a:	b10a      	cbz	r2, 800ce40 <__lshift+0xa4>
 800ce3c:	f108 0602 	add.w	r6, r8, #2
 800ce40:	3e01      	subs	r6, #1
 800ce42:	4638      	mov	r0, r7
 800ce44:	612e      	str	r6, [r5, #16]
 800ce46:	4621      	mov	r1, r4
 800ce48:	f7ff fdda 	bl	800ca00 <_Bfree>
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce56:	3301      	adds	r3, #1
 800ce58:	e7c5      	b.n	800cde6 <__lshift+0x4a>
 800ce5a:	3904      	subs	r1, #4
 800ce5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce64:	459c      	cmp	ip, r3
 800ce66:	d8f9      	bhi.n	800ce5c <__lshift+0xc0>
 800ce68:	e7ea      	b.n	800ce40 <__lshift+0xa4>
 800ce6a:	bf00      	nop
 800ce6c:	0800e8d0 	.word	0x0800e8d0
 800ce70:	0800e8e1 	.word	0x0800e8e1

0800ce74 <__mcmp>:
 800ce74:	690a      	ldr	r2, [r1, #16]
 800ce76:	4603      	mov	r3, r0
 800ce78:	6900      	ldr	r0, [r0, #16]
 800ce7a:	1a80      	subs	r0, r0, r2
 800ce7c:	b530      	push	{r4, r5, lr}
 800ce7e:	d10e      	bne.n	800ce9e <__mcmp+0x2a>
 800ce80:	3314      	adds	r3, #20
 800ce82:	3114      	adds	r1, #20
 800ce84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce94:	4295      	cmp	r5, r2
 800ce96:	d003      	beq.n	800cea0 <__mcmp+0x2c>
 800ce98:	d205      	bcs.n	800cea6 <__mcmp+0x32>
 800ce9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce9e:	bd30      	pop	{r4, r5, pc}
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	d3f3      	bcc.n	800ce8c <__mcmp+0x18>
 800cea4:	e7fb      	b.n	800ce9e <__mcmp+0x2a>
 800cea6:	2001      	movs	r0, #1
 800cea8:	e7f9      	b.n	800ce9e <__mcmp+0x2a>
	...

0800ceac <__mdiff>:
 800ceac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	4689      	mov	r9, r1
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4648      	mov	r0, r9
 800ceb8:	4614      	mov	r4, r2
 800ceba:	f7ff ffdb 	bl	800ce74 <__mcmp>
 800cebe:	1e05      	subs	r5, r0, #0
 800cec0:	d112      	bne.n	800cee8 <__mdiff+0x3c>
 800cec2:	4629      	mov	r1, r5
 800cec4:	4630      	mov	r0, r6
 800cec6:	f7ff fd5b 	bl	800c980 <_Balloc>
 800ceca:	4602      	mov	r2, r0
 800cecc:	b928      	cbnz	r0, 800ceda <__mdiff+0x2e>
 800cece:	4b3f      	ldr	r3, [pc, #252]	@ (800cfcc <__mdiff+0x120>)
 800ced0:	f240 2137 	movw	r1, #567	@ 0x237
 800ced4:	483e      	ldr	r0, [pc, #248]	@ (800cfd0 <__mdiff+0x124>)
 800ced6:	f000 fb03 	bl	800d4e0 <__assert_func>
 800ceda:	2301      	movs	r3, #1
 800cedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cee0:	4610      	mov	r0, r2
 800cee2:	b003      	add	sp, #12
 800cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee8:	bfbc      	itt	lt
 800ceea:	464b      	movlt	r3, r9
 800ceec:	46a1      	movlt	r9, r4
 800ceee:	4630      	mov	r0, r6
 800cef0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cef4:	bfba      	itte	lt
 800cef6:	461c      	movlt	r4, r3
 800cef8:	2501      	movlt	r5, #1
 800cefa:	2500      	movge	r5, #0
 800cefc:	f7ff fd40 	bl	800c980 <_Balloc>
 800cf00:	4602      	mov	r2, r0
 800cf02:	b918      	cbnz	r0, 800cf0c <__mdiff+0x60>
 800cf04:	4b31      	ldr	r3, [pc, #196]	@ (800cfcc <__mdiff+0x120>)
 800cf06:	f240 2145 	movw	r1, #581	@ 0x245
 800cf0a:	e7e3      	b.n	800ced4 <__mdiff+0x28>
 800cf0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf10:	6926      	ldr	r6, [r4, #16]
 800cf12:	60c5      	str	r5, [r0, #12]
 800cf14:	f109 0310 	add.w	r3, r9, #16
 800cf18:	f109 0514 	add.w	r5, r9, #20
 800cf1c:	f104 0e14 	add.w	lr, r4, #20
 800cf20:	f100 0b14 	add.w	fp, r0, #20
 800cf24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	46d9      	mov	r9, fp
 800cf30:	f04f 0c00 	mov.w	ip, #0
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	fa1f f38a 	uxth.w	r3, sl
 800cf44:	4619      	mov	r1, r3
 800cf46:	b283      	uxth	r3, r0
 800cf48:	1acb      	subs	r3, r1, r3
 800cf4a:	0c00      	lsrs	r0, r0, #16
 800cf4c:	4463      	add	r3, ip
 800cf4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf5c:	4576      	cmp	r6, lr
 800cf5e:	f849 3b04 	str.w	r3, [r9], #4
 800cf62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf66:	d8e5      	bhi.n	800cf34 <__mdiff+0x88>
 800cf68:	1b33      	subs	r3, r6, r4
 800cf6a:	3b15      	subs	r3, #21
 800cf6c:	f023 0303 	bic.w	r3, r3, #3
 800cf70:	3415      	adds	r4, #21
 800cf72:	3304      	adds	r3, #4
 800cf74:	42a6      	cmp	r6, r4
 800cf76:	bf38      	it	cc
 800cf78:	2304      	movcc	r3, #4
 800cf7a:	441d      	add	r5, r3
 800cf7c:	445b      	add	r3, fp
 800cf7e:	461e      	mov	r6, r3
 800cf80:	462c      	mov	r4, r5
 800cf82:	4544      	cmp	r4, r8
 800cf84:	d30e      	bcc.n	800cfa4 <__mdiff+0xf8>
 800cf86:	f108 0103 	add.w	r1, r8, #3
 800cf8a:	1b49      	subs	r1, r1, r5
 800cf8c:	f021 0103 	bic.w	r1, r1, #3
 800cf90:	3d03      	subs	r5, #3
 800cf92:	45a8      	cmp	r8, r5
 800cf94:	bf38      	it	cc
 800cf96:	2100      	movcc	r1, #0
 800cf98:	440b      	add	r3, r1
 800cf9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf9e:	b191      	cbz	r1, 800cfc6 <__mdiff+0x11a>
 800cfa0:	6117      	str	r7, [r2, #16]
 800cfa2:	e79d      	b.n	800cee0 <__mdiff+0x34>
 800cfa4:	f854 1b04 	ldr.w	r1, [r4], #4
 800cfa8:	46e6      	mov	lr, ip
 800cfaa:	0c08      	lsrs	r0, r1, #16
 800cfac:	fa1c fc81 	uxtah	ip, ip, r1
 800cfb0:	4471      	add	r1, lr
 800cfb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cfb6:	b289      	uxth	r1, r1
 800cfb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cfbc:	f846 1b04 	str.w	r1, [r6], #4
 800cfc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfc4:	e7dd      	b.n	800cf82 <__mdiff+0xd6>
 800cfc6:	3f01      	subs	r7, #1
 800cfc8:	e7e7      	b.n	800cf9a <__mdiff+0xee>
 800cfca:	bf00      	nop
 800cfcc:	0800e8d0 	.word	0x0800e8d0
 800cfd0:	0800e8e1 	.word	0x0800e8e1

0800cfd4 <__d2b>:
 800cfd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	460f      	mov	r7, r1
 800cfda:	2101      	movs	r1, #1
 800cfdc:	ec59 8b10 	vmov	r8, r9, d0
 800cfe0:	4616      	mov	r6, r2
 800cfe2:	f7ff fccd 	bl	800c980 <_Balloc>
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	b930      	cbnz	r0, 800cff8 <__d2b+0x24>
 800cfea:	4602      	mov	r2, r0
 800cfec:	4b23      	ldr	r3, [pc, #140]	@ (800d07c <__d2b+0xa8>)
 800cfee:	4824      	ldr	r0, [pc, #144]	@ (800d080 <__d2b+0xac>)
 800cff0:	f240 310f 	movw	r1, #783	@ 0x30f
 800cff4:	f000 fa74 	bl	800d4e0 <__assert_func>
 800cff8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cffc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d000:	b10d      	cbz	r5, 800d006 <__d2b+0x32>
 800d002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	f1b8 0300 	subs.w	r3, r8, #0
 800d00c:	d023      	beq.n	800d056 <__d2b+0x82>
 800d00e:	4668      	mov	r0, sp
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	f7ff fd7c 	bl	800cb0e <__lo0bits>
 800d016:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d01a:	b1d0      	cbz	r0, 800d052 <__d2b+0x7e>
 800d01c:	f1c0 0320 	rsb	r3, r0, #32
 800d020:	fa02 f303 	lsl.w	r3, r2, r3
 800d024:	430b      	orrs	r3, r1
 800d026:	40c2      	lsrs	r2, r0
 800d028:	6163      	str	r3, [r4, #20]
 800d02a:	9201      	str	r2, [sp, #4]
 800d02c:	9b01      	ldr	r3, [sp, #4]
 800d02e:	61a3      	str	r3, [r4, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	bf0c      	ite	eq
 800d034:	2201      	moveq	r2, #1
 800d036:	2202      	movne	r2, #2
 800d038:	6122      	str	r2, [r4, #16]
 800d03a:	b1a5      	cbz	r5, 800d066 <__d2b+0x92>
 800d03c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d040:	4405      	add	r5, r0
 800d042:	603d      	str	r5, [r7, #0]
 800d044:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d048:	6030      	str	r0, [r6, #0]
 800d04a:	4620      	mov	r0, r4
 800d04c:	b003      	add	sp, #12
 800d04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d052:	6161      	str	r1, [r4, #20]
 800d054:	e7ea      	b.n	800d02c <__d2b+0x58>
 800d056:	a801      	add	r0, sp, #4
 800d058:	f7ff fd59 	bl	800cb0e <__lo0bits>
 800d05c:	9b01      	ldr	r3, [sp, #4]
 800d05e:	6163      	str	r3, [r4, #20]
 800d060:	3020      	adds	r0, #32
 800d062:	2201      	movs	r2, #1
 800d064:	e7e8      	b.n	800d038 <__d2b+0x64>
 800d066:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d06a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d06e:	6038      	str	r0, [r7, #0]
 800d070:	6918      	ldr	r0, [r3, #16]
 800d072:	f7ff fd2d 	bl	800cad0 <__hi0bits>
 800d076:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d07a:	e7e5      	b.n	800d048 <__d2b+0x74>
 800d07c:	0800e8d0 	.word	0x0800e8d0
 800d080:	0800e8e1 	.word	0x0800e8e1

0800d084 <__ssputs_r>:
 800d084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d088:	688e      	ldr	r6, [r1, #8]
 800d08a:	461f      	mov	r7, r3
 800d08c:	42be      	cmp	r6, r7
 800d08e:	680b      	ldr	r3, [r1, #0]
 800d090:	4682      	mov	sl, r0
 800d092:	460c      	mov	r4, r1
 800d094:	4690      	mov	r8, r2
 800d096:	d82d      	bhi.n	800d0f4 <__ssputs_r+0x70>
 800d098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d09c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d0a0:	d026      	beq.n	800d0f0 <__ssputs_r+0x6c>
 800d0a2:	6965      	ldr	r5, [r4, #20]
 800d0a4:	6909      	ldr	r1, [r1, #16]
 800d0a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0aa:	eba3 0901 	sub.w	r9, r3, r1
 800d0ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0b2:	1c7b      	adds	r3, r7, #1
 800d0b4:	444b      	add	r3, r9
 800d0b6:	106d      	asrs	r5, r5, #1
 800d0b8:	429d      	cmp	r5, r3
 800d0ba:	bf38      	it	cc
 800d0bc:	461d      	movcc	r5, r3
 800d0be:	0553      	lsls	r3, r2, #21
 800d0c0:	d527      	bpl.n	800d112 <__ssputs_r+0x8e>
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	f7ff fbd0 	bl	800c868 <_malloc_r>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	b360      	cbz	r0, 800d126 <__ssputs_r+0xa2>
 800d0cc:	6921      	ldr	r1, [r4, #16]
 800d0ce:	464a      	mov	r2, r9
 800d0d0:	f7fe fcf9 	bl	800bac6 <memcpy>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0de:	81a3      	strh	r3, [r4, #12]
 800d0e0:	6126      	str	r6, [r4, #16]
 800d0e2:	6165      	str	r5, [r4, #20]
 800d0e4:	444e      	add	r6, r9
 800d0e6:	eba5 0509 	sub.w	r5, r5, r9
 800d0ea:	6026      	str	r6, [r4, #0]
 800d0ec:	60a5      	str	r5, [r4, #8]
 800d0ee:	463e      	mov	r6, r7
 800d0f0:	42be      	cmp	r6, r7
 800d0f2:	d900      	bls.n	800d0f6 <__ssputs_r+0x72>
 800d0f4:	463e      	mov	r6, r7
 800d0f6:	6820      	ldr	r0, [r4, #0]
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	4641      	mov	r1, r8
 800d0fc:	f000 f9c6 	bl	800d48c <memmove>
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	1b9b      	subs	r3, r3, r6
 800d104:	60a3      	str	r3, [r4, #8]
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	4433      	add	r3, r6
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	2000      	movs	r0, #0
 800d10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d112:	462a      	mov	r2, r5
 800d114:	f000 fa28 	bl	800d568 <_realloc_r>
 800d118:	4606      	mov	r6, r0
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d1e0      	bne.n	800d0e0 <__ssputs_r+0x5c>
 800d11e:	6921      	ldr	r1, [r4, #16]
 800d120:	4650      	mov	r0, sl
 800d122:	f7ff fb2d 	bl	800c780 <_free_r>
 800d126:	230c      	movs	r3, #12
 800d128:	f8ca 3000 	str.w	r3, [sl]
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d132:	81a3      	strh	r3, [r4, #12]
 800d134:	f04f 30ff 	mov.w	r0, #4294967295
 800d138:	e7e9      	b.n	800d10e <__ssputs_r+0x8a>
	...

0800d13c <_svfiprintf_r>:
 800d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	4698      	mov	r8, r3
 800d142:	898b      	ldrh	r3, [r1, #12]
 800d144:	061b      	lsls	r3, r3, #24
 800d146:	b09d      	sub	sp, #116	@ 0x74
 800d148:	4607      	mov	r7, r0
 800d14a:	460d      	mov	r5, r1
 800d14c:	4614      	mov	r4, r2
 800d14e:	d510      	bpl.n	800d172 <_svfiprintf_r+0x36>
 800d150:	690b      	ldr	r3, [r1, #16]
 800d152:	b973      	cbnz	r3, 800d172 <_svfiprintf_r+0x36>
 800d154:	2140      	movs	r1, #64	@ 0x40
 800d156:	f7ff fb87 	bl	800c868 <_malloc_r>
 800d15a:	6028      	str	r0, [r5, #0]
 800d15c:	6128      	str	r0, [r5, #16]
 800d15e:	b930      	cbnz	r0, 800d16e <_svfiprintf_r+0x32>
 800d160:	230c      	movs	r3, #12
 800d162:	603b      	str	r3, [r7, #0]
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	b01d      	add	sp, #116	@ 0x74
 800d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16e:	2340      	movs	r3, #64	@ 0x40
 800d170:	616b      	str	r3, [r5, #20]
 800d172:	2300      	movs	r3, #0
 800d174:	9309      	str	r3, [sp, #36]	@ 0x24
 800d176:	2320      	movs	r3, #32
 800d178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d17c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d180:	2330      	movs	r3, #48	@ 0x30
 800d182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d320 <_svfiprintf_r+0x1e4>
 800d186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d18a:	f04f 0901 	mov.w	r9, #1
 800d18e:	4623      	mov	r3, r4
 800d190:	469a      	mov	sl, r3
 800d192:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d196:	b10a      	cbz	r2, 800d19c <_svfiprintf_r+0x60>
 800d198:	2a25      	cmp	r2, #37	@ 0x25
 800d19a:	d1f9      	bne.n	800d190 <_svfiprintf_r+0x54>
 800d19c:	ebba 0b04 	subs.w	fp, sl, r4
 800d1a0:	d00b      	beq.n	800d1ba <_svfiprintf_r+0x7e>
 800d1a2:	465b      	mov	r3, fp
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f7ff ff6b 	bl	800d084 <__ssputs_r>
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	f000 80a7 	beq.w	800d302 <_svfiprintf_r+0x1c6>
 800d1b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1b6:	445a      	add	r2, fp
 800d1b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f000 809f 	beq.w	800d302 <_svfiprintf_r+0x1c6>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1ce:	f10a 0a01 	add.w	sl, sl, #1
 800d1d2:	9304      	str	r3, [sp, #16]
 800d1d4:	9307      	str	r3, [sp, #28]
 800d1d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1da:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1dc:	4654      	mov	r4, sl
 800d1de:	2205      	movs	r2, #5
 800d1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e4:	484e      	ldr	r0, [pc, #312]	@ (800d320 <_svfiprintf_r+0x1e4>)
 800d1e6:	f7f2 fff3 	bl	80001d0 <memchr>
 800d1ea:	9a04      	ldr	r2, [sp, #16]
 800d1ec:	b9d8      	cbnz	r0, 800d226 <_svfiprintf_r+0xea>
 800d1ee:	06d0      	lsls	r0, r2, #27
 800d1f0:	bf44      	itt	mi
 800d1f2:	2320      	movmi	r3, #32
 800d1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1f8:	0711      	lsls	r1, r2, #28
 800d1fa:	bf44      	itt	mi
 800d1fc:	232b      	movmi	r3, #43	@ 0x2b
 800d1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d202:	f89a 3000 	ldrb.w	r3, [sl]
 800d206:	2b2a      	cmp	r3, #42	@ 0x2a
 800d208:	d015      	beq.n	800d236 <_svfiprintf_r+0xfa>
 800d20a:	9a07      	ldr	r2, [sp, #28]
 800d20c:	4654      	mov	r4, sl
 800d20e:	2000      	movs	r0, #0
 800d210:	f04f 0c0a 	mov.w	ip, #10
 800d214:	4621      	mov	r1, r4
 800d216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d21a:	3b30      	subs	r3, #48	@ 0x30
 800d21c:	2b09      	cmp	r3, #9
 800d21e:	d94b      	bls.n	800d2b8 <_svfiprintf_r+0x17c>
 800d220:	b1b0      	cbz	r0, 800d250 <_svfiprintf_r+0x114>
 800d222:	9207      	str	r2, [sp, #28]
 800d224:	e014      	b.n	800d250 <_svfiprintf_r+0x114>
 800d226:	eba0 0308 	sub.w	r3, r0, r8
 800d22a:	fa09 f303 	lsl.w	r3, r9, r3
 800d22e:	4313      	orrs	r3, r2
 800d230:	9304      	str	r3, [sp, #16]
 800d232:	46a2      	mov	sl, r4
 800d234:	e7d2      	b.n	800d1dc <_svfiprintf_r+0xa0>
 800d236:	9b03      	ldr	r3, [sp, #12]
 800d238:	1d19      	adds	r1, r3, #4
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	9103      	str	r1, [sp, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bfbb      	ittet	lt
 800d242:	425b      	neglt	r3, r3
 800d244:	f042 0202 	orrlt.w	r2, r2, #2
 800d248:	9307      	strge	r3, [sp, #28]
 800d24a:	9307      	strlt	r3, [sp, #28]
 800d24c:	bfb8      	it	lt
 800d24e:	9204      	strlt	r2, [sp, #16]
 800d250:	7823      	ldrb	r3, [r4, #0]
 800d252:	2b2e      	cmp	r3, #46	@ 0x2e
 800d254:	d10a      	bne.n	800d26c <_svfiprintf_r+0x130>
 800d256:	7863      	ldrb	r3, [r4, #1]
 800d258:	2b2a      	cmp	r3, #42	@ 0x2a
 800d25a:	d132      	bne.n	800d2c2 <_svfiprintf_r+0x186>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	1d1a      	adds	r2, r3, #4
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	9203      	str	r2, [sp, #12]
 800d264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d268:	3402      	adds	r4, #2
 800d26a:	9305      	str	r3, [sp, #20]
 800d26c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d330 <_svfiprintf_r+0x1f4>
 800d270:	7821      	ldrb	r1, [r4, #0]
 800d272:	2203      	movs	r2, #3
 800d274:	4650      	mov	r0, sl
 800d276:	f7f2 ffab 	bl	80001d0 <memchr>
 800d27a:	b138      	cbz	r0, 800d28c <_svfiprintf_r+0x150>
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	eba0 000a 	sub.w	r0, r0, sl
 800d282:	2240      	movs	r2, #64	@ 0x40
 800d284:	4082      	lsls	r2, r0
 800d286:	4313      	orrs	r3, r2
 800d288:	3401      	adds	r4, #1
 800d28a:	9304      	str	r3, [sp, #16]
 800d28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d290:	4824      	ldr	r0, [pc, #144]	@ (800d324 <_svfiprintf_r+0x1e8>)
 800d292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d296:	2206      	movs	r2, #6
 800d298:	f7f2 ff9a 	bl	80001d0 <memchr>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d036      	beq.n	800d30e <_svfiprintf_r+0x1d2>
 800d2a0:	4b21      	ldr	r3, [pc, #132]	@ (800d328 <_svfiprintf_r+0x1ec>)
 800d2a2:	bb1b      	cbnz	r3, 800d2ec <_svfiprintf_r+0x1b0>
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	3307      	adds	r3, #7
 800d2a8:	f023 0307 	bic.w	r3, r3, #7
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	9303      	str	r3, [sp, #12]
 800d2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2b2:	4433      	add	r3, r6
 800d2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2b6:	e76a      	b.n	800d18e <_svfiprintf_r+0x52>
 800d2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2bc:	460c      	mov	r4, r1
 800d2be:	2001      	movs	r0, #1
 800d2c0:	e7a8      	b.n	800d214 <_svfiprintf_r+0xd8>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	3401      	adds	r4, #1
 800d2c6:	9305      	str	r3, [sp, #20]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	f04f 0c0a 	mov.w	ip, #10
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2d4:	3a30      	subs	r2, #48	@ 0x30
 800d2d6:	2a09      	cmp	r2, #9
 800d2d8:	d903      	bls.n	800d2e2 <_svfiprintf_r+0x1a6>
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0c6      	beq.n	800d26c <_svfiprintf_r+0x130>
 800d2de:	9105      	str	r1, [sp, #20]
 800d2e0:	e7c4      	b.n	800d26c <_svfiprintf_r+0x130>
 800d2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e7f0      	b.n	800d2ce <_svfiprintf_r+0x192>
 800d2ec:	ab03      	add	r3, sp, #12
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	462a      	mov	r2, r5
 800d2f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d32c <_svfiprintf_r+0x1f0>)
 800d2f4:	a904      	add	r1, sp, #16
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	f7fd fe88 	bl	800b00c <_printf_float>
 800d2fc:	1c42      	adds	r2, r0, #1
 800d2fe:	4606      	mov	r6, r0
 800d300:	d1d6      	bne.n	800d2b0 <_svfiprintf_r+0x174>
 800d302:	89ab      	ldrh	r3, [r5, #12]
 800d304:	065b      	lsls	r3, r3, #25
 800d306:	f53f af2d 	bmi.w	800d164 <_svfiprintf_r+0x28>
 800d30a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d30c:	e72c      	b.n	800d168 <_svfiprintf_r+0x2c>
 800d30e:	ab03      	add	r3, sp, #12
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	462a      	mov	r2, r5
 800d314:	4b05      	ldr	r3, [pc, #20]	@ (800d32c <_svfiprintf_r+0x1f0>)
 800d316:	a904      	add	r1, sp, #16
 800d318:	4638      	mov	r0, r7
 800d31a:	f7fe f90f 	bl	800b53c <_printf_i>
 800d31e:	e7ed      	b.n	800d2fc <_svfiprintf_r+0x1c0>
 800d320:	0800ea38 	.word	0x0800ea38
 800d324:	0800ea42 	.word	0x0800ea42
 800d328:	0800b00d 	.word	0x0800b00d
 800d32c:	0800d085 	.word	0x0800d085
 800d330:	0800ea3e 	.word	0x0800ea3e

0800d334 <__sflush_r>:
 800d334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33c:	0716      	lsls	r6, r2, #28
 800d33e:	4605      	mov	r5, r0
 800d340:	460c      	mov	r4, r1
 800d342:	d454      	bmi.n	800d3ee <__sflush_r+0xba>
 800d344:	684b      	ldr	r3, [r1, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	dc02      	bgt.n	800d350 <__sflush_r+0x1c>
 800d34a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	dd48      	ble.n	800d3e2 <__sflush_r+0xae>
 800d350:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d352:	2e00      	cmp	r6, #0
 800d354:	d045      	beq.n	800d3e2 <__sflush_r+0xae>
 800d356:	2300      	movs	r3, #0
 800d358:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d35c:	682f      	ldr	r7, [r5, #0]
 800d35e:	6a21      	ldr	r1, [r4, #32]
 800d360:	602b      	str	r3, [r5, #0]
 800d362:	d030      	beq.n	800d3c6 <__sflush_r+0x92>
 800d364:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	0759      	lsls	r1, r3, #29
 800d36a:	d505      	bpl.n	800d378 <__sflush_r+0x44>
 800d36c:	6863      	ldr	r3, [r4, #4]
 800d36e:	1ad2      	subs	r2, r2, r3
 800d370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d372:	b10b      	cbz	r3, 800d378 <__sflush_r+0x44>
 800d374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d376:	1ad2      	subs	r2, r2, r3
 800d378:	2300      	movs	r3, #0
 800d37a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d37c:	6a21      	ldr	r1, [r4, #32]
 800d37e:	4628      	mov	r0, r5
 800d380:	47b0      	blx	r6
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	d106      	bne.n	800d396 <__sflush_r+0x62>
 800d388:	6829      	ldr	r1, [r5, #0]
 800d38a:	291d      	cmp	r1, #29
 800d38c:	d82b      	bhi.n	800d3e6 <__sflush_r+0xb2>
 800d38e:	4a2a      	ldr	r2, [pc, #168]	@ (800d438 <__sflush_r+0x104>)
 800d390:	410a      	asrs	r2, r1
 800d392:	07d6      	lsls	r6, r2, #31
 800d394:	d427      	bmi.n	800d3e6 <__sflush_r+0xb2>
 800d396:	2200      	movs	r2, #0
 800d398:	6062      	str	r2, [r4, #4]
 800d39a:	04d9      	lsls	r1, r3, #19
 800d39c:	6922      	ldr	r2, [r4, #16]
 800d39e:	6022      	str	r2, [r4, #0]
 800d3a0:	d504      	bpl.n	800d3ac <__sflush_r+0x78>
 800d3a2:	1c42      	adds	r2, r0, #1
 800d3a4:	d101      	bne.n	800d3aa <__sflush_r+0x76>
 800d3a6:	682b      	ldr	r3, [r5, #0]
 800d3a8:	b903      	cbnz	r3, 800d3ac <__sflush_r+0x78>
 800d3aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800d3ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3ae:	602f      	str	r7, [r5, #0]
 800d3b0:	b1b9      	cbz	r1, 800d3e2 <__sflush_r+0xae>
 800d3b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3b6:	4299      	cmp	r1, r3
 800d3b8:	d002      	beq.n	800d3c0 <__sflush_r+0x8c>
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f7ff f9e0 	bl	800c780 <_free_r>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3c4:	e00d      	b.n	800d3e2 <__sflush_r+0xae>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b0      	blx	r6
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	1c50      	adds	r0, r2, #1
 800d3d0:	d1c9      	bne.n	800d366 <__sflush_r+0x32>
 800d3d2:	682b      	ldr	r3, [r5, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d0c6      	beq.n	800d366 <__sflush_r+0x32>
 800d3d8:	2b1d      	cmp	r3, #29
 800d3da:	d001      	beq.n	800d3e0 <__sflush_r+0xac>
 800d3dc:	2b16      	cmp	r3, #22
 800d3de:	d11e      	bne.n	800d41e <__sflush_r+0xea>
 800d3e0:	602f      	str	r7, [r5, #0]
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	e022      	b.n	800d42c <__sflush_r+0xf8>
 800d3e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ea:	b21b      	sxth	r3, r3
 800d3ec:	e01b      	b.n	800d426 <__sflush_r+0xf2>
 800d3ee:	690f      	ldr	r7, [r1, #16]
 800d3f0:	2f00      	cmp	r7, #0
 800d3f2:	d0f6      	beq.n	800d3e2 <__sflush_r+0xae>
 800d3f4:	0793      	lsls	r3, r2, #30
 800d3f6:	680e      	ldr	r6, [r1, #0]
 800d3f8:	bf08      	it	eq
 800d3fa:	694b      	ldreq	r3, [r1, #20]
 800d3fc:	600f      	str	r7, [r1, #0]
 800d3fe:	bf18      	it	ne
 800d400:	2300      	movne	r3, #0
 800d402:	eba6 0807 	sub.w	r8, r6, r7
 800d406:	608b      	str	r3, [r1, #8]
 800d408:	f1b8 0f00 	cmp.w	r8, #0
 800d40c:	dde9      	ble.n	800d3e2 <__sflush_r+0xae>
 800d40e:	6a21      	ldr	r1, [r4, #32]
 800d410:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d412:	4643      	mov	r3, r8
 800d414:	463a      	mov	r2, r7
 800d416:	4628      	mov	r0, r5
 800d418:	47b0      	blx	r6
 800d41a:	2800      	cmp	r0, #0
 800d41c:	dc08      	bgt.n	800d430 <__sflush_r+0xfc>
 800d41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d426:	81a3      	strh	r3, [r4, #12]
 800d428:	f04f 30ff 	mov.w	r0, #4294967295
 800d42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d430:	4407      	add	r7, r0
 800d432:	eba8 0800 	sub.w	r8, r8, r0
 800d436:	e7e7      	b.n	800d408 <__sflush_r+0xd4>
 800d438:	dfbffffe 	.word	0xdfbffffe

0800d43c <_fflush_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	690b      	ldr	r3, [r1, #16]
 800d440:	4605      	mov	r5, r0
 800d442:	460c      	mov	r4, r1
 800d444:	b913      	cbnz	r3, 800d44c <_fflush_r+0x10>
 800d446:	2500      	movs	r5, #0
 800d448:	4628      	mov	r0, r5
 800d44a:	bd38      	pop	{r3, r4, r5, pc}
 800d44c:	b118      	cbz	r0, 800d456 <_fflush_r+0x1a>
 800d44e:	6a03      	ldr	r3, [r0, #32]
 800d450:	b90b      	cbnz	r3, 800d456 <_fflush_r+0x1a>
 800d452:	f7fe fa1f 	bl	800b894 <__sinit>
 800d456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d0f3      	beq.n	800d446 <_fflush_r+0xa>
 800d45e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d460:	07d0      	lsls	r0, r2, #31
 800d462:	d404      	bmi.n	800d46e <_fflush_r+0x32>
 800d464:	0599      	lsls	r1, r3, #22
 800d466:	d402      	bmi.n	800d46e <_fflush_r+0x32>
 800d468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d46a:	f7fe fb2a 	bl	800bac2 <__retarget_lock_acquire_recursive>
 800d46e:	4628      	mov	r0, r5
 800d470:	4621      	mov	r1, r4
 800d472:	f7ff ff5f 	bl	800d334 <__sflush_r>
 800d476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d478:	07da      	lsls	r2, r3, #31
 800d47a:	4605      	mov	r5, r0
 800d47c:	d4e4      	bmi.n	800d448 <_fflush_r+0xc>
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	059b      	lsls	r3, r3, #22
 800d482:	d4e1      	bmi.n	800d448 <_fflush_r+0xc>
 800d484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d486:	f7fe fb1d 	bl	800bac4 <__retarget_lock_release_recursive>
 800d48a:	e7dd      	b.n	800d448 <_fflush_r+0xc>

0800d48c <memmove>:
 800d48c:	4288      	cmp	r0, r1
 800d48e:	b510      	push	{r4, lr}
 800d490:	eb01 0402 	add.w	r4, r1, r2
 800d494:	d902      	bls.n	800d49c <memmove+0x10>
 800d496:	4284      	cmp	r4, r0
 800d498:	4623      	mov	r3, r4
 800d49a:	d807      	bhi.n	800d4ac <memmove+0x20>
 800d49c:	1e43      	subs	r3, r0, #1
 800d49e:	42a1      	cmp	r1, r4
 800d4a0:	d008      	beq.n	800d4b4 <memmove+0x28>
 800d4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4aa:	e7f8      	b.n	800d49e <memmove+0x12>
 800d4ac:	4402      	add	r2, r0
 800d4ae:	4601      	mov	r1, r0
 800d4b0:	428a      	cmp	r2, r1
 800d4b2:	d100      	bne.n	800d4b6 <memmove+0x2a>
 800d4b4:	bd10      	pop	{r4, pc}
 800d4b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4be:	e7f7      	b.n	800d4b0 <memmove+0x24>

0800d4c0 <_sbrk_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	4d06      	ldr	r5, [pc, #24]	@ (800d4dc <_sbrk_r+0x1c>)
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	4608      	mov	r0, r1
 800d4ca:	602b      	str	r3, [r5, #0]
 800d4cc:	f7f5 fe2e 	bl	800312c <_sbrk>
 800d4d0:	1c43      	adds	r3, r0, #1
 800d4d2:	d102      	bne.n	800d4da <_sbrk_r+0x1a>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	b103      	cbz	r3, 800d4da <_sbrk_r+0x1a>
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	bd38      	pop	{r3, r4, r5, pc}
 800d4dc:	20005338 	.word	0x20005338

0800d4e0 <__assert_func>:
 800d4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4e2:	4614      	mov	r4, r2
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	4b09      	ldr	r3, [pc, #36]	@ (800d50c <__assert_func+0x2c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	68d8      	ldr	r0, [r3, #12]
 800d4ee:	b954      	cbnz	r4, 800d506 <__assert_func+0x26>
 800d4f0:	4b07      	ldr	r3, [pc, #28]	@ (800d510 <__assert_func+0x30>)
 800d4f2:	461c      	mov	r4, r3
 800d4f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4f8:	9100      	str	r1, [sp, #0]
 800d4fa:	462b      	mov	r3, r5
 800d4fc:	4905      	ldr	r1, [pc, #20]	@ (800d514 <__assert_func+0x34>)
 800d4fe:	f000 f86f 	bl	800d5e0 <fiprintf>
 800d502:	f000 f87f 	bl	800d604 <abort>
 800d506:	4b04      	ldr	r3, [pc, #16]	@ (800d518 <__assert_func+0x38>)
 800d508:	e7f4      	b.n	800d4f4 <__assert_func+0x14>
 800d50a:	bf00      	nop
 800d50c:	20000020 	.word	0x20000020
 800d510:	0800ea8e 	.word	0x0800ea8e
 800d514:	0800ea60 	.word	0x0800ea60
 800d518:	0800ea53 	.word	0x0800ea53

0800d51c <_calloc_r>:
 800d51c:	b570      	push	{r4, r5, r6, lr}
 800d51e:	fba1 5402 	umull	r5, r4, r1, r2
 800d522:	b93c      	cbnz	r4, 800d534 <_calloc_r+0x18>
 800d524:	4629      	mov	r1, r5
 800d526:	f7ff f99f 	bl	800c868 <_malloc_r>
 800d52a:	4606      	mov	r6, r0
 800d52c:	b928      	cbnz	r0, 800d53a <_calloc_r+0x1e>
 800d52e:	2600      	movs	r6, #0
 800d530:	4630      	mov	r0, r6
 800d532:	bd70      	pop	{r4, r5, r6, pc}
 800d534:	220c      	movs	r2, #12
 800d536:	6002      	str	r2, [r0, #0]
 800d538:	e7f9      	b.n	800d52e <_calloc_r+0x12>
 800d53a:	462a      	mov	r2, r5
 800d53c:	4621      	mov	r1, r4
 800d53e:	f7fe fa42 	bl	800b9c6 <memset>
 800d542:	e7f5      	b.n	800d530 <_calloc_r+0x14>

0800d544 <__ascii_mbtowc>:
 800d544:	b082      	sub	sp, #8
 800d546:	b901      	cbnz	r1, 800d54a <__ascii_mbtowc+0x6>
 800d548:	a901      	add	r1, sp, #4
 800d54a:	b142      	cbz	r2, 800d55e <__ascii_mbtowc+0x1a>
 800d54c:	b14b      	cbz	r3, 800d562 <__ascii_mbtowc+0x1e>
 800d54e:	7813      	ldrb	r3, [r2, #0]
 800d550:	600b      	str	r3, [r1, #0]
 800d552:	7812      	ldrb	r2, [r2, #0]
 800d554:	1e10      	subs	r0, r2, #0
 800d556:	bf18      	it	ne
 800d558:	2001      	movne	r0, #1
 800d55a:	b002      	add	sp, #8
 800d55c:	4770      	bx	lr
 800d55e:	4610      	mov	r0, r2
 800d560:	e7fb      	b.n	800d55a <__ascii_mbtowc+0x16>
 800d562:	f06f 0001 	mvn.w	r0, #1
 800d566:	e7f8      	b.n	800d55a <__ascii_mbtowc+0x16>

0800d568 <_realloc_r>:
 800d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56c:	4680      	mov	r8, r0
 800d56e:	4615      	mov	r5, r2
 800d570:	460c      	mov	r4, r1
 800d572:	b921      	cbnz	r1, 800d57e <_realloc_r+0x16>
 800d574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d578:	4611      	mov	r1, r2
 800d57a:	f7ff b975 	b.w	800c868 <_malloc_r>
 800d57e:	b92a      	cbnz	r2, 800d58c <_realloc_r+0x24>
 800d580:	f7ff f8fe 	bl	800c780 <_free_r>
 800d584:	2400      	movs	r4, #0
 800d586:	4620      	mov	r0, r4
 800d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58c:	f000 f841 	bl	800d612 <_malloc_usable_size_r>
 800d590:	4285      	cmp	r5, r0
 800d592:	4606      	mov	r6, r0
 800d594:	d802      	bhi.n	800d59c <_realloc_r+0x34>
 800d596:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d59a:	d8f4      	bhi.n	800d586 <_realloc_r+0x1e>
 800d59c:	4629      	mov	r1, r5
 800d59e:	4640      	mov	r0, r8
 800d5a0:	f7ff f962 	bl	800c868 <_malloc_r>
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d0ec      	beq.n	800d584 <_realloc_r+0x1c>
 800d5aa:	42b5      	cmp	r5, r6
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	4621      	mov	r1, r4
 800d5b0:	bf28      	it	cs
 800d5b2:	4632      	movcs	r2, r6
 800d5b4:	f7fe fa87 	bl	800bac6 <memcpy>
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	f7ff f8e0 	bl	800c780 <_free_r>
 800d5c0:	463c      	mov	r4, r7
 800d5c2:	e7e0      	b.n	800d586 <_realloc_r+0x1e>

0800d5c4 <__ascii_wctomb>:
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	4608      	mov	r0, r1
 800d5c8:	b141      	cbz	r1, 800d5dc <__ascii_wctomb+0x18>
 800d5ca:	2aff      	cmp	r2, #255	@ 0xff
 800d5cc:	d904      	bls.n	800d5d8 <__ascii_wctomb+0x14>
 800d5ce:	228a      	movs	r2, #138	@ 0x8a
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d6:	4770      	bx	lr
 800d5d8:	700a      	strb	r2, [r1, #0]
 800d5da:	2001      	movs	r0, #1
 800d5dc:	4770      	bx	lr
	...

0800d5e0 <fiprintf>:
 800d5e0:	b40e      	push	{r1, r2, r3}
 800d5e2:	b503      	push	{r0, r1, lr}
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	ab03      	add	r3, sp, #12
 800d5e8:	4805      	ldr	r0, [pc, #20]	@ (800d600 <fiprintf+0x20>)
 800d5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ee:	6800      	ldr	r0, [r0, #0]
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	f000 f83f 	bl	800d674 <_vfiprintf_r>
 800d5f6:	b002      	add	sp, #8
 800d5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5fc:	b003      	add	sp, #12
 800d5fe:	4770      	bx	lr
 800d600:	20000020 	.word	0x20000020

0800d604 <abort>:
 800d604:	b508      	push	{r3, lr}
 800d606:	2006      	movs	r0, #6
 800d608:	f000 fa08 	bl	800da1c <raise>
 800d60c:	2001      	movs	r0, #1
 800d60e:	f7f5 fd15 	bl	800303c <_exit>

0800d612 <_malloc_usable_size_r>:
 800d612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d616:	1f18      	subs	r0, r3, #4
 800d618:	2b00      	cmp	r3, #0
 800d61a:	bfbc      	itt	lt
 800d61c:	580b      	ldrlt	r3, [r1, r0]
 800d61e:	18c0      	addlt	r0, r0, r3
 800d620:	4770      	bx	lr

0800d622 <__sfputc_r>:
 800d622:	6893      	ldr	r3, [r2, #8]
 800d624:	3b01      	subs	r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	b410      	push	{r4}
 800d62a:	6093      	str	r3, [r2, #8]
 800d62c:	da08      	bge.n	800d640 <__sfputc_r+0x1e>
 800d62e:	6994      	ldr	r4, [r2, #24]
 800d630:	42a3      	cmp	r3, r4
 800d632:	db01      	blt.n	800d638 <__sfputc_r+0x16>
 800d634:	290a      	cmp	r1, #10
 800d636:	d103      	bne.n	800d640 <__sfputc_r+0x1e>
 800d638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d63c:	f000 b932 	b.w	800d8a4 <__swbuf_r>
 800d640:	6813      	ldr	r3, [r2, #0]
 800d642:	1c58      	adds	r0, r3, #1
 800d644:	6010      	str	r0, [r2, #0]
 800d646:	7019      	strb	r1, [r3, #0]
 800d648:	4608      	mov	r0, r1
 800d64a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <__sfputs_r>:
 800d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d652:	4606      	mov	r6, r0
 800d654:	460f      	mov	r7, r1
 800d656:	4614      	mov	r4, r2
 800d658:	18d5      	adds	r5, r2, r3
 800d65a:	42ac      	cmp	r4, r5
 800d65c:	d101      	bne.n	800d662 <__sfputs_r+0x12>
 800d65e:	2000      	movs	r0, #0
 800d660:	e007      	b.n	800d672 <__sfputs_r+0x22>
 800d662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d666:	463a      	mov	r2, r7
 800d668:	4630      	mov	r0, r6
 800d66a:	f7ff ffda 	bl	800d622 <__sfputc_r>
 800d66e:	1c43      	adds	r3, r0, #1
 800d670:	d1f3      	bne.n	800d65a <__sfputs_r+0xa>
 800d672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d674 <_vfiprintf_r>:
 800d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d678:	460d      	mov	r5, r1
 800d67a:	b09d      	sub	sp, #116	@ 0x74
 800d67c:	4614      	mov	r4, r2
 800d67e:	4698      	mov	r8, r3
 800d680:	4606      	mov	r6, r0
 800d682:	b118      	cbz	r0, 800d68c <_vfiprintf_r+0x18>
 800d684:	6a03      	ldr	r3, [r0, #32]
 800d686:	b90b      	cbnz	r3, 800d68c <_vfiprintf_r+0x18>
 800d688:	f7fe f904 	bl	800b894 <__sinit>
 800d68c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d68e:	07d9      	lsls	r1, r3, #31
 800d690:	d405      	bmi.n	800d69e <_vfiprintf_r+0x2a>
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	059a      	lsls	r2, r3, #22
 800d696:	d402      	bmi.n	800d69e <_vfiprintf_r+0x2a>
 800d698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d69a:	f7fe fa12 	bl	800bac2 <__retarget_lock_acquire_recursive>
 800d69e:	89ab      	ldrh	r3, [r5, #12]
 800d6a0:	071b      	lsls	r3, r3, #28
 800d6a2:	d501      	bpl.n	800d6a8 <_vfiprintf_r+0x34>
 800d6a4:	692b      	ldr	r3, [r5, #16]
 800d6a6:	b99b      	cbnz	r3, 800d6d0 <_vfiprintf_r+0x5c>
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	f000 f938 	bl	800d920 <__swsetup_r>
 800d6b0:	b170      	cbz	r0, 800d6d0 <_vfiprintf_r+0x5c>
 800d6b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6b4:	07dc      	lsls	r4, r3, #31
 800d6b6:	d504      	bpl.n	800d6c2 <_vfiprintf_r+0x4e>
 800d6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6bc:	b01d      	add	sp, #116	@ 0x74
 800d6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c2:	89ab      	ldrh	r3, [r5, #12]
 800d6c4:	0598      	lsls	r0, r3, #22
 800d6c6:	d4f7      	bmi.n	800d6b8 <_vfiprintf_r+0x44>
 800d6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ca:	f7fe f9fb 	bl	800bac4 <__retarget_lock_release_recursive>
 800d6ce:	e7f3      	b.n	800d6b8 <_vfiprintf_r+0x44>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6d4:	2320      	movs	r3, #32
 800d6d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6de:	2330      	movs	r3, #48	@ 0x30
 800d6e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d890 <_vfiprintf_r+0x21c>
 800d6e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6e8:	f04f 0901 	mov.w	r9, #1
 800d6ec:	4623      	mov	r3, r4
 800d6ee:	469a      	mov	sl, r3
 800d6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f4:	b10a      	cbz	r2, 800d6fa <_vfiprintf_r+0x86>
 800d6f6:	2a25      	cmp	r2, #37	@ 0x25
 800d6f8:	d1f9      	bne.n	800d6ee <_vfiprintf_r+0x7a>
 800d6fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d6fe:	d00b      	beq.n	800d718 <_vfiprintf_r+0xa4>
 800d700:	465b      	mov	r3, fp
 800d702:	4622      	mov	r2, r4
 800d704:	4629      	mov	r1, r5
 800d706:	4630      	mov	r0, r6
 800d708:	f7ff ffa2 	bl	800d650 <__sfputs_r>
 800d70c:	3001      	adds	r0, #1
 800d70e:	f000 80a7 	beq.w	800d860 <_vfiprintf_r+0x1ec>
 800d712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d714:	445a      	add	r2, fp
 800d716:	9209      	str	r2, [sp, #36]	@ 0x24
 800d718:	f89a 3000 	ldrb.w	r3, [sl]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f000 809f 	beq.w	800d860 <_vfiprintf_r+0x1ec>
 800d722:	2300      	movs	r3, #0
 800d724:	f04f 32ff 	mov.w	r2, #4294967295
 800d728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d72c:	f10a 0a01 	add.w	sl, sl, #1
 800d730:	9304      	str	r3, [sp, #16]
 800d732:	9307      	str	r3, [sp, #28]
 800d734:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d738:	931a      	str	r3, [sp, #104]	@ 0x68
 800d73a:	4654      	mov	r4, sl
 800d73c:	2205      	movs	r2, #5
 800d73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d742:	4853      	ldr	r0, [pc, #332]	@ (800d890 <_vfiprintf_r+0x21c>)
 800d744:	f7f2 fd44 	bl	80001d0 <memchr>
 800d748:	9a04      	ldr	r2, [sp, #16]
 800d74a:	b9d8      	cbnz	r0, 800d784 <_vfiprintf_r+0x110>
 800d74c:	06d1      	lsls	r1, r2, #27
 800d74e:	bf44      	itt	mi
 800d750:	2320      	movmi	r3, #32
 800d752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d756:	0713      	lsls	r3, r2, #28
 800d758:	bf44      	itt	mi
 800d75a:	232b      	movmi	r3, #43	@ 0x2b
 800d75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d760:	f89a 3000 	ldrb.w	r3, [sl]
 800d764:	2b2a      	cmp	r3, #42	@ 0x2a
 800d766:	d015      	beq.n	800d794 <_vfiprintf_r+0x120>
 800d768:	9a07      	ldr	r2, [sp, #28]
 800d76a:	4654      	mov	r4, sl
 800d76c:	2000      	movs	r0, #0
 800d76e:	f04f 0c0a 	mov.w	ip, #10
 800d772:	4621      	mov	r1, r4
 800d774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d778:	3b30      	subs	r3, #48	@ 0x30
 800d77a:	2b09      	cmp	r3, #9
 800d77c:	d94b      	bls.n	800d816 <_vfiprintf_r+0x1a2>
 800d77e:	b1b0      	cbz	r0, 800d7ae <_vfiprintf_r+0x13a>
 800d780:	9207      	str	r2, [sp, #28]
 800d782:	e014      	b.n	800d7ae <_vfiprintf_r+0x13a>
 800d784:	eba0 0308 	sub.w	r3, r0, r8
 800d788:	fa09 f303 	lsl.w	r3, r9, r3
 800d78c:	4313      	orrs	r3, r2
 800d78e:	9304      	str	r3, [sp, #16]
 800d790:	46a2      	mov	sl, r4
 800d792:	e7d2      	b.n	800d73a <_vfiprintf_r+0xc6>
 800d794:	9b03      	ldr	r3, [sp, #12]
 800d796:	1d19      	adds	r1, r3, #4
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	9103      	str	r1, [sp, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	bfbb      	ittet	lt
 800d7a0:	425b      	neglt	r3, r3
 800d7a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a6:	9307      	strge	r3, [sp, #28]
 800d7a8:	9307      	strlt	r3, [sp, #28]
 800d7aa:	bfb8      	it	lt
 800d7ac:	9204      	strlt	r2, [sp, #16]
 800d7ae:	7823      	ldrb	r3, [r4, #0]
 800d7b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7b2:	d10a      	bne.n	800d7ca <_vfiprintf_r+0x156>
 800d7b4:	7863      	ldrb	r3, [r4, #1]
 800d7b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b8:	d132      	bne.n	800d820 <_vfiprintf_r+0x1ac>
 800d7ba:	9b03      	ldr	r3, [sp, #12]
 800d7bc:	1d1a      	adds	r2, r3, #4
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	9203      	str	r2, [sp, #12]
 800d7c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7c6:	3402      	adds	r4, #2
 800d7c8:	9305      	str	r3, [sp, #20]
 800d7ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d8a0 <_vfiprintf_r+0x22c>
 800d7ce:	7821      	ldrb	r1, [r4, #0]
 800d7d0:	2203      	movs	r2, #3
 800d7d2:	4650      	mov	r0, sl
 800d7d4:	f7f2 fcfc 	bl	80001d0 <memchr>
 800d7d8:	b138      	cbz	r0, 800d7ea <_vfiprintf_r+0x176>
 800d7da:	9b04      	ldr	r3, [sp, #16]
 800d7dc:	eba0 000a 	sub.w	r0, r0, sl
 800d7e0:	2240      	movs	r2, #64	@ 0x40
 800d7e2:	4082      	lsls	r2, r0
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	3401      	adds	r4, #1
 800d7e8:	9304      	str	r3, [sp, #16]
 800d7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ee:	4829      	ldr	r0, [pc, #164]	@ (800d894 <_vfiprintf_r+0x220>)
 800d7f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7f4:	2206      	movs	r2, #6
 800d7f6:	f7f2 fceb 	bl	80001d0 <memchr>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d03f      	beq.n	800d87e <_vfiprintf_r+0x20a>
 800d7fe:	4b26      	ldr	r3, [pc, #152]	@ (800d898 <_vfiprintf_r+0x224>)
 800d800:	bb1b      	cbnz	r3, 800d84a <_vfiprintf_r+0x1d6>
 800d802:	9b03      	ldr	r3, [sp, #12]
 800d804:	3307      	adds	r3, #7
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	3308      	adds	r3, #8
 800d80c:	9303      	str	r3, [sp, #12]
 800d80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d810:	443b      	add	r3, r7
 800d812:	9309      	str	r3, [sp, #36]	@ 0x24
 800d814:	e76a      	b.n	800d6ec <_vfiprintf_r+0x78>
 800d816:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81a:	460c      	mov	r4, r1
 800d81c:	2001      	movs	r0, #1
 800d81e:	e7a8      	b.n	800d772 <_vfiprintf_r+0xfe>
 800d820:	2300      	movs	r3, #0
 800d822:	3401      	adds	r4, #1
 800d824:	9305      	str	r3, [sp, #20]
 800d826:	4619      	mov	r1, r3
 800d828:	f04f 0c0a 	mov.w	ip, #10
 800d82c:	4620      	mov	r0, r4
 800d82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d832:	3a30      	subs	r2, #48	@ 0x30
 800d834:	2a09      	cmp	r2, #9
 800d836:	d903      	bls.n	800d840 <_vfiprintf_r+0x1cc>
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d0c6      	beq.n	800d7ca <_vfiprintf_r+0x156>
 800d83c:	9105      	str	r1, [sp, #20]
 800d83e:	e7c4      	b.n	800d7ca <_vfiprintf_r+0x156>
 800d840:	fb0c 2101 	mla	r1, ip, r1, r2
 800d844:	4604      	mov	r4, r0
 800d846:	2301      	movs	r3, #1
 800d848:	e7f0      	b.n	800d82c <_vfiprintf_r+0x1b8>
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	462a      	mov	r2, r5
 800d850:	4b12      	ldr	r3, [pc, #72]	@ (800d89c <_vfiprintf_r+0x228>)
 800d852:	a904      	add	r1, sp, #16
 800d854:	4630      	mov	r0, r6
 800d856:	f7fd fbd9 	bl	800b00c <_printf_float>
 800d85a:	4607      	mov	r7, r0
 800d85c:	1c78      	adds	r0, r7, #1
 800d85e:	d1d6      	bne.n	800d80e <_vfiprintf_r+0x19a>
 800d860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d862:	07d9      	lsls	r1, r3, #31
 800d864:	d405      	bmi.n	800d872 <_vfiprintf_r+0x1fe>
 800d866:	89ab      	ldrh	r3, [r5, #12]
 800d868:	059a      	lsls	r2, r3, #22
 800d86a:	d402      	bmi.n	800d872 <_vfiprintf_r+0x1fe>
 800d86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d86e:	f7fe f929 	bl	800bac4 <__retarget_lock_release_recursive>
 800d872:	89ab      	ldrh	r3, [r5, #12]
 800d874:	065b      	lsls	r3, r3, #25
 800d876:	f53f af1f 	bmi.w	800d6b8 <_vfiprintf_r+0x44>
 800d87a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d87c:	e71e      	b.n	800d6bc <_vfiprintf_r+0x48>
 800d87e:	ab03      	add	r3, sp, #12
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	462a      	mov	r2, r5
 800d884:	4b05      	ldr	r3, [pc, #20]	@ (800d89c <_vfiprintf_r+0x228>)
 800d886:	a904      	add	r1, sp, #16
 800d888:	4630      	mov	r0, r6
 800d88a:	f7fd fe57 	bl	800b53c <_printf_i>
 800d88e:	e7e4      	b.n	800d85a <_vfiprintf_r+0x1e6>
 800d890:	0800ea38 	.word	0x0800ea38
 800d894:	0800ea42 	.word	0x0800ea42
 800d898:	0800b00d 	.word	0x0800b00d
 800d89c:	0800d651 	.word	0x0800d651
 800d8a0:	0800ea3e 	.word	0x0800ea3e

0800d8a4 <__swbuf_r>:
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a6:	460e      	mov	r6, r1
 800d8a8:	4614      	mov	r4, r2
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	b118      	cbz	r0, 800d8b6 <__swbuf_r+0x12>
 800d8ae:	6a03      	ldr	r3, [r0, #32]
 800d8b0:	b90b      	cbnz	r3, 800d8b6 <__swbuf_r+0x12>
 800d8b2:	f7fd ffef 	bl	800b894 <__sinit>
 800d8b6:	69a3      	ldr	r3, [r4, #24]
 800d8b8:	60a3      	str	r3, [r4, #8]
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	071a      	lsls	r2, r3, #28
 800d8be:	d501      	bpl.n	800d8c4 <__swbuf_r+0x20>
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	b943      	cbnz	r3, 800d8d6 <__swbuf_r+0x32>
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f000 f82a 	bl	800d920 <__swsetup_r>
 800d8cc:	b118      	cbz	r0, 800d8d6 <__swbuf_r+0x32>
 800d8ce:	f04f 37ff 	mov.w	r7, #4294967295
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	6922      	ldr	r2, [r4, #16]
 800d8da:	1a98      	subs	r0, r3, r2
 800d8dc:	6963      	ldr	r3, [r4, #20]
 800d8de:	b2f6      	uxtb	r6, r6
 800d8e0:	4283      	cmp	r3, r0
 800d8e2:	4637      	mov	r7, r6
 800d8e4:	dc05      	bgt.n	800d8f2 <__swbuf_r+0x4e>
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	f7ff fda7 	bl	800d43c <_fflush_r>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d1ed      	bne.n	800d8ce <__swbuf_r+0x2a>
 800d8f2:	68a3      	ldr	r3, [r4, #8]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	60a3      	str	r3, [r4, #8]
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	1c5a      	adds	r2, r3, #1
 800d8fc:	6022      	str	r2, [r4, #0]
 800d8fe:	701e      	strb	r6, [r3, #0]
 800d900:	6962      	ldr	r2, [r4, #20]
 800d902:	1c43      	adds	r3, r0, #1
 800d904:	429a      	cmp	r2, r3
 800d906:	d004      	beq.n	800d912 <__swbuf_r+0x6e>
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	07db      	lsls	r3, r3, #31
 800d90c:	d5e1      	bpl.n	800d8d2 <__swbuf_r+0x2e>
 800d90e:	2e0a      	cmp	r6, #10
 800d910:	d1df      	bne.n	800d8d2 <__swbuf_r+0x2e>
 800d912:	4621      	mov	r1, r4
 800d914:	4628      	mov	r0, r5
 800d916:	f7ff fd91 	bl	800d43c <_fflush_r>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d0d9      	beq.n	800d8d2 <__swbuf_r+0x2e>
 800d91e:	e7d6      	b.n	800d8ce <__swbuf_r+0x2a>

0800d920 <__swsetup_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	4b29      	ldr	r3, [pc, #164]	@ (800d9c8 <__swsetup_r+0xa8>)
 800d924:	4605      	mov	r5, r0
 800d926:	6818      	ldr	r0, [r3, #0]
 800d928:	460c      	mov	r4, r1
 800d92a:	b118      	cbz	r0, 800d934 <__swsetup_r+0x14>
 800d92c:	6a03      	ldr	r3, [r0, #32]
 800d92e:	b90b      	cbnz	r3, 800d934 <__swsetup_r+0x14>
 800d930:	f7fd ffb0 	bl	800b894 <__sinit>
 800d934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d938:	0719      	lsls	r1, r3, #28
 800d93a:	d422      	bmi.n	800d982 <__swsetup_r+0x62>
 800d93c:	06da      	lsls	r2, r3, #27
 800d93e:	d407      	bmi.n	800d950 <__swsetup_r+0x30>
 800d940:	2209      	movs	r2, #9
 800d942:	602a      	str	r2, [r5, #0]
 800d944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d948:	81a3      	strh	r3, [r4, #12]
 800d94a:	f04f 30ff 	mov.w	r0, #4294967295
 800d94e:	e033      	b.n	800d9b8 <__swsetup_r+0x98>
 800d950:	0758      	lsls	r0, r3, #29
 800d952:	d512      	bpl.n	800d97a <__swsetup_r+0x5a>
 800d954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d956:	b141      	cbz	r1, 800d96a <__swsetup_r+0x4a>
 800d958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d95c:	4299      	cmp	r1, r3
 800d95e:	d002      	beq.n	800d966 <__swsetup_r+0x46>
 800d960:	4628      	mov	r0, r5
 800d962:	f7fe ff0d 	bl	800c780 <_free_r>
 800d966:	2300      	movs	r3, #0
 800d968:	6363      	str	r3, [r4, #52]	@ 0x34
 800d96a:	89a3      	ldrh	r3, [r4, #12]
 800d96c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d970:	81a3      	strh	r3, [r4, #12]
 800d972:	2300      	movs	r3, #0
 800d974:	6063      	str	r3, [r4, #4]
 800d976:	6923      	ldr	r3, [r4, #16]
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	89a3      	ldrh	r3, [r4, #12]
 800d97c:	f043 0308 	orr.w	r3, r3, #8
 800d980:	81a3      	strh	r3, [r4, #12]
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	b94b      	cbnz	r3, 800d99a <__swsetup_r+0x7a>
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d98c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d990:	d003      	beq.n	800d99a <__swsetup_r+0x7a>
 800d992:	4621      	mov	r1, r4
 800d994:	4628      	mov	r0, r5
 800d996:	f000 f883 	bl	800daa0 <__smakebuf_r>
 800d99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99e:	f013 0201 	ands.w	r2, r3, #1
 800d9a2:	d00a      	beq.n	800d9ba <__swsetup_r+0x9a>
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	60a2      	str	r2, [r4, #8]
 800d9a8:	6962      	ldr	r2, [r4, #20]
 800d9aa:	4252      	negs	r2, r2
 800d9ac:	61a2      	str	r2, [r4, #24]
 800d9ae:	6922      	ldr	r2, [r4, #16]
 800d9b0:	b942      	cbnz	r2, 800d9c4 <__swsetup_r+0xa4>
 800d9b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9b6:	d1c5      	bne.n	800d944 <__swsetup_r+0x24>
 800d9b8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ba:	0799      	lsls	r1, r3, #30
 800d9bc:	bf58      	it	pl
 800d9be:	6962      	ldrpl	r2, [r4, #20]
 800d9c0:	60a2      	str	r2, [r4, #8]
 800d9c2:	e7f4      	b.n	800d9ae <__swsetup_r+0x8e>
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	e7f7      	b.n	800d9b8 <__swsetup_r+0x98>
 800d9c8:	20000020 	.word	0x20000020

0800d9cc <_raise_r>:
 800d9cc:	291f      	cmp	r1, #31
 800d9ce:	b538      	push	{r3, r4, r5, lr}
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	d904      	bls.n	800d9e0 <_raise_r+0x14>
 800d9d6:	2316      	movs	r3, #22
 800d9d8:	6003      	str	r3, [r0, #0]
 800d9da:	f04f 30ff 	mov.w	r0, #4294967295
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9e2:	b112      	cbz	r2, 800d9ea <_raise_r+0x1e>
 800d9e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9e8:	b94b      	cbnz	r3, 800d9fe <_raise_r+0x32>
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f000 f830 	bl	800da50 <_getpid_r>
 800d9f0:	4622      	mov	r2, r4
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9fa:	f000 b817 	b.w	800da2c <_kill_r>
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d00a      	beq.n	800da18 <_raise_r+0x4c>
 800da02:	1c59      	adds	r1, r3, #1
 800da04:	d103      	bne.n	800da0e <_raise_r+0x42>
 800da06:	2316      	movs	r3, #22
 800da08:	6003      	str	r3, [r0, #0]
 800da0a:	2001      	movs	r0, #1
 800da0c:	e7e7      	b.n	800d9de <_raise_r+0x12>
 800da0e:	2100      	movs	r1, #0
 800da10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800da14:	4620      	mov	r0, r4
 800da16:	4798      	blx	r3
 800da18:	2000      	movs	r0, #0
 800da1a:	e7e0      	b.n	800d9de <_raise_r+0x12>

0800da1c <raise>:
 800da1c:	4b02      	ldr	r3, [pc, #8]	@ (800da28 <raise+0xc>)
 800da1e:	4601      	mov	r1, r0
 800da20:	6818      	ldr	r0, [r3, #0]
 800da22:	f7ff bfd3 	b.w	800d9cc <_raise_r>
 800da26:	bf00      	nop
 800da28:	20000020 	.word	0x20000020

0800da2c <_kill_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d07      	ldr	r5, [pc, #28]	@ (800da4c <_kill_r+0x20>)
 800da30:	2300      	movs	r3, #0
 800da32:	4604      	mov	r4, r0
 800da34:	4608      	mov	r0, r1
 800da36:	4611      	mov	r1, r2
 800da38:	602b      	str	r3, [r5, #0]
 800da3a:	f7f5 faef 	bl	800301c <_kill>
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	d102      	bne.n	800da48 <_kill_r+0x1c>
 800da42:	682b      	ldr	r3, [r5, #0]
 800da44:	b103      	cbz	r3, 800da48 <_kill_r+0x1c>
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	bd38      	pop	{r3, r4, r5, pc}
 800da4a:	bf00      	nop
 800da4c:	20005338 	.word	0x20005338

0800da50 <_getpid_r>:
 800da50:	f7f5 badc 	b.w	800300c <_getpid>

0800da54 <__swhatbuf_r>:
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	460c      	mov	r4, r1
 800da58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da5c:	2900      	cmp	r1, #0
 800da5e:	b096      	sub	sp, #88	@ 0x58
 800da60:	4615      	mov	r5, r2
 800da62:	461e      	mov	r6, r3
 800da64:	da0d      	bge.n	800da82 <__swhatbuf_r+0x2e>
 800da66:	89a3      	ldrh	r3, [r4, #12]
 800da68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da6c:	f04f 0100 	mov.w	r1, #0
 800da70:	bf14      	ite	ne
 800da72:	2340      	movne	r3, #64	@ 0x40
 800da74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da78:	2000      	movs	r0, #0
 800da7a:	6031      	str	r1, [r6, #0]
 800da7c:	602b      	str	r3, [r5, #0]
 800da7e:	b016      	add	sp, #88	@ 0x58
 800da80:	bd70      	pop	{r4, r5, r6, pc}
 800da82:	466a      	mov	r2, sp
 800da84:	f000 f848 	bl	800db18 <_fstat_r>
 800da88:	2800      	cmp	r0, #0
 800da8a:	dbec      	blt.n	800da66 <__swhatbuf_r+0x12>
 800da8c:	9901      	ldr	r1, [sp, #4]
 800da8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da96:	4259      	negs	r1, r3
 800da98:	4159      	adcs	r1, r3
 800da9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da9e:	e7eb      	b.n	800da78 <__swhatbuf_r+0x24>

0800daa0 <__smakebuf_r>:
 800daa0:	898b      	ldrh	r3, [r1, #12]
 800daa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daa4:	079d      	lsls	r5, r3, #30
 800daa6:	4606      	mov	r6, r0
 800daa8:	460c      	mov	r4, r1
 800daaa:	d507      	bpl.n	800dabc <__smakebuf_r+0x1c>
 800daac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	6123      	str	r3, [r4, #16]
 800dab4:	2301      	movs	r3, #1
 800dab6:	6163      	str	r3, [r4, #20]
 800dab8:	b003      	add	sp, #12
 800daba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dabc:	ab01      	add	r3, sp, #4
 800dabe:	466a      	mov	r2, sp
 800dac0:	f7ff ffc8 	bl	800da54 <__swhatbuf_r>
 800dac4:	9f00      	ldr	r7, [sp, #0]
 800dac6:	4605      	mov	r5, r0
 800dac8:	4639      	mov	r1, r7
 800daca:	4630      	mov	r0, r6
 800dacc:	f7fe fecc 	bl	800c868 <_malloc_r>
 800dad0:	b948      	cbnz	r0, 800dae6 <__smakebuf_r+0x46>
 800dad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad6:	059a      	lsls	r2, r3, #22
 800dad8:	d4ee      	bmi.n	800dab8 <__smakebuf_r+0x18>
 800dada:	f023 0303 	bic.w	r3, r3, #3
 800dade:	f043 0302 	orr.w	r3, r3, #2
 800dae2:	81a3      	strh	r3, [r4, #12]
 800dae4:	e7e2      	b.n	800daac <__smakebuf_r+0xc>
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	6020      	str	r0, [r4, #0]
 800daea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daee:	81a3      	strh	r3, [r4, #12]
 800daf0:	9b01      	ldr	r3, [sp, #4]
 800daf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800daf6:	b15b      	cbz	r3, 800db10 <__smakebuf_r+0x70>
 800daf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dafc:	4630      	mov	r0, r6
 800dafe:	f000 f81d 	bl	800db3c <_isatty_r>
 800db02:	b128      	cbz	r0, 800db10 <__smakebuf_r+0x70>
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	f023 0303 	bic.w	r3, r3, #3
 800db0a:	f043 0301 	orr.w	r3, r3, #1
 800db0e:	81a3      	strh	r3, [r4, #12]
 800db10:	89a3      	ldrh	r3, [r4, #12]
 800db12:	431d      	orrs	r5, r3
 800db14:	81a5      	strh	r5, [r4, #12]
 800db16:	e7cf      	b.n	800dab8 <__smakebuf_r+0x18>

0800db18 <_fstat_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4d07      	ldr	r5, [pc, #28]	@ (800db38 <_fstat_r+0x20>)
 800db1c:	2300      	movs	r3, #0
 800db1e:	4604      	mov	r4, r0
 800db20:	4608      	mov	r0, r1
 800db22:	4611      	mov	r1, r2
 800db24:	602b      	str	r3, [r5, #0]
 800db26:	f7f5 fad9 	bl	80030dc <_fstat>
 800db2a:	1c43      	adds	r3, r0, #1
 800db2c:	d102      	bne.n	800db34 <_fstat_r+0x1c>
 800db2e:	682b      	ldr	r3, [r5, #0]
 800db30:	b103      	cbz	r3, 800db34 <_fstat_r+0x1c>
 800db32:	6023      	str	r3, [r4, #0]
 800db34:	bd38      	pop	{r3, r4, r5, pc}
 800db36:	bf00      	nop
 800db38:	20005338 	.word	0x20005338

0800db3c <_isatty_r>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	4d06      	ldr	r5, [pc, #24]	@ (800db58 <_isatty_r+0x1c>)
 800db40:	2300      	movs	r3, #0
 800db42:	4604      	mov	r4, r0
 800db44:	4608      	mov	r0, r1
 800db46:	602b      	str	r3, [r5, #0]
 800db48:	f7f5 fad8 	bl	80030fc <_isatty>
 800db4c:	1c43      	adds	r3, r0, #1
 800db4e:	d102      	bne.n	800db56 <_isatty_r+0x1a>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	b103      	cbz	r3, 800db56 <_isatty_r+0x1a>
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	bd38      	pop	{r3, r4, r5, pc}
 800db58:	20005338 	.word	0x20005338

0800db5c <_init>:
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	bf00      	nop
 800db60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db62:	bc08      	pop	{r3}
 800db64:	469e      	mov	lr, r3
 800db66:	4770      	bx	lr

0800db68 <_fini>:
 800db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6a:	bf00      	nop
 800db6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db6e:	bc08      	pop	{r3}
 800db70:	469e      	mov	lr, r3
 800db72:	4770      	bx	lr
