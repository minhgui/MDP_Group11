
MDP Task 2 v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001070  0800f128  0800f128  00010128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010198  08010198  000121dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010198  08010198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101a0  080101a0  000121dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101a0  080101a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080101a4  080101a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080101a8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121dc  2**0
                  CONTENTS
 10 .bss          0000520c  200001e0  200001e0  000121e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200053ec  200053ec  000121e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ceaa  00000000  00000000  0001220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d19  00000000  00000000  0002f0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001536  00000000  00000000  000348d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000568e  00000000  00000000  00035e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec5a  00000000  00000000  0003b49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e73f6  00000000  00000000  0005a0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001414ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084c0  00000000  00000000  00141530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001499f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f10c 	.word	0x0800f10c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800f10c 	.word	0x0800f10c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <__NVIC_SystemReset+0x24>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f0a:	4904      	ldr	r1, [pc, #16]	@ (8000f1c <__NVIC_SystemReset+0x24>)
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_SystemReset+0x28>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
}
 8000f16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <__NVIC_SystemReset+0x20>
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	05fa0004 	.word	0x05fa0004

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f003 f83a 	bl	8003fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f89a 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 fc36 	bl	80017a0 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f34:	f000 fb60 	bl	80015f8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f38:	f000 fa62 	bl	8001400 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f3c:	f000 f9c2 	bl	80012c4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000f40:	f000 fc04 	bl	800174c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f44:	f000 fab0 	bl	80014a8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f48:	f000 f98e 	bl	8001268 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f4c:	f000 fb00 	bl	8001550 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f50:	f000 f8e6 	bl	8001120 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f54:	f000 f936 	bl	80011c4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /*------------INIT LIBRARIES ----------------*/
 OLED_Init();
 8000f58:	f00b f9f4 	bl	800c344 <OLED_Init>

 /*------------END INIT LIBRARIES ----------------*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f5c:	f008 fac8 	bl	80094f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f60:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <main+0xd4>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4825      	ldr	r0, [pc, #148]	@ (8000ffc <main+0xd8>)
 8000f66:	f008 fb0d 	bl	8009584 <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a24      	ldr	r2, [pc, #144]	@ (8001000 <main+0xdc>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* creation of rightEncoderTas */
  rightEncoderTasHandle = osThreadNew(rightEncoder, NULL, &rightEncoderTas_attributes);
 8000f70:	4a24      	ldr	r2, [pc, #144]	@ (8001004 <main+0xe0>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4824      	ldr	r0, [pc, #144]	@ (8001008 <main+0xe4>)
 8000f76:	f008 fb05 	bl	8009584 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a23      	ldr	r2, [pc, #140]	@ (800100c <main+0xe8>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of leftEncoderTask */
  leftEncoderTaskHandle = osThreadNew(leftEncoder, NULL, &leftEncoderTask_attributes);
 8000f80:	4a23      	ldr	r2, [pc, #140]	@ (8001010 <main+0xec>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4823      	ldr	r0, [pc, #140]	@ (8001014 <main+0xf0>)
 8000f86:	f008 fafd 	bl	8009584 <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <main+0xf4>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(StartCommsTask, NULL, &CommTask_attributes);
 8000f90:	4a22      	ldr	r2, [pc, #136]	@ (800101c <main+0xf8>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4822      	ldr	r0, [pc, #136]	@ (8001020 <main+0xfc>)
 8000f96:	f008 faf5 	bl	8009584 <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <main+0x100>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(StartOLEDTask, NULL, &OLED_attributes);
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <main+0x104>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4821      	ldr	r0, [pc, #132]	@ (800102c <main+0x108>)
 8000fa6:	f008 faed 	bl	8009584 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a20      	ldr	r2, [pc, #128]	@ (8001030 <main+0x10c>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8000fb0:	4a20      	ldr	r2, [pc, #128]	@ (8001034 <main+0x110>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4820      	ldr	r0, [pc, #128]	@ (8001038 <main+0x114>)
 8000fb6:	f008 fae5 	bl	8009584 <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800103c <main+0x118>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(StartGyroTask, NULL, &GyroTask_attributes);
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001040 <main+0x11c>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	481f      	ldr	r0, [pc, #124]	@ (8001044 <main+0x120>)
 8000fc6:	f008 fadd 	bl	8009584 <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001048 <main+0x124>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of UltrasoundTask */
  UltrasoundTaskHandle = osThreadNew(StartUltrasoundTask, NULL, &UltrasoundTask_attributes);
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <main+0x128>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	481e      	ldr	r0, [pc, #120]	@ (8001050 <main+0x12c>)
 8000fd6:	f008 fad5 	bl	8009584 <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <main+0x130>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <main+0x134>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	481d      	ldr	r0, [pc, #116]	@ (800105c <main+0x138>)
 8000fe6:	f008 facd 	bl	8009584 <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a1c      	ldr	r2, [pc, #112]	@ (8001060 <main+0x13c>)
 8000fee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ff0:	f008 faa2 	bl	8009538 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <main+0xd0>
 8000ff8:	0800f264 	.word	0x0800f264
 8000ffc:	08002a4d 	.word	0x08002a4d
 8001000:	20000490 	.word	0x20000490
 8001004:	0800f288 	.word	0x0800f288
 8001008:	08002a71 	.word	0x08002a71
 800100c:	20000494 	.word	0x20000494
 8001010:	0800f2ac 	.word	0x0800f2ac
 8001014:	08002b01 	.word	0x08002b01
 8001018:	20000498 	.word	0x20000498
 800101c:	0800f2d0 	.word	0x0800f2d0
 8001020:	08002b91 	.word	0x08002b91
 8001024:	2000049c 	.word	0x2000049c
 8001028:	0800f2f4 	.word	0x0800f2f4
 800102c:	08002f69 	.word	0x08002f69
 8001030:	200004a0 	.word	0x200004a0
 8001034:	0800f318 	.word	0x0800f318
 8001038:	08003141 	.word	0x08003141
 800103c:	200004a4 	.word	0x200004a4
 8001040:	0800f33c 	.word	0x0800f33c
 8001044:	08003599 	.word	0x08003599
 8001048:	200004a8 	.word	0x200004a8
 800104c:	0800f360 	.word	0x0800f360
 8001050:	08003745 	.word	0x08003745
 8001054:	200004ac 	.word	0x200004ac
 8001058:	0800f384 	.word	0x0800f384
 800105c:	08003769 	.word	0x08003769
 8001060:	200004b0 	.word	0x200004b0

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	@ 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	@ 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00b ff6f 	bl	800cf56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <SystemClock_Config+0xb4>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <SystemClock_Config+0xb4>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	@ 0x40
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <SystemClock_Config+0xb4>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <SystemClock_Config+0xb8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <SystemClock_Config+0xb8>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <SystemClock_Config+0xb8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c8:	2310      	movs	r3, #16
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 ff8f 	bl	8005ff8 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010e0:	f002 fb4f 	bl	8003782 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 f9f2 	bl	80064e8 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800110a:	f002 fb3a 	bl	8003782 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	@ 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001134:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <MX_ADC1_Init+0x9c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113e:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_ADC1_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001160:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <MX_ADC1_Init+0xa0>)
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_ADC1_Init+0x98>)
 800116c:	2201      	movs	r2, #1
 800116e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_ADC1_Init+0x98>)
 800117a:	2201      	movs	r2, #1
 800117c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <MX_ADC1_Init+0x98>)
 8001180:	f002 ffa4 	bl	80040cc <HAL_ADC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f002 fafa 	bl	8003782 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800118e:	230b      	movs	r3, #11
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <MX_ADC1_Init+0x98>)
 80011a0:	f003 f976 	bl	8004490 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011aa:	f002 faea 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	40012000 	.word	0x40012000
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_ADC2_Init+0x98>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <MX_ADC2_Init+0x9c>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_ADC2_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_ADC2_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_ADC2_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_ADC2_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_ADC2_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_ADC2_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_ADC2_Init+0x98>)
 8001204:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <MX_ADC2_Init+0xa0>)
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_ADC2_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_ADC2_Init+0x98>)
 8001210:	2201      	movs	r2, #1
 8001212:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_ADC2_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_ADC2_Init+0x98>)
 800121e:	2201      	movs	r2, #1
 8001220:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	@ (800125c <MX_ADC2_Init+0x98>)
 8001224:	f002 ff52 	bl	80040cc <HAL_ADC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800122e:	f002 faa8 	bl	8003782 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001232:	230c      	movs	r3, #12
 8001234:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_ADC2_Init+0x98>)
 8001244:	f003 f924 	bl	8004490 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800124e:	f002 fa98 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000244 	.word	0x20000244
 8001260:	40012100 	.word	0x40012100
 8001264:	0f000001 	.word	0x0f000001

08001268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_I2C1_Init+0x50>)
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <MX_I2C1_Init+0x54>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_I2C1_Init+0x50>)
 8001274:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <MX_I2C1_Init+0x58>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_I2C1_Init+0x50>)
 8001286:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800128a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <MX_I2C1_Init+0x50>)
 80012a6:	f003 fe85 	bl	8004fb4 <HAL_I2C_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b0:	f002 fa67 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000028c 	.word	0x2000028c
 80012bc:	40005400 	.word	0x40005400
 80012c0:	000186a0 	.word	0x000186a0

080012c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b096      	sub	sp, #88	@ 0x58
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2220      	movs	r2, #32
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00b fe2a 	bl	800cf56 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001302:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <MX_TIM1_Init+0x134>)
 8001304:	4a3d      	ldr	r2, [pc, #244]	@ (80013fc <MX_TIM1_Init+0x138>)
 8001306:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001308:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <MX_TIM1_Init+0x134>)
 800130a:	22a0      	movs	r2, #160	@ 0xa0
 800130c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b3a      	ldr	r3, [pc, #232]	@ (80013f8 <MX_TIM1_Init+0x134>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001314:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <MX_TIM1_Init+0x134>)
 8001316:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800131a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <MX_TIM1_Init+0x134>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001322:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <MX_TIM1_Init+0x134>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001328:	4b33      	ldr	r3, [pc, #204]	@ (80013f8 <MX_TIM1_Init+0x134>)
 800132a:	2280      	movs	r2, #128	@ 0x80
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132e:	4832      	ldr	r0, [pc, #200]	@ (80013f8 <MX_TIM1_Init+0x134>)
 8001330:	f005 faba 	bl	80068a8 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800133a:	f002 fa22 	bl	8003782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001342:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001344:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001348:	4619      	mov	r1, r3
 800134a:	482b      	ldr	r0, [pc, #172]	@ (80013f8 <MX_TIM1_Init+0x134>)
 800134c:	f006 f916 	bl	800757c <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001356:	f002 fa14 	bl	8003782 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800135a:	4827      	ldr	r0, [pc, #156]	@ (80013f8 <MX_TIM1_Init+0x134>)
 800135c:	f005 faf3 	bl	8006946 <HAL_TIM_PWM_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001366:	f002 fa0c 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001372:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001376:	4619      	mov	r1, r3
 8001378:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <MX_TIM1_Init+0x134>)
 800137a:	f006 fe79 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001384:	f002 f9fd 	bl	8003782 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	2360      	movs	r3, #96	@ 0x60
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a4:	220c      	movs	r2, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	4813      	ldr	r0, [pc, #76]	@ (80013f8 <MX_TIM1_Init+0x134>)
 80013aa:	f006 f825 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80013b4:	f002 f9e5 	bl	8003782 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <MX_TIM1_Init+0x134>)
 80013dc:	f006 fec4 	bl	8008168 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80013e6:	f002 f9cc 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ea:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <MX_TIM1_Init+0x134>)
 80013ec:	f002 fc08 	bl	8003c00 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3758      	adds	r7, #88	@ 0x58
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200002e0 	.word	0x200002e0
 80013fc:	40010000 	.word	0x40010000

08001400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00b fda1 	bl	800cf56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800141c:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 800141e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001454:	230a      	movs	r3, #10
 8001456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001464:	230a      	movs	r3, #10
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 8001470:	f005 fd02 	bl	8006e78 <HAL_TIM_Encoder_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800147a:	f002 f982 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_TIM2_Init+0xa4>)
 800148c:	f006 fdf0 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001496:	f002 f974 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000328 	.word	0x20000328

080014a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00b fd4d 	bl	800cf56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <MX_TIM3_Init+0xa0>)
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <MX_TIM3_Init+0xa4>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <MX_TIM3_Init+0xa0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <MX_TIM3_Init+0xa0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <MX_TIM3_Init+0xa0>)
 80014d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM3_Init+0xa0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_TIM3_Init+0xa0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ea:	2303      	movs	r3, #3
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014fa:	230a      	movs	r3, #10
 80014fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001502:	2301      	movs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800150a:	230a      	movs	r3, #10
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <MX_TIM3_Init+0xa0>)
 8001516:	f005 fcaf 	bl	8006e78 <HAL_TIM_Encoder_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001520:	f002 f92f 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_TIM3_Init+0xa0>)
 8001532:	f006 fd9d 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800153c:	f002 f921 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3730      	adds	r7, #48	@ 0x30
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000370 	.word	0x20000370
 800154c:	40000400 	.word	0x40000400

08001550 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800156c:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 800156e:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <MX_TIM4_Init+0xa4>)
 8001570:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 8001574:	220f      	movs	r2, #15
 8001576:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 8001580:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001584:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001592:	4817      	ldr	r0, [pc, #92]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 8001594:	f005 faf8 	bl	8006b88 <HAL_TIM_IC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800159e:	f002 f8f0 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	4619      	mov	r1, r3
 80015b0:	480f      	ldr	r0, [pc, #60]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 80015b2:	f006 fd5d 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80015bc:	f002 f8e1 	bl	8003782 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	@ (80015f0 <MX_TIM4_Init+0xa0>)
 80015d8:	f005 fe72 	bl	80072c0 <HAL_TIM_IC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80015e2:	f002 f8ce 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200003b8 	.word	0x200003b8
 80015f4:	40000800 	.word	0x40000800

080015f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b096      	sub	sp, #88	@ 0x58
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2220      	movs	r2, #32
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f00b fc90 	bl	800cf56 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001636:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <MX_TIM8_Init+0x14c>)
 8001638:	4a43      	ldr	r2, [pc, #268]	@ (8001748 <MX_TIM8_Init+0x150>)
 800163a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800163c:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <MX_TIM8_Init+0x14c>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b40      	ldr	r3, [pc, #256]	@ (8001744 <MX_TIM8_Init+0x14c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001648:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <MX_TIM8_Init+0x14c>)
 800164a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800164e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <MX_TIM8_Init+0x14c>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <MX_TIM8_Init+0x14c>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <MX_TIM8_Init+0x14c>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001662:	4838      	ldr	r0, [pc, #224]	@ (8001744 <MX_TIM8_Init+0x14c>)
 8001664:	f005 f920 	bl	80068a8 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800166e:	f002 f888 	bl	8003782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001676:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001678:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800167c:	4619      	mov	r1, r3
 800167e:	4831      	ldr	r0, [pc, #196]	@ (8001744 <MX_TIM8_Init+0x14c>)
 8001680:	f005 ff7c 	bl	800757c <HAL_TIM_ConfigClockSource>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800168a:	f002 f87a 	bl	8003782 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800168e:	482d      	ldr	r0, [pc, #180]	@ (8001744 <MX_TIM8_Init+0x14c>)
 8001690:	f005 f959 	bl	8006946 <HAL_TIM_PWM_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800169a:	f002 f872 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016aa:	4619      	mov	r1, r3
 80016ac:	4825      	ldr	r0, [pc, #148]	@ (8001744 <MX_TIM8_Init+0x14c>)
 80016ae:	f006 fcdf 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016b8:	f002 f863 	bl	8003782 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	2360      	movs	r3, #96	@ 0x60
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	4818      	ldr	r0, [pc, #96]	@ (8001744 <MX_TIM8_Init+0x14c>)
 80016e2:	f005 fe89 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80016ec:	f002 f849 	bl	8003782 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f4:	2204      	movs	r2, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4812      	ldr	r0, [pc, #72]	@ (8001744 <MX_TIM8_Init+0x14c>)
 80016fa:	f005 fe7d 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001704:	f002 f83d 	bl	8003782 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800171c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001720:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <MX_TIM8_Init+0x14c>)
 800172c:	f006 fd1c 	bl	8008168 <HAL_TIMEx_ConfigBreakDeadTime>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001736:	f002 f824 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3758      	adds	r7, #88	@ 0x58
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000400 	.word	0x20000400
 8001748:	40010400 	.word	0x40010400

0800174c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 8001752:	4a12      	ldr	r2, [pc, #72]	@ (800179c <MX_USART3_UART_Init+0x50>)
 8001754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_USART3_UART_Init+0x4c>)
 8001784:	f006 fd56 	bl	8008234 <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800178e:	f001 fff8 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000448 	.word	0x20000448
 800179c:	40004800 	.word	0x40004800

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	@ 0x30
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a48      	ldr	r2, [pc, #288]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	4b42      	ldr	r3, [pc, #264]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a41      	ldr	r2, [pc, #260]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a3a      	ldr	r2, [pc, #232]	@ (80018e0 <MX_GPIO_Init+0x140>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <MX_GPIO_Init+0x140>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <MX_GPIO_Init+0x140>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a33      	ldr	r2, [pc, #204]	@ (80018e0 <MX_GPIO_Init+0x140>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b31      	ldr	r3, [pc, #196]	@ (80018e0 <MX_GPIO_Init+0x140>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <MX_GPIO_Init+0x140>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a2c      	ldr	r2, [pc, #176]	@ (80018e0 <MX_GPIO_Init+0x140>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <MX_GPIO_Init+0x140>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <MX_GPIO_Init+0x140>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a25      	ldr	r2, [pc, #148]	@ (80018e0 <MX_GPIO_Init+0x140>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <MX_GPIO_Init+0x140>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001864:	481f      	ldr	r0, [pc, #124]	@ (80018e4 <MX_GPIO_Init+0x144>)
 8001866:	f003 fb71 	bl	8004f4c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	213c      	movs	r1, #60	@ 0x3c
 800186e:	481e      	ldr	r0, [pc, #120]	@ (80018e8 <MX_GPIO_Init+0x148>)
 8001870:	f003 fb6c 	bl	8004f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800187a:	481c      	ldr	r0, [pc, #112]	@ (80018ec <MX_GPIO_Init+0x14c>)
 800187c:	f003 fb66 	bl	8004f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001880:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001884:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4812      	ldr	r0, [pc, #72]	@ (80018e4 <MX_GPIO_Init+0x144>)
 800189a:	f003 f9bb 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800189e:	233c      	movs	r3, #60	@ 0x3c
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	2302      	movs	r3, #2
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <MX_GPIO_Init+0x148>)
 80018b6:	f003 f9ad 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 80018ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80018d4:	f003 f99e 	bl	8004c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	@ 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020c00 	.word	0x40020c00

080018f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning*/
	 UNUSED(huart);
	 receivedInstruction =1;
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <HAL_UART_RxCpltCallback+0x1c>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200004b4 	.word	0x200004b4

08001910 <moveCarStraight>:


// movement
void moveCarStraight(double distance) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	ed87 0b00 	vstr	d0, [r7]

	distance = distance * 75;
 800191a:	a331      	add	r3, pc, #196	@ (adr r3, 80019e0 <moveCarStraight+0xd0>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001924:	f7fe fe78 	bl	8000618 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	e9c7 2300 	strd	r2, r3, [r7]
	  pwmVal_servo = SERVOCENTER;
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <moveCarStraight+0xb0>)
 8001932:	2292      	movs	r2, #146	@ 0x92
 8001934:	801a      	strh	r2, [r3, #0]
	  osDelay(300);
 8001936:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800193a:	f007 feb5 	bl	80096a8 <osDelay>
	  e_brake = 0;
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <moveCarStraight+0xb4>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
	  times_acceptable = 0;
 8001944:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <moveCarStraight+0xb8>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
	  rightEncoderVal = 75000;
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <moveCarStraight+0xbc>)
 800194c:	4a20      	ldr	r2, [pc, #128]	@ (80019d0 <moveCarStraight+0xc0>)
 800194e:	601a      	str	r2, [r3, #0]
	  leftEncoderVal = 75000;
 8001950:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <moveCarStraight+0xc4>)
 8001952:	4a1f      	ldr	r2, [pc, #124]	@ (80019d0 <moveCarStraight+0xc0>)
 8001954:	601a      	str	r2, [r3, #0]
	  rightTarget = 75000;
 8001956:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <moveCarStraight+0xc8>)
 8001958:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <moveCarStraight+0xc0>)
 800195a:	601a      	str	r2, [r3, #0]
	  leftTarget = 75000;
 800195c:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <moveCarStraight+0xcc>)
 800195e:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <moveCarStraight+0xc0>)
 8001960:	601a      	str	r2, [r3, #0]
	  rightTarget += distance;
 8001962:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <moveCarStraight+0xc8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fdec 	bl	8000544 <__aeabi_i2d>
 800196c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001970:	f7fe fc9c 	bl	80002ac <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f8fc 	bl	8000b78 <__aeabi_d2iz>
 8001980:	4603      	mov	r3, r0
 8001982:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <moveCarStraight+0xc8>)
 8001984:	6013      	str	r3, [r2, #0]
	  leftTarget += distance;
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <moveCarStraight+0xcc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdda 	bl	8000544 <__aeabi_i2d>
 8001990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001994:	f7fe fc8a 	bl	80002ac <__adddf3>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f8ea 	bl	8000b78 <__aeabi_d2iz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <moveCarStraight+0xcc>)
 80019a8:	6013      	str	r3, [r2, #0]
//
//		  while (finishCheck()) {
//			  if(uint)
//		  }
//	  }
	  while (finishCheck());
 80019aa:	bf00      	nop
 80019ac:	f000 f984 	bl	8001cb8 <finishCheck>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1fa      	bne.n	80019ac <moveCarStraight+0x9c>
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	200004d0 	.word	0x200004d0
 80019c8:	200004cc 	.word	0x200004cc
 80019cc:	200004d8 	.word	0x200004d8
 80019d0:	000124f8 	.word	0x000124f8
 80019d4:	200004dc 	.word	0x200004dc
 80019d8:	200004e0 	.word	0x200004e0
 80019dc:	200004e4 	.word	0x200004e4
 80019e0:	00000000 	.word	0x00000000
 80019e4:	4052c000 	.word	0x4052c000

080019e8 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(200);
}

void moveCarRight(double angle) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <moveCarRight+0x54>)
 80019f4:	22fa      	movs	r2, #250	@ 0xfa
 80019f6:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 80019f8:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80019fc:	f007 fe54 	bl	80096a8 <osDelay>
	e_brake = 0;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <moveCarRight+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a06:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <moveCarRight+0x5c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <moveCarRight+0x60>)
 8001a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a16:	f7fe fc47 	bl	80002a8 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	490a      	ldr	r1, [pc, #40]	@ (8001a48 <moveCarRight+0x60>)
 8001a20:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001a24:	bf00      	nop
 8001a26:	f000 f947 	bl	8001cb8 <finishCheck>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1fa      	bne.n	8001a26 <moveCarRight+0x3e>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	200004d0 	.word	0x200004d0
 8001a44:	200004cc 	.word	0x200004cc
 8001a48:	200004e8 	.word	0x200004e8

08001a4c <moveCarLeft>:

void moveCarLeft(double angle) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <moveCarLeft+0x54>)
 8001a58:	2254      	movs	r2, #84	@ 0x54
 8001a5a:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 8001a5c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001a60:	f007 fe22 	bl	80096a8 <osDelay>
	e_brake = 0;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <moveCarLeft+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <moveCarLeft+0x5c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <moveCarLeft+0x60>)
 8001a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a7a:	f7fe fc17 	bl	80002ac <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	490a      	ldr	r1, [pc, #40]	@ (8001aac <moveCarLeft+0x60>)
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001a88:	bf00      	nop
 8001a8a:	f000 f915 	bl	8001cb8 <finishCheck>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1fa      	bne.n	8001a8a <moveCarLeft+0x3e>
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	200004d0 	.word	0x200004d0
 8001aa8:	200004cc 	.word	0x200004cc
 8001aac:	200004e8 	.word	0x200004e8

08001ab0 <PID_Control>:



// error correction
int PID_Control(int error, int right) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d018      	beq.n	8001af2 <PID_Control+0x42>
		if (error > 0) { //go forward
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	dd0a      	ble.n	8001adc <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B (RIGHT)- FORWARD
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2110      	movs	r1, #16
 8001aca:	4835      	ldr	r0, [pc, #212]	@ (8001ba0 <PID_Control+0xf0>)
 8001acc:	f003 fa3e 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	4832      	ldr	r0, [pc, #200]	@ (8001ba0 <PID_Control+0xf0>)
 8001ad6:	f003 fa39 	bl	8004f4c <HAL_GPIO_WritePin>
 8001ada:	e022      	b.n	8001b22 <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B (RIGHT)- BACKWARDS
 8001adc:	2200      	movs	r2, #0
 8001ade:	2110      	movs	r1, #16
 8001ae0:	482f      	ldr	r0, [pc, #188]	@ (8001ba0 <PID_Control+0xf0>)
 8001ae2:	f003 fa33 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2120      	movs	r1, #32
 8001aea:	482d      	ldr	r0, [pc, #180]	@ (8001ba0 <PID_Control+0xf0>)
 8001aec:	f003 fa2e 	bl	8004f4c <HAL_GPIO_WritePin>
 8001af0:	e017      	b.n	8001b22 <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	dd0a      	ble.n	8001b0e <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A(LEFT) - FORWARD
 8001af8:	2201      	movs	r2, #1
 8001afa:	2108      	movs	r1, #8
 8001afc:	4828      	ldr	r0, [pc, #160]	@ (8001ba0 <PID_Control+0xf0>)
 8001afe:	f003 fa25 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2104      	movs	r1, #4
 8001b06:	4826      	ldr	r0, [pc, #152]	@ (8001ba0 <PID_Control+0xf0>)
 8001b08:	f003 fa20 	bl	8004f4c <HAL_GPIO_WritePin>
 8001b0c:	e009      	b.n	8001b22 <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A(LEFT) - BACKWARDS
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2108      	movs	r1, #8
 8001b12:	4823      	ldr	r0, [pc, #140]	@ (8001ba0 <PID_Control+0xf0>)
 8001b14:	f003 fa1a 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	4820      	ldr	r0, [pc, #128]	@ (8001ba0 <PID_Control+0xf0>)
 8001b1e:	f003 fa15 	bl	8004f4c <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bfb8      	it	lt
 8001b28:	425b      	neglt	r3, r3
 8001b2a:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b32:	dd02      	ble.n	8001b3a <PID_Control+0x8a>
		return 3000;
 8001b34:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b38:	e02d      	b.n	8001b96 <PID_Control+0xe6>
	} else if (error > 500)     {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b40:	dd02      	ble.n	8001b48 <PID_Control+0x98>
		return 2000;
 8001b42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b46:	e026      	b.n	8001b96 <PID_Control+0xe6>
	 } else if (error > 200)  {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b4c:	dd02      	ble.n	8001b54 <PID_Control+0xa4>
		return 1400;
 8001b4e:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001b52:	e020      	b.n	8001b96 <PID_Control+0xe6>
	  } else if (error > 100)    {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	dd02      	ble.n	8001b60 <PID_Control+0xb0>
		return 1000;
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	e01a      	b.n	8001b96 <PID_Control+0xe6>
	   } else if (error > 2)  {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	dd07      	ble.n	8001b76 <PID_Control+0xc6>
			times_acceptable++;
 8001b66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <PID_Control+0xf4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <PID_Control+0xf4>)
 8001b6e:	6013      	str	r3, [r2, #0]
			return 500;
 8001b70:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b74:	e00f      	b.n	8001b96 <PID_Control+0xe6>
			} else if (error >= 1) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	dd06      	ble.n	8001b8a <PID_Control+0xda>
		times_acceptable++;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <PID_Control+0xf4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a08      	ldr	r2, [pc, #32]	@ (8001ba4 <PID_Control+0xf4>)
 8001b84:	6013      	str	r3, [r2, #0]
		return 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e005      	b.n	8001b96 <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <PID_Control+0xf4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <PID_Control+0xf4>)
 8001b92:	6013      	str	r3, [r2, #0]
		return 0;
 8001b94:	2300      	movs	r3, #0
	}
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	200004cc 	.word	0x200004cc

08001ba8 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bb2:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <PID_Angle+0x104>)
 8001bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bbe:	f7fe fd2b 	bl	8000618 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ffd5 	bl	8000b78 <__aeabi_d2iz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor = WHEEL B
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d018      	beq.n	8001c0a <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dd0a      	ble.n	8001bf4 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001bde:	2201      	movs	r2, #1
 8001be0:	2110      	movs	r1, #16
 8001be2:	4833      	ldr	r0, [pc, #204]	@ (8001cb0 <PID_Angle+0x108>)
 8001be4:	f003 f9b2 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2120      	movs	r1, #32
 8001bec:	4830      	ldr	r0, [pc, #192]	@ (8001cb0 <PID_Angle+0x108>)
 8001bee:	f003 f9ad 	bl	8004f4c <HAL_GPIO_WritePin>
 8001bf2:	e022      	b.n	8001c3a <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	482d      	ldr	r0, [pc, #180]	@ (8001cb0 <PID_Angle+0x108>)
 8001bfa:	f003 f9a7 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2120      	movs	r1, #32
 8001c02:	482b      	ldr	r0, [pc, #172]	@ (8001cb0 <PID_Angle+0x108>)
 8001c04:	f003 f9a2 	bl	8004f4c <HAL_GPIO_WritePin>
 8001c08:	e017      	b.n	8001c3a <PID_Angle+0x92>
		}
	} else { //leftMotor = WHEEL A
		if (error < 0) { //go forward
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da0a      	bge.n	8001c26 <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001c10:	2201      	movs	r2, #1
 8001c12:	2108      	movs	r1, #8
 8001c14:	4826      	ldr	r0, [pc, #152]	@ (8001cb0 <PID_Angle+0x108>)
 8001c16:	f003 f999 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	4824      	ldr	r0, [pc, #144]	@ (8001cb0 <PID_Angle+0x108>)
 8001c20:	f003 f994 	bl	8004f4c <HAL_GPIO_WritePin>
 8001c24:	e009      	b.n	8001c3a <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001c26:	2200      	movs	r2, #0
 8001c28:	2108      	movs	r1, #8
 8001c2a:	4821      	ldr	r0, [pc, #132]	@ (8001cb0 <PID_Angle+0x108>)
 8001c2c:	f003 f98e 	bl	8004f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2104      	movs	r1, #4
 8001c34:	481e      	ldr	r0, [pc, #120]	@ (8001cb0 <PID_Angle+0x108>)
 8001c36:	f003 f989 	bl	8004f4c <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bfb8      	it	lt
 8001c40:	425b      	neglt	r3, r3
 8001c42:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c4a:	dd02      	ble.n	8001c52 <PID_Angle+0xaa>
		return 5000;		//3000
 8001c4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c50:	e028      	b.n	8001ca4 <PID_Angle+0xfc>
	} else if (error > 200) {
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c56:	dd02      	ble.n	8001c5e <PID_Angle+0xb6>
		return 3000;		//2000
 8001c58:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c5c:	e022      	b.n	8001ca4 <PID_Angle+0xfc>
	} else if (error > 150) {
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b96      	cmp	r3, #150	@ 0x96
 8001c62:	dd02      	ble.n	8001c6a <PID_Angle+0xc2>
		return 3000;		//1600
 8001c64:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c68:	e01c      	b.n	8001ca4 <PID_Angle+0xfc>
	} else if (error > 100) {
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b64      	cmp	r3, #100	@ 0x64
 8001c6e:	dd02      	ble.n	8001c76 <PID_Angle+0xce>
		return 1400;		//1400
 8001c70:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001c74:	e016      	b.n	8001ca4 <PID_Angle+0xfc>
	} else if (error > 10) {
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b0a      	cmp	r3, #10
 8001c7a:	dd02      	ble.n	8001c82 <PID_Angle+0xda>
		return 1400;		//1000
 8001c7c:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001c80:	e010      	b.n	8001ca4 <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	dd07      	ble.n	8001c98 <PID_Angle+0xf0>
		times_acceptable++;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <PID_Angle+0x10c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a09      	ldr	r2, [pc, #36]	@ (8001cb4 <PID_Angle+0x10c>)
 8001c90:	6013      	str	r3, [r2, #0]
		return 1000;		//600
 8001c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c96:	e005      	b.n	8001ca4 <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <PID_Angle+0x10c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <PID_Angle+0x10c>)
 8001ca0:	6013      	str	r3, [r2, #0]
		return 0;
 8001ca2:	2300      	movs	r3, #0
	}
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40240000 	.word	0x40240000
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	200004cc 	.word	0x200004cc

08001cb8 <finishCheck>:

int finishCheck() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	if (times_acceptable > 5) {		//check to confirm angle/position is reached, then return 0. increase as needed if need more precise measurements
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <finishCheck+0x48>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	dd19      	ble.n	8001cf8 <finishCheck+0x40>
		e_brake = 1;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <finishCheck+0x4c>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
		pwmVal_Left = pwmVal_Right = 0;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <finishCheck+0x50>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <finishCheck+0x50>)
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <finishCheck+0x54>)
 8001cd6:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <finishCheck+0x58>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <finishCheck+0x5c>)
 8001cde:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <finishCheck+0x60>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d1c <finishCheck+0x64>)
 8001ce6:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <finishCheck+0x48>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
		osDelay(200);
 8001cee:	20c8      	movs	r0, #200	@ 0xc8
 8001cf0:	f007 fcda 	bl	80096a8 <osDelay>
		return 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <finishCheck+0x42>
	}
	return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200004cc 	.word	0x200004cc
 8001d04:	200004d0 	.word	0x200004d0
 8001d08:	200004c8 	.word	0x200004c8
 8001d0c:	200004ca 	.word	0x200004ca
 8001d10:	200004dc 	.word	0x200004dc
 8001d14:	200004e4 	.word	0x200004e4
 8001d18:	200004d8 	.word	0x200004d8
 8001d1c:	200004e0 	.word	0x200004e0

08001d20 <readByte>:


 //gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <readByte+0x48>)
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <readByte+0x4c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	b299      	uxth	r1, r3
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <readByte+0x48>)
 8001d42:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <readByte+0x50>)
 8001d44:	f003 fa7a 	bl	800523c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <readByte+0x4c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	2314      	movs	r3, #20
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2302      	movs	r3, #2
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <readByte+0x50>)
 8001d5a:	f003 fb6d 	bl	8005438 <HAL_I2C_Master_Receive>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000500 	.word	0x20000500
 8001d6c:	20000002 	.word	0x20000002
 8001d70:	2000028c 	.word	0x2000028c

08001d74 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001d84:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <writeByte+0x3c>)
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <writeByte+0x3c>)
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <writeByte+0x40>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	b299      	uxth	r1, r3
 8001d98:	2314      	movs	r3, #20
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <writeByte+0x3c>)
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <writeByte+0x44>)
 8001da2:	f003 fa4b 	bl	800523c <HAL_I2C_Master_Transmit>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000500 	.word	0x20000500
 8001db4:	20000002 	.word	0x20000002
 8001db8:	2000028c 	.word	0x2000028c

08001dbc <gyroInit>:

void gyroInit() {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2006      	movs	r0, #6
 8001dc4:	f7ff ffd6 	bl	8001d74 <writeByte>
	osDelay(10);
 8001dc8:	200a      	movs	r0, #10
 8001dca:	f007 fc6d 	bl	80096a8 <osDelay>
	writeByte(0x03, 0x80);
 8001dce:	2180      	movs	r1, #128	@ 0x80
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f7ff ffcf 	bl	8001d74 <writeByte>
	osDelay(10);
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f007 fc66 	bl	80096a8 <osDelay>
	writeByte(0x07, 0x07);
 8001ddc:	2107      	movs	r1, #7
 8001dde:	2007      	movs	r0, #7
 8001de0:	f7ff ffc8 	bl	8001d74 <writeByte>
	osDelay(10);
 8001de4:	200a      	movs	r0, #10
 8001de6:	f007 fc5f 	bl	80096a8 <osDelay>
	writeByte(0x06, 0x01);
 8001dea:	2101      	movs	r1, #1
 8001dec:	2006      	movs	r0, #6
 8001dee:	f7ff ffc1 	bl	8001d74 <writeByte>
	osDelay(10);
 8001df2:	200a      	movs	r0, #10
 8001df4:	f007 fc58 	bl	80096a8 <osDelay>
	writeByte(0x7F, 0x20);
 8001df8:	2120      	movs	r1, #32
 8001dfa:	207f      	movs	r0, #127	@ 0x7f
 8001dfc:	f7ff ffba 	bl	8001d74 <writeByte>
	osDelay(10);
 8001e00:	200a      	movs	r0, #10
 8001e02:	f007 fc51 	bl	80096a8 <osDelay>
	writeByte(0x01, 0x2F);
 8001e06:	212f      	movs	r1, #47	@ 0x2f
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff ffb3 	bl	8001d74 <writeByte>
	osDelay(10);
 8001e0e:	200a      	movs	r0, #10
 8001e10:	f007 fc4a 	bl	80096a8 <osDelay>
	writeByte(0x0, 0x00);
 8001e14:	2100      	movs	r1, #0
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff ffac 	bl	8001d74 <writeByte>
	osDelay(10);
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f007 fc43 	bl	80096a8 <osDelay>
	writeByte(0x7F, 0x00);
 8001e22:	2100      	movs	r1, #0
 8001e24:	207f      	movs	r0, #127	@ 0x7f
 8001e26:	f7ff ffa5 	bl	8001d74 <writeByte>
	osDelay(10);
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f007 fc3c 	bl	80096a8 <osDelay>
	writeByte(0x07, 0x00);
 8001e30:	2100      	movs	r1, #0
 8001e32:	2007      	movs	r0, #7
 8001e34:	f7ff ff9e 	bl	8001d74 <writeByte>
	osDelay(10);
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f007 fc35 	bl	80096a8 <osDelay>
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <delay_us>:

/************************TASK 2 FUNCTIONS******************/

// ultrasonic
void delay_us(uint16_t time_us) {
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <delay_us+0x30>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < time_us);
 8001e56:	bf00      	nop
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <delay_us+0x30>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3f9      	bcc.n	8001e58 <delay_us+0x14>
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200003b8 	.word	0x200003b8

08001e78 <Ultrasonic_Read>:


void Ultrasonic_Read(void) //Call when u want to get reading from US
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e82:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <Ultrasonic_Read+0x38>)
 8001e84:	f003 f862 	bl	8004f4c <HAL_GPIO_WritePin>
	delay_us(10);
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f7ff ffdb 	bl	8001e44 <delay_us>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e94:	4806      	ldr	r0, [pc, #24]	@ (8001eb0 <Ultrasonic_Read+0x38>)
 8001e96:	f003 f859 	bl	8004f4c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <Ultrasonic_Read+0x3c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <Ultrasonic_Read+0x3c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0202 	orr.w	r2, r2, #2
 8001ea8:	60da      	str	r2, [r3, #12]
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	200003b8 	.word	0x200003b8

08001eb8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]


	if(htim->Channel ==HAL_TIM_ACTIVE_CHANNEL_1){
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7f1b      	ldrb	r3, [r3, #28]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f040 8084 	bne.w	8001fd2 <HAL_TIM_IC_CaptureCallback+0x11a>
		if(u_CapturedTrig1 == 0){	// Ultrasonic Trigger first sent
 8001eca:	4b47      	ldr	r3, [pc, #284]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11b      	bne.n	8001f0a <HAL_TIM_IC_CaptureCallback+0x52>
			trig1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f005 fc19 	bl	800770c <HAL_TIM_ReadCapturedValue>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001ee0:	601a      	str	r2, [r3, #0]
			u_CapturedTrig1 =1;
 8001ee2:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 020a 	bic.w	r2, r2, #10
 8001ef6:	621a      	str	r2, [r3, #32]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a1a      	ldr	r2, [r3, #32]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0202 	orr.w	r2, r2, #2
 8001f06:	621a      	str	r2, [r3, #32]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001f08:	e063      	b.n	8001fd2 <HAL_TIM_IC_CaptureCallback+0x11a>
		else if (u_CapturedTrig1 == 1){	//Ultrasonic Trigger 2nd sent
 8001f0a:	4b37      	ldr	r3, [pc, #220]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d15f      	bne.n	8001fd2 <HAL_TIM_IC_CaptureCallback+0x11a>
				trig2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 fbf9 	bl	800770c <HAL_TIM_ReadCapturedValue>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f20:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim,0);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24
				if (trig2 > trig1){
 8001f2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dd0d      	ble.n	8001f52 <HAL_TIM_IC_CaptureCallback+0x9a>
					echo_pulse = trig2-trig1;		//width of pulse
 8001f36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faff 	bl	8000544 <__aeabi_i2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	492a      	ldr	r1, [pc, #168]	@ (8001ff4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f4c:	e9c1 2300 	strd	r2, r3, [r1]
 8001f50:	e00f      	b.n	8001f72 <HAL_TIM_IC_CaptureCallback+0xba>
					echo_pulse = (65535-trig1)+trig2;	//if overflow, width of pulse
 8001f52:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001f5a:	33ff      	adds	r3, #255	@ 0xff
 8001f5c:	4a24      	ldr	r2, [pc, #144]	@ (8001ff0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe faee 	bl	8000544 <__aeabi_i2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4921      	ldr	r1, [pc, #132]	@ (8001ff4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f6e:	e9c1 2300 	strd	r2, r3, [r1]
				echo_dist = echo_pulse * 0.0343/2; //echo_dist in cm
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f78:	a319      	add	r3, pc, #100	@ (adr r3, 8001fe0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fb4b 	bl	8000618 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f92:	f7fe fc6b 	bl	800086c <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4917      	ldr	r1, [pc, #92]	@ (8001ff8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001f9c:	e9c1 2300 	strd	r2, r3, [r1]
				u_CapturedTrig1 =0;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020a 	bic.w	r2, r2, #10
 8001fb4:	621a      	str	r2, [r3, #32]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a12      	ldr	r2, [r2, #32]
 8001fc0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0202 	bic.w	r2, r2, #2
 8001fd0:	60da      	str	r2, [r3, #12]
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	04816f00 	.word	0x04816f00
 8001fe4:	3fa18fc5 	.word	0x3fa18fc5
 8001fe8:	20000514 	.word	0x20000514
 8001fec:	20000530 	.word	0x20000530
 8001ff0:	20000534 	.word	0x20000534
 8001ff4:	20000528 	.word	0x20000528
 8001ff8:	20000520 	.word	0x20000520
 8001ffc:	200003b8 	.word	0x200003b8

08002000 <IR_Left_Read>:


// ir sensor
void IR_Left_Read() {
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002004:	4838      	ldr	r0, [pc, #224]	@ (80020e8 <IR_Left_Read+0xe8>)
 8002006:	f002 f8a5 	bl	8004154 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800200a:	2164      	movs	r1, #100	@ 0x64
 800200c:	4836      	ldr	r0, [pc, #216]	@ (80020e8 <IR_Left_Read+0xe8>)
 800200e:	f002 f9a6 	bl	800435e <HAL_ADC_PollForConversion>
	RawLeftIRVal = HAL_ADC_GetValue(&hadc1);
 8002012:	4835      	ldr	r0, [pc, #212]	@ (80020e8 <IR_Left_Read+0xe8>)
 8002014:	f002 fa2e 	bl	8004474 <HAL_ADC_GetValue>
 8002018:	4603      	mov	r3, r0
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b33      	ldr	r3, [pc, #204]	@ (80020ec <IR_Left_Read+0xec>)
 800201e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8002020:	4831      	ldr	r0, [pc, #196]	@ (80020e8 <IR_Left_Read+0xe8>)
 8002022:	f002 f969 	bl	80042f8 <HAL_ADC_Stop>

	//LPF, Filter coefficient = 0.15
	LeftIRfiltered = (0.15 * RawLeftIRVal) + ((1 - 0.15) * LeftIRfiltered);
 8002026:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <IR_Left_Read+0xec>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa8a 	bl	8000544 <__aeabi_i2d>
 8002030:	a325      	add	r3, pc, #148	@ (adr r3, 80020c8 <IR_Left_Read+0xc8>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe faef 	bl	8000618 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4614      	mov	r4, r2
 8002040:	461d      	mov	r5, r3
 8002042:	4b2b      	ldr	r3, [pc, #172]	@ (80020f0 <IR_Left_Read+0xf0>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa7c 	bl	8000544 <__aeabi_i2d>
 800204c:	a320      	add	r3, pc, #128	@ (adr r3, 80020d0 <IR_Left_Read+0xd0>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe fae1 	bl	8000618 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe f925 	bl	80002ac <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fdad 	bl	8000bc8 <__aeabi_d2uiz>
 800206e:	4603      	mov	r3, r0
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <IR_Left_Read+0xf0>)
 8002074:	801a      	strh	r2, [r3, #0]

	if(LeftIRfiltered <450) 		//cap the IR filter range to be from 0-70cm+-, else it will go haywire
 8002076:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <IR_Left_Read+0xf0>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800207e:	d203      	bcs.n	8002088 <IR_Left_Read+0x88>
		IRDistance_Left = 101;
 8002080:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <IR_Left_Read+0xf4>)
 8002082:	2265      	movs	r2, #101	@ 0x65
 8002084:	801a      	strh	r2, [r3, #0]
	else {
		//Equation from calibration and testing
		IRDistance_Left = 29076.34/(LeftIRfiltered-170.63);
	}
}
 8002086:	e01a      	b.n	80020be <IR_Left_Read+0xbe>
		IRDistance_Left = 29076.34/(LeftIRfiltered-170.63);
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <IR_Left_Read+0xf0>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa59 	bl	8000544 <__aeabi_i2d>
 8002092:	a311      	add	r3, pc, #68	@ (adr r3, 80020d8 <IR_Left_Read+0xd8>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe f906 	bl	80002a8 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	a10f      	add	r1, pc, #60	@ (adr r1, 80020e0 <IR_Left_Read+0xe0>)
 80020a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020a6:	f7fe fbe1 	bl	800086c <__aeabi_ddiv>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fd89 	bl	8000bc8 <__aeabi_d2uiz>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <IR_Left_Read+0xf4>)
 80020bc:	801a      	strh	r2, [r3, #0]
}
 80020be:	bf00      	nop
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	f3af 8000 	nop.w
 80020c8:	33333333 	.word	0x33333333
 80020cc:	3fc33333 	.word	0x3fc33333
 80020d0:	33333333 	.word	0x33333333
 80020d4:	3feb3333 	.word	0x3feb3333
 80020d8:	f5c28f5c 	.word	0xf5c28f5c
 80020dc:	40655428 	.word	0x40655428
 80020e0:	c28f5c29 	.word	0xc28f5c29
 80020e4:	40dc6515 	.word	0x40dc6515
 80020e8:	200001fc 	.word	0x200001fc
 80020ec:	20000538 	.word	0x20000538
 80020f0:	2000053c 	.word	0x2000053c
 80020f4:	20000540 	.word	0x20000540

080020f8 <IR_Right_Read>:

void IR_Right_Read() {
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80020fc:	4838      	ldr	r0, [pc, #224]	@ (80021e0 <IR_Right_Read+0xe8>)
 80020fe:	f002 f829 	bl	8004154 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8002102:	2164      	movs	r1, #100	@ 0x64
 8002104:	4836      	ldr	r0, [pc, #216]	@ (80021e0 <IR_Right_Read+0xe8>)
 8002106:	f002 f92a 	bl	800435e <HAL_ADC_PollForConversion>
	RawRightIRVal = HAL_ADC_GetValue(&hadc2);
 800210a:	4835      	ldr	r0, [pc, #212]	@ (80021e0 <IR_Right_Read+0xe8>)
 800210c:	f002 f9b2 	bl	8004474 <HAL_ADC_GetValue>
 8002110:	4603      	mov	r3, r0
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <IR_Right_Read+0xec>)
 8002116:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8002118:	4831      	ldr	r0, [pc, #196]	@ (80021e0 <IR_Right_Read+0xe8>)
 800211a:	f002 f8ed 	bl	80042f8 <HAL_ADC_Stop>

	//LPF, Filter coefficient = 0.15
	RightIRfiltered = (0.15 * RawRightIRVal) + ((1 - 0.15) * RightIRfiltered);
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <IR_Right_Read+0xec>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa0e 	bl	8000544 <__aeabi_i2d>
 8002128:	a325      	add	r3, pc, #148	@ (adr r3, 80021c0 <IR_Right_Read+0xc8>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fa73 	bl	8000618 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	461d      	mov	r5, r3
 800213a:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <IR_Right_Read+0xf0>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa00 	bl	8000544 <__aeabi_i2d>
 8002144:	a320      	add	r3, pc, #128	@ (adr r3, 80021c8 <IR_Right_Read+0xd0>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fa65 	bl	8000618 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f8a9 	bl	80002ac <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe fd31 	bl	8000bc8 <__aeabi_d2uiz>
 8002166:	4603      	mov	r3, r0
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <IR_Right_Read+0xf0>)
 800216c:	801a      	strh	r2, [r3, #0]

	if(RightIRfiltered <450) 		//cap the IR filter range to be from 0-70cm+-, else it will go haywire
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <IR_Right_Read+0xf0>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002176:	d203      	bcs.n	8002180 <IR_Right_Read+0x88>
		IRDistance_Right = 101;
 8002178:	4b1c      	ldr	r3, [pc, #112]	@ (80021ec <IR_Right_Read+0xf4>)
 800217a:	2265      	movs	r2, #101	@ 0x65
 800217c:	801a      	strh	r2, [r3, #0]
	else {
		//Eqn from calibration and testing
		IRDistance_Right = 30181.23/ (RightIRfiltered-133.62);
	//IRDistance_Right = 29076.34/(RightIRfiltered-170.63);
	}
}
 800217e:	e01a      	b.n	80021b6 <IR_Right_Read+0xbe>
		IRDistance_Right = 30181.23/ (RightIRfiltered-133.62);
 8002180:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <IR_Right_Read+0xf0>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9dd 	bl	8000544 <__aeabi_i2d>
 800218a:	a311      	add	r3, pc, #68	@ (adr r3, 80021d0 <IR_Right_Read+0xd8>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f88a 	bl	80002a8 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	a10f      	add	r1, pc, #60	@ (adr r1, 80021d8 <IR_Right_Read+0xe0>)
 800219a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800219e:	f7fe fb65 	bl	800086c <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fd0d 	bl	8000bc8 <__aeabi_d2uiz>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <IR_Right_Read+0xf4>)
 80021b4:	801a      	strh	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w
 80021c0:	33333333 	.word	0x33333333
 80021c4:	3fc33333 	.word	0x3fc33333
 80021c8:	33333333 	.word	0x33333333
 80021cc:	3feb3333 	.word	0x3feb3333
 80021d0:	0a3d70a4 	.word	0x0a3d70a4
 80021d4:	4060b3d7 	.word	0x4060b3d7
 80021d8:	b851eb85 	.word	0xb851eb85
 80021dc:	40dd794e 	.word	0x40dd794e
 80021e0:	20000244 	.word	0x20000244
 80021e4:	2000053a 	.word	0x2000053a
 80021e8:	2000053e 	.word	0x2000053e
 80021ec:	20000542 	.word	0x20000542

080021f0 <Control_Drift>:


void Control_Drift() {		//control drift to go straight
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	  //control servo angle to go straight
			  if(total_angle < -2) {	//veering to the right
 80021f4:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <Control_Drift+0x90>)
 80021f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002202:	f7fe fc7b 	bl	8000afc <__aeabi_dcmplt>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <Control_Drift+0x24>
				  pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <Control_Drift+0x94>)
 800220e:	227f      	movs	r2, #127	@ 0x7f
 8002210:	801a      	strh	r2, [r3, #0]
				  pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
			  }
			  else {
				  pwmVal_servo = ((19 * total_angle) / 5 + SERVOCENTER);
			  }
}
 8002212:	e033      	b.n	800227c <Control_Drift+0x8c>
			  else if(total_angle > 2) {
 8002214:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <Control_Drift+0x90>)
 8002216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002222:	f7fe fc89 	bl	8000b38 <__aeabi_dcmpgt>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <Control_Drift+0x44>
				  pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 800222c:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <Control_Drift+0x94>)
 800222e:	22a5      	movs	r2, #165	@ 0xa5
 8002230:	801a      	strh	r2, [r3, #0]
}
 8002232:	e023      	b.n	800227c <Control_Drift+0x8c>
				  pwmVal_servo = ((19 * total_angle) / 5 + SERVOCENTER);
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <Control_Drift+0x90>)
 8002236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <Control_Drift+0x98>)
 8002240:	f7fe f9ea 	bl	8000618 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <Control_Drift+0x9c>)
 8002252:	f7fe fb0b 	bl	800086c <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <Control_Drift+0xa0>)
 8002264:	f7fe f822 	bl	80002ac <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fcaa 	bl	8000bc8 <__aeabi_d2uiz>
 8002274:	4603      	mov	r3, r0
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b02      	ldr	r3, [pc, #8]	@ (8002284 <Control_Drift+0x94>)
 800227a:	801a      	strh	r2, [r3, #0]
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200004f8 	.word	0x200004f8
 8002284:	20000000 	.word	0x20000000
 8002288:	40330000 	.word	0x40330000
 800228c:	40140000 	.word	0x40140000
 8002290:	40624000 	.word	0x40624000

08002294 <Task2IRmoveStraight>:

void Task2IRmoveStraight() {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	  //**************move parallel along the obstacle till nothing is seen on the side of robot
	selfModifyPinsFlag =1 ;
 8002298:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <Task2IRmoveStraight+0x94>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]
	e_brake = 0;
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <Task2IRmoveStraight+0x98>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

	//gyro RESET after turning, without whole STM reset
	total_angle =0;
 80022a4:	4922      	ldr	r1, [pc, #136]	@ (8002330 <Task2IRmoveStraight+0x9c>)
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9c1 2300 	strd	r2, r3, [r1]
	target_angle = 0;
 80022b2:	4920      	ldr	r1, [pc, #128]	@ (8002334 <Task2IRmoveStraight+0xa0>)
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9c1 2300 	strd	r2, r3, [r1]
	pwmVal_servo = SERVOCENTER;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <Task2IRmoveStraight+0xa4>)
 80022c2:	2292      	movs	r2, #146	@ 0x92
 80022c4:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 80022c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80022ca:	f007 f9ed 	bl	80096a8 <osDelay>

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);		//left wheel fwd direction
 80022ce:	2201      	movs	r2, #1
 80022d0:	2108      	movs	r1, #8
 80022d2:	481a      	ldr	r0, [pc, #104]	@ (800233c <Task2IRmoveStraight+0xa8>)
 80022d4:	f002 fe3a 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);	//right wheel fwd direction
 80022d8:	2200      	movs	r2, #0
 80022da:	2104      	movs	r1, #4
 80022dc:	4817      	ldr	r0, [pc, #92]	@ (800233c <Task2IRmoveStraight+0xa8>)
 80022de:	f002 fe35 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2110      	movs	r1, #16
 80022e6:	4815      	ldr	r0, [pc, #84]	@ (800233c <Task2IRmoveStraight+0xa8>)
 80022e8:	f002 fe30 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2120      	movs	r1, #32
 80022f0:	4812      	ldr	r0, [pc, #72]	@ (800233c <Task2IRmoveStraight+0xa8>)
 80022f2:	f002 fe2b 	bl	8004f4c <HAL_GPIO_WritePin>

	  while(*IRforTask2 < 50) {
 80022f6:	e009      	b.n	800230c <Task2IRmoveStraight+0x78>

		  pwmVal_Left = pwmVal_Right = 3500;
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <Task2IRmoveStraight+0xac>)
 80022fa:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <Task2IRmoveStraight+0xac>)
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <Task2IRmoveStraight+0xb0>)
 8002306:	801a      	strh	r2, [r3, #0]
		  Control_Drift();
 8002308:	f7ff ff72 	bl	80021f0 <Control_Drift>
	  while(*IRforTask2 < 50) {
 800230c:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <Task2IRmoveStraight+0xb4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	2b31      	cmp	r3, #49	@ 0x31
 8002314:	d9f0      	bls.n	80022f8 <Task2IRmoveStraight+0x64>
	  }
	  e_brake = 1;
 8002316:	4b05      	ldr	r3, [pc, #20]	@ (800232c <Task2IRmoveStraight+0x98>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
	  selfModifyPinsFlag = 0;
 800231c:	4b02      	ldr	r3, [pc, #8]	@ (8002328 <Task2IRmoveStraight+0x94>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
	  //moveCarStraight(-5);

}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200004d4 	.word	0x200004d4
 800232c:	200004d0 	.word	0x200004d0
 8002330:	200004f8 	.word	0x200004f8
 8002334:	200004e8 	.word	0x200004e8
 8002338:	20000000 	.word	0x20000000
 800233c:	40020000 	.word	0x40020000
 8002340:	200004c8 	.word	0x200004c8
 8002344:	200004ca 	.word	0x200004ca
 8002348:	20000544 	.word	0x20000544

0800234c <Obstacle1Ultra>:

void Obstacle1Ultra() {
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0

	//START task 2. reset gyro
	selfModifyPinsFlag =1 ;
 8002350:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <Obstacle1Ultra+0x104>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
	total_angle =0;
 8002356:	493f      	ldr	r1, [pc, #252]	@ (8002454 <Obstacle1Ultra+0x108>)
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9c1 2300 	strd	r2, r3, [r1]
	target_angle = 0;
 8002364:	493c      	ldr	r1, [pc, #240]	@ (8002458 <Obstacle1Ultra+0x10c>)
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	e9c1 2300 	strd	r2, r3, [r1]
	e_brake = 0;
 8002372:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <Obstacle1Ultra+0x110>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
	pwmVal_servo = SERVOCENTER;
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <Obstacle1Ultra+0x114>)
 800237a:	2292      	movs	r2, #146	@ 0x92
 800237c:	801a      	strh	r2, [r3, #0]

	osDelay(50);
 800237e:	2032      	movs	r0, #50	@ 0x32
 8002380:	f007 f992 	bl	80096a8 <osDelay>

	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);		//left wheel fwd direction
 8002384:	2201      	movs	r2, #1
 8002386:	2108      	movs	r1, #8
 8002388:	4836      	ldr	r0, [pc, #216]	@ (8002464 <Obstacle1Ultra+0x118>)
 800238a:	f002 fddf 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);	//right wheel fwd direction
 800238e:	2200      	movs	r2, #0
 8002390:	2104      	movs	r1, #4
 8002392:	4834      	ldr	r0, [pc, #208]	@ (8002464 <Obstacle1Ultra+0x118>)
 8002394:	f002 fdda 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002398:	2201      	movs	r2, #1
 800239a:	2110      	movs	r1, #16
 800239c:	4831      	ldr	r0, [pc, #196]	@ (8002464 <Obstacle1Ultra+0x118>)
 800239e:	f002 fdd5 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2120      	movs	r1, #32
 80023a6:	482f      	ldr	r0, [pc, #188]	@ (8002464 <Obstacle1Ultra+0x118>)
 80023a8:	f002 fdd0 	bl	8004f4c <HAL_GPIO_WritePin>


	  while (echo_dist >17) { 	//actual echo_dist stops at 15cm
 80023ac:	e03c      	b.n	8002428 <Obstacle1Ultra+0xdc>
		  if(echo_dist >50){
 80023ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002468 <Obstacle1Ultra+0x11c>)
 80023b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	4b2c      	ldr	r3, [pc, #176]	@ (800246c <Obstacle1Ultra+0x120>)
 80023ba:	f7fe fbbd 	bl	8000b38 <__aeabi_dcmpgt>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <Obstacle1Ultra+0x8a>
				pwmVal_Left = 6000;
 80023c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <Obstacle1Ultra+0x124>)
 80023c6:	f241 7270 	movw	r2, #6000	@ 0x1770
 80023ca:	801a      	strh	r2, [r3, #0]
				pwmVal_Right = 6000;
 80023cc:	4b29      	ldr	r3, [pc, #164]	@ (8002474 <Obstacle1Ultra+0x128>)
 80023ce:	f241 7270 	movw	r2, #6000	@ 0x1770
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	e026      	b.n	8002424 <Obstacle1Ultra+0xd8>
		  }
		  else if(echo_dist >40)
 80023d6:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <Obstacle1Ultra+0x11c>)
 80023d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <Obstacle1Ultra+0x12c>)
 80023e2:	f7fe fba9 	bl	8000b38 <__aeabi_dcmpgt>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <Obstacle1Ultra+0xb2>
		  {
				pwmVal_Left = 1700;
 80023ec:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <Obstacle1Ultra+0x124>)
 80023ee:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80023f2:	801a      	strh	r2, [r3, #0]
				pwmVal_Right = 1700;
 80023f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002474 <Obstacle1Ultra+0x128>)
 80023f6:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80023fa:	801a      	strh	r2, [r3, #0]
 80023fc:	e012      	b.n	8002424 <Obstacle1Ultra+0xd8>
		  }
		  else if(echo_dist >17) {
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <Obstacle1Ultra+0x11c>)
 8002400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <Obstacle1Ultra+0x130>)
 800240a:	f7fe fb95 	bl	8000b38 <__aeabi_dcmpgt>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <Obstacle1Ultra+0xd8>
			  pwmVal_Left = 1500;
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <Obstacle1Ultra+0x124>)
 8002416:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800241a:	801a      	strh	r2, [r3, #0]
			  pwmVal_Right = 1500;
 800241c:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <Obstacle1Ultra+0x128>)
 800241e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002422:	801a      	strh	r2, [r3, #0]
		  }
		  Control_Drift();
 8002424:	f7ff fee4 	bl	80021f0 <Control_Drift>
	  while (echo_dist >17) { 	//actual echo_dist stops at 15cm
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <Obstacle1Ultra+0x11c>)
 800242a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b12      	ldr	r3, [pc, #72]	@ (800247c <Obstacle1Ultra+0x130>)
 8002434:	f7fe fb80 	bl	8000b38 <__aeabi_dcmpgt>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1b7      	bne.n	80023ae <Obstacle1Ultra+0x62>
	  }

	  e_brake = 1;
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <Obstacle1Ultra+0x110>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]
	  selfModifyPinsFlag = 0;
 8002444:	4b02      	ldr	r3, [pc, #8]	@ (8002450 <Obstacle1Ultra+0x104>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200004d4 	.word	0x200004d4
 8002454:	200004f8 	.word	0x200004f8
 8002458:	200004e8 	.word	0x200004e8
 800245c:	200004d0 	.word	0x200004d0
 8002460:	20000000 	.word	0x20000000
 8002464:	40020000 	.word	0x40020000
 8002468:	20000520 	.word	0x20000520
 800246c:	40490000 	.word	0x40490000
 8002470:	200004ca 	.word	0x200004ca
 8002474:	200004c8 	.word	0x200004c8
 8002478:	40440000 	.word	0x40440000
 800247c:	40310000 	.word	0x40310000

08002480 <Obstacle1_Move>:


void Obstacle1_Move() {		//
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	//if right arrow
	if(aRxBuffer[4] == 'R') {
 8002484:	4b3e      	ldr	r3, [pc, #248]	@ (8002580 <Obstacle1_Move+0x100>)
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	2b52      	cmp	r3, #82	@ 0x52
 800248a:	d10f      	bne.n	80024ac <Obstacle1_Move+0x2c>
		  moveCarRight(58);
 800248c:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8002550 <Obstacle1_Move+0xd0>
 8002490:	f7ff faaa 	bl	80019e8 <moveCarRight>
		  moveCarLeft(116);
 8002494:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8002558 <Obstacle1_Move+0xd8>
 8002498:	f7ff fad8 	bl	8001a4c <moveCarLeft>
		  moveCarStraight(3);
 800249c:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8002560 <Obstacle1_Move+0xe0>
 80024a0:	f7ff fa36 	bl	8001910 <moveCarStraight>
		  moveCarRight(58);
 80024a4:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 8002550 <Obstacle1_Move+0xd0>
 80024a8:	f7ff fa9e 	bl	80019e8 <moveCarRight>

	}
	  //if left arrow
	if(aRxBuffer[4] == 'L') {
 80024ac:	4b34      	ldr	r3, [pc, #208]	@ (8002580 <Obstacle1_Move+0x100>)
 80024ae:	791b      	ldrb	r3, [r3, #4]
 80024b0:	2b4c      	cmp	r3, #76	@ 0x4c
 80024b2:	d10f      	bne.n	80024d4 <Obstacle1_Move+0x54>
	  moveCarLeft(58);
 80024b4:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8002550 <Obstacle1_Move+0xd0>
 80024b8:	f7ff fac8 	bl	8001a4c <moveCarLeft>
	  moveCarRight(116);
 80024bc:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8002558 <Obstacle1_Move+0xd8>
 80024c0:	f7ff fa92 	bl	80019e8 <moveCarRight>
	  moveCarStraight(3);
 80024c4:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8002560 <Obstacle1_Move+0xe0>
 80024c8:	f7ff fa22 	bl	8001910 <moveCarStraight>
	  moveCarLeft(58);
 80024cc:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8002550 <Obstacle1_Move+0xd0>
 80024d0:	f7ff fabc 	bl	8001a4c <moveCarLeft>
	}

	osDelay(100);
 80024d4:	2064      	movs	r0, #100	@ 0x64
 80024d6:	f007 f8e7 	bl	80096a8 <osDelay>
	if(echo_dist < 10)
 80024da:	4b2a      	ldr	r3, [pc, #168]	@ (8002584 <Obstacle1_Move+0x104>)
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b28      	ldr	r3, [pc, #160]	@ (8002588 <Obstacle1_Move+0x108>)
 80024e6:	f7fe fb09 	bl	8000afc <__aeabi_dcmplt>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <Obstacle1_Move+0x7a>
		moveCarStraight(-25);
 80024f0:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8002568 <Obstacle1_Move+0xe8>
 80024f4:	f7ff fa0c 	bl	8001910 <moveCarStraight>
 80024f8:	e01e      	b.n	8002538 <Obstacle1_Move+0xb8>
	else if(echo_dist < 20)
 80024fa:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <Obstacle1_Move+0x104>)
 80024fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	4b21      	ldr	r3, [pc, #132]	@ (800258c <Obstacle1_Move+0x10c>)
 8002506:	f7fe faf9 	bl	8000afc <__aeabi_dcmplt>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <Obstacle1_Move+0x9a>
		moveCarStraight(-15);
 8002510:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8002570 <Obstacle1_Move+0xf0>
 8002514:	f7ff f9fc 	bl	8001910 <moveCarStraight>
 8002518:	e00e      	b.n	8002538 <Obstacle1_Move+0xb8>
	else if(echo_dist < 25)
 800251a:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <Obstacle1_Move+0x104>)
 800251c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <Obstacle1_Move+0x110>)
 8002526:	f7fe fae9 	bl	8000afc <__aeabi_dcmplt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <Obstacle1_Move+0xb8>
		  moveCarStraight(-10);
 8002530:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8002578 <Obstacle1_Move+0xf8>
 8002534:	f7ff f9ec 	bl	8001910 <moveCarStraight>

	pwmVal_servo = SERVOCENTER;
 8002538:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <Obstacle1_Move+0x114>)
 800253a:	2292      	movs	r2, #146	@ 0x92
 800253c:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 800253e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002542:	f007 f8b1 	bl	80096a8 <osDelay>

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	f3af 8000 	nop.w
 8002550:	00000000 	.word	0x00000000
 8002554:	404d0000 	.word	0x404d0000
 8002558:	00000000 	.word	0x00000000
 800255c:	405d0000 	.word	0x405d0000
 8002560:	00000000 	.word	0x00000000
 8002564:	40080000 	.word	0x40080000
 8002568:	00000000 	.word	0x00000000
 800256c:	c0390000 	.word	0xc0390000
 8002570:	00000000 	.word	0x00000000
 8002574:	c02e0000 	.word	0xc02e0000
 8002578:	00000000 	.word	0x00000000
 800257c:	c0240000 	.word	0xc0240000
 8002580:	200004b8 	.word	0x200004b8
 8002584:	20000520 	.word	0x20000520
 8002588:	40240000 	.word	0x40240000
 800258c:	40340000 	.word	0x40340000
 8002590:	40390000 	.word	0x40390000
 8002594:	20000000 	.word	0x20000000

08002598 <Obstacle2Ultra>:

void Obstacle2Ultra() {
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
	selfModifyPinsFlag =1 ;
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <Obstacle2Ultra+0xf4>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
	e_brake = 0;
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <Obstacle2Ultra+0xf8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 0; 	//O2distanceTravelled
 80025a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <Obstacle2Ultra+0xfc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
	osDelay(25);
 80025ae:	2019      	movs	r0, #25
 80025b0:	f007 f87a 	bl	80096a8 <osDelay>

	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);		//left wheel fwd direction
 80025b4:	2201      	movs	r2, #1
 80025b6:	2108      	movs	r1, #8
 80025b8:	4837      	ldr	r0, [pc, #220]	@ (8002698 <Obstacle2Ultra+0x100>)
 80025ba:	f002 fcc7 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);	//right wheel fwd direction
 80025be:	2200      	movs	r2, #0
 80025c0:	2104      	movs	r1, #4
 80025c2:	4835      	ldr	r0, [pc, #212]	@ (8002698 <Obstacle2Ultra+0x100>)
 80025c4:	f002 fcc2 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2110      	movs	r1, #16
 80025cc:	4832      	ldr	r0, [pc, #200]	@ (8002698 <Obstacle2Ultra+0x100>)
 80025ce:	f002 fcbd 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2120      	movs	r1, #32
 80025d6:	4830      	ldr	r0, [pc, #192]	@ (8002698 <Obstacle2Ultra+0x100>)
 80025d8:	f002 fcb8 	bl	8004f4c <HAL_GPIO_WritePin>


	  while (echo_dist >25) { 	//actual echo_dist stops at 23cm
 80025dc:	e03c      	b.n	8002658 <Obstacle2Ultra+0xc0>
		  if(echo_dist >50){
 80025de:	4b2f      	ldr	r3, [pc, #188]	@ (800269c <Obstacle2Ultra+0x104>)
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <Obstacle2Ultra+0x108>)
 80025ea:	f7fe faa5 	bl	8000b38 <__aeabi_dcmpgt>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <Obstacle2Ultra+0x6e>
				pwmVal_Left = 6000;
 80025f4:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <Obstacle2Ultra+0x10c>)
 80025f6:	f241 7270 	movw	r2, #6000	@ 0x1770
 80025fa:	801a      	strh	r2, [r3, #0]
				pwmVal_Right = 6000;
 80025fc:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <Obstacle2Ultra+0x110>)
 80025fe:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002602:	801a      	strh	r2, [r3, #0]
 8002604:	e026      	b.n	8002654 <Obstacle2Ultra+0xbc>
		  }
		  else if(echo_dist >40)
 8002606:	4b25      	ldr	r3, [pc, #148]	@ (800269c <Obstacle2Ultra+0x104>)
 8002608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <Obstacle2Ultra+0x114>)
 8002612:	f7fe fa91 	bl	8000b38 <__aeabi_dcmpgt>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <Obstacle2Ultra+0x96>
		  {
				pwmVal_Left = 1700;
 800261c:	4b21      	ldr	r3, [pc, #132]	@ (80026a4 <Obstacle2Ultra+0x10c>)
 800261e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8002622:	801a      	strh	r2, [r3, #0]
				pwmVal_Right = 1700;
 8002624:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <Obstacle2Ultra+0x110>)
 8002626:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800262a:	801a      	strh	r2, [r3, #0]
 800262c:	e012      	b.n	8002654 <Obstacle2Ultra+0xbc>
		  }
		  else if(echo_dist >25) {
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <Obstacle2Ultra+0x104>)
 8002630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <Obstacle2Ultra+0x118>)
 800263a:	f7fe fa7d 	bl	8000b38 <__aeabi_dcmpgt>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <Obstacle2Ultra+0xbc>
			  pwmVal_Left = 1500;
 8002644:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <Obstacle2Ultra+0x10c>)
 8002646:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800264a:	801a      	strh	r2, [r3, #0]
			  pwmVal_Right = 1500;
 800264c:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <Obstacle2Ultra+0x110>)
 800264e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002652:	801a      	strh	r2, [r3, #0]
		  }

		  Control_Drift();
 8002654:	f7ff fdcc 	bl	80021f0 <Control_Drift>
	  while (echo_dist >25) { 	//actual echo_dist stops at 23cm
 8002658:	4b10      	ldr	r3, [pc, #64]	@ (800269c <Obstacle2Ultra+0x104>)
 800265a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <Obstacle2Ultra+0x118>)
 8002664:	f7fe fa68 	bl	8000b38 <__aeabi_dcmpgt>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1b7      	bne.n	80025de <Obstacle2Ultra+0x46>
	  }
	  e_brake = 1;
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <Obstacle2Ultra+0xf8>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]
	  selfModifyPinsFlag = 0;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <Obstacle2Ultra+0xf4>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
	  osDelay(100);	//delay to get more accurate reading of O2distanceTravelled
 800267a:	2064      	movs	r0, #100	@ 0x64
 800267c:	f007 f814 	bl	80096a8 <osDelay>
	  O2distanceTravelled = leftEncoderVal;
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <Obstacle2Ultra+0xfc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <Obstacle2Ultra+0x11c>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200004d4 	.word	0x200004d4
 8002690:	200004d0 	.word	0x200004d0
 8002694:	200004dc 	.word	0x200004dc
 8002698:	40020000 	.word	0x40020000
 800269c:	20000520 	.word	0x20000520
 80026a0:	40490000 	.word	0x40490000
 80026a4:	200004ca 	.word	0x200004ca
 80026a8:	200004c8 	.word	0x200004c8
 80026ac:	40440000 	.word	0x40440000
 80026b0:	40390000 	.word	0x40390000
 80026b4:	200004f0 	.word	0x200004f0

080026b8 <Obstacle2_Move>:

void Obstacle2_Move () {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
//if right arrow

	if(aRxBuffer[4] == 'R') {		//use IRDistance_Left
 80026bc:	4bae      	ldr	r3, [pc, #696]	@ (8002978 <Obstacle2_Move+0x2c0>)
 80026be:	791b      	ldrb	r3, [r3, #4]
 80026c0:	2b52      	cmp	r3, #82	@ 0x52
 80026c2:	d107      	bne.n	80026d4 <Obstacle2_Move+0x1c>
		IRforTask2 = &IRDistance_Left;
 80026c4:	4bad      	ldr	r3, [pc, #692]	@ (800297c <Obstacle2_Move+0x2c4>)
 80026c6:	4aae      	ldr	r2, [pc, #696]	@ (8002980 <Obstacle2_Move+0x2c8>)
 80026c8:	601a      	str	r2, [r3, #0]
		  moveCarRight(90);
 80026ca:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 8002950 <Obstacle2_Move+0x298>
 80026ce:	f7ff f98b 	bl	80019e8 <moveCarRight>
 80026d2:	e00a      	b.n	80026ea <Obstacle2_Move+0x32>
	}
	  //if left arrow
	else if(aRxBuffer[4] == 'L') {	//use IRDistance_Right
 80026d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002978 <Obstacle2_Move+0x2c0>)
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	2b4c      	cmp	r3, #76	@ 0x4c
 80026da:	d106      	bne.n	80026ea <Obstacle2_Move+0x32>
		IRforTask2 = &IRDistance_Right;
 80026dc:	4ba7      	ldr	r3, [pc, #668]	@ (800297c <Obstacle2_Move+0x2c4>)
 80026de:	4aa9      	ldr	r2, [pc, #676]	@ (8002984 <Obstacle2_Move+0x2cc>)
 80026e0:	601a      	str	r2, [r3, #0]
		moveCarLeft(90);
 80026e2:	ed9f 0b9b 	vldr	d0, [pc, #620]	@ 8002950 <Obstacle2_Move+0x298>
 80026e6:	f7ff f9b1 	bl	8001a4c <moveCarLeft>
	}
	osDelay(500);
 80026ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026ee:	f006 ffdb 	bl	80096a8 <osDelay>
	if(*IRforTask2 >50) { 		//correction to move back if exceeded obstacle length after turning
 80026f2:	4ba2      	ldr	r3, [pc, #648]	@ (800297c <Obstacle2_Move+0x2c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2b32      	cmp	r3, #50	@ 0x32
 80026fa:	d903      	bls.n	8002704 <Obstacle2_Move+0x4c>
		moveCarStraight(-25);
 80026fc:	ed9f 0b96 	vldr	d0, [pc, #600]	@ 8002958 <Obstacle2_Move+0x2a0>
 8002700:	f7ff f906 	bl	8001910 <moveCarStraight>
	}

	Task2IRmoveStraight();
 8002704:	f7ff fdc6 	bl	8002294 <Task2IRmoveStraight>
 * 		obstacle2			^
 * ********************		|
 * 						-->
 *
 */
	if(aRxBuffer[4] == 'L')		    moveCarRight(180);
 8002708:	4b9b      	ldr	r3, [pc, #620]	@ (8002978 <Obstacle2_Move+0x2c0>)
 800270a:	791b      	ldrb	r3, [r3, #4]
 800270c:	2b4c      	cmp	r3, #76	@ 0x4c
 800270e:	d104      	bne.n	800271a <Obstacle2_Move+0x62>
 8002710:	ed9f 0b93 	vldr	d0, [pc, #588]	@ 8002960 <Obstacle2_Move+0x2a8>
 8002714:	f7ff f968 	bl	80019e8 <moveCarRight>
 8002718:	e007      	b.n	800272a <Obstacle2_Move+0x72>

	else if(aRxBuffer[4] == 'R') 	moveCarLeft(180);
 800271a:	4b97      	ldr	r3, [pc, #604]	@ (8002978 <Obstacle2_Move+0x2c0>)
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	2b52      	cmp	r3, #82	@ 0x52
 8002720:	d103      	bne.n	800272a <Obstacle2_Move+0x72>
 8002722:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 8002960 <Obstacle2_Move+0x2a8>
 8002726:	f7ff f991 	bl	8001a4c <moveCarLeft>

	moveCarStraight(7);
 800272a:	ed9f 0b8f 	vldr	d0, [pc, #572]	@ 8002968 <Obstacle2_Move+0x2b0>
 800272e:	f7ff f8ef 	bl	8001910 <moveCarStraight>
	Task2IRmoveStraight();
 8002732:	f7ff fdaf 	bl	8002294 <Task2IRmoveStraight>

	if(aRxBuffer[4] == 'L') 	    moveCarRight(90);
 8002736:	4b90      	ldr	r3, [pc, #576]	@ (8002978 <Obstacle2_Move+0x2c0>)
 8002738:	791b      	ldrb	r3, [r3, #4]
 800273a:	2b4c      	cmp	r3, #76	@ 0x4c
 800273c:	d104      	bne.n	8002748 <Obstacle2_Move+0x90>
 800273e:	ed9f 0b84 	vldr	d0, [pc, #528]	@ 8002950 <Obstacle2_Move+0x298>
 8002742:	f7ff f951 	bl	80019e8 <moveCarRight>
 8002746:	e007      	b.n	8002758 <Obstacle2_Move+0xa0>
	else if(aRxBuffer[4] == 'R') 	moveCarLeft(90);
 8002748:	4b8b      	ldr	r3, [pc, #556]	@ (8002978 <Obstacle2_Move+0x2c0>)
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	2b52      	cmp	r3, #82	@ 0x52
 800274e:	d103      	bne.n	8002758 <Obstacle2_Move+0xa0>
 8002750:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 8002950 <Obstacle2_Move+0x298>
 8002754:	f7ff f97a 	bl	8001a4c <moveCarLeft>


	/****************Start task back to carpark**************************/
	pwmVal_servo = SERVOCENTER;
 8002758:	4b8b      	ldr	r3, [pc, #556]	@ (8002988 <Obstacle2_Move+0x2d0>)
 800275a:	2292      	movs	r2, #146	@ 0x92
 800275c:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 800275e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002762:	f006 ffa1 	bl	80096a8 <osDelay>
	total_angle =0;
 8002766:	4989      	ldr	r1, [pc, #548]	@ (800298c <Obstacle2_Move+0x2d4>)
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9c1 2300 	strd	r2, r3, [r1]
	target_angle = 0;
 8002774:	4986      	ldr	r1, [pc, #536]	@ (8002990 <Obstacle2_Move+0x2d8>)
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9c1 2300 	strd	r2, r3, [r1]
	selfModifyPinsFlag = 1;
 8002782:	4b84      	ldr	r3, [pc, #528]	@ (8002994 <Obstacle2_Move+0x2dc>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
	e_brake = 0;
 8002788:	4b83      	ldr	r3, [pc, #524]	@ (8002998 <Obstacle2_Move+0x2e0>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);		//left wheel fwd direction
 800278e:	2201      	movs	r2, #1
 8002790:	2108      	movs	r1, #8
 8002792:	4882      	ldr	r0, [pc, #520]	@ (800299c <Obstacle2_Move+0x2e4>)
 8002794:	f002 fbda 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);	//right wheel fwd direction
 8002798:	2200      	movs	r2, #0
 800279a:	2104      	movs	r1, #4
 800279c:	487f      	ldr	r0, [pc, #508]	@ (800299c <Obstacle2_Move+0x2e4>)
 800279e:	f002 fbd5 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	2110      	movs	r1, #16
 80027a6:	487d      	ldr	r0, [pc, #500]	@ (800299c <Obstacle2_Move+0x2e4>)
 80027a8:	f002 fbd0 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2120      	movs	r1, #32
 80027b0:	487a      	ldr	r0, [pc, #488]	@ (800299c <Obstacle2_Move+0x2e4>)
 80027b2:	f002 fbcb 	bl	8004f4c <HAL_GPIO_WritePin>

	  pwmVal_Left = 6000;
 80027b6:	4b7a      	ldr	r3, [pc, #488]	@ (80029a0 <Obstacle2_Move+0x2e8>)
 80027b8:	f241 7270 	movw	r2, #6000	@ 0x1770
 80027bc:	801a      	strh	r2, [r3, #0]
	  pwmVal_Right = 6000;
 80027be:	4b79      	ldr	r3, [pc, #484]	@ (80029a4 <Obstacle2_Move+0x2ec>)
 80027c0:	f241 7270 	movw	r2, #6000	@ 0x1770
 80027c4:	801a      	strh	r2, [r3, #0]
	  leftEncoderVal = 0;
 80027c6:	4b78      	ldr	r3, [pc, #480]	@ (80029a8 <Obstacle2_Move+0x2f0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
	  //OFFSET (in cm) is to account for extra distance to travel to get past O1 when returning back
	  //distance travelled(cm) = (leftEncoderVal / 1500) * 20.4 ; (1500 counts = 1 rev, 20.4cm = circumference of wheel)

	  // formula = ((OFFSET/20.4) * 1500)

	  while(leftEncoderVal < (O2distanceTravelled + 5515) ) {	//OFFSET = 70cm = 5515 (please update these to keep track of our offset)
 80027cc:	e001      	b.n	80027d2 <Obstacle2_Move+0x11a>
		  Control_Drift();
 80027ce:	f7ff fd0f 	bl	80021f0 <Control_Drift>
	  while(leftEncoderVal < (O2distanceTravelled + 5515) ) {	//OFFSET = 70cm = 5515 (please update these to keep track of our offset)
 80027d2:	4b76      	ldr	r3, [pc, #472]	@ (80029ac <Obstacle2_Move+0x2f4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f503 53ac 	add.w	r3, r3, #5504	@ 0x1580
 80027da:	330a      	adds	r3, #10
 80027dc:	4a72      	ldr	r2, [pc, #456]	@ (80029a8 <Obstacle2_Move+0x2f0>)
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4293      	cmp	r3, r2
 80027e2:	daf4      	bge.n	80027ce <Obstacle2_Move+0x116>
	  }
	  e_brake =1;
 80027e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002998 <Obstacle2_Move+0x2e0>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
	  selfModifyPinsFlag = 0;
 80027ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <Obstacle2_Move+0x2dc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

	if(aRxBuffer[4] == 'L')			moveCarRight(90);
 80027f0:	4b61      	ldr	r3, [pc, #388]	@ (8002978 <Obstacle2_Move+0x2c0>)
 80027f2:	791b      	ldrb	r3, [r3, #4]
 80027f4:	2b4c      	cmp	r3, #76	@ 0x4c
 80027f6:	d104      	bne.n	8002802 <Obstacle2_Move+0x14a>
 80027f8:	ed9f 0b55 	vldr	d0, [pc, #340]	@ 8002950 <Obstacle2_Move+0x298>
 80027fc:	f7ff f8f4 	bl	80019e8 <moveCarRight>
 8002800:	e007      	b.n	8002812 <Obstacle2_Move+0x15a>
	else if(aRxBuffer[4] == 'R') 	moveCarLeft(90);
 8002802:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <Obstacle2_Move+0x2c0>)
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	2b52      	cmp	r3, #82	@ 0x52
 8002808:	d103      	bne.n	8002812 <Obstacle2_Move+0x15a>
 800280a:	ed9f 0b51 	vldr	d0, [pc, #324]	@ 8002950 <Obstacle2_Move+0x298>
 800280e:	f7ff f91d 	bl	8001a4c <moveCarLeft>

	pwmVal_servo = SERVOCENTER;
 8002812:	4b5d      	ldr	r3, [pc, #372]	@ (8002988 <Obstacle2_Move+0x2d0>)
 8002814:	2292      	movs	r2, #146	@ 0x92
 8002816:	801a      	strh	r2, [r3, #0]
	//osDelay(250);
	moveCarStraight(-15);
 8002818:	ed9f 0b55 	vldr	d0, [pc, #340]	@ 8002970 <Obstacle2_Move+0x2b8>
 800281c:	f7ff f878 	bl	8001910 <moveCarStraight>
	selfModifyPinsFlag = 1;
 8002820:	4b5c      	ldr	r3, [pc, #368]	@ (8002994 <Obstacle2_Move+0x2dc>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]
	e_brake = 0;
 8002826:	4b5c      	ldr	r3, [pc, #368]	@ (8002998 <Obstacle2_Move+0x2e0>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);		//left wheel fwd direction
 800282c:	2201      	movs	r2, #1
 800282e:	2108      	movs	r1, #8
 8002830:	485a      	ldr	r0, [pc, #360]	@ (800299c <Obstacle2_Move+0x2e4>)
 8002832:	f002 fb8b 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);	//right wheel fwd direction
 8002836:	2200      	movs	r2, #0
 8002838:	2104      	movs	r1, #4
 800283a:	4858      	ldr	r0, [pc, #352]	@ (800299c <Obstacle2_Move+0x2e4>)
 800283c:	f002 fb86 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002840:	2201      	movs	r2, #1
 8002842:	2110      	movs	r1, #16
 8002844:	4855      	ldr	r0, [pc, #340]	@ (800299c <Obstacle2_Move+0x2e4>)
 8002846:	f002 fb81 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800284a:	2200      	movs	r2, #0
 800284c:	2120      	movs	r1, #32
 800284e:	4853      	ldr	r0, [pc, #332]	@ (800299c <Obstacle2_Move+0x2e4>)
 8002850:	f002 fb7c 	bl	8004f4c <HAL_GPIO_WritePin>

	total_angle =0;
 8002854:	494d      	ldr	r1, [pc, #308]	@ (800298c <Obstacle2_Move+0x2d4>)
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9c1 2300 	strd	r2, r3, [r1]
	target_angle = 0;
 8002862:	494b      	ldr	r1, [pc, #300]	@ (8002990 <Obstacle2_Move+0x2d8>)
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9c1 2300 	strd	r2, r3, [r1]


	//to detect O1 before turning in to face cp
	while(*IRforTask2 >45) {
 8002870:	e009      	b.n	8002886 <Obstacle2_Move+0x1ce>
		  pwmVal_Left = pwmVal_Right = 3500;
 8002872:	4b4c      	ldr	r3, [pc, #304]	@ (80029a4 <Obstacle2_Move+0x2ec>)
 8002874:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	4b4a      	ldr	r3, [pc, #296]	@ (80029a4 <Obstacle2_Move+0x2ec>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	4b48      	ldr	r3, [pc, #288]	@ (80029a0 <Obstacle2_Move+0x2e8>)
 8002880:	801a      	strh	r2, [r3, #0]
		  Control_Drift();
 8002882:	f7ff fcb5 	bl	80021f0 <Control_Drift>
	while(*IRforTask2 >45) {
 8002886:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <Obstacle2_Move+0x2c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b2d      	cmp	r3, #45	@ 0x2d
 800288e:	d8f0      	bhi.n	8002872 <Obstacle2_Move+0x1ba>
	}
	e_brake = 1;
 8002890:	4b41      	ldr	r3, [pc, #260]	@ (8002998 <Obstacle2_Move+0x2e0>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
	selfModifyPinsFlag = 0;
 8002896:	4b3f      	ldr	r3, [pc, #252]	@ (8002994 <Obstacle2_Move+0x2dc>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

	moveCarStraight(-15);
 800289c:	ed9f 0b34 	vldr	d0, [pc, #208]	@ 8002970 <Obstacle2_Move+0x2b8>
 80028a0:	f7ff f836 	bl	8001910 <moveCarStraight>

	if(aRxBuffer[4] == 'L')			moveCarLeft(90);
 80028a4:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <Obstacle2_Move+0x2c0>)
 80028a6:	791b      	ldrb	r3, [r3, #4]
 80028a8:	2b4c      	cmp	r3, #76	@ 0x4c
 80028aa:	d104      	bne.n	80028b6 <Obstacle2_Move+0x1fe>
 80028ac:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8002950 <Obstacle2_Move+0x298>
 80028b0:	f7ff f8cc 	bl	8001a4c <moveCarLeft>
 80028b4:	e007      	b.n	80028c6 <Obstacle2_Move+0x20e>
	else if(aRxBuffer[4] == 'R') 	moveCarRight(90);
 80028b6:	4b30      	ldr	r3, [pc, #192]	@ (8002978 <Obstacle2_Move+0x2c0>)
 80028b8:	791b      	ldrb	r3, [r3, #4]
 80028ba:	2b52      	cmp	r3, #82	@ 0x52
 80028bc:	d103      	bne.n	80028c6 <Obstacle2_Move+0x20e>
 80028be:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8002950 <Obstacle2_Move+0x298>
 80028c2:	f7ff f891 	bl	80019e8 <moveCarRight>
	//robot is now facing cp. CHIOOOOOONG TO ENDLINE!!!


	/////////////////////////////////////

	pwmVal_servo = SERVOCENTER;
 80028c6:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <Obstacle2_Move+0x2d0>)
 80028c8:	2292      	movs	r2, #146	@ 0x92
 80028ca:	801a      	strh	r2, [r3, #0]
	selfModifyPinsFlag =1 ;
 80028cc:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <Obstacle2_Move+0x2dc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
		total_angle =0;
 80028d2:	492e      	ldr	r1, [pc, #184]	@ (800298c <Obstacle2_Move+0x2d4>)
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9c1 2300 	strd	r2, r3, [r1]
		target_angle = 0;
 80028e0:	492b      	ldr	r1, [pc, #172]	@ (8002990 <Obstacle2_Move+0x2d8>)
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9c1 2300 	strd	r2, r3, [r1]
		e_brake = 0;
 80028ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <Obstacle2_Move+0x2e0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

		osDelay(300);
 80028f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80028f8:	f006 fed6 	bl	80096a8 <osDelay>

		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);		//left wheel fwd direction
 80028fc:	2201      	movs	r2, #1
 80028fe:	2108      	movs	r1, #8
 8002900:	4826      	ldr	r0, [pc, #152]	@ (800299c <Obstacle2_Move+0x2e4>)
 8002902:	f002 fb23 	bl	8004f4c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);	//right wheel fwd direction
 8002906:	2200      	movs	r2, #0
 8002908:	2104      	movs	r1, #4
 800290a:	4824      	ldr	r0, [pc, #144]	@ (800299c <Obstacle2_Move+0x2e4>)
 800290c:	f002 fb1e 	bl	8004f4c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	2110      	movs	r1, #16
 8002914:	4821      	ldr	r0, [pc, #132]	@ (800299c <Obstacle2_Move+0x2e4>)
 8002916:	f002 fb19 	bl	8004f4c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800291a:	2200      	movs	r2, #0
 800291c:	2120      	movs	r1, #32
 800291e:	481f      	ldr	r0, [pc, #124]	@ (800299c <Obstacle2_Move+0x2e4>)
 8002920:	f002 fb14 	bl	8004f4c <HAL_GPIO_WritePin>


		  while (echo_dist >20) { 	//actual echo_dist stops at ~18cm
 8002924:	e071      	b.n	8002a0a <Obstacle2_Move+0x352>
			  if(echo_dist >50){
 8002926:	4b22      	ldr	r3, [pc, #136]	@ (80029b0 <Obstacle2_Move+0x2f8>)
 8002928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <Obstacle2_Move+0x2fc>)
 8002932:	f7fe f901 	bl	8000b38 <__aeabi_dcmpgt>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d03d      	beq.n	80029b8 <Obstacle2_Move+0x300>
					pwmVal_Left = 6000;
 800293c:	4b18      	ldr	r3, [pc, #96]	@ (80029a0 <Obstacle2_Move+0x2e8>)
 800293e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002942:	801a      	strh	r2, [r3, #0]
					pwmVal_Right = 6000;
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <Obstacle2_Move+0x2ec>)
 8002946:	f241 7270 	movw	r2, #6000	@ 0x1770
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	e05b      	b.n	8002a06 <Obstacle2_Move+0x34e>
 800294e:	bf00      	nop
 8002950:	00000000 	.word	0x00000000
 8002954:	40568000 	.word	0x40568000
 8002958:	00000000 	.word	0x00000000
 800295c:	c0390000 	.word	0xc0390000
 8002960:	00000000 	.word	0x00000000
 8002964:	40668000 	.word	0x40668000
 8002968:	00000000 	.word	0x00000000
 800296c:	401c0000 	.word	0x401c0000
 8002970:	00000000 	.word	0x00000000
 8002974:	c02e0000 	.word	0xc02e0000
 8002978:	200004b8 	.word	0x200004b8
 800297c:	20000544 	.word	0x20000544
 8002980:	20000540 	.word	0x20000540
 8002984:	20000542 	.word	0x20000542
 8002988:	20000000 	.word	0x20000000
 800298c:	200004f8 	.word	0x200004f8
 8002990:	200004e8 	.word	0x200004e8
 8002994:	200004d4 	.word	0x200004d4
 8002998:	200004d0 	.word	0x200004d0
 800299c:	40020000 	.word	0x40020000
 80029a0:	200004ca 	.word	0x200004ca
 80029a4:	200004c8 	.word	0x200004c8
 80029a8:	200004dc 	.word	0x200004dc
 80029ac:	200004f0 	.word	0x200004f0
 80029b0:	20000520 	.word	0x20000520
 80029b4:	40490000 	.word	0x40490000
			  }
			  else if(echo_dist >35)
 80029b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <Obstacle2_Move+0x378>)
 80029ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <Obstacle2_Move+0x37c>)
 80029c4:	f7fe f8b8 	bl	8000b38 <__aeabi_dcmpgt>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <Obstacle2_Move+0x328>
			  {
					pwmVal_Left = 2000;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <Obstacle2_Move+0x380>)
 80029d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80029d4:	801a      	strh	r2, [r3, #0]
					pwmVal_Right = 2000;
 80029d6:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <Obstacle2_Move+0x384>)
 80029d8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e012      	b.n	8002a06 <Obstacle2_Move+0x34e>
			  }
			  else if(echo_dist >20) {
 80029e0:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <Obstacle2_Move+0x378>)
 80029e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <Obstacle2_Move+0x388>)
 80029ec:	f7fe f8a4 	bl	8000b38 <__aeabi_dcmpgt>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <Obstacle2_Move+0x34e>
				  pwmVal_Left = 1500;
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <Obstacle2_Move+0x380>)
 80029f8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80029fc:	801a      	strh	r2, [r3, #0]
				  pwmVal_Right = 1500;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <Obstacle2_Move+0x384>)
 8002a00:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002a04:	801a      	strh	r2, [r3, #0]
			  }
			  Control_Drift();
 8002a06:	f7ff fbf3 	bl	80021f0 <Control_Drift>
		  while (echo_dist >20) { 	//actual echo_dist stops at ~18cm
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <Obstacle2_Move+0x378>)
 8002a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <Obstacle2_Move+0x388>)
 8002a16:	f7fe f88f 	bl	8000b38 <__aeabi_dcmpgt>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d182      	bne.n	8002926 <Obstacle2_Move+0x26e>
		  }

		  e_brake = 1;
 8002a20:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <Obstacle2_Move+0x38c>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
		  selfModifyPinsFlag = 0;
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <Obstacle2_Move+0x390>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

		 /////////////////////
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000520 	.word	0x20000520
 8002a34:	40418000 	.word	0x40418000
 8002a38:	200004ca 	.word	0x200004ca
 8002a3c:	200004c8 	.word	0x200004c8
 8002a40:	40340000 	.word	0x40340000
 8002a44:	200004d0 	.word	0x200004d0
 8002a48:	200004d4 	.word	0x200004d4

08002a4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a58:	4804      	ldr	r0, [pc, #16]	@ (8002a6c <StartDefaultTask+0x20>)
 8002a5a:	f002 fa90 	bl	8004f7e <HAL_GPIO_TogglePin>
     osDelay(1000);
 8002a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a62:	f006 fe21 	bl	80096a8 <osDelay>
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002a66:	bf00      	nop
 8002a68:	e7f4      	b.n	8002a54 <StartDefaultTask+0x8>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000

08002a70 <rightEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rightEncoder */
void rightEncoder(void *argument)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rightEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002a78:	213c      	movs	r1, #60	@ 0x3c
 8002a7a:	481f      	ldr	r0, [pc, #124]	@ (8002af8 <rightEncoder+0x88>)
 8002a7c:	f004 faa2 	bl	8006fc4 <HAL_TIM_Encoder_Start>
		int cnt1;
		int dirR = 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
		int diff;
		uint32_t tick = HAL_GetTick();
 8002a84:	f001 faf2 	bl	800406c <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]
		/* Infinite loop */
		for (;;) {
			if (HAL_GetTick() - tick > 10L) {
 8002a8a:	f001 faef 	bl	800406c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b0a      	cmp	r3, #10
 8002a96:	d92a      	bls.n	8002aee <rightEncoder+0x7e>
				cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <rightEncoder+0x88>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	60bb      	str	r3, [r7, #8]
				if (cnt1 > 32000) {
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002aa6:	dd06      	ble.n	8002ab6 <rightEncoder+0x46>
					dirR = 1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
					diff = (65536 - cnt1);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e004      	b.n	8002ac0 <rightEncoder+0x50>
				} else {
					dirR = -1;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	617b      	str	r3, [r7, #20]
					diff = cnt1;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	613b      	str	r3, [r7, #16]
				}
				if (dirR == 1) {
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d106      	bne.n	8002ad4 <rightEncoder+0x64>
					rightEncoderVal -= diff;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <rightEncoder+0x8c>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	4a0b      	ldr	r2, [pc, #44]	@ (8002afc <rightEncoder+0x8c>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e005      	b.n	8002ae0 <rightEncoder+0x70>
				} else {
					rightEncoderVal += diff;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <rightEncoder+0x8c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	4a07      	ldr	r2, [pc, #28]	@ (8002afc <rightEncoder+0x8c>)
 8002ade:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <rightEncoder+0x88>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24

				tick = HAL_GetTick();
 8002ae8:	f001 fac0 	bl	800406c <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]
			}
			osDelay(50);
 8002aee:	2032      	movs	r0, #50	@ 0x32
 8002af0:	f006 fdda 	bl	80096a8 <osDelay>
			if (HAL_GetTick() - tick > 10L) {
 8002af4:	e7c9      	b.n	8002a8a <rightEncoder+0x1a>
 8002af6:	bf00      	nop
 8002af8:	20000370 	.word	0x20000370
 8002afc:	200004d8 	.word	0x200004d8

08002b00 <leftEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leftEncoder */
void leftEncoder(void *argument)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leftEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002b08:	213c      	movs	r1, #60	@ 0x3c
 8002b0a:	481f      	ldr	r0, [pc, #124]	@ (8002b88 <leftEncoder+0x88>)
 8002b0c:	f004 fa5a 	bl	8006fc4 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002b10:	2301      	movs	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
	int diff;

	uint32_t tick = HAL_GetTick();
 8002b14:	f001 faaa 	bl	800406c <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002b1a:	f001 faa7 	bl	800406c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b0a      	cmp	r3, #10
 8002b26:	d92a      	bls.n	8002b7e <leftEncoder+0x7e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <leftEncoder+0x88>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	60bb      	str	r3, [r7, #8]
			if (cnt2 > 32000) {
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002b36:	dd06      	ble.n	8002b46 <leftEncoder+0x46>
				dirL = 1;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e004      	b.n	8002b50 <leftEncoder+0x50>
			} else {
				dirL = -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d106      	bne.n	8002b64 <leftEncoder+0x64>
				leftEncoderVal += diff;
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <leftEncoder+0x8c>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <leftEncoder+0x8c>)
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e005      	b.n	8002b70 <leftEncoder+0x70>
			} else {
				leftEncoderVal -= diff;
 8002b64:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <leftEncoder+0x8c>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	4a07      	ldr	r2, [pc, #28]	@ (8002b8c <leftEncoder+0x8c>)
 8002b6e:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <leftEncoder+0x88>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 8002b78:	f001 fa78 	bl	800406c <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

//		sprintf(hello, "SpeedL: %5d\0", diff);
//		  OLED_ShowString(10,30,hello);
//		  sprintf(hello, "DirL: %5d\0", dirL);
//		  OLED_ShowString(10,40,hello);
		  osDelay(50);
 8002b7e:	2032      	movs	r0, #50	@ 0x32
 8002b80:	f006 fd92 	bl	80096a8 <osDelay>
		if (HAL_GetTick() - tick > 10L) {
 8002b84:	e7c9      	b.n	8002b1a <leftEncoder+0x1a>
 8002b86:	bf00      	nop
 8002b88:	20000328 	.word	0x20000328
 8002b8c:	200004dc 	.word	0x200004dc

08002b90 <StartCommsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommsTask */
void StartCommsTask(void *argument)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommsTask */
  /* Infinite loop */

	uint8_t ack[4] = "A\0";        // ACK
 8002b98:	2341      	movs	r3, #65	@ 0x41
 8002b9a:	61bb      	str	r3, [r7, #24]
	  uint8_t invalid[8] = "I\0";    // "INVALID
 8002b9c:	2349      	movs	r3, #73	@ 0x49
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
	  uint8_t obstacle[2] = "O\0";   // Obstacle detected
 8002ba4:	234f      	movs	r3, #79	@ 0x4f
 8002ba6:	81bb      	strh	r3, [r7, #12]
	  int skipToStep =0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]

	  strcpy((char *)aRxBuffer, "START");
 8002bac:	4b98      	ldr	r3, [pc, #608]	@ (8002e10 <StartCommsTask+0x280>)
 8002bae:	4a99      	ldr	r2, [pc, #612]	@ (8002e14 <StartCommsTask+0x284>)
 8002bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bb4:	6018      	str	r0, [r3, #0]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	8019      	strh	r1, [r3, #0]

	  /* Infinite loop */
	  for(;;)
	  {
	    // Make sure UART is ready to receive
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8002bba:	2205      	movs	r2, #5
 8002bbc:	4994      	ldr	r1, [pc, #592]	@ (8002e10 <StartCommsTask+0x280>)
 8002bbe:	4896      	ldr	r0, [pc, #600]	@ (8002e18 <StartCommsTask+0x288>)
 8002bc0:	f005 fc13 	bl	80083ea <HAL_UART_Receive_IT>

	    if(receivedInstruction == 1)
 8002bc4:	4b95      	ldr	r3, [pc, #596]	@ (8002e1c <StartCommsTask+0x28c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 81a1 	bne.w	8002f10 <StartCommsTask+0x380>
	    {
	      amplitude = 0;
 8002bce:	4b94      	ldr	r3, [pc, #592]	@ (8002e20 <StartCommsTask+0x290>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

	      // Check valid command format
	      if (
	    		  (strcmp(aRxBuffer, "RESET") == 0)
 8002bd4:	4993      	ldr	r1, [pc, #588]	@ (8002e24 <StartCommsTask+0x294>)
 8002bd6:	488e      	ldr	r0, [pc, #568]	@ (8002e10 <StartCommsTask+0x280>)
 8002bd8:	f7fd fafa 	bl	80001d0 <strcmp>
 8002bdc:	4603      	mov	r3, r0
	      if (
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d056      	beq.n	8002c90 <StartCommsTask+0x100>
				  || (	(aRxBuffer[0] == 'F' || aRxBuffer[0] == 'B')        // move Forward, Backwards
 8002be2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e10 <StartCommsTask+0x280>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b46      	cmp	r3, #70	@ 0x46
 8002be8:	d003      	beq.n	8002bf2 <StartCommsTask+0x62>
 8002bea:	4b89      	ldr	r3, [pc, #548]	@ (8002e10 <StartCommsTask+0x280>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b42      	cmp	r3, #66	@ 0x42
 8002bf0:	d123      	bne.n	8002c3a <StartCommsTask+0xaa>
				  && (aRxBuffer[1] == 'S' || aRxBuffer[1] == 'R' || aRxBuffer[1] == 'L')	)   // move straight, right, or left
 8002bf2:	4b87      	ldr	r3, [pc, #540]	@ (8002e10 <StartCommsTask+0x280>)
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b53      	cmp	r3, #83	@ 0x53
 8002bf8:	d007      	beq.n	8002c0a <StartCommsTask+0x7a>
 8002bfa:	4b85      	ldr	r3, [pc, #532]	@ (8002e10 <StartCommsTask+0x280>)
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	2b52      	cmp	r3, #82	@ 0x52
 8002c00:	d003      	beq.n	8002c0a <StartCommsTask+0x7a>
 8002c02:	4b83      	ldr	r3, [pc, #524]	@ (8002e10 <StartCommsTask+0x280>)
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	2b4c      	cmp	r3, #76	@ 0x4c
 8002c08:	d117      	bne.n	8002c3a <StartCommsTask+0xaa>
				  && ((aRxBuffer[2] - '0') >= 0 && (aRxBuffer[2] - '0') <= 9)
 8002c0a:	4b81      	ldr	r3, [pc, #516]	@ (8002e10 <StartCommsTask+0x280>)
 8002c0c:	789b      	ldrb	r3, [r3, #2]
 8002c0e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c10:	d913      	bls.n	8002c3a <StartCommsTask+0xaa>
 8002c12:	4b7f      	ldr	r3, [pc, #508]	@ (8002e10 <StartCommsTask+0x280>)
 8002c14:	789b      	ldrb	r3, [r3, #2]
 8002c16:	2b39      	cmp	r3, #57	@ 0x39
 8002c18:	d80f      	bhi.n	8002c3a <StartCommsTask+0xaa>
				  && ((aRxBuffer[3] - '0') >= 0 && (aRxBuffer[3] - '0') <= 9)
 8002c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e10 <StartCommsTask+0x280>)
 8002c1c:	78db      	ldrb	r3, [r3, #3]
 8002c1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c20:	d90b      	bls.n	8002c3a <StartCommsTask+0xaa>
 8002c22:	4b7b      	ldr	r3, [pc, #492]	@ (8002e10 <StartCommsTask+0x280>)
 8002c24:	78db      	ldrb	r3, [r3, #3]
 8002c26:	2b39      	cmp	r3, #57	@ 0x39
 8002c28:	d807      	bhi.n	8002c3a <StartCommsTask+0xaa>
				  && ((aRxBuffer[4] - '0') >= 0 && (aRxBuffer[4] - '0') <= 9)
 8002c2a:	4b79      	ldr	r3, [pc, #484]	@ (8002e10 <StartCommsTask+0x280>)
 8002c2c:	791b      	ldrb	r3, [r3, #4]
 8002c2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c30:	d903      	bls.n	8002c3a <StartCommsTask+0xaa>
 8002c32:	4b77      	ldr	r3, [pc, #476]	@ (8002e10 <StartCommsTask+0x280>)
 8002c34:	791b      	ldrb	r3, [r3, #4]
 8002c36:	2b39      	cmp	r3, #57	@ 0x39
 8002c38:	d92a      	bls.n	8002c90 <StartCommsTask+0x100>
				   //(aRxBuffer[0] == 'O' && aRxBuffer[1] == 'B' && aRxBuffer[2] == 'S') 	//OBStacle, task 2
				  || (strcmp(aRxBuffer, "OBS1U") == 0) || (strcmp(aRxBuffer, "OBS2U") == 0) 	//ultrasound for obstacles
 8002c3a:	497b      	ldr	r1, [pc, #492]	@ (8002e28 <StartCommsTask+0x298>)
 8002c3c:	4874      	ldr	r0, [pc, #464]	@ (8002e10 <StartCommsTask+0x280>)
 8002c3e:	f7fd fac7 	bl	80001d0 <strcmp>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <StartCommsTask+0x100>
 8002c48:	4978      	ldr	r1, [pc, #480]	@ (8002e2c <StartCommsTask+0x29c>)
 8002c4a:	4871      	ldr	r0, [pc, #452]	@ (8002e10 <StartCommsTask+0x280>)
 8002c4c:	f7fd fac0 	bl	80001d0 <strcmp>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01c      	beq.n	8002c90 <StartCommsTask+0x100>
				  || (strcmp(aRxBuffer, "OBS1L") == 0) || (strcmp(aRxBuffer, "OBS1R") == 0)
 8002c56:	4976      	ldr	r1, [pc, #472]	@ (8002e30 <StartCommsTask+0x2a0>)
 8002c58:	486d      	ldr	r0, [pc, #436]	@ (8002e10 <StartCommsTask+0x280>)
 8002c5a:	f7fd fab9 	bl	80001d0 <strcmp>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <StartCommsTask+0x100>
 8002c64:	4973      	ldr	r1, [pc, #460]	@ (8002e34 <StartCommsTask+0x2a4>)
 8002c66:	486a      	ldr	r0, [pc, #424]	@ (8002e10 <StartCommsTask+0x280>)
 8002c68:	f7fd fab2 	bl	80001d0 <strcmp>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <StartCommsTask+0x100>
				  || (strcmp(aRxBuffer, "OBS2L") == 0) || (strcmp(aRxBuffer, "OBS2R") == 0)
 8002c72:	4971      	ldr	r1, [pc, #452]	@ (8002e38 <StartCommsTask+0x2a8>)
 8002c74:	4866      	ldr	r0, [pc, #408]	@ (8002e10 <StartCommsTask+0x280>)
 8002c76:	f7fd faab 	bl	80001d0 <strcmp>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <StartCommsTask+0x100>
 8002c80:	496e      	ldr	r1, [pc, #440]	@ (8002e3c <StartCommsTask+0x2ac>)
 8002c82:	4863      	ldr	r0, [pc, #396]	@ (8002e10 <StartCommsTask+0x280>)
 8002c84:	f7fd faa4 	bl	80001d0 <strcmp>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 812b 	bne.w	8002ee6 <StartCommsTask+0x356>
//	          HAL_UART_Transmit(&huart3, (uint8_t*) obstacle, 2, 0xFFFF);  // Send obstacle alert
//	          receivedInstruction = 0;
//	        }
//	        else {
	          // Process the command as usual
	          HAL_UART_AbortReceive_IT(&huart3);  // pause receiving from UART
 8002c90:	4861      	ldr	r0, [pc, #388]	@ (8002e18 <StartCommsTask+0x288>)
 8002c92:	f005 fbcf 	bl	8008434 <HAL_UART_AbortReceive_IT>

	          if(aRxBuffer[2]!='E'){	//if is normal commands, assign the amplitude value
 8002c96:	4b5e      	ldr	r3, [pc, #376]	@ (8002e10 <StartCommsTask+0x280>)
 8002c98:	789b      	ldrb	r3, [r3, #2]
 8002c9a:	2b45      	cmp	r3, #69	@ 0x45
 8002c9c:	d01d      	beq.n	8002cda <StartCommsTask+0x14a>
				  amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002e10 <StartCommsTask+0x280>)
 8002ca0:	789b      	ldrb	r3, [r3, #2]
 8002ca2:	3b30      	subs	r3, #48	@ 0x30
 8002ca4:	2264      	movs	r2, #100	@ 0x64
 8002ca6:	fb02 f103 	mul.w	r1, r2, r3
							+ ((int) (aRxBuffer[3]) - 48) * 10
 8002caa:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <StartCommsTask+0x280>)
 8002cac:	78db      	ldrb	r3, [r3, #3]
 8002cae:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	18ca      	adds	r2, r1, r3
							+ ((int) (aRxBuffer[4]) - 48);
 8002cbc:	4b54      	ldr	r3, [pc, #336]	@ (8002e10 <StartCommsTask+0x280>)
 8002cbe:	791b      	ldrb	r3, [r3, #4]
 8002cc0:	3b30      	subs	r3, #48	@ 0x30
 8002cc2:	4413      	add	r3, r2
				  amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002cc4:	4a56      	ldr	r2, [pc, #344]	@ (8002e20 <StartCommsTask+0x290>)
 8002cc6:	6013      	str	r3, [r2, #0]


				  if (aRxBuffer[0] == 'B') {          // check Direction first
 8002cc8:	4b51      	ldr	r3, [pc, #324]	@ (8002e10 <StartCommsTask+0x280>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b42      	cmp	r3, #66	@ 0x42
 8002cce:	d104      	bne.n	8002cda <StartCommsTask+0x14a>
					amplitude *= -1;
 8002cd0:	4b53      	ldr	r3, [pc, #332]	@ (8002e20 <StartCommsTask+0x290>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	4a52      	ldr	r2, [pc, #328]	@ (8002e20 <StartCommsTask+0x290>)
 8002cd8:	6013      	str	r3, [r2, #0]
				  }
	          }
	          osDelay(10);
 8002cda:	200a      	movs	r0, #10
 8002cdc:	f006 fce4 	bl	80096a8 <osDelay>


	          if(strncmp(aRxBuffer, "OBS", 3) ==0 )
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	4957      	ldr	r1, [pc, #348]	@ (8002e40 <StartCommsTask+0x2b0>)
 8002ce4:	484a      	ldr	r0, [pc, #296]	@ (8002e10 <StartCommsTask+0x280>)
 8002ce6:	f00a f93e 	bl	800cf66 <strncmp>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d149      	bne.n	8002d84 <StartCommsTask+0x1f4>
	          {
	        	  //run the switch statements
	        	  switch (aRxBuffer[3]) {
 8002cf0:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <StartCommsTask+0x280>)
 8002cf2:	78db      	ldrb	r3, [r3, #3]
 8002cf4:	2b31      	cmp	r3, #49	@ 0x31
 8002cf6:	d002      	beq.n	8002cfe <StartCommsTask+0x16e>
 8002cf8:	2b32      	cmp	r3, #50	@ 0x32
 8002cfa:	d01e      	beq.n	8002d3a <StartCommsTask+0x1aa>
 8002cfc:	e03b      	b.n	8002d76 <StartCommsTask+0x1e6>
	        	  	  case '1':

							  switch(aRxBuffer[4]) {
 8002cfe:	4b44      	ldr	r3, [pc, #272]	@ (8002e10 <StartCommsTask+0x280>)
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	2b55      	cmp	r3, #85	@ 0x55
 8002d04:	d006      	beq.n	8002d14 <StartCommsTask+0x184>
 8002d06:	2b55      	cmp	r3, #85	@ 0x55
 8002d08:	dc11      	bgt.n	8002d2e <StartCommsTask+0x19e>
 8002d0a:	2b4c      	cmp	r3, #76	@ 0x4c
 8002d0c:	d00c      	beq.n	8002d28 <StartCommsTask+0x198>
 8002d0e:	2b52      	cmp	r3, #82	@ 0x52
 8002d10:	d00a      	beq.n	8002d28 <StartCommsTask+0x198>
 8002d12:	e00c      	b.n	8002d2e <StartCommsTask+0x19e>
								  case 'U':
									  Obstacle1Ultra();
 8002d14:	f7ff fb1a 	bl	800234c <Obstacle1Ultra>
									  strcpy((char *)aRxBuffer, "IMAGE");
 8002d18:	4b3d      	ldr	r3, [pc, #244]	@ (8002e10 <StartCommsTask+0x280>)
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e44 <StartCommsTask+0x2b4>)
 8002d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d20:	6018      	str	r0, [r3, #0]
 8002d22:	3304      	adds	r3, #4
 8002d24:	8019      	strh	r1, [r3, #0]
									  break;
 8002d26:	e002      	b.n	8002d2e <StartCommsTask+0x19e>
								  case 'L':
								  case 'R':
									  Obstacle1_Move();
 8002d28:	f7ff fbaa 	bl	8002480 <Obstacle1_Move>
									  break;
 8002d2c:	bf00      	nop
							  }
							  //for case 1
							  flagDone = 1;
 8002d2e:	4b46      	ldr	r3, [pc, #280]	@ (8002e48 <StartCommsTask+0x2b8>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
							  skipToStep = 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
							  break;
 8002d38:	e01d      	b.n	8002d76 <StartCommsTask+0x1e6>
	        	  		  break;


	        	  	  case '2':

							  switch(aRxBuffer[4]) {
 8002d3a:	4b35      	ldr	r3, [pc, #212]	@ (8002e10 <StartCommsTask+0x280>)
 8002d3c:	791b      	ldrb	r3, [r3, #4]
 8002d3e:	2b55      	cmp	r3, #85	@ 0x55
 8002d40:	d006      	beq.n	8002d50 <StartCommsTask+0x1c0>
 8002d42:	2b55      	cmp	r3, #85	@ 0x55
 8002d44:	dc11      	bgt.n	8002d6a <StartCommsTask+0x1da>
 8002d46:	2b4c      	cmp	r3, #76	@ 0x4c
 8002d48:	d00c      	beq.n	8002d64 <StartCommsTask+0x1d4>
 8002d4a:	2b52      	cmp	r3, #82	@ 0x52
 8002d4c:	d00a      	beq.n	8002d64 <StartCommsTask+0x1d4>
 8002d4e:	e00c      	b.n	8002d6a <StartCommsTask+0x1da>
								  case 'U':
									  Obstacle2Ultra();
 8002d50:	f7ff fc22 	bl	8002598 <Obstacle2Ultra>
									  strcpy((char *)aRxBuffer, "OBST2");
 8002d54:	4b2e      	ldr	r3, [pc, #184]	@ (8002e10 <StartCommsTask+0x280>)
 8002d56:	4a3d      	ldr	r2, [pc, #244]	@ (8002e4c <StartCommsTask+0x2bc>)
 8002d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d5c:	6018      	str	r0, [r3, #0]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	8019      	strh	r1, [r3, #0]
									  break;
 8002d62:	e002      	b.n	8002d6a <StartCommsTask+0x1da>
								  case 'L':
								  case 'R':
									  Obstacle2_Move();
 8002d64:	f7ff fca8 	bl	80026b8 <Obstacle2_Move>
									  break;
 8002d68:	bf00      	nop
							  }
							  //break for case 2
							  flagDone = 1;
 8002d6a:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <StartCommsTask+0x2b8>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
							  skipToStep = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
							  break;
 8002d74:	bf00      	nop
	        	  }
	        	  strcpy((char *)aRxBuffer, "DONE!");
 8002d76:	4b26      	ldr	r3, [pc, #152]	@ (8002e10 <StartCommsTask+0x280>)
 8002d78:	4a35      	ldr	r2, [pc, #212]	@ (8002e50 <StartCommsTask+0x2c0>)
 8002d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d7e:	6018      	str	r0, [r3, #0]
 8002d80:	3304      	adds	r3, #4
 8002d82:	8019      	strh	r1, [r3, #0]
	          }


	          if(!skipToStep) {
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 80aa 	bne.w	8002ee0 <StartCommsTask+0x350>


	          switch (aRxBuffer[1]) {
 8002d8c:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <StartCommsTask+0x280>)
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	3b45      	subs	r3, #69	@ 0x45
 8002d92:	2b0e      	cmp	r3, #14
 8002d94:	f200 80a4 	bhi.w	8002ee0 <StartCommsTask+0x350>
 8002d98:	a201      	add	r2, pc, #4	@ (adr r2, 8002da0 <StartCommsTask+0x210>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002eb9 	.word	0x08002eb9
 8002da4:	08002ee1 	.word	0x08002ee1
 8002da8:	08002ee1 	.word	0x08002ee1
 8002dac:	08002ee1 	.word	0x08002ee1
 8002db0:	08002ee1 	.word	0x08002ee1
 8002db4:	08002ee1 	.word	0x08002ee1
 8002db8:	08002ee1 	.word	0x08002ee1
 8002dbc:	08002e87 	.word	0x08002e87
 8002dc0:	08002ee1 	.word	0x08002ee1
 8002dc4:	08002ee1 	.word	0x08002ee1
 8002dc8:	08002ee1 	.word	0x08002ee1
 8002dcc:	08002ee1 	.word	0x08002ee1
 8002dd0:	08002ee1 	.word	0x08002ee1
 8002dd4:	08002e55 	.word	0x08002e55
 8002dd8:	08002ddd 	.word	0x08002ddd
	          case 'S':
	            moveCarStraight(amplitude);
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <StartCommsTask+0x290>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fbaf 	bl	8000544 <__aeabi_i2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	ec43 2b10 	vmov	d0, r2, r3
 8002dee:	f7fe fd8f 	bl	8001910 <moveCarStraight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <StartCommsTask+0x280>)
 8002df4:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <StartCommsTask+0x2c0>)
 8002df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dfa:	6018      	str	r0, [r3, #0]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <StartCommsTask+0x2b8>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002e06:	200a      	movs	r0, #10
 8002e08:	f006 fc4e 	bl	80096a8 <osDelay>
	            break;
 8002e0c:	e068      	b.n	8002ee0 <StartCommsTask+0x350>
 8002e0e:	bf00      	nop
 8002e10:	200004b8 	.word	0x200004b8
 8002e14:	0800f198 	.word	0x0800f198
 8002e18:	20000448 	.word	0x20000448
 8002e1c:	200004b4 	.word	0x200004b4
 8002e20:	200004c4 	.word	0x200004c4
 8002e24:	0800f1a0 	.word	0x0800f1a0
 8002e28:	0800f1a8 	.word	0x0800f1a8
 8002e2c:	0800f1b0 	.word	0x0800f1b0
 8002e30:	0800f1b8 	.word	0x0800f1b8
 8002e34:	0800f1c0 	.word	0x0800f1c0
 8002e38:	0800f1c8 	.word	0x0800f1c8
 8002e3c:	0800f1d0 	.word	0x0800f1d0
 8002e40:	0800f1d8 	.word	0x0800f1d8
 8002e44:	0800f1dc 	.word	0x0800f1dc
 8002e48:	200004c0 	.word	0x200004c0
 8002e4c:	0800f1e4 	.word	0x0800f1e4
 8002e50:	0800f1ec 	.word	0x0800f1ec
	          case 'R':
	            moveCarRight(amplitude);
 8002e54:	4b3b      	ldr	r3, [pc, #236]	@ (8002f44 <StartCommsTask+0x3b4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb73 	bl	8000544 <__aeabi_i2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	ec43 2b10 	vmov	d0, r2, r3
 8002e66:	f7fe fdbf 	bl	80019e8 <moveCarRight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 8002e6a:	4b37      	ldr	r3, [pc, #220]	@ (8002f48 <StartCommsTask+0x3b8>)
 8002e6c:	4a37      	ldr	r2, [pc, #220]	@ (8002f4c <StartCommsTask+0x3bc>)
 8002e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e72:	6018      	str	r0, [r3, #0]
 8002e74:	3304      	adds	r3, #4
 8002e76:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 8002e78:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <StartCommsTask+0x3c0>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002e7e:	200a      	movs	r0, #10
 8002e80:	f006 fc12 	bl	80096a8 <osDelay>
	            break;
 8002e84:	e02c      	b.n	8002ee0 <StartCommsTask+0x350>
	          case 'L':
	            moveCarLeft(amplitude);
 8002e86:	4b2f      	ldr	r3, [pc, #188]	@ (8002f44 <StartCommsTask+0x3b4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb5a 	bl	8000544 <__aeabi_i2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	ec43 2b10 	vmov	d0, r2, r3
 8002e98:	f7fe fdd8 	bl	8001a4c <moveCarLeft>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <StartCommsTask+0x3b8>)
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f4c <StartCommsTask+0x3bc>)
 8002ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea4:	6018      	str	r0, [r3, #0]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 8002eaa:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <StartCommsTask+0x3c0>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002eb0:	200a      	movs	r0, #10
 8002eb2:	f006 fbf9 	bl	80096a8 <osDelay>
	            break;
 8002eb6:	e013      	b.n	8002ee0 <StartCommsTask+0x350>
	          case 'E':                   // reset whole system to recalibrate gyro
	            strcpy((char *)aRxBuffer, "RESET");
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <StartCommsTask+0x3b8>)
 8002eba:	4a26      	ldr	r2, [pc, #152]	@ (8002f54 <StartCommsTask+0x3c4>)
 8002ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ec0:	6018      	str	r0, [r3, #0]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	8019      	strh	r1, [r3, #0]
	            HAL_UART_Transmit(&huart3, (uint8_t*) "R\0", 2, 0xFFFF);  // TRANSMITTING "RESET" TO RPI/PUTTY
 8002ec6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4922      	ldr	r1, [pc, #136]	@ (8002f58 <StartCommsTask+0x3c8>)
 8002ece:	4823      	ldr	r0, [pc, #140]	@ (8002f5c <StartCommsTask+0x3cc>)
 8002ed0:	f005 fa00 	bl	80082d4 <HAL_UART_Transmit>
	            osDelay(500);
 8002ed4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ed8:	f006 fbe6 	bl	80096a8 <osDelay>
	            NVIC_SystemReset();
 8002edc:	f7fe f80c 	bl	8000ef8 <__NVIC_SystemReset>
	            osDelay(10);
	            break;
	          }
	          }	//for skipToStep
	          skipToStep =0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	e014      	b.n	8002f10 <StartCommsTask+0x380>
	      }	//end if valid choice


	      else      // INVALID CHOICE
	      {
	        strcpy((char *)aRxBuffer, "INVAL");
 8002ee6:	4b18      	ldr	r3, [pc, #96]	@ (8002f48 <StartCommsTask+0x3b8>)
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f60 <StartCommsTask+0x3d0>)
 8002eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eee:	6018      	str	r0, [r3, #0]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	8019      	strh	r1, [r3, #0]
	        osDelay(10);
 8002ef4:	200a      	movs	r0, #10
 8002ef6:	f006 fbd7 	bl	80096a8 <osDelay>
	        HAL_UART_Transmit(&huart3, (uint8_t*) &invalid, 8, 0xFFFF);  // TRANSMITTING "INVAL" TO RPI/PUTTY
 8002efa:	f107 0110 	add.w	r1, r7, #16
 8002efe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f02:	2208      	movs	r2, #8
 8002f04:	4815      	ldr	r0, [pc, #84]	@ (8002f5c <StartCommsTask+0x3cc>)
 8002f06:	f005 f9e5 	bl	80082d4 <HAL_UART_Transmit>
	        receivedInstruction = 0;
 8002f0a:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <StartCommsTask+0x3d4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
	      }
	    }

	    if (flagDone == 1) {
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <StartCommsTask+0x3c0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d110      	bne.n	8002f3a <StartCommsTask+0x3aa>
	      receivedInstruction = 0;
 8002f18:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <StartCommsTask+0x3d4>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
	      osDelay(10);
 8002f1e:	200a      	movs	r0, #10
 8002f20:	f006 fbc2 	bl	80096a8 <osDelay>
	      HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 4, 0xFFFF);   // TRANSMITTING "ACK" TO RPI/PUTTY
 8002f24:	f107 0118 	add.w	r1, r7, #24
 8002f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	480b      	ldr	r0, [pc, #44]	@ (8002f5c <StartCommsTask+0x3cc>)
 8002f30:	f005 f9d0 	bl	80082d4 <HAL_UART_Transmit>
	      flagDone = 0;
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <StartCommsTask+0x3c0>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
	    }

	    osDelay(10);
 8002f3a:	200a      	movs	r0, #10
 8002f3c:	f006 fbb4 	bl	80096a8 <osDelay>
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8002f40:	e63b      	b.n	8002bba <StartCommsTask+0x2a>
 8002f42:	bf00      	nop
 8002f44:	200004c4 	.word	0x200004c4
 8002f48:	200004b8 	.word	0x200004b8
 8002f4c:	0800f1ec 	.word	0x0800f1ec
 8002f50:	200004c0 	.word	0x200004c0
 8002f54:	0800f1a0 	.word	0x0800f1a0
 8002f58:	0800f1f4 	.word	0x0800f1f4
 8002f5c:	20000448 	.word	0x20000448
 8002f60:	0800f1f8 	.word	0x0800f1f8
 8002f64:	200004b4 	.word	0x200004b4

08002f68 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002f68:	b5b0      	push	{r4, r5, r7, lr}
 8002f6a:	b0be      	sub	sp, #248	@ 0xf8
 8002f6c:	af04      	add	r7, sp, #16
 8002f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
  /* Infinite loop */
// aaa	uint8_t usVal[20] = { 0 };
	uint8_t gyroVal[20] = { 0 };
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f8a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
	uint8_t echo[20] = { 0 };
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f9e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	60da      	str	r2, [r3, #12]
	int32_t IR_Left[20] = { 0 };
 8002fac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002fb0:	2250      	movs	r2, #80	@ 0x50
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f009 ffce 	bl	800cf56 <memset>
	int32_t IR_Right[20] = { 0 };
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	2250      	movs	r2, #80	@ 0x50
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f009 ffc7 	bl	800cf56 <memset>

	for (;;) {
		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003108 <StartOLEDTask+0x1a0>)
 8002fca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fce:	4b4e      	ldr	r3, [pc, #312]	@ (8003108 <StartOLEDTask+0x1a0>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fd fdce 	bl	8000b78 <__aeabi_d2iz>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fab0 	bl	8000544 <__aeabi_i2d>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4629      	mov	r1, r5
 8002fec:	f7fd f95c 	bl	80002a8 <__aeabi_dsub>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	4b43      	ldr	r3, [pc, #268]	@ (800310c <StartOLEDTask+0x1a4>)
 8002ffe:	f7fd fb0b 	bl	8000618 <__aeabi_dmul>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fdb5 	bl	8000b78 <__aeabi_d2iz>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	bfb8      	it	lt
 8003014:	425b      	neglt	r3, r3
 8003016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <StartOLEDTask+0x1a0>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f7fd fda8 	bl	8000b78 <__aeabi_d2iz>
 8003028:	4602      	mov	r2, r0
 800302a:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003032:	4937      	ldr	r1, [pc, #220]	@ (8003110 <StartOLEDTask+0x1a8>)
 8003034:	f009 ff2c 	bl	800ce90 <siprintf>
		OLED_ShowString(0, 0, gyroVal);
 8003038:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800303c:	461a      	mov	r2, r3
 800303e:	2100      	movs	r1, #0
 8003040:	2000      	movs	r0, #0
 8003042:	f009 f94d 	bl	800c2e0 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8003046:	4b33      	ldr	r3, [pc, #204]	@ (8003114 <StartOLEDTask+0x1ac>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461c      	mov	r4, r3
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <StartOLEDTask+0x1ac>)
 800304e:	785b      	ldrb	r3, [r3, #1]
 8003050:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8003052:	4b30      	ldr	r3, [pc, #192]	@ (8003114 <StartOLEDTask+0x1ac>)
 8003054:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8003056:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8003058:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <StartOLEDTask+0x1ac>)
 800305a:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800305c:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800305e:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <StartOLEDTask+0x1ac>)
 8003060:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8003062:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	9101      	str	r1, [sp, #4]
 800306a:	9200      	str	r2, [sp, #0]
 800306c:	462b      	mov	r3, r5
 800306e:	4622      	mov	r2, r4
 8003070:	4929      	ldr	r1, [pc, #164]	@ (8003118 <StartOLEDTask+0x1b0>)
 8003072:	f009 ff0d 	bl	800ce90 <siprintf>
		OLED_ShowString(0, 10, command);
 8003076:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800307a:	461a      	mov	r2, r3
 800307c:	210a      	movs	r1, #10
 800307e:	2000      	movs	r0, #0
 8003080:	f009 f92e 	bl	800c2e0 <OLED_ShowString>

		//print ultrasonic readings
		uintPart = (int)echo_dist;
 8003084:	4b25      	ldr	r3, [pc, #148]	@ (800311c <StartOLEDTask+0x1b4>)
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f7fd fd73 	bl	8000b78 <__aeabi_d2iz>
 8003092:	4603      	mov	r3, r0
 8003094:	4a22      	ldr	r2, [pc, #136]	@ (8003120 <StartOLEDTask+0x1b8>)
 8003096:	6013      	str	r3, [r2, #0]
		sprintf(echo, "E = %dcm \0", uintPart);		//ultrasonic readings
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <StartOLEDTask+0x1b8>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80030a0:	4920      	ldr	r1, [pc, #128]	@ (8003124 <StartOLEDTask+0x1bc>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f009 fef4 	bl	800ce90 <siprintf>
		OLED_ShowString(0, 20, echo);
 80030a8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80030ac:	461a      	mov	r2, r3
 80030ae:	2114      	movs	r1, #20
 80030b0:	2000      	movs	r0, #0
 80030b2:	f009 f915 	bl	800c2e0 <OLED_ShowString>

		//IR Readings
		sprintf(IR_Left, "Left:%d D:%d \0", LeftIRfiltered, IRDistance_Left);
 80030b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003128 <StartOLEDTask+0x1c0>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <StartOLEDTask+0x1c4>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80030c4:	491a      	ldr	r1, [pc, #104]	@ (8003130 <StartOLEDTask+0x1c8>)
 80030c6:	f009 fee3 	bl	800ce90 <siprintf>
		OLED_ShowString(0, 30,IR_Left );
 80030ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030ce:	461a      	mov	r2, r3
 80030d0:	211e      	movs	r1, #30
 80030d2:	2000      	movs	r0, #0
 80030d4:	f009 f904 	bl	800c2e0 <OLED_ShowString>
		sprintf(IR_Right, "Right:%d D:%d \0", RightIRfiltered, IRDistance_Right);
 80030d8:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <StartOLEDTask+0x1cc>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <StartOLEDTask+0x1d0>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f107 0008 	add.w	r0, r7, #8
 80030e6:	4915      	ldr	r1, [pc, #84]	@ (800313c <StartOLEDTask+0x1d4>)
 80030e8:	f009 fed2 	bl	800ce90 <siprintf>
		OLED_ShowString(0, 40,IR_Right );
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	461a      	mov	r2, r3
 80030f2:	2128      	movs	r1, #40	@ 0x28
 80030f4:	2000      	movs	r0, #0
 80030f6:	f009 f8f3 	bl	800c2e0 <OLED_ShowString>
//		sprintf(IR_Left, "Left:%d \0", leftEncoderVal);
//		OLED_ShowString(0, 30,IR_Left );
//		sprintf(IR_Right, "O2:%d \0", O2distanceTravelled);
//		OLED_ShowString(0, 40,IR_Right );

		OLED_Refresh_Gram();
 80030fa:	f008 ff7d 	bl	800bff8 <OLED_Refresh_Gram>
		osDelay(100);
 80030fe:	2064      	movs	r0, #100	@ 0x64
 8003100:	f006 fad2 	bl	80096a8 <osDelay>
	for (;;) {
 8003104:	bf00      	nop
 8003106:	e75f      	b.n	8002fc8 <StartOLEDTask+0x60>
 8003108:	200004f8 	.word	0x200004f8
 800310c:	408f4000 	.word	0x408f4000
 8003110:	0800f200 	.word	0x0800f200
 8003114:	200004b8 	.word	0x200004b8
 8003118:	0800f210 	.word	0x0800f210
 800311c:	20000520 	.word	0x20000520
 8003120:	20000518 	.word	0x20000518
 8003124:	0800f220 	.word	0x0800f220
 8003128:	2000053c 	.word	0x2000053c
 800312c:	20000540 	.word	0x20000540
 8003130:	0800f22c 	.word	0x0800f22c
 8003134:	2000053e 	.word	0x2000053e
 8003138:	20000542 	.word	0x20000542
 800313c:	0800f23c 	.word	0x0800f23c

08003140 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	pwmVal_Right = 0;
 8003148:	4baf      	ldr	r3, [pc, #700]	@ (8003408 <StartMotorTask+0x2c8>)
 800314a:	2200      	movs	r2, #0
 800314c:	801a      	strh	r2, [r3, #0]
	  pwmVal_Left = 0;
 800314e:	4baf      	ldr	r3, [pc, #700]	@ (800340c <StartMotorTask+0x2cc>)
 8003150:	2200      	movs	r2, #0
 8003152:	801a      	strh	r2, [r3, #0]
	  int straightCorrection = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003158:	2100      	movs	r1, #0
 800315a:	48ad      	ldr	r0, [pc, #692]	@ (8003410 <StartMotorTask+0x2d0>)
 800315c:	f003 fc4c 	bl	80069f8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003160:	2104      	movs	r1, #4
 8003162:	48ab      	ldr	r0, [pc, #684]	@ (8003410 <StartMotorTask+0x2d0>)
 8003164:	f003 fc48 	bl	80069f8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003168:	210c      	movs	r1, #12
 800316a:	48aa      	ldr	r0, [pc, #680]	@ (8003414 <StartMotorTask+0x2d4>)
 800316c:	f003 fc44 	bl	80069f8 <HAL_TIM_PWM_Start>
	  htim1.Instance->CCR4 = SERVOCENTER; 	//Centre
 8003170:	4ba8      	ldr	r3, [pc, #672]	@ (8003414 <StartMotorTask+0x2d4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2292      	movs	r2, #146	@ 0x92
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // RIGHT WHEEL FORWARD
 8003178:	2201      	movs	r2, #1
 800317a:	2110      	movs	r1, #16
 800317c:	48a6      	ldr	r0, [pc, #664]	@ (8003418 <StartMotorTask+0x2d8>)
 800317e:	f001 fee5 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8003182:	2200      	movs	r2, #0
 8003184:	2120      	movs	r1, #32
 8003186:	48a4      	ldr	r0, [pc, #656]	@ (8003418 <StartMotorTask+0x2d8>)
 8003188:	f001 fee0 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // LEFT WHEEL FORWARD
 800318c:	2201      	movs	r2, #1
 800318e:	2108      	movs	r1, #8
 8003190:	48a1      	ldr	r0, [pc, #644]	@ (8003418 <StartMotorTask+0x2d8>)
 8003192:	f001 fedb 	bl	8004f4c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	2104      	movs	r1, #4
 800319a:	489f      	ldr	r0, [pc, #636]	@ (8003418 <StartMotorTask+0x2d8>)
 800319c:	f001 fed6 	bl	8004f4c <HAL_GPIO_WritePin>
	  osDelay(1000);
 80031a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031a4:	f006 fa80 	bl	80096a8 <osDelay>

	  /* Infinite loop */
	  for (;;) {
	    htim1.Instance->CCR4 = pwmVal_servo;
 80031a8:	4b9c      	ldr	r3, [pc, #624]	@ (800341c <StartMotorTask+0x2dc>)
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	4b99      	ldr	r3, [pc, #612]	@ (8003414 <StartMotorTask+0x2d4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40

	    if(selfModifyPinsFlag ==1){
 80031b2:	4b9b      	ldr	r3, [pc, #620]	@ (8003420 <StartMotorTask+0x2e0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f000 81a5 	beq.w	8003506 <StartMotorTask+0x3c6>
	    else {	//task 1 functions




	    		double error_angle = target_angle - total_angle;	//100 - gyro (with drift) angle
 80031bc:	4b99      	ldr	r3, [pc, #612]	@ (8003424 <StartMotorTask+0x2e4>)
 80031be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c2:	4b99      	ldr	r3, [pc, #612]	@ (8003428 <StartMotorTask+0x2e8>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd f86e 	bl	80002a8 <__aeabi_dsub>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	e9c7 2302 	strd	r2, r3, [r7, #8]


				  // Normal operation - no obstacle or not moving forward
				  if (pwmVal_servo < 127) { //TURN LEFT
 80031d4:	4b91      	ldr	r3, [pc, #580]	@ (800341c <StartMotorTask+0x2dc>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	2b7e      	cmp	r3, #126	@ 0x7e
 80031da:	d84c      	bhi.n	8003276 <StartMotorTask+0x136>
					pwmVal_Right = PID_Angle(error_angle, 1) * 1.072;  //RIGHT = MASTER
 80031dc:	2001      	movs	r0, #1
 80031de:	ed97 0b02 	vldr	d0, [r7, #8]
 80031e2:	f7fe fce1 	bl	8001ba8 <PID_Angle>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd f9ab 	bl	8000544 <__aeabi_i2d>
 80031ee:	a382      	add	r3, pc, #520	@ (adr r3, 80033f8 <StartMotorTask+0x2b8>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd fa10 	bl	8000618 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	f7fd fce2 	bl	8000bc8 <__aeabi_d2uiz>
 8003204:	4603      	mov	r3, r0
 8003206:	b29a      	uxth	r2, r3
 8003208:	4b7f      	ldr	r3, [pc, #508]	@ (8003408 <StartMotorTask+0x2c8>)
 800320a:	801a      	strh	r2, [r3, #0]
					pwmVal_Left = pwmVal_Right * (0.59); //LEFT = SLAVE
 800320c:	4b7e      	ldr	r3, [pc, #504]	@ (8003408 <StartMotorTask+0x2c8>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f997 	bl	8000544 <__aeabi_i2d>
 8003216:	a37a      	add	r3, pc, #488	@ (adr r3, 8003400 <StartMotorTask+0x2c0>)
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f7fd f9fc 	bl	8000618 <__aeabi_dmul>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fcce 	bl	8000bc8 <__aeabi_d2uiz>
 800322c:	4603      	mov	r3, r0
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b76      	ldr	r3, [pc, #472]	@ (800340c <StartMotorTask+0x2cc>)
 8003232:	801a      	strh	r2, [r3, #0]

					if (error_angle > 0) {
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003240:	f7fd fc7a 	bl	8000b38 <__aeabi_dcmpgt>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <StartMotorTask+0x120>
					  // LEFT WHEEL GO FORWARD
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800324a:	2201      	movs	r2, #1
 800324c:	2108      	movs	r1, #8
 800324e:	4872      	ldr	r0, [pc, #456]	@ (8003418 <StartMotorTask+0x2d8>)
 8003250:	f001 fe7c 	bl	8004f4c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003254:	2200      	movs	r2, #0
 8003256:	2104      	movs	r1, #4
 8003258:	486f      	ldr	r0, [pc, #444]	@ (8003418 <StartMotorTask+0x2d8>)
 800325a:	f001 fe77 	bl	8004f4c <HAL_GPIO_WritePin>
 800325e:	e152      	b.n	8003506 <StartMotorTask+0x3c6>
					} else {
					  //// LEFT WHEEL GO BACKWARD
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003260:	2200      	movs	r2, #0
 8003262:	2108      	movs	r1, #8
 8003264:	486c      	ldr	r0, [pc, #432]	@ (8003418 <StartMotorTask+0x2d8>)
 8003266:	f001 fe71 	bl	8004f4c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800326a:	2201      	movs	r2, #1
 800326c:	2104      	movs	r1, #4
 800326e:	486a      	ldr	r0, [pc, #424]	@ (8003418 <StartMotorTask+0x2d8>)
 8003270:	f001 fe6c 	bl	8004f4c <HAL_GPIO_WritePin>
 8003274:	e147      	b.n	8003506 <StartMotorTask+0x3c6>
					}
				  }

				  else if (pwmVal_servo > 189) { //TURN RIGHT
 8003276:	4b69      	ldr	r3, [pc, #420]	@ (800341c <StartMotorTask+0x2dc>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2bbd      	cmp	r3, #189	@ 0xbd
 800327c:	d93d      	bls.n	80032fa <StartMotorTask+0x1ba>
					pwmVal_Left = PID_Angle(error_angle, 0);
 800327e:	2000      	movs	r0, #0
 8003280:	ed97 0b02 	vldr	d0, [r7, #8]
 8003284:	f7fe fc90 	bl	8001ba8 <PID_Angle>
 8003288:	4603      	mov	r3, r0
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b5f      	ldr	r3, [pc, #380]	@ (800340c <StartMotorTask+0x2cc>)
 800328e:	801a      	strh	r2, [r3, #0]
					pwmVal_Right = pwmVal_Left * (0.59); //RIGHT = SLAVE
 8003290:	4b5e      	ldr	r3, [pc, #376]	@ (800340c <StartMotorTask+0x2cc>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f955 	bl	8000544 <__aeabi_i2d>
 800329a:	a359      	add	r3, pc, #356	@ (adr r3, 8003400 <StartMotorTask+0x2c0>)
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f7fd f9ba 	bl	8000618 <__aeabi_dmul>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	f7fd fc8c 	bl	8000bc8 <__aeabi_d2uiz>
 80032b0:	4603      	mov	r3, r0
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	4b54      	ldr	r3, [pc, #336]	@ (8003408 <StartMotorTask+0x2c8>)
 80032b6:	801a      	strh	r2, [r3, #0]

					if (error_angle < 0) {
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032c4:	f7fd fc1a 	bl	8000afc <__aeabi_dcmplt>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <StartMotorTask+0x1a4>
					  //RIGHT (WHEEL B) FORWARD
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80032ce:	2201      	movs	r2, #1
 80032d0:	2110      	movs	r1, #16
 80032d2:	4851      	ldr	r0, [pc, #324]	@ (8003418 <StartMotorTask+0x2d8>)
 80032d4:	f001 fe3a 	bl	8004f4c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80032d8:	2200      	movs	r2, #0
 80032da:	2120      	movs	r1, #32
 80032dc:	484e      	ldr	r0, [pc, #312]	@ (8003418 <StartMotorTask+0x2d8>)
 80032de:	f001 fe35 	bl	8004f4c <HAL_GPIO_WritePin>
 80032e2:	e110      	b.n	8003506 <StartMotorTask+0x3c6>
					} else {
					  //RIGHT (WHEEL B) BACKWARD
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2110      	movs	r1, #16
 80032e8:	484b      	ldr	r0, [pc, #300]	@ (8003418 <StartMotorTask+0x2d8>)
 80032ea:	f001 fe2f 	bl	8004f4c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80032ee:	2201      	movs	r2, #1
 80032f0:	2120      	movs	r1, #32
 80032f2:	4849      	ldr	r0, [pc, #292]	@ (8003418 <StartMotorTask+0x2d8>)
 80032f4:	f001 fe2a 	bl	8004f4c <HAL_GPIO_WritePin>
 80032f8:	e105      	b.n	8003506 <StartMotorTask+0x3c6>
					}
				  }

				  else {		//mainly for task 1, used in task 2 for accurate turns
					pwmVal_Right = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 80032fa:	4b4c      	ldr	r3, [pc, #304]	@ (800342c <StartMotorTask+0x2ec>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003430 <StartMotorTask+0x2f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fbd2 	bl	8001ab0 <PID_Control>
 800330c:	4603      	mov	r3, r0
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f918 	bl	8000544 <__aeabi_i2d>
 8003314:	a338      	add	r3, pc, #224	@ (adr r3, 80033f8 <StartMotorTask+0x2b8>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd f97d 	bl	8000618 <__aeabi_dmul>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fc4f 	bl	8000bc8 <__aeabi_d2uiz>
 800332a:	4603      	mov	r3, r0
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <StartMotorTask+0x2c8>)
 8003330:	801a      	strh	r2, [r3, #0]
					if (labs(leftTarget - leftEncoderVal)> labs(rightTarget - rightEncoderVal)) {
 8003332:	4b3e      	ldr	r3, [pc, #248]	@ (800342c <StartMotorTask+0x2ec>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b3e      	ldr	r3, [pc, #248]	@ (8003430 <StartMotorTask+0x2f0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003340:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003344:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <StartMotorTask+0x2f4>)
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <StartMotorTask+0x2f8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	1acb      	subs	r3, r1, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	bfb8      	it	lt
 8003352:	425b      	neglt	r3, r3
 8003354:	429a      	cmp	r2, r3
 8003356:	dd03      	ble.n	8003360 <StartMotorTask+0x220>
					  straightCorrection++;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3301      	adds	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e002      	b.n	8003366 <StartMotorTask+0x226>
					} else {
					  straightCorrection--;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3b01      	subs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
					}
					if (labs(leftTarget - leftEncoderVal) < 100) {
 8003366:	4b31      	ldr	r3, [pc, #196]	@ (800342c <StartMotorTask+0x2ec>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <StartMotorTask+0x2f0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8003374:	db08      	blt.n	8003388 <StartMotorTask+0x248>
 8003376:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <StartMotorTask+0x2ec>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <StartMotorTask+0x2f0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b63      	cmp	r3, #99	@ 0x63
 8003382:	dc01      	bgt.n	8003388 <StartMotorTask+0x248>
					  straightCorrection = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
					}
					pwmVal_Left = PID_Control(rightTarget - rightEncoderVal, 1)
 8003388:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <StartMotorTask+0x2f4>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b2a      	ldr	r3, [pc, #168]	@ (8003438 <StartMotorTask+0x2f8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fb8b 	bl	8001ab0 <PID_Control>
 800339a:	4603      	mov	r3, r0
							+ straightCorrection;
 800339c:	b29a      	uxth	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	b29a      	uxth	r2, r3
					pwmVal_Left = PID_Control(rightTarget - rightEncoderVal, 1)
 80033a6:	4b19      	ldr	r3, [pc, #100]	@ (800340c <StartMotorTask+0x2cc>)
 80033a8:	801a      	strh	r2, [r3, #0]

					if ((leftTarget - leftEncoderVal) < 0) {
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <StartMotorTask+0x2ec>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b20      	ldr	r3, [pc, #128]	@ (8003430 <StartMotorTask+0x2f0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	da65      	bge.n	8003484 <StartMotorTask+0x344>
					  if (error_angle > 2) { // left +. right -. angle
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033c4:	f7fd fbb8 	bl	8000b38 <__aeabi_dcmpgt>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <StartMotorTask+0x296>
						pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80033ce:	4b13      	ldr	r3, [pc, #76]	@ (800341c <StartMotorTask+0x2dc>)
 80033d0:	22a5      	movs	r2, #165	@ 0xa5
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e097      	b.n	8003506 <StartMotorTask+0x3c6>
					  } else if (error_angle < -2) {
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80033de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033e2:	f7fd fb8b 	bl	8000afc <__aeabi_dcmplt>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d027      	beq.n	800343c <StartMotorTask+0x2fc>
						pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <StartMotorTask+0x2dc>)
 80033ee:	227f      	movs	r2, #127	@ 0x7f
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e088      	b.n	8003506 <StartMotorTask+0x3c6>
 80033f4:	f3af 8000 	nop.w
 80033f8:	78d4fdf4 	.word	0x78d4fdf4
 80033fc:	3ff126e9 	.word	0x3ff126e9
 8003400:	ae147ae1 	.word	0xae147ae1
 8003404:	3fe2e147 	.word	0x3fe2e147
 8003408:	200004c8 	.word	0x200004c8
 800340c:	200004ca 	.word	0x200004ca
 8003410:	20000400 	.word	0x20000400
 8003414:	200002e0 	.word	0x200002e0
 8003418:	40020000 	.word	0x40020000
 800341c:	20000000 	.word	0x20000000
 8003420:	200004d4 	.word	0x200004d4
 8003424:	200004e8 	.word	0x200004e8
 8003428:	200004f8 	.word	0x200004f8
 800342c:	200004e4 	.word	0x200004e4
 8003430:	200004dc 	.word	0x200004dc
 8003434:	200004e0 	.word	0x200004e0
 8003438:	200004d8 	.word	0x200004d8
					  } else {
						pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	4b46      	ldr	r3, [pc, #280]	@ (800355c <StartMotorTask+0x41c>)
 8003442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003446:	f7fd f8e7 	bl	8000618 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	4b42      	ldr	r3, [pc, #264]	@ (8003560 <StartMotorTask+0x420>)
 8003458:	f7fd fa08 	bl	800086c <__aeabi_ddiv>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	4b3e      	ldr	r3, [pc, #248]	@ (8003564 <StartMotorTask+0x424>)
 800346a:	f7fc ff1f 	bl	80002ac <__adddf3>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fba7 	bl	8000bc8 <__aeabi_d2uiz>
 800347a:	4603      	mov	r3, r0
 800347c:	b29a      	uxth	r2, r3
 800347e:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <StartMotorTask+0x428>)
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e040      	b.n	8003506 <StartMotorTask+0x3c6>
					  }
					} else {
					  if (error_angle > 2) { // left +. right -.
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800348c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003490:	f7fd fb52 	bl	8000b38 <__aeabi_dcmpgt>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <StartMotorTask+0x362>
						pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 800349a:	4b33      	ldr	r3, [pc, #204]	@ (8003568 <StartMotorTask+0x428>)
 800349c:	227f      	movs	r2, #127	@ 0x7f
 800349e:	801a      	strh	r2, [r3, #0]
 80034a0:	e031      	b.n	8003506 <StartMotorTask+0x3c6>
					  } else if (error_angle < -2) {
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80034aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034ae:	f7fd fb25 	bl	8000afc <__aeabi_dcmplt>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <StartMotorTask+0x380>
						pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <StartMotorTask+0x428>)
 80034ba:	22a5      	movs	r2, #165	@ 0xa5
 80034bc:	801a      	strh	r2, [r3, #0]
 80034be:	e022      	b.n	8003506 <StartMotorTask+0x3c6>
					  } else {
						pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	4b29      	ldr	r3, [pc, #164]	@ (800356c <StartMotorTask+0x42c>)
 80034c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034ca:	f7fd f8a5 	bl	8000618 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	4b21      	ldr	r3, [pc, #132]	@ (8003560 <StartMotorTask+0x420>)
 80034dc:	f7fd f9c6 	bl	800086c <__aeabi_ddiv>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <StartMotorTask+0x424>)
 80034ee:	f7fc fedd 	bl	80002ac <__adddf3>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f7fd fb65 	bl	8000bc8 <__aeabi_d2uiz>
 80034fe:	4603      	mov	r3, r0
 8003500:	b29a      	uxth	r2, r3
 8003502:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <StartMotorTask+0x428>)
 8003504:	801a      	strh	r2, [r3, #0]


	    }//task 1 functions end


	    if (e_brake) {
 8003506:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <StartMotorTask+0x430>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <StartMotorTask+0x3ec>
	      pwmVal_Left = pwmVal_Right = 0;
 800350e:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <StartMotorTask+0x434>)
 8003510:	2200      	movs	r2, #0
 8003512:	801a      	strh	r2, [r3, #0]
 8003514:	4b17      	ldr	r3, [pc, #92]	@ (8003574 <StartMotorTask+0x434>)
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <StartMotorTask+0x438>)
 800351a:	801a      	strh	r2, [r3, #0]
	      leftTarget = leftEncoderVal;
 800351c:	4b17      	ldr	r3, [pc, #92]	@ (800357c <StartMotorTask+0x43c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a17      	ldr	r2, [pc, #92]	@ (8003580 <StartMotorTask+0x440>)
 8003522:	6013      	str	r3, [r2, #0]
	      rightTarget = rightEncoderVal;
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <StartMotorTask+0x444>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <StartMotorTask+0x448>)
 800352a:	6013      	str	r3, [r2, #0]
	    }

	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_Left);
 800352c:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <StartMotorTask+0x438>)
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	4b16      	ldr	r3, [pc, #88]	@ (800358c <StartMotorTask+0x44c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_Right);
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <StartMotorTask+0x434>)
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <StartMotorTask+0x44c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38
	    osDelay(10);
 8003540:	200a      	movs	r0, #10
 8003542:	f006 f8b1 	bl	80096a8 <osDelay>

	    if (times_acceptable > 1000) {
 8003546:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <StartMotorTask+0x450>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800354e:	f77f ae2b 	ble.w	80031a8 <StartMotorTask+0x68>
	      times_acceptable = 1001;
 8003552:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <StartMotorTask+0x450>)
 8003554:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8003558:	601a      	str	r2, [r3, #0]
	    htim1.Instance->CCR4 = pwmVal_servo;
 800355a:	e625      	b.n	80031a8 <StartMotorTask+0x68>
 800355c:	40330000 	.word	0x40330000
 8003560:	40140000 	.word	0x40140000
 8003564:	40624000 	.word	0x40624000
 8003568:	20000000 	.word	0x20000000
 800356c:	c0330000 	.word	0xc0330000
 8003570:	200004d0 	.word	0x200004d0
 8003574:	200004c8 	.word	0x200004c8
 8003578:	200004ca 	.word	0x200004ca
 800357c:	200004dc 	.word	0x200004dc
 8003580:	200004e4 	.word	0x200004e4
 8003584:	200004d8 	.word	0x200004d8
 8003588:	200004e0 	.word	0x200004e0
 800358c:	20000400 	.word	0x20000400
 8003590:	200004cc 	.word	0x200004cc
 8003594:	00000000 	.word	0x00000000

08003598 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b08a      	sub	sp, #40	@ 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */

			gyroInit();
 80035a0:	f7fe fc0c 	bl	8001dbc <gyroInit>
			uint8_t val[2] = { 0, 0 };
 80035a4:	2300      	movs	r3, #0
 80035a6:	813b      	strh	r3, [r7, #8]

			int16_t angularSpeed = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	817b      	strh	r3, [r7, #10]

			uint32_t tick = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
			double offset = 0;
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double garbage = 0;
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
			int i = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
			total_angle = 0;
 80035cc:	495c      	ldr	r1, [pc, #368]	@ (8003740 <StartGyroTask+0x1a8>)
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9c1 2300 	strd	r2, r3, [r1]

			osDelay(50);
 80035da:	2032      	movs	r0, #50	@ 0x32
 80035dc:	f006 f864 	bl	80096a8 <osDelay>
			tick = HAL_GetTick();
 80035e0:	f000 fd44 	bl	800406c <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	@ 0x24
			while (i < 1000) {					//sample 1000 for calibration
 80035e6:	e048      	b.n	800367a <StartGyroTask+0xe2>
				osDelay(5);
 80035e8:	2005      	movs	r0, #5
 80035ea:	f006 f85d 	bl	80096a8 <osDelay>
				readByte(0x37, val);
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	4619      	mov	r1, r3
 80035f4:	2037      	movs	r0, #55	@ 0x37
 80035f6:	f7fe fb93 	bl	8001d20 <readByte>
				angularSpeed =  val[1] | (val[0] << 8);
 80035fa:	7a7b      	ldrb	r3, [r7, #9]
 80035fc:	b21a      	sxth	r2, r3
 80035fe:	7a3b      	ldrb	r3, [r7, #8]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	b21b      	sxth	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	817b      	strh	r3, [r7, #10]

				garbage = garbage + (double) ((double) angularSpeed)
 8003608:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ff99 	bl	8000544 <__aeabi_i2d>
 8003612:	4604      	mov	r4, r0
 8003614:	460d      	mov	r5, r1
						* ((HAL_GetTick() - tick) / 16400.0);
 8003616:	f000 fd29 	bl	800406c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff7f 	bl	8000524 <__aeabi_ui2d>
 8003626:	a344      	add	r3, pc, #272	@ (adr r3, 8003738 <StartGyroTask+0x1a0>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f7fd f91e 	bl	800086c <__aeabi_ddiv>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4620      	mov	r0, r4
 8003636:	4629      	mov	r1, r5
 8003638:	f7fc ffee 	bl	8000618 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
				garbage = garbage + (double) ((double) angularSpeed)
 8003640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003644:	f7fc fe32 	bl	80002ac <__adddf3>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	e9c7 2304 	strd	r2, r3, [r7, #16]
				offset = offset + angularSpeed;		//CALIBRATION OFFSET
 8003650:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff75 	bl	8000544 <__aeabi_i2d>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003662:	f7fc fe23 	bl	80002ac <__adddf3>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	e9c7 2306 	strd	r2, r3, [r7, #24]
				tick = HAL_GetTick();
 800366e:	f000 fcfd 	bl	800406c <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	@ 0x24
				i++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
			while (i < 1000) {					//sample 1000 for calibration
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003680:	dbb2      	blt.n	80035e8 <StartGyroTask+0x50>
			}
			offset = offset / i;
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7fc ff5e 	bl	8000544 <__aeabi_i2d>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003690:	f7fd f8ec 	bl	800086c <__aeabi_ddiv>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	e9c7 2306 	strd	r2, r3, [r7, #24]

			tick = HAL_GetTick();
 800369c:	f000 fce6 	bl	800406c <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24
			/* Infinite loop */
			for (;;) {
				osDelay(5);
 80036a2:	2005      	movs	r0, #5
 80036a4:	f006 f800 	bl	80096a8 <osDelay>
				readByte(0x37, val);
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	4619      	mov	r1, r3
 80036ae:	2037      	movs	r0, #55	@ 0x37
 80036b0:	f7fe fb36 	bl	8001d20 <readByte>
				angularSpeed = val[1] | (val[0] << 8);
 80036b4:	7a7b      	ldrb	r3, [r7, #9]
 80036b6:	b21a      	sxth	r2, r3
 80036b8:	7a3b      	ldrb	r3, [r7, #8]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	b21b      	sxth	r3, r3
 80036be:	4313      	orrs	r3, r2
 80036c0:	817b      	strh	r3, [r7, #10]
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 80036c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc ff3c 	bl	8000544 <__aeabi_i2d>
 80036cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d0:	f7fc fdea 	bl	80002a8 <__aeabi_dsub>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4614      	mov	r4, r2
 80036da:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0);	//calculate angle change by time diff
 80036dc:	f000 fcc6 	bl	800406c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc ff1c 	bl	8000524 <__aeabi_ui2d>
 80036ec:	a312      	add	r3, pc, #72	@ (adr r3, 8003738 <StartGyroTask+0x1a0>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fd f8bb 	bl	800086c <__aeabi_ddiv>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7fc ff8b 	bl	8000618 <__aeabi_dmul>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 800370a:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <StartGyroTask+0x1a8>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc fdcc 	bl	80002ac <__adddf3>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4909      	ldr	r1, [pc, #36]	@ (8003740 <StartGyroTask+0x1a8>)
 800371a:	e9c1 2300 	strd	r2, r3, [r1]
				i = i- angularSpeed;
 800371e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	60fb      	str	r3, [r7, #12]
				i++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
				tick = HAL_GetTick();
 800372e:	f000 fc9d 	bl	800406c <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	@ 0x24
				osDelay(5);
 8003734:	bf00      	nop
 8003736:	e7b4      	b.n	80036a2 <StartGyroTask+0x10a>
 8003738:	00000000 	.word	0x00000000
 800373c:	40d00400 	.word	0x40d00400
 8003740:	200004f8 	.word	0x200004f8

08003744 <StartUltrasoundTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUltrasoundTask */
void StartUltrasoundTask(void *argument)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltrasoundTask */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800374c:	2100      	movs	r1, #0
 800374e:	4805      	ldr	r0, [pc, #20]	@ (8003764 <StartUltrasoundTask+0x20>)
 8003750:	f003 fa6a 	bl	8006c28 <HAL_TIM_IC_Start_IT>

	/* Infinite loop */
  for(;;)
  {
	  Ultrasonic_Read();
 8003754:	f7fe fb90 	bl	8001e78 <Ultrasonic_Read>
	      osDelay(10); // Adjust delay as needed
 8003758:	200a      	movs	r0, #10
 800375a:	f005 ffa5 	bl	80096a8 <osDelay>
	  Ultrasonic_Read();
 800375e:	bf00      	nop
 8003760:	e7f8      	b.n	8003754 <StartUltrasoundTask+0x10>
 8003762:	bf00      	nop
 8003764:	200003b8 	.word	0x200003b8

08003768 <StartIRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIRTask */
  /* Infinite loop */
  for(;;)
  {
	  IR_Left_Read();
 8003770:	f7fe fc46 	bl	8002000 <IR_Left_Read>
	  IR_Right_Read();
 8003774:	f7fe fcc0 	bl	80020f8 <IR_Right_Read>
    osDelay(25);
 8003778:	2019      	movs	r0, #25
 800377a:	f005 ff95 	bl	80096a8 <osDelay>
	  IR_Left_Read();
 800377e:	bf00      	nop
 8003780:	e7f6      	b.n	8003770 <StartIRTask+0x8>

08003782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003786:	b672      	cpsid	i
}
 8003788:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <Error_Handler+0x8>
	...

08003790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	4b16      	ldr	r3, [pc, #88]	@ (80037f4 <HAL_MspInit+0x64>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	4a15      	ldr	r2, [pc, #84]	@ (80037f4 <HAL_MspInit+0x64>)
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037a6:	4b13      	ldr	r3, [pc, #76]	@ (80037f4 <HAL_MspInit+0x64>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4b0f      	ldr	r3, [pc, #60]	@ (80037f4 <HAL_MspInit+0x64>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	4a0e      	ldr	r2, [pc, #56]	@ (80037f4 <HAL_MspInit+0x64>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c2:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <HAL_MspInit+0x64>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	210f      	movs	r1, #15
 80037d2:	f06f 0001 	mvn.w	r0, #1
 80037d6:	f001 f954 	bl	8004a82 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2105      	movs	r1, #5
 80037de:	2005      	movs	r0, #5
 80037e0:	f001 f94f 	bl	8004a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80037e4:	2005      	movs	r0, #5
 80037e6:	f001 f968 	bl	8004aba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	@ 0x30
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2e      	ldr	r2, [pc, #184]	@ (80038d0 <HAL_ADC_MspInit+0xd8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d128      	bne.n	800386c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	4b2d      	ldr	r3, [pc, #180]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	4a2c      	ldr	r2, [pc, #176]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003828:	6453      	str	r3, [r2, #68]	@ 0x44
 800382a:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	4b26      	ldr	r3, [pc, #152]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	4a25      	ldr	r2, [pc, #148]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	6313      	str	r3, [r2, #48]	@ 0x30
 8003846:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003852:	2302      	movs	r3, #2
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003856:	2303      	movs	r3, #3
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	4619      	mov	r1, r3
 8003864:	481c      	ldr	r0, [pc, #112]	@ (80038d8 <HAL_ADC_MspInit+0xe0>)
 8003866:	f001 f9d5 	bl	8004c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800386a:	e02c      	b.n	80038c6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1a      	ldr	r2, [pc, #104]	@ (80038dc <HAL_ADC_MspInit+0xe4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d127      	bne.n	80038c6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	4a15      	ldr	r2, [pc, #84]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 8003880:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003884:	6453      	str	r3, [r2, #68]	@ 0x44
 8003886:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	4a0e      	ldr	r2, [pc, #56]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <HAL_ADC_MspInit+0xdc>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038ae:	2304      	movs	r3, #4
 80038b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038b2:	2303      	movs	r3, #3
 80038b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ba:	f107 031c 	add.w	r3, r7, #28
 80038be:	4619      	mov	r1, r3
 80038c0:	4805      	ldr	r0, [pc, #20]	@ (80038d8 <HAL_ADC_MspInit+0xe0>)
 80038c2:	f001 f9a7 	bl	8004c14 <HAL_GPIO_Init>
}
 80038c6:	bf00      	nop
 80038c8:	3730      	adds	r7, #48	@ 0x30
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40012000 	.word	0x40012000
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40012100 	.word	0x40012100

080038e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	@ 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a19      	ldr	r2, [pc, #100]	@ (8003964 <HAL_I2C_MspInit+0x84>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12c      	bne.n	800395c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	4b18      	ldr	r3, [pc, #96]	@ (8003968 <HAL_I2C_MspInit+0x88>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	4a17      	ldr	r2, [pc, #92]	@ (8003968 <HAL_I2C_MspInit+0x88>)
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6313      	str	r3, [r2, #48]	@ 0x30
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_I2C_MspInit+0x88>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800391e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003924:	2312      	movs	r3, #18
 8003926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392c:	2303      	movs	r3, #3
 800392e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003930:	2304      	movs	r3, #4
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	4619      	mov	r1, r3
 800393a:	480c      	ldr	r0, [pc, #48]	@ (800396c <HAL_I2C_MspInit+0x8c>)
 800393c:	f001 f96a 	bl	8004c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	4b08      	ldr	r3, [pc, #32]	@ (8003968 <HAL_I2C_MspInit+0x88>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	4a07      	ldr	r2, [pc, #28]	@ (8003968 <HAL_I2C_MspInit+0x88>)
 800394a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800394e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <HAL_I2C_MspInit+0x88>)
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800395c:	bf00      	nop
 800395e:	3728      	adds	r7, #40	@ 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40005400 	.word	0x40005400
 8003968:	40023800 	.word	0x40023800
 800396c:	40020400 	.word	0x40020400

08003970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	@ 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a23      	ldr	r2, [pc, #140]	@ (8003a1c <HAL_TIM_Base_MspInit+0xac>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	4a21      	ldr	r2, [pc, #132]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039ae:	e030      	b.n	8003a12 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <HAL_TIM_Base_MspInit+0xb4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d12b      	bne.n	8003a12 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	4a17      	ldr	r2, [pc, #92]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b11      	ldr	r3, [pc, #68]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	4a10      	ldr	r2, [pc, #64]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a20 <HAL_TIM_Base_MspInit+0xb0>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80039f2:	23c0      	movs	r3, #192	@ 0xc0
 80039f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a02:	2303      	movs	r3, #3
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4806      	ldr	r0, [pc, #24]	@ (8003a28 <HAL_TIM_Base_MspInit+0xb8>)
 8003a0e:	f001 f901 	bl	8004c14 <HAL_GPIO_Init>
}
 8003a12:	bf00      	nop
 8003a14:	3728      	adds	r7, #40	@ 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40010400 	.word	0x40010400
 8003a28:	40020800 	.word	0x40020800

08003a2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	@ 0x30
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4c:	d14b      	bne.n	8003ae6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	4b3f      	ldr	r3, [pc, #252]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	4a3e      	ldr	r2, [pc, #248]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	4b38      	ldr	r3, [pc, #224]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	4a37      	ldr	r2, [pc, #220]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7a:	4b35      	ldr	r3, [pc, #212]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	4b31      	ldr	r3, [pc, #196]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	4a30      	ldr	r2, [pc, #192]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a96:	4b2e      	ldr	r3, [pc, #184]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab8:	f107 031c 	add.w	r3, r7, #28
 8003abc:	4619      	mov	r1, r3
 8003abe:	4825      	ldr	r0, [pc, #148]	@ (8003b54 <HAL_TIM_Encoder_MspInit+0x128>)
 8003ac0:	f001 f8a8 	bl	8004c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	481e      	ldr	r0, [pc, #120]	@ (8003b58 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003ae0:	f001 f898 	bl	8004c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ae4:	e030      	b.n	8003b48 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <HAL_TIM_Encoder_MspInit+0x130>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d12b      	bne.n	8003b48 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	4b16      	ldr	r3, [pc, #88]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b00:	4b13      	ldr	r3, [pc, #76]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	4a0e      	ldr	r2, [pc, #56]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b28:	23c0      	movs	r3, #192	@ 0xc0
 8003b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	4619      	mov	r1, r3
 8003b42:	4804      	ldr	r0, [pc, #16]	@ (8003b54 <HAL_TIM_Encoder_MspInit+0x128>)
 8003b44:	f001 f866 	bl	8004c14 <HAL_GPIO_Init>
}
 8003b48:	bf00      	nop
 8003b4a:	3730      	adds	r7, #48	@ 0x30
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40000400 	.word	0x40000400

08003b60 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf4 <HAL_TIM_IC_MspInit+0x94>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d134      	bne.n	8003bec <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf8 <HAL_TIM_IC_MspInit+0x98>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <HAL_TIM_IC_MspInit+0x98>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b92:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_TIM_IC_MspInit+0x98>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_TIM_IC_MspInit+0x98>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	4a14      	ldr	r2, [pc, #80]	@ (8003bf8 <HAL_TIM_IC_MspInit+0x98>)
 8003ba8:	f043 0308 	orr.w	r3, r3, #8
 8003bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_TIM_IC_MspInit+0x98>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4809      	ldr	r0, [pc, #36]	@ (8003bfc <HAL_TIM_IC_MspInit+0x9c>)
 8003bd8:	f001 f81c 	bl	8004c14 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2105      	movs	r1, #5
 8003be0:	201e      	movs	r0, #30
 8003be2:	f000 ff4e 	bl	8004a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003be6:	201e      	movs	r0, #30
 8003be8:	f000 ff67 	bl	8004aba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003bec:	bf00      	nop
 8003bee:	3728      	adds	r7, #40	@ 0x28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020c00 	.word	0x40020c00

08003c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 030c 	add.w	r3, r7, #12
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a12      	ldr	r2, [pc, #72]	@ (8003c68 <HAL_TIM_MspPostInit+0x68>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d11e      	bne.n	8003c60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <HAL_TIM_MspPostInit+0x6c>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4a10      	ldr	r2, [pc, #64]	@ (8003c6c <HAL_TIM_MspPostInit+0x6c>)
 8003c2c:	f043 0310 	orr.w	r3, r3, #16
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <HAL_TIM_MspPostInit+0x6c>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4805      	ldr	r0, [pc, #20]	@ (8003c70 <HAL_TIM_MspPostInit+0x70>)
 8003c5c:	f000 ffda 	bl	8004c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c60:	bf00      	nop
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40021000 	.word	0x40021000

08003c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	@ 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <HAL_UART_MspInit+0x94>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d134      	bne.n	8003d00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d0c <HAL_UART_MspInit+0x98>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d0c <HAL_UART_MspInit+0x98>)
 8003ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca6:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <HAL_UART_MspInit+0x98>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <HAL_UART_MspInit+0x98>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <HAL_UART_MspInit+0x98>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_UART_MspInit+0x98>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003cce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4809      	ldr	r0, [pc, #36]	@ (8003d10 <HAL_UART_MspInit+0x9c>)
 8003cec:	f000 ff92 	bl	8004c14 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2105      	movs	r1, #5
 8003cf4:	2027      	movs	r0, #39	@ 0x27
 8003cf6:	f000 fec4 	bl	8004a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003cfa:	2027      	movs	r0, #39	@ 0x27
 8003cfc:	f000 fedd 	bl	8004aba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003d00:	bf00      	nop
 8003d02:	3728      	adds	r7, #40	@ 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40004800 	.word	0x40004800
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40020800 	.word	0x40020800

08003d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <NMI_Handler+0x4>

08003d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//int count =0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <HardFault_Handler+0x4>

08003d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <MemManage_Handler+0x4>

08003d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <BusFault_Handler+0x4>

08003d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <UsageFault_Handler+0x4>

08003d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d4e:	f000 f979 	bl	8004044 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003d52:	f007 f8d1 	bl	800aef8 <xTaskGetSchedulerState>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d001      	beq.n	8003d60 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003d5c:	f007 fecc 	bl	800baf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d78:	4802      	ldr	r0, [pc, #8]	@ (8003d84 <TIM4_IRQHandler+0x10>)
 8003d7a:	f003 f9b1 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200003b8 	.word	0x200003b8

08003d88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d8c:	4802      	ldr	r0, [pc, #8]	@ (8003d98 <USART3_IRQHandler+0x10>)
 8003d8e:	f004 fc03 	bl	8008598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000448 	.word	0x20000448

08003d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return 1;
 8003da0:	2301      	movs	r3, #1
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_kill>:

int _kill(int pid, int sig)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003db6:	f009 f933 	bl	800d020 <__errno>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2216      	movs	r2, #22
 8003dbe:	601a      	str	r2, [r3, #0]
  return -1;
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_exit>:

void _exit (int status)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ffe7 	bl	8003dac <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <_exit+0x12>

08003de2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e00a      	b.n	8003e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003df4:	f3af 8000 	nop.w
 8003df8:	4601      	mov	r1, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	60ba      	str	r2, [r7, #8]
 8003e00:	b2ca      	uxtb	r2, r1
 8003e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	dbf0      	blt.n	8003df4 <_read+0x12>
  }

  return len;
 8003e12:	687b      	ldr	r3, [r7, #4]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e009      	b.n	8003e42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	60ba      	str	r2, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	dbf1      	blt.n	8003e2e <_write+0x12>
  }
  return len;
 8003e4a:	687b      	ldr	r3, [r7, #4]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_close>:

int _close(int file)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e7c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_isatty>:

int _isatty(int file)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e94:	2301      	movs	r3, #1
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec4:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <_sbrk+0x5c>)
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <_sbrk+0x60>)
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ed0:	4b13      	ldr	r3, [pc, #76]	@ (8003f20 <_sbrk+0x64>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed8:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <_sbrk+0x64>)
 8003eda:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <_sbrk+0x68>)
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ede:	4b10      	ldr	r3, [pc, #64]	@ (8003f20 <_sbrk+0x64>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d207      	bcs.n	8003efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eec:	f009 f898 	bl	800d020 <__errno>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	220c      	movs	r2, #12
 8003ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	e009      	b.n	8003f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <_sbrk+0x64>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f02:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <_sbrk+0x64>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	4a05      	ldr	r2, [pc, #20]	@ (8003f20 <_sbrk+0x64>)
 8003f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20020000 	.word	0x20020000
 8003f1c:	00000400 	.word	0x00000400
 8003f20:	20000548 	.word	0x20000548
 8003f24:	200053f0 	.word	0x200053f0

08003f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <SystemInit+0x20>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f32:	4a05      	ldr	r2, [pc, #20]	@ (8003f48 <SystemInit+0x20>)
 8003f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <Reset_Handler>:
 8003f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f84 <LoopFillZerobss+0xe>
 8003f50:	f7ff ffea 	bl	8003f28 <SystemInit>
 8003f54:	480c      	ldr	r0, [pc, #48]	@ (8003f88 <LoopFillZerobss+0x12>)
 8003f56:	490d      	ldr	r1, [pc, #52]	@ (8003f8c <LoopFillZerobss+0x16>)
 8003f58:	4a0d      	ldr	r2, [pc, #52]	@ (8003f90 <LoopFillZerobss+0x1a>)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e002      	b.n	8003f64 <LoopCopyDataInit>

08003f5e <CopyDataInit>:
 8003f5e:	58d4      	ldr	r4, [r2, r3]
 8003f60:	50c4      	str	r4, [r0, r3]
 8003f62:	3304      	adds	r3, #4

08003f64 <LoopCopyDataInit>:
 8003f64:	18c4      	adds	r4, r0, r3
 8003f66:	428c      	cmp	r4, r1
 8003f68:	d3f9      	bcc.n	8003f5e <CopyDataInit>
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f94 <LoopFillZerobss+0x1e>)
 8003f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f98 <LoopFillZerobss+0x22>)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e001      	b.n	8003f76 <LoopFillZerobss>

08003f72 <FillZerobss>:
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	3204      	adds	r2, #4

08003f76 <LoopFillZerobss>:
 8003f76:	42a2      	cmp	r2, r4
 8003f78:	d3fb      	bcc.n	8003f72 <FillZerobss>
 8003f7a:	f009 f857 	bl	800d02c <__libc_init_array>
 8003f7e:	f7fc ffd1 	bl	8000f24 <main>
 8003f82:	4770      	bx	lr
 8003f84:	20020000 	.word	0x20020000
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	200001dc 	.word	0x200001dc
 8003f90:	080101a8 	.word	0x080101a8
 8003f94:	200001e0 	.word	0x200001e0
 8003f98:	200053ec 	.word	0x200053ec

08003f9c <ADC_IRQHandler>:
 8003f9c:	e7fe      	b.n	8003f9c <ADC_IRQHandler>
	...

08003fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe0 <HAL_Init+0x40>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe0 <HAL_Init+0x40>)
 8003faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_Init+0x40>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <HAL_Init+0x40>)
 8003fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fbc:	4b08      	ldr	r3, [pc, #32]	@ (8003fe0 <HAL_Init+0x40>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a07      	ldr	r2, [pc, #28]	@ (8003fe0 <HAL_Init+0x40>)
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f000 fd4f 	bl	8004a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fce:	200f      	movs	r0, #15
 8003fd0:	f000 f808 	bl	8003fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fd4:	f7ff fbdc 	bl	8003790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023c00 	.word	0x40023c00

08003fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fec:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_InitTick+0x54>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b12      	ldr	r3, [pc, #72]	@ (800403c <HAL_InitTick+0x58>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fd67 	bl	8004ad6 <HAL_SYSTICK_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e00e      	b.n	8004030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b0f      	cmp	r3, #15
 8004016:	d80a      	bhi.n	800402e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004018:	2200      	movs	r2, #0
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f000 fd2f 	bl	8004a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004024:	4a06      	ldr	r2, [pc, #24]	@ (8004040 <HAL_InitTick+0x5c>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e000      	b.n	8004030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000004 	.word	0x20000004
 800403c:	2000000c 	.word	0x2000000c
 8004040:	20000008 	.word	0x20000008

08004044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004048:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <HAL_IncTick+0x20>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_IncTick+0x24>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4413      	add	r3, r2
 8004054:	4a04      	ldr	r2, [pc, #16]	@ (8004068 <HAL_IncTick+0x24>)
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
 8004068:	2000054c 	.word	0x2000054c

0800406c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return uwTick;
 8004070:	4b03      	ldr	r3, [pc, #12]	@ (8004080 <HAL_GetTick+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	2000054c 	.word	0x2000054c

08004084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800408c:	f7ff ffee 	bl	800406c <HAL_GetTick>
 8004090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d005      	beq.n	80040aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800409e:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <HAL_Delay+0x44>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040aa:	bf00      	nop
 80040ac:	f7ff ffde 	bl	800406c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d8f7      	bhi.n	80040ac <HAL_Delay+0x28>
  {
  }
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2000000c 	.word	0x2000000c

080040cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e033      	b.n	800414a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fb84 	bl	80037f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	d118      	bne.n	800413c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004112:	f023 0302 	bic.w	r3, r3, #2
 8004116:	f043 0202 	orr.w	r2, r3, #2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fad8 	bl	80046d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	f043 0201 	orr.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	641a      	str	r2, [r3, #64]	@ 0x40
 800413a:	e001      	b.n	8004140 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_ADC_Start+0x1a>
 800416a:	2302      	movs	r3, #2
 800416c:	e0b2      	b.n	80042d4 <HAL_ADC_Start+0x180>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d018      	beq.n	80041b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004194:	4b52      	ldr	r3, [pc, #328]	@ (80042e0 <HAL_ADC_Start+0x18c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a52      	ldr	r2, [pc, #328]	@ (80042e4 <HAL_ADC_Start+0x190>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0c9a      	lsrs	r2, r3, #18
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80041a8:	e002      	b.n	80041b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f9      	bne.n	80041aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d17a      	bne.n	80042ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80041ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004202:	d106      	bne.n	8004212 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004208:	f023 0206 	bic.w	r2, r3, #6
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004210:	e002      	b.n	8004218 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004220:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <HAL_ADC_Start+0x194>)
 8004222:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800422c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2b00      	cmp	r3, #0
 8004238:	d12a      	bne.n	8004290 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2b      	ldr	r2, [pc, #172]	@ (80042ec <HAL_ADC_Start+0x198>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d015      	beq.n	8004270 <HAL_ADC_Start+0x11c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a29      	ldr	r2, [pc, #164]	@ (80042f0 <HAL_ADC_Start+0x19c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d105      	bne.n	800425a <HAL_ADC_Start+0x106>
 800424e:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <HAL_ADC_Start+0x194>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a25      	ldr	r2, [pc, #148]	@ (80042f4 <HAL_ADC_Start+0x1a0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d136      	bne.n	80042d2 <HAL_ADC_Start+0x17e>
 8004264:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <HAL_ADC_Start+0x194>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d130      	bne.n	80042d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d129      	bne.n	80042d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	e020      	b.n	80042d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a15      	ldr	r2, [pc, #84]	@ (80042ec <HAL_ADC_Start+0x198>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d11b      	bne.n	80042d2 <HAL_ADC_Start+0x17e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d114      	bne.n	80042d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	e00b      	b.n	80042d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f043 0210 	orr.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000004 	.word	0x20000004
 80042e4:	431bde83 	.word	0x431bde83
 80042e8:	40012300 	.word	0x40012300
 80042ec:	40012000 	.word	0x40012000
 80042f0:	40012100 	.word	0x40012100
 80042f4:	40012200 	.word	0x40012200

080042f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_ADC_Stop+0x16>
 800430a:	2302      	movs	r3, #2
 800430c:	e021      	b.n	8004352 <HAL_ADC_Stop+0x5a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800437a:	d113      	bne.n	80043a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800438a:	d10b      	bne.n	80043a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e063      	b.n	800446c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80043a4:	f7ff fe62 	bl	800406c <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043aa:	e021      	b.n	80043f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d01d      	beq.n	80043f0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_ADC_PollForConversion+0x6c>
 80043ba:	f7ff fe57 	bl	800406c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d212      	bcs.n	80043f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d00b      	beq.n	80043f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f043 0204 	orr.w	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e03d      	b.n	800446c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d1d6      	bne.n	80043ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0212 	mvn.w	r2, #18
 8004406:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d123      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11f      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004442:	2b00      	cmp	r3, #0
 8004444:	d111      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f043 0201 	orr.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1c>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e105      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x228>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	d925      	bls.n	8004508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	3b1e      	subs	r3, #30
 80044d2:	2207      	movs	r2, #7
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43da      	mvns	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	400a      	ands	r2, r1
 80044e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68d9      	ldr	r1, [r3, #12]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	4603      	mov	r3, r0
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4403      	add	r3, r0
 80044fa:	3b1e      	subs	r3, #30
 80044fc:	409a      	lsls	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	e022      	b.n	800454e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6919      	ldr	r1, [r3, #16]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	2207      	movs	r2, #7
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	400a      	ands	r2, r1
 800452a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6919      	ldr	r1, [r3, #16]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	4618      	mov	r0, r3
 800453e:	4603      	mov	r3, r0
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4403      	add	r3, r0
 8004544:	409a      	lsls	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b06      	cmp	r3, #6
 8004554:	d824      	bhi.n	80045a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	3b05      	subs	r3, #5
 8004568:	221f      	movs	r2, #31
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	400a      	ands	r2, r1
 8004576:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	4618      	mov	r0, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	3b05      	subs	r3, #5
 8004592:	fa00 f203 	lsl.w	r2, r0, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	635a      	str	r2, [r3, #52]	@ 0x34
 800459e:	e04c      	b.n	800463a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d824      	bhi.n	80045f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	3b23      	subs	r3, #35	@ 0x23
 80045ba:	221f      	movs	r2, #31
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43da      	mvns	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	400a      	ands	r2, r1
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4618      	mov	r0, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	3b23      	subs	r3, #35	@ 0x23
 80045e4:	fa00 f203 	lsl.w	r2, r0, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80045f0:	e023      	b.n	800463a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	3b41      	subs	r3, #65	@ 0x41
 8004604:	221f      	movs	r2, #31
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	400a      	ands	r2, r1
 8004612:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	4618      	mov	r0, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	3b41      	subs	r3, #65	@ 0x41
 800462e:	fa00 f203 	lsl.w	r2, r0, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800463a:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <HAL_ADC_ConfigChannel+0x234>)
 800463c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	@ (80046c8 <HAL_ADC_ConfigChannel+0x238>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d109      	bne.n	800465c <HAL_ADC_ConfigChannel+0x1cc>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b12      	cmp	r3, #18
 800464e:	d105      	bne.n	800465c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a19      	ldr	r2, [pc, #100]	@ (80046c8 <HAL_ADC_ConfigChannel+0x238>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d123      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x21e>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b10      	cmp	r3, #16
 800466c:	d003      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x1e6>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b11      	cmp	r3, #17
 8004674:	d11b      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b10      	cmp	r3, #16
 8004688:	d111      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <HAL_ADC_ConfigChannel+0x23c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a10      	ldr	r2, [pc, #64]	@ (80046d0 <HAL_ADC_ConfigChannel+0x240>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	0c9a      	lsrs	r2, r3, #18
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80046a0:	e002      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f9      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40012300 	.word	0x40012300
 80046c8:	40012000 	.word	0x40012000
 80046cc:	20000004 	.word	0x20000004
 80046d0:	431bde83 	.word	0x431bde83

080046d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046dc:	4b79      	ldr	r3, [pc, #484]	@ (80048c4 <ADC_Init+0x1f0>)
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	021a      	lsls	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800472c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800474e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6899      	ldr	r1, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	4a58      	ldr	r2, [pc, #352]	@ (80048c8 <ADC_Init+0x1f4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800477a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6899      	ldr	r1, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800479c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6899      	ldr	r1, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	e00f      	b.n	80047d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80047d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0202 	bic.w	r2, r2, #2
 80047e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6899      	ldr	r1, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7e1b      	ldrb	r3, [r3, #24]
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800480e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800481e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	3b01      	subs	r3, #1
 800482c:	035a      	lsls	r2, r3, #13
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	e007      	b.n	8004848 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004856:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	3b01      	subs	r3, #1
 8004864:	051a      	lsls	r2, r3, #20
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800487c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6899      	ldr	r1, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800488a:	025a      	lsls	r2, r3, #9
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6899      	ldr	r1, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	029a      	lsls	r2, r3, #10
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40012300 	.word	0x40012300
 80048c8:	0f000001 	.word	0x0f000001

080048cc <__NVIC_SetPriorityGrouping>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004910 <__NVIC_SetPriorityGrouping+0x44>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048e8:	4013      	ands	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048fe:	4a04      	ldr	r2, [pc, #16]	@ (8004910 <__NVIC_SetPriorityGrouping+0x44>)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	60d3      	str	r3, [r2, #12]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <__NVIC_GetPriorityGrouping>:
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004918:	4b04      	ldr	r3, [pc, #16]	@ (800492c <__NVIC_GetPriorityGrouping+0x18>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 0307 	and.w	r3, r3, #7
}
 8004922:	4618      	mov	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <__NVIC_EnableIRQ>:
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	2b00      	cmp	r3, #0
 8004940:	db0b      	blt.n	800495a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	f003 021f 	and.w	r2, r3, #31
 8004948:	4907      	ldr	r1, [pc, #28]	@ (8004968 <__NVIC_EnableIRQ+0x38>)
 800494a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2001      	movs	r0, #1
 8004952:	fa00 f202 	lsl.w	r2, r0, r2
 8004956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	e000e100 	.word	0xe000e100

0800496c <__NVIC_SetPriority>:
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	2b00      	cmp	r3, #0
 800497e:	db0a      	blt.n	8004996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	490c      	ldr	r1, [pc, #48]	@ (80049b8 <__NVIC_SetPriority+0x4c>)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	440b      	add	r3, r1
 8004990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004994:	e00a      	b.n	80049ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4908      	ldr	r1, [pc, #32]	@ (80049bc <__NVIC_SetPriority+0x50>)
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	3b04      	subs	r3, #4
 80049a4:	0112      	lsls	r2, r2, #4
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	440b      	add	r3, r1
 80049aa:	761a      	strb	r2, [r3, #24]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000e100 	.word	0xe000e100
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <NVIC_EncodePriority>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	@ 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f1c3 0307 	rsb	r3, r3, #7
 80049da:	2b04      	cmp	r3, #4
 80049dc:	bf28      	it	cs
 80049de:	2304      	movcs	r3, #4
 80049e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d902      	bls.n	80049f0 <NVIC_EncodePriority+0x30>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3b03      	subs	r3, #3
 80049ee:	e000      	b.n	80049f2 <NVIC_EncodePriority+0x32>
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	f04f 32ff 	mov.w	r2, #4294967295
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43da      	mvns	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	401a      	ands	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a08:	f04f 31ff 	mov.w	r1, #4294967295
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	43d9      	mvns	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a18:	4313      	orrs	r3, r2
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3724      	adds	r7, #36	@ 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a38:	d301      	bcc.n	8004a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e00f      	b.n	8004a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a68 <SysTick_Config+0x40>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a46:	210f      	movs	r1, #15
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	f7ff ff8e 	bl	800496c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a50:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <SysTick_Config+0x40>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a56:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <SysTick_Config+0x40>)
 8004a58:	2207      	movs	r2, #7
 8004a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	e000e010 	.word	0xe000e010

08004a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff ff29 	bl	80048cc <__NVIC_SetPriorityGrouping>
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	4603      	mov	r3, r0
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a94:	f7ff ff3e 	bl	8004914 <__NVIC_GetPriorityGrouping>
 8004a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	f7ff ff8e 	bl	80049c0 <NVIC_EncodePriority>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff ff5d 	bl	800496c <__NVIC_SetPriority>
}
 8004ab2:	bf00      	nop
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ff31 	bl	8004930 <__NVIC_EnableIRQ>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ffa2 	bl	8004a28 <SysTick_Config>
 8004ae4:	4603      	mov	r3, r0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004afc:	f7ff fab6 	bl	800406c <HAL_GetTick>
 8004b00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d008      	beq.n	8004b20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2280      	movs	r2, #128	@ 0x80
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e052      	b.n	8004bc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0216 	bic.w	r2, r2, #22
 8004b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <HAL_DMA_Abort+0x62>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0208 	bic.w	r2, r2, #8
 8004b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b70:	e013      	b.n	8004b9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b72:	f7ff fa7b 	bl	800406c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b05      	cmp	r3, #5
 8004b7e:	d90c      	bls.n	8004b9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e015      	b.n	8004bc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e4      	bne.n	8004b72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bac:	223f      	movs	r2, #63	@ 0x3f
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d004      	beq.n	8004bec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2280      	movs	r2, #128	@ 0x80
 8004be6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e00c      	b.n	8004c06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2205      	movs	r2, #5
 8004bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	@ 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	e16b      	b.n	8004f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c30:	2201      	movs	r2, #1
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	f040 815a 	bne.w	8004f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d005      	beq.n	8004c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d130      	bne.n	8004cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	2203      	movs	r2, #3
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 0201 	and.w	r2, r3, #1
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d017      	beq.n	8004d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d123      	bne.n	8004d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	08da      	lsrs	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3208      	adds	r2, #8
 8004d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	220f      	movs	r2, #15
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	08da      	lsrs	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3208      	adds	r2, #8
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	2203      	movs	r2, #3
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0203 	and.w	r2, r3, #3
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80b4 	beq.w	8004f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	4b60      	ldr	r3, [pc, #384]	@ (8004f20 <HAL_GPIO_Init+0x30c>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	4a5f      	ldr	r2, [pc, #380]	@ (8004f20 <HAL_GPIO_Init+0x30c>)
 8004da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004daa:	4b5d      	ldr	r3, [pc, #372]	@ (8004f20 <HAL_GPIO_Init+0x30c>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f24 <HAL_GPIO_Init+0x310>)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	220f      	movs	r2, #15
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	@ (8004f28 <HAL_GPIO_Init+0x314>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02b      	beq.n	8004e3a <HAL_GPIO_Init+0x226>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a51      	ldr	r2, [pc, #324]	@ (8004f2c <HAL_GPIO_Init+0x318>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d025      	beq.n	8004e36 <HAL_GPIO_Init+0x222>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a50      	ldr	r2, [pc, #320]	@ (8004f30 <HAL_GPIO_Init+0x31c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01f      	beq.n	8004e32 <HAL_GPIO_Init+0x21e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a4f      	ldr	r2, [pc, #316]	@ (8004f34 <HAL_GPIO_Init+0x320>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d019      	beq.n	8004e2e <HAL_GPIO_Init+0x21a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a4e      	ldr	r2, [pc, #312]	@ (8004f38 <HAL_GPIO_Init+0x324>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_GPIO_Init+0x216>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a4d      	ldr	r2, [pc, #308]	@ (8004f3c <HAL_GPIO_Init+0x328>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00d      	beq.n	8004e26 <HAL_GPIO_Init+0x212>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8004f40 <HAL_GPIO_Init+0x32c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <HAL_GPIO_Init+0x20e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a4b      	ldr	r2, [pc, #300]	@ (8004f44 <HAL_GPIO_Init+0x330>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_GPIO_Init+0x20a>
 8004e1a:	2307      	movs	r3, #7
 8004e1c:	e00e      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	e00c      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e22:	2306      	movs	r3, #6
 8004e24:	e00a      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e26:	2305      	movs	r3, #5
 8004e28:	e008      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	e006      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e004      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e002      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	f002 0203 	and.w	r2, r2, #3
 8004e42:	0092      	lsls	r2, r2, #2
 8004e44:	4093      	lsls	r3, r2
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4c:	4935      	ldr	r1, [pc, #212]	@ (8004f24 <HAL_GPIO_Init+0x310>)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	089b      	lsrs	r3, r3, #2
 8004e52:	3302      	adds	r3, #2
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e7e:	4a32      	ldr	r2, [pc, #200]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e84:	4b30      	ldr	r3, [pc, #192]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ea8:	4a27      	ldr	r2, [pc, #156]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eae:	4b26      	ldr	r3, [pc, #152]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004efc:	4a12      	ldr	r2, [pc, #72]	@ (8004f48 <HAL_GPIO_Init+0x334>)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3301      	adds	r3, #1
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	f67f ae90 	bls.w	8004c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	3724      	adds	r7, #36	@ 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40020000 	.word	0x40020000
 8004f2c:	40020400 	.word	0x40020400
 8004f30:	40020800 	.word	0x40020800
 8004f34:	40020c00 	.word	0x40020c00
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40021400 	.word	0x40021400
 8004f40:	40021800 	.word	0x40021800
 8004f44:	40021c00 	.word	0x40021c00
 8004f48:	40013c00 	.word	0x40013c00

08004f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f5c:	787b      	ldrb	r3, [r7, #1]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f62:	887a      	ldrh	r2, [r7, #2]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f68:	e003      	b.n	8004f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f6a:	887b      	ldrh	r3, [r7, #2]
 8004f6c:	041a      	lsls	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	619a      	str	r2, [r3, #24]
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b085      	sub	sp, #20
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f90:	887a      	ldrh	r2, [r7, #2]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4013      	ands	r3, r2
 8004f96:	041a      	lsls	r2, r3, #16
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	43d9      	mvns	r1, r3
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	619a      	str	r2, [r3, #24]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e12b      	b.n	800521e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fe fc80 	bl	80038e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2224      	movs	r2, #36	@ 0x24
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005018:	f001 fc1e 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 800501c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4a81      	ldr	r2, [pc, #516]	@ (8005228 <HAL_I2C_Init+0x274>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d807      	bhi.n	8005038 <HAL_I2C_Init+0x84>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a80      	ldr	r2, [pc, #512]	@ (800522c <HAL_I2C_Init+0x278>)
 800502c:	4293      	cmp	r3, r2
 800502e:	bf94      	ite	ls
 8005030:	2301      	movls	r3, #1
 8005032:	2300      	movhi	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e006      	b.n	8005046 <HAL_I2C_Init+0x92>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a7d      	ldr	r2, [pc, #500]	@ (8005230 <HAL_I2C_Init+0x27c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	bf94      	ite	ls
 8005040:	2301      	movls	r3, #1
 8005042:	2300      	movhi	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0e7      	b.n	800521e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a78      	ldr	r2, [pc, #480]	@ (8005234 <HAL_I2C_Init+0x280>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	0c9b      	lsrs	r3, r3, #18
 8005058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a6a      	ldr	r2, [pc, #424]	@ (8005228 <HAL_I2C_Init+0x274>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d802      	bhi.n	8005088 <HAL_I2C_Init+0xd4>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3301      	adds	r3, #1
 8005086:	e009      	b.n	800509c <HAL_I2C_Init+0xe8>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4a69      	ldr	r2, [pc, #420]	@ (8005238 <HAL_I2C_Init+0x284>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	099b      	lsrs	r3, r3, #6
 800509a:	3301      	adds	r3, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80050ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	495c      	ldr	r1, [pc, #368]	@ (8005228 <HAL_I2C_Init+0x274>)
 80050b8:	428b      	cmp	r3, r1
 80050ba:	d819      	bhi.n	80050f0 <HAL_I2C_Init+0x13c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1e59      	subs	r1, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050d0:	400b      	ands	r3, r1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_I2C_Init+0x138>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1e59      	subs	r1, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	e051      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 80050ec:	2304      	movs	r3, #4
 80050ee:	e04f      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d111      	bne.n	800511c <HAL_I2C_Init+0x168>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e58      	subs	r0, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	440b      	add	r3, r1
 8005106:	fbb0 f3f3 	udiv	r3, r0, r3
 800510a:	3301      	adds	r3, #1
 800510c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e012      	b.n	8005142 <HAL_I2C_Init+0x18e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1e58      	subs	r0, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6859      	ldr	r1, [r3, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	0099      	lsls	r1, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005132:	3301      	adds	r3, #1
 8005134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Init+0x196>
 8005146:	2301      	movs	r3, #1
 8005148:	e022      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10e      	bne.n	8005170 <HAL_I2C_Init+0x1bc>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1e58      	subs	r0, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	440b      	add	r3, r1
 8005160:	fbb0 f3f3 	udiv	r3, r0, r3
 8005164:	3301      	adds	r3, #1
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800516e:	e00f      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1e58      	subs	r0, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	0099      	lsls	r1, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	fbb0 f3f3 	udiv	r3, r0, r3
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	6809      	ldr	r1, [r1, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6911      	ldr	r1, [r2, #16]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68d2      	ldr	r2, [r2, #12]
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	000186a0 	.word	0x000186a0
 800522c:	001e847f 	.word	0x001e847f
 8005230:	003d08ff 	.word	0x003d08ff
 8005234:	431bde83 	.word	0x431bde83
 8005238:	10624dd3 	.word	0x10624dd3

0800523c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	461a      	mov	r2, r3
 8005248:	460b      	mov	r3, r1
 800524a:	817b      	strh	r3, [r7, #10]
 800524c:	4613      	mov	r3, r2
 800524e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005250:	f7fe ff0c 	bl	800406c <HAL_GetTick>
 8005254:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b20      	cmp	r3, #32
 8005260:	f040 80e0 	bne.w	8005424 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	2319      	movs	r3, #25
 800526a:	2201      	movs	r2, #1
 800526c:	4970      	ldr	r1, [pc, #448]	@ (8005430 <HAL_I2C_Master_Transmit+0x1f4>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fc64 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	e0d3      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_I2C_Master_Transmit+0x50>
 8005288:	2302      	movs	r3, #2
 800528a:	e0cc      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d007      	beq.n	80052b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2221      	movs	r2, #33	@ 0x21
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2210      	movs	r2, #16
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	893a      	ldrh	r2, [r7, #8]
 80052e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a50      	ldr	r2, [pc, #320]	@ (8005434 <HAL_I2C_Master_Transmit+0x1f8>)
 80052f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052f4:	8979      	ldrh	r1, [r7, #10]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 face 	bl	800589c <I2C_MasterRequestWrite>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e08d      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005320:	e066      	b.n	80053f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	6a39      	ldr	r1, [r7, #32]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fd22 	bl	8005d70 <I2C_WaitOnTXEFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	2b04      	cmp	r3, #4
 8005338:	d107      	bne.n	800534a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e06b      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11b      	bne.n	80053c4 <HAL_I2C_Master_Transmit+0x188>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d017      	beq.n	80053c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	6a39      	ldr	r1, [r7, #32]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fd19 	bl	8005e00 <I2C_WaitOnBTFFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d107      	bne.n	80053ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e01a      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d194      	bne.n	8005322 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	00100002 	.word	0x00100002
 8005434:	ffff0000 	.word	0xffff0000

08005438 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	@ 0x30
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	461a      	mov	r2, r3
 8005444:	460b      	mov	r3, r1
 8005446:	817b      	strh	r3, [r7, #10]
 8005448:	4613      	mov	r3, r2
 800544a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800544c:	f7fe fe0e 	bl	800406c <HAL_GetTick>
 8005450:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b20      	cmp	r3, #32
 800545c:	f040 8217 	bne.w	800588e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2319      	movs	r3, #25
 8005466:	2201      	movs	r2, #1
 8005468:	497c      	ldr	r1, [pc, #496]	@ (800565c <HAL_I2C_Master_Receive+0x224>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fb66 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
 8005478:	e20a      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_I2C_Master_Receive+0x50>
 8005484:	2302      	movs	r3, #2
 8005486:	e203      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b01      	cmp	r3, #1
 800549c:	d007      	beq.n	80054ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2222      	movs	r2, #34	@ 0x22
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2210      	movs	r2, #16
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	893a      	ldrh	r2, [r7, #8]
 80054de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005660 <HAL_I2C_Master_Receive+0x228>)
 80054ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054f0:	8979      	ldrh	r1, [r7, #10]
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fa52 	bl	80059a0 <I2C_MasterRequestRead>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e1c4      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d113      	bne.n	8005536 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550e:	2300      	movs	r3, #0
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e198      	b.n	8005868 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553a:	2b01      	cmp	r3, #1
 800553c:	d11b      	bne.n	8005576 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800554c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e178      	b.n	8005868 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557a:	2b02      	cmp	r3, #2
 800557c:	d11b      	bne.n	80055b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800558c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800559c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	e158      	b.n	8005868 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055dc:	e144      	b.n	8005868 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	f200 80f1 	bhi.w	80057ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d123      	bne.n	8005638 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fc4b 	bl	8005e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e145      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005636:	e117      	b.n	8005868 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563c:	2b02      	cmp	r3, #2
 800563e:	d14e      	bne.n	80056de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	4906      	ldr	r1, [pc, #24]	@ (8005664 <HAL_I2C_Master_Receive+0x22c>)
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fa76 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e11a      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
 800565a:	bf00      	nop
 800565c:	00100002 	.word	0x00100002
 8005660:	ffff0000 	.word	0xffff0000
 8005664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056dc:	e0c4      	b.n	8005868 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	2200      	movs	r2, #0
 80056e6:	496c      	ldr	r1, [pc, #432]	@ (8005898 <HAL_I2C_Master_Receive+0x460>)
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fa27 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0cb      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005740:	2200      	movs	r2, #0
 8005742:	4955      	ldr	r1, [pc, #340]	@ (8005898 <HAL_I2C_Master_Receive+0x460>)
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f9f9 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e09d      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057c8:	e04e      	b.n	8005868 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fb5e 	bl	8005e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e058      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d124      	bne.n	8005868 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005822:	2b03      	cmp	r3, #3
 8005824:	d107      	bne.n	8005836 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005834:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	f47f aeb6 	bne.w	80055de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e000      	b.n	8005890 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3728      	adds	r7, #40	@ 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	00010004 	.word	0x00010004

0800589c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	460b      	mov	r3, r1
 80058aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d006      	beq.n	80058c6 <I2C_MasterRequestWrite+0x2a>
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d003      	beq.n	80058c6 <I2C_MasterRequestWrite+0x2a>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058c4:	d108      	bne.n	80058d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e00b      	b.n	80058f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	2b12      	cmp	r3, #18
 80058de:	d107      	bne.n	80058f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f91d 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00d      	beq.n	8005924 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005916:	d103      	bne.n	8005920 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e035      	b.n	8005990 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800592c:	d108      	bne.n	8005940 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800592e:	897b      	ldrh	r3, [r7, #10]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800593c:	611a      	str	r2, [r3, #16]
 800593e:	e01b      	b.n	8005978 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005940:	897b      	ldrh	r3, [r7, #10]
 8005942:	11db      	asrs	r3, r3, #7
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 0306 	and.w	r3, r3, #6
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f063 030f 	orn	r3, r3, #15
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	490e      	ldr	r1, [pc, #56]	@ (8005998 <I2C_MasterRequestWrite+0xfc>)
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f966 	bl	8005c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e010      	b.n	8005990 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800596e:	897b      	ldrh	r3, [r7, #10]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4907      	ldr	r1, [pc, #28]	@ (800599c <I2C_MasterRequestWrite+0x100>)
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f956 	bl	8005c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	00010008 	.word	0x00010008
 800599c:	00010002 	.word	0x00010002

080059a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	460b      	mov	r3, r1
 80059ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d006      	beq.n	80059da <I2C_MasterRequestRead+0x3a>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d003      	beq.n	80059da <I2C_MasterRequestRead+0x3a>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059d8:	d108      	bne.n	80059ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e00b      	b.n	8005a04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	2b11      	cmp	r3, #17
 80059f2:	d107      	bne.n	8005a04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f893 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a2a:	d103      	bne.n	8005a34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e079      	b.n	8005b2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a40:	d108      	bne.n	8005a54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a42:	897b      	ldrh	r3, [r7, #10]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	611a      	str	r2, [r3, #16]
 8005a52:	e05f      	b.n	8005b14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a54:	897b      	ldrh	r3, [r7, #10]
 8005a56:	11db      	asrs	r3, r3, #7
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 0306 	and.w	r3, r3, #6
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f063 030f 	orn	r3, r3, #15
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4930      	ldr	r1, [pc, #192]	@ (8005b34 <I2C_MasterRequestRead+0x194>)
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f8dc 	bl	8005c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e054      	b.n	8005b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a82:	897b      	ldrh	r3, [r7, #10]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4929      	ldr	r1, [pc, #164]	@ (8005b38 <I2C_MasterRequestRead+0x198>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f8cc 	bl	8005c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e044      	b.n	8005b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ac6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f831 	bl	8005b3c <I2C_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aee:	d103      	bne.n	8005af8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e017      	b.n	8005b2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005afc:	897b      	ldrh	r3, [r7, #10]
 8005afe:	11db      	asrs	r3, r3, #7
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f063 030e 	orn	r3, r3, #14
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4907      	ldr	r1, [pc, #28]	@ (8005b38 <I2C_MasterRequestRead+0x198>)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f888 	bl	8005c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	00010008 	.word	0x00010008
 8005b38:	00010002 	.word	0x00010002

08005b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b4c:	e048      	b.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d044      	beq.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7fe fa89 	bl	800406c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d139      	bne.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d10d      	bne.n	8005b92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	43da      	mvns	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4013      	ands	r3, r2
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	e00c      	b.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	43da      	mvns	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf0c      	ite	eq
 8005ba4:	2301      	moveq	r3, #1
 8005ba6:	2300      	movne	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d116      	bne.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e023      	b.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	0c1b      	lsrs	r3, r3, #16
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d10d      	bne.n	8005c06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	43da      	mvns	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	e00c      	b.n	8005c20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	43da      	mvns	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4013      	ands	r3, r2
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d093      	beq.n	8005b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c3e:	e071      	b.n	8005d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4e:	d123      	bne.n	8005c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	f043 0204 	orr.w	r2, r3, #4
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e067      	b.n	8005d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d041      	beq.n	8005d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca0:	f7fe f9e4 	bl	800406c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d302      	bcc.n	8005cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d136      	bne.n	8005d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d10c      	bne.n	8005cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	43da      	mvns	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	e00b      	b.n	8005cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	43da      	mvns	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d10:	f043 0220 	orr.w	r2, r3, #32
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e021      	b.n	8005d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d10c      	bne.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	43da      	mvns	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf14      	ite	ne
 8005d40:	2301      	movne	r3, #1
 8005d42:	2300      	moveq	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	e00b      	b.n	8005d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	43da      	mvns	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f af6d 	bne.w	8005c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d7c:	e034      	b.n	8005de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f8e3 	bl	8005f4a <I2C_IsAcknowledgeFailed>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e034      	b.n	8005df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d028      	beq.n	8005de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d96:	f7fe f969 	bl	800406c <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11d      	bne.n	8005de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db6:	2b80      	cmp	r3, #128	@ 0x80
 8005db8:	d016      	beq.n	8005de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e007      	b.n	8005df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df2:	2b80      	cmp	r3, #128	@ 0x80
 8005df4:	d1c3      	bne.n	8005d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e0c:	e034      	b.n	8005e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f89b 	bl	8005f4a <I2C_IsAcknowledgeFailed>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e034      	b.n	8005e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d028      	beq.n	8005e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fe f921 	bl	800406c <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d11d      	bne.n	8005e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d016      	beq.n	8005e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e007      	b.n	8005e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d1c3      	bne.n	8005e0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e9c:	e049      	b.n	8005f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d119      	bne.n	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0210 	mvn.w	r2, #16
 8005eb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e030      	b.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee0:	f7fe f8c4 	bl	800406c <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11d      	bne.n	8005f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d016      	beq.n	8005f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e007      	b.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d1ae      	bne.n	8005e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f60:	d11b      	bne.n	8005f9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005fae:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <HAL_PWR_EnableBkUpAccess+0x24>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005fba:	687b      	ldr	r3, [r7, #4]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	420e0020 	.word	0x420e0020
 8005fcc:	40007000 	.word	0x40007000

08005fd0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005fd6:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005fdc:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005fe2:	687b      	ldr	r3, [r7, #4]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	420e0020 	.word	0x420e0020
 8005ff4:	40007000 	.word	0x40007000

08005ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e267      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d075      	beq.n	8006102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006016:	4b88      	ldr	r3, [pc, #544]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b04      	cmp	r3, #4
 8006020:	d00c      	beq.n	800603c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006022:	4b85      	ldr	r3, [pc, #532]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800602a:	2b08      	cmp	r3, #8
 800602c:	d112      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602e:	4b82      	ldr	r3, [pc, #520]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800603a:	d10b      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603c:	4b7e      	ldr	r3, [pc, #504]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05b      	beq.n	8006100 <HAL_RCC_OscConfig+0x108>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d157      	bne.n	8006100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e242      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605c:	d106      	bne.n	800606c <HAL_RCC_OscConfig+0x74>
 800605e:	4b76      	ldr	r3, [pc, #472]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a75      	ldr	r2, [pc, #468]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e01d      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006074:	d10c      	bne.n	8006090 <HAL_RCC_OscConfig+0x98>
 8006076:	4b70      	ldr	r3, [pc, #448]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a6f      	ldr	r2, [pc, #444]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800607c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4b6d      	ldr	r3, [pc, #436]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a6c      	ldr	r2, [pc, #432]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e00b      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 8006090:	4b69      	ldr	r3, [pc, #420]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a68      	ldr	r2, [pc, #416]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	4b66      	ldr	r3, [pc, #408]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a65      	ldr	r2, [pc, #404]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80060a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d013      	beq.n	80060d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fd ffdc 	bl	800406c <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fd ffd8 	bl	800406c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	@ 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e207      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0xc0>
 80060d6:	e014      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fd ffc8 	bl	800406c <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e0:	f7fd ffc4 	bl	800406c <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	@ 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1f3      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f2:	4b51      	ldr	r3, [pc, #324]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0xe8>
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d063      	beq.n	80061d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800610e:	4b4a      	ldr	r3, [pc, #296]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611a:	4b47      	ldr	r3, [pc, #284]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006122:	2b08      	cmp	r3, #8
 8006124:	d11c      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006126:	4b44      	ldr	r3, [pc, #272]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d116      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006132:	4b41      	ldr	r3, [pc, #260]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d001      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e1c7      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b3b      	ldr	r3, [pc, #236]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4937      	ldr	r1, [pc, #220]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615e:	e03a      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006168:	4b34      	ldr	r3, [pc, #208]	@ (800623c <HAL_RCC_OscConfig+0x244>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fd ff7d 	bl	800406c <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006176:	f7fd ff79 	bl	800406c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e1a8      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006188:	4b2b      	ldr	r3, [pc, #172]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006194:	4b28      	ldr	r3, [pc, #160]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4925      	ldr	r1, [pc, #148]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	e015      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061aa:	4b24      	ldr	r3, [pc, #144]	@ (800623c <HAL_RCC_OscConfig+0x244>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fd ff5c 	bl	800406c <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fd ff58 	bl	800406c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e187      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d036      	beq.n	8006250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ea:	4b15      	ldr	r3, [pc, #84]	@ (8006240 <HAL_RCC_OscConfig+0x248>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fd ff3c 	bl	800406c <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061f8:	f7fd ff38 	bl	800406c <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e167      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620a:	4b0b      	ldr	r3, [pc, #44]	@ (8006238 <HAL_RCC_OscConfig+0x240>)
 800620c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x200>
 8006216:	e01b      	b.n	8006250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006218:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <HAL_RCC_OscConfig+0x248>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621e:	f7fd ff25 	bl	800406c <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006224:	e00e      	b.n	8006244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006226:	f7fd ff21 	bl	800406c <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d907      	bls.n	8006244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e150      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
 8006238:	40023800 	.word	0x40023800
 800623c:	42470000 	.word	0x42470000
 8006240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006244:	4b88      	ldr	r3, [pc, #544]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ea      	bne.n	8006226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8097 	beq.w	800638c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006262:	4b81      	ldr	r3, [pc, #516]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
 8006272:	4b7d      	ldr	r3, [pc, #500]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	4a7c      	ldr	r2, [pc, #496]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800627c:	6413      	str	r3, [r2, #64]	@ 0x40
 800627e:	4b7a      	ldr	r3, [pc, #488]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628e:	4b77      	ldr	r3, [pc, #476]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d118      	bne.n	80062cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800629a:	4b74      	ldr	r3, [pc, #464]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a73      	ldr	r2, [pc, #460]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062a6:	f7fd fee1 	bl	800406c <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ae:	f7fd fedd 	bl	800406c <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e10c      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c0:	4b6a      	ldr	r3, [pc, #424]	@ (800646c <HAL_RCC_OscConfig+0x474>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0f0      	beq.n	80062ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d106      	bne.n	80062e2 <HAL_RCC_OscConfig+0x2ea>
 80062d4:	4b64      	ldr	r3, [pc, #400]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d8:	4a63      	ldr	r2, [pc, #396]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e0:	e01c      	b.n	800631c <HAL_RCC_OscConfig+0x324>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d10c      	bne.n	8006304 <HAL_RCC_OscConfig+0x30c>
 80062ea:	4b5f      	ldr	r3, [pc, #380]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	4a5e      	ldr	r2, [pc, #376]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062f0:	f043 0304 	orr.w	r3, r3, #4
 80062f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f6:	4b5c      	ldr	r3, [pc, #368]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	6713      	str	r3, [r2, #112]	@ 0x70
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0x324>
 8006304:	4b58      	ldr	r3, [pc, #352]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	4a57      	ldr	r2, [pc, #348]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006310:	4b55      	ldr	r3, [pc, #340]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006314:	4a54      	ldr	r2, [pc, #336]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006316:	f023 0304 	bic.w	r3, r3, #4
 800631a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d015      	beq.n	8006350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006324:	f7fd fea2 	bl	800406c <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632a:	e00a      	b.n	8006342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632c:	f7fd fe9e 	bl	800406c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e0cb      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006342:	4b49      	ldr	r3, [pc, #292]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0ee      	beq.n	800632c <HAL_RCC_OscConfig+0x334>
 800634e:	e014      	b.n	800637a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006350:	f7fd fe8c 	bl	800406c <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006356:	e00a      	b.n	800636e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006358:	f7fd fe88 	bl	800406c <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e0b5      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636e:	4b3e      	ldr	r3, [pc, #248]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1ee      	bne.n	8006358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d105      	bne.n	800638c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006380:	4b39      	ldr	r3, [pc, #228]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006384:	4a38      	ldr	r2, [pc, #224]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800638a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80a1 	beq.w	80064d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006396:	4b34      	ldr	r3, [pc, #208]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d05c      	beq.n	800645c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d141      	bne.n	800642e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063aa:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <HAL_RCC_OscConfig+0x478>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fd fe5c 	bl	800406c <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fd fe58 	bl	800406c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e087      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	4b27      	ldr	r3, [pc, #156]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	019b      	lsls	r3, r3, #6
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	3b01      	subs	r3, #1
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	491b      	ldr	r1, [pc, #108]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006400:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <HAL_RCC_OscConfig+0x478>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006406:	f7fd fe31 	bl	800406c <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640e:	f7fd fe2d 	bl	800406c <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e05c      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006420:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0x416>
 800642c:	e054      	b.n	80064d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <HAL_RCC_OscConfig+0x478>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006434:	f7fd fe1a 	bl	800406c <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643c:	f7fd fe16 	bl	800406c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e045      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644e:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <HAL_RCC_OscConfig+0x470>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x444>
 800645a:	e03d      	b.n	80064d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d107      	bne.n	8006474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e038      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
 8006468:	40023800 	.word	0x40023800
 800646c:	40007000 	.word	0x40007000
 8006470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006474:	4b1b      	ldr	r3, [pc, #108]	@ (80064e4 <HAL_RCC_OscConfig+0x4ec>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d028      	beq.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800648c:	429a      	cmp	r2, r3
 800648e:	d121      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d11a      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064a4:	4013      	ands	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d111      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	3b01      	subs	r3, #1
 80064be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d107      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800

080064e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0cc      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064fc:	4b68      	ldr	r3, [pc, #416]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d90c      	bls.n	8006524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650a:	4b65      	ldr	r3, [pc, #404]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b63      	ldr	r3, [pc, #396]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e0b8      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d020      	beq.n	8006572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800653c:	4b59      	ldr	r3, [pc, #356]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	4a58      	ldr	r2, [pc, #352]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006554:	4b53      	ldr	r3, [pc, #332]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a52      	ldr	r2, [pc, #328]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800655e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006560:	4b50      	ldr	r3, [pc, #320]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	494d      	ldr	r1, [pc, #308]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d044      	beq.n	8006608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006586:	4b47      	ldr	r3, [pc, #284]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d119      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e07f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d003      	beq.n	80065a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d107      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a6:	4b3f      	ldr	r3, [pc, #252]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e06f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b6:	4b3b      	ldr	r3, [pc, #236]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e067      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c6:	4b37      	ldr	r3, [pc, #220]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f023 0203 	bic.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4934      	ldr	r1, [pc, #208]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d8:	f7fd fd48 	bl	800406c <HAL_GetTick>
 80065dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e0:	f7fd fd44 	bl	800406c <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e04f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	4b2b      	ldr	r3, [pc, #172]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 020c 	and.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	429a      	cmp	r2, r3
 8006606:	d1eb      	bne.n	80065e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006608:	4b25      	ldr	r3, [pc, #148]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d20c      	bcs.n	8006630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b22      	ldr	r3, [pc, #136]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800661e:	4b20      	ldr	r3, [pc, #128]	@ (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d001      	beq.n	8006630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e032      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800663c:	4b19      	ldr	r3, [pc, #100]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4916      	ldr	r1, [pc, #88]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	4313      	orrs	r3, r2
 800664c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800665a:	4b12      	ldr	r3, [pc, #72]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	490e      	ldr	r1, [pc, #56]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	4313      	orrs	r3, r2
 800666c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800666e:	f000 f821 	bl	80066b4 <HAL_RCC_GetSysClockFreq>
 8006672:	4602      	mov	r2, r0
 8006674:	4b0b      	ldr	r3, [pc, #44]	@ (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	490a      	ldr	r1, [pc, #40]	@ (80066a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006680:	5ccb      	ldrb	r3, [r1, r3]
 8006682:	fa22 f303 	lsr.w	r3, r2, r3
 8006686:	4a09      	ldr	r2, [pc, #36]	@ (80066ac <HAL_RCC_ClockConfig+0x1c4>)
 8006688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800668a:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <HAL_RCC_ClockConfig+0x1c8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f7fd fca8 	bl	8003fe4 <HAL_InitTick>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40023c00 	.word	0x40023c00
 80066a4:	40023800 	.word	0x40023800
 80066a8:	0800f3a8 	.word	0x0800f3a8
 80066ac:	20000004 	.word	0x20000004
 80066b0:	20000008 	.word	0x20000008

080066b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b8:	b090      	sub	sp, #64	@ 0x40
 80066ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066cc:	4b59      	ldr	r3, [pc, #356]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 030c 	and.w	r3, r3, #12
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d00d      	beq.n	80066f4 <HAL_RCC_GetSysClockFreq+0x40>
 80066d8:	2b08      	cmp	r3, #8
 80066da:	f200 80a1 	bhi.w	8006820 <HAL_RCC_GetSysClockFreq+0x16c>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0x34>
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d003      	beq.n	80066ee <HAL_RCC_GetSysClockFreq+0x3a>
 80066e6:	e09b      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066e8:	4b53      	ldr	r3, [pc, #332]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x184>)
 80066ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066ec:	e09b      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ee:	4b53      	ldr	r3, [pc, #332]	@ (800683c <HAL_RCC_GetSysClockFreq+0x188>)
 80066f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80066f2:	e098      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066f4:	4b4f      	ldr	r3, [pc, #316]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x180>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066fe:	4b4d      	ldr	r3, [pc, #308]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x180>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d028      	beq.n	800675c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800670a:	4b4a      	ldr	r3, [pc, #296]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x180>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	099b      	lsrs	r3, r3, #6
 8006710:	2200      	movs	r2, #0
 8006712:	623b      	str	r3, [r7, #32]
 8006714:	627a      	str	r2, [r7, #36]	@ 0x24
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800671c:	2100      	movs	r1, #0
 800671e:	4b47      	ldr	r3, [pc, #284]	@ (800683c <HAL_RCC_GetSysClockFreq+0x188>)
 8006720:	fb03 f201 	mul.w	r2, r3, r1
 8006724:	2300      	movs	r3, #0
 8006726:	fb00 f303 	mul.w	r3, r0, r3
 800672a:	4413      	add	r3, r2
 800672c:	4a43      	ldr	r2, [pc, #268]	@ (800683c <HAL_RCC_GetSysClockFreq+0x188>)
 800672e:	fba0 1202 	umull	r1, r2, r0, r2
 8006732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006734:	460a      	mov	r2, r1
 8006736:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800673a:	4413      	add	r3, r2
 800673c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006740:	2200      	movs	r2, #0
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	61fa      	str	r2, [r7, #28]
 8006746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800674a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800674e:	f7fa fa5b 	bl	8000c08 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4613      	mov	r3, r2
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675a:	e053      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675c:	4b35      	ldr	r3, [pc, #212]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x180>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	099b      	lsrs	r3, r3, #6
 8006762:	2200      	movs	r2, #0
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	617a      	str	r2, [r7, #20]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800676e:	f04f 0b00 	mov.w	fp, #0
 8006772:	4652      	mov	r2, sl
 8006774:	465b      	mov	r3, fp
 8006776:	f04f 0000 	mov.w	r0, #0
 800677a:	f04f 0100 	mov.w	r1, #0
 800677e:	0159      	lsls	r1, r3, #5
 8006780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006784:	0150      	lsls	r0, r2, #5
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	ebb2 080a 	subs.w	r8, r2, sl
 800678e:	eb63 090b 	sbc.w	r9, r3, fp
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800679e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80067a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80067a6:	ebb2 0408 	subs.w	r4, r2, r8
 80067aa:	eb63 0509 	sbc.w	r5, r3, r9
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	00eb      	lsls	r3, r5, #3
 80067b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067bc:	00e2      	lsls	r2, r4, #3
 80067be:	4614      	mov	r4, r2
 80067c0:	461d      	mov	r5, r3
 80067c2:	eb14 030a 	adds.w	r3, r4, sl
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	eb45 030b 	adc.w	r3, r5, fp
 80067cc:	607b      	str	r3, [r7, #4]
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067da:	4629      	mov	r1, r5
 80067dc:	028b      	lsls	r3, r1, #10
 80067de:	4621      	mov	r1, r4
 80067e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067e4:	4621      	mov	r1, r4
 80067e6:	028a      	lsls	r2, r1, #10
 80067e8:	4610      	mov	r0, r2
 80067ea:	4619      	mov	r1, r3
 80067ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ee:	2200      	movs	r2, #0
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	60fa      	str	r2, [r7, #12]
 80067f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067f8:	f7fa fa06 	bl	8000c08 <__aeabi_uldivmod>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4613      	mov	r3, r2
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006804:	4b0b      	ldr	r3, [pc, #44]	@ (8006834 <HAL_RCC_GetSysClockFreq+0x180>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	3301      	adds	r3, #1
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800681e:	e002      	b.n	8006826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <HAL_RCC_GetSysClockFreq+0x184>)
 8006822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006828:	4618      	mov	r0, r3
 800682a:	3740      	adds	r7, #64	@ 0x40
 800682c:	46bd      	mov	sp, r7
 800682e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006832:	bf00      	nop
 8006834:	40023800 	.word	0x40023800
 8006838:	00f42400 	.word	0x00f42400
 800683c:	017d7840 	.word	0x017d7840

08006840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006844:	4b03      	ldr	r3, [pc, #12]	@ (8006854 <HAL_RCC_GetHCLKFreq+0x14>)
 8006846:	681b      	ldr	r3, [r3, #0]
}
 8006848:	4618      	mov	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000004 	.word	0x20000004

08006858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800685c:	f7ff fff0 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	0a9b      	lsrs	r3, r3, #10
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	4903      	ldr	r1, [pc, #12]	@ (800687c <HAL_RCC_GetPCLK1Freq+0x24>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006874:	4618      	mov	r0, r3
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40023800 	.word	0x40023800
 800687c:	0800f3b8 	.word	0x0800f3b8

08006880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006884:	f7ff ffdc 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 8006888:	4602      	mov	r2, r0
 800688a:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	0b5b      	lsrs	r3, r3, #13
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	4903      	ldr	r1, [pc, #12]	@ (80068a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006896:	5ccb      	ldrb	r3, [r1, r3]
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800689c:	4618      	mov	r0, r3
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40023800 	.word	0x40023800
 80068a4:	0800f3b8 	.word	0x0800f3b8

080068a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e041      	b.n	800693e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fd f84e 	bl	8003970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f000 ff7c 	bl	80077e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e041      	b.n	80069dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f839 	bl	80069e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f000 ff2d 	bl	80077e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <HAL_TIM_PWM_Start+0x24>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	e022      	b.n	8006a62 <HAL_TIM_PWM_Start+0x6a>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d109      	bne.n	8006a36 <HAL_TIM_PWM_Start+0x3e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	bf14      	ite	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	2300      	moveq	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	e015      	b.n	8006a62 <HAL_TIM_PWM_Start+0x6a>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d109      	bne.n	8006a50 <HAL_TIM_PWM_Start+0x58>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e008      	b.n	8006a62 <HAL_TIM_PWM_Start+0x6a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	bf14      	ite	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	2300      	moveq	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e07c      	b.n	8006b64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_PWM_Start+0x82>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a78:	e013      	b.n	8006aa2 <HAL_TIM_PWM_Start+0xaa>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_PWM_Start+0x92>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a88:	e00b      	b.n	8006aa2 <HAL_TIM_PWM_Start+0xaa>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d104      	bne.n	8006a9a <HAL_TIM_PWM_Start+0xa2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a98:	e003      	b.n	8006aa2 <HAL_TIM_PWM_Start+0xaa>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 faba 	bl	8008024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8006b6c <HAL_TIM_PWM_Start+0x174>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <HAL_TIM_PWM_Start+0xcc>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2c      	ldr	r2, [pc, #176]	@ (8006b70 <HAL_TIM_PWM_Start+0x178>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d101      	bne.n	8006ac8 <HAL_TIM_PWM_Start+0xd0>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <HAL_TIM_PWM_Start+0xd2>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a22      	ldr	r2, [pc, #136]	@ (8006b6c <HAL_TIM_PWM_Start+0x174>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d022      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af0:	d01d      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b74 <HAL_TIM_PWM_Start+0x17c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d018      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1d      	ldr	r2, [pc, #116]	@ (8006b78 <HAL_TIM_PWM_Start+0x180>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006b7c <HAL_TIM_PWM_Start+0x184>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a16      	ldr	r2, [pc, #88]	@ (8006b70 <HAL_TIM_PWM_Start+0x178>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a18      	ldr	r2, [pc, #96]	@ (8006b80 <HAL_TIM_PWM_Start+0x188>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_TIM_PWM_Start+0x136>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a16      	ldr	r2, [pc, #88]	@ (8006b84 <HAL_TIM_PWM_Start+0x18c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d111      	bne.n	8006b52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	d010      	beq.n	8006b62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b50:	e007      	b.n	8006b62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0201 	orr.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40001800 	.word	0x40001800

08006b88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e041      	b.n	8006c1e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fc ffd6 	bl	8003b60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f000 fe0c 	bl	80077e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_IC_Start_IT+0x1e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	e013      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x46>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_IC_Start_IT+0x2e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e00b      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x46>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_IC_Start_IT+0x3e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	e003      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x46>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <HAL_TIM_IC_Start_IT+0x58>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e013      	b.n	8006ca8 <HAL_TIM_IC_Start_IT+0x80>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d104      	bne.n	8006c90 <HAL_TIM_IC_Start_IT+0x68>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e00b      	b.n	8006ca8 <HAL_TIM_IC_Start_IT+0x80>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d104      	bne.n	8006ca0 <HAL_TIM_IC_Start_IT+0x78>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	e003      	b.n	8006ca8 <HAL_TIM_IC_Start_IT+0x80>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d102      	bne.n	8006cb6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cb0:	7b7b      	ldrb	r3, [r7, #13]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d001      	beq.n	8006cba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e0cc      	b.n	8006e54 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <HAL_TIM_IC_Start_IT+0xa2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cc8:	e013      	b.n	8006cf2 <HAL_TIM_IC_Start_IT+0xca>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_IC_Start_IT+0xb2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cd8:	e00b      	b.n	8006cf2 <HAL_TIM_IC_Start_IT+0xca>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_IC_Start_IT+0xc2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ce8:	e003      	b.n	8006cf2 <HAL_TIM_IC_Start_IT+0xca>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_IC_Start_IT+0xda>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d00:	e013      	b.n	8006d2a <HAL_TIM_IC_Start_IT+0x102>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_IC_Start_IT+0xea>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d10:	e00b      	b.n	8006d2a <HAL_TIM_IC_Start_IT+0x102>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_IC_Start_IT+0xfa>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d20:	e003      	b.n	8006d2a <HAL_TIM_IC_Start_IT+0x102>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b0c      	cmp	r3, #12
 8006d2e:	d841      	bhi.n	8006db4 <HAL_TIM_IC_Start_IT+0x18c>
 8006d30:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <HAL_TIM_IC_Start_IT+0x110>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d6d 	.word	0x08006d6d
 8006d3c:	08006db5 	.word	0x08006db5
 8006d40:	08006db5 	.word	0x08006db5
 8006d44:	08006db5 	.word	0x08006db5
 8006d48:	08006d7f 	.word	0x08006d7f
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006db5 	.word	0x08006db5
 8006d54:	08006db5 	.word	0x08006db5
 8006d58:	08006d91 	.word	0x08006d91
 8006d5c:	08006db5 	.word	0x08006db5
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006db5 	.word	0x08006db5
 8006d68:	08006da3 	.word	0x08006da3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0202 	orr.w	r2, r2, #2
 8006d7a:	60da      	str	r2, [r3, #12]
      break;
 8006d7c:	e01d      	b.n	8006dba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0204 	orr.w	r2, r2, #4
 8006d8c:	60da      	str	r2, [r3, #12]
      break;
 8006d8e:	e014      	b.n	8006dba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0208 	orr.w	r2, r2, #8
 8006d9e:	60da      	str	r2, [r3, #12]
      break;
 8006da0:	e00b      	b.n	8006dba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0210 	orr.w	r2, r2, #16
 8006db0:	60da      	str	r2, [r3, #12]
      break;
 8006db2:	e002      	b.n	8006dba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
      break;
 8006db8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d148      	bne.n	8006e52 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 f92b 	bl	8008024 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a22      	ldr	r2, [pc, #136]	@ (8006e5c <HAL_TIM_IC_Start_IT+0x234>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d022      	beq.n	8006e1e <HAL_TIM_IC_Start_IT+0x1f6>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de0:	d01d      	beq.n	8006e1e <HAL_TIM_IC_Start_IT+0x1f6>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e60 <HAL_TIM_IC_Start_IT+0x238>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d018      	beq.n	8006e1e <HAL_TIM_IC_Start_IT+0x1f6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e64 <HAL_TIM_IC_Start_IT+0x23c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_TIM_IC_Start_IT+0x1f6>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006e68 <HAL_TIM_IC_Start_IT+0x240>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIM_IC_Start_IT+0x1f6>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a19      	ldr	r2, [pc, #100]	@ (8006e6c <HAL_TIM_IC_Start_IT+0x244>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIM_IC_Start_IT+0x1f6>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a18      	ldr	r2, [pc, #96]	@ (8006e70 <HAL_TIM_IC_Start_IT+0x248>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIM_IC_Start_IT+0x1f6>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a16      	ldr	r2, [pc, #88]	@ (8006e74 <HAL_TIM_IC_Start_IT+0x24c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d111      	bne.n	8006e42 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	d010      	beq.n	8006e52 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e40:	e007      	b.n	8006e52 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40000c00 	.word	0x40000c00
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40001800 	.word	0x40001800

08006e78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e097      	b.n	8006fbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fc fdc3 	bl	8003a2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6812      	ldr	r2, [r2, #0]
 8006eb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ebc:	f023 0307 	bic.w	r3, r3, #7
 8006ec0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4610      	mov	r0, r2
 8006ece:	f000 fc89 	bl	80077e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006f18:	f023 030c 	bic.w	r3, r3, #12
 8006f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	4313      	orrs	r3, r2
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	011a      	lsls	r2, r3, #4
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	031b      	lsls	r3, r3, #12
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006f5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fe4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006fec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d110      	bne.n	8007016 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d102      	bne.n	8007000 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ffa:	7b7b      	ldrb	r3, [r7, #13]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d001      	beq.n	8007004 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e069      	b.n	80070d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007014:	e031      	b.n	800707a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b04      	cmp	r3, #4
 800701a:	d110      	bne.n	800703e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d102      	bne.n	8007028 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007022:	7b3b      	ldrb	r3, [r7, #12]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d001      	beq.n	800702c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e055      	b.n	80070d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800703c:	e01d      	b.n	800707a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d108      	bne.n	8007056 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d105      	bne.n	8007056 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800704a:	7b7b      	ldrb	r3, [r7, #13]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d102      	bne.n	8007056 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007050:	7b3b      	ldrb	r3, [r7, #12]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d001      	beq.n	800705a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e03e      	b.n	80070d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_TIM_Encoder_Start+0xc4>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b04      	cmp	r3, #4
 8007084:	d008      	beq.n	8007098 <HAL_TIM_Encoder_Start+0xd4>
 8007086:	e00f      	b.n	80070a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2201      	movs	r2, #1
 800708e:	2100      	movs	r1, #0
 8007090:	4618      	mov	r0, r3
 8007092:	f000 ffc7 	bl	8008024 <TIM_CCxChannelCmd>
      break;
 8007096:	e016      	b.n	80070c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2201      	movs	r2, #1
 800709e:	2104      	movs	r1, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 ffbf 	bl	8008024 <TIM_CCxChannelCmd>
      break;
 80070a6:	e00e      	b.n	80070c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2201      	movs	r2, #1
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 ffb7 	bl	8008024 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2201      	movs	r2, #1
 80070bc:	2104      	movs	r1, #4
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 ffb0 	bl	8008024 <TIM_CCxChannelCmd>
      break;
 80070c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0201 	orr.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01b      	beq.n	8007144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0202 	mvn.w	r2, #2
 8007114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fa fec4 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8007130:	e005      	b.n	800713e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb38 	bl	80077a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fb3f 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01b      	beq.n	8007190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0204 	mvn.w	r2, #4
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fa fe9e 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fb12 	bl	80077a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb19 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d020      	beq.n	80071dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0208 	mvn.w	r2, #8
 80071ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2204      	movs	r2, #4
 80071b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fa fe78 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 80071c8:	e005      	b.n	80071d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 faec 	bl	80077a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 faf3 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d020      	beq.n	8007228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0210 	mvn.w	r2, #16
 80071f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2208      	movs	r2, #8
 80071fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fa fe52 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8007214:	e005      	b.n	8007222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fac6 	bl	80077a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 facd 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0201 	mvn.w	r2, #1
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 faa4 	bl	8007794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 ffd8 	bl	8008220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa9e 	bl	80077d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00c      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0220 	mvn.w	r2, #32
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 ffaa 	bl	800820c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_TIM_IC_ConfigChannel+0x1e>
 80072da:	2302      	movs	r3, #2
 80072dc:	e088      	b.n	80073f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11b      	bne.n	8007324 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80072fc:	f000 fcce 	bl	8007c9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 020c 	bic.w	r2, r2, #12
 800730e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6999      	ldr	r1, [r3, #24]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	619a      	str	r2, [r3, #24]
 8007322:	e060      	b.n	80073e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b04      	cmp	r3, #4
 8007328:	d11c      	bne.n	8007364 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800733a:	f000 fd52 	bl	8007de2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699a      	ldr	r2, [r3, #24]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800734c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6999      	ldr	r1, [r3, #24]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	021a      	lsls	r2, r3, #8
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	619a      	str	r2, [r3, #24]
 8007362:	e040      	b.n	80073e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b08      	cmp	r3, #8
 8007368:	d11b      	bne.n	80073a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800737a:	f000 fd9f 	bl	8007ebc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 020c 	bic.w	r2, r2, #12
 800738c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69d9      	ldr	r1, [r3, #28]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	61da      	str	r2, [r3, #28]
 80073a0:	e021      	b.n	80073e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	d11c      	bne.n	80073e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80073b8:	f000 fdbc 	bl	8007f34 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80073ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69d9      	ldr	r1, [r3, #28]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	021a      	lsls	r2, r3, #8
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	61da      	str	r2, [r3, #28]
 80073e0:	e001      	b.n	80073e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007412:	2302      	movs	r3, #2
 8007414:	e0ae      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b0c      	cmp	r3, #12
 8007422:	f200 809f 	bhi.w	8007564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007461 	.word	0x08007461
 8007430:	08007565 	.word	0x08007565
 8007434:	08007565 	.word	0x08007565
 8007438:	08007565 	.word	0x08007565
 800743c:	080074a1 	.word	0x080074a1
 8007440:	08007565 	.word	0x08007565
 8007444:	08007565 	.word	0x08007565
 8007448:	08007565 	.word	0x08007565
 800744c:	080074e3 	.word	0x080074e3
 8007450:	08007565 	.word	0x08007565
 8007454:	08007565 	.word	0x08007565
 8007458:	08007565 	.word	0x08007565
 800745c:	08007523 	.word	0x08007523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fa68 	bl	800793c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0208 	orr.w	r2, r2, #8
 800747a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0204 	bic.w	r2, r2, #4
 800748a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6999      	ldr	r1, [r3, #24]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	619a      	str	r2, [r3, #24]
      break;
 800749e:	e064      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fab8 	bl	8007a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6999      	ldr	r1, [r3, #24]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	021a      	lsls	r2, r3, #8
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	619a      	str	r2, [r3, #24]
      break;
 80074e0:	e043      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fb0d 	bl	8007b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0208 	orr.w	r2, r2, #8
 80074fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0204 	bic.w	r2, r2, #4
 800750c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69d9      	ldr	r1, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	61da      	str	r2, [r3, #28]
      break;
 8007520:	e023      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fb61 	bl	8007bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800753c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800754c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69d9      	ldr	r1, [r3, #28]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	021a      	lsls	r2, r3, #8
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	61da      	str	r2, [r3, #28]
      break;
 8007562:	e002      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
      break;
 8007568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_TIM_ConfigClockSource+0x1c>
 8007594:	2302      	movs	r3, #2
 8007596:	e0b4      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x186>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075d0:	d03e      	beq.n	8007650 <HAL_TIM_ConfigClockSource+0xd4>
 80075d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075d6:	f200 8087 	bhi.w	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075de:	f000 8086 	beq.w	80076ee <HAL_TIM_ConfigClockSource+0x172>
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e6:	d87f      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e8:	2b70      	cmp	r3, #112	@ 0x70
 80075ea:	d01a      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0xa6>
 80075ec:	2b70      	cmp	r3, #112	@ 0x70
 80075ee:	d87b      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075f0:	2b60      	cmp	r3, #96	@ 0x60
 80075f2:	d050      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0x11a>
 80075f4:	2b60      	cmp	r3, #96	@ 0x60
 80075f6:	d877      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 80075f8:	2b50      	cmp	r3, #80	@ 0x50
 80075fa:	d03c      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0xfa>
 80075fc:	2b50      	cmp	r3, #80	@ 0x50
 80075fe:	d873      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007600:	2b40      	cmp	r3, #64	@ 0x40
 8007602:	d058      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007604:	2b40      	cmp	r3, #64	@ 0x40
 8007606:	d86f      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007608:	2b30      	cmp	r3, #48	@ 0x30
 800760a:	d064      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 800760c:	2b30      	cmp	r3, #48	@ 0x30
 800760e:	d86b      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007610:	2b20      	cmp	r3, #32
 8007612:	d060      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d867      	bhi.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05c      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 800761c:	2b10      	cmp	r3, #16
 800761e:	d05a      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007620:	e062      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007632:	f000 fcd7 	bl	8007fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	609a      	str	r2, [r3, #8]
      break;
 800764e:	e04f      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007660:	f000 fcc0 	bl	8007fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007672:	609a      	str	r2, [r3, #8]
      break;
 8007674:	e03c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007682:	461a      	mov	r2, r3
 8007684:	f000 fb7e 	bl	8007d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2150      	movs	r1, #80	@ 0x50
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fc8d 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 8007694:	e02c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076a2:	461a      	mov	r2, r3
 80076a4:	f000 fbda 	bl	8007e5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2160      	movs	r1, #96	@ 0x60
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fc7d 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 80076b4:	e01c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c2:	461a      	mov	r2, r3
 80076c4:	f000 fb5e 	bl	8007d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2140      	movs	r1, #64	@ 0x40
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fc6d 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 80076d4:	e00c      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4619      	mov	r1, r3
 80076e0:	4610      	mov	r0, r2
 80076e2:	f000 fc64 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 80076e6:	e003      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
      break;
 80076ec:	e000      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b0c      	cmp	r3, #12
 800771e:	d831      	bhi.n	8007784 <HAL_TIM_ReadCapturedValue+0x78>
 8007720:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	0800775d 	.word	0x0800775d
 800772c:	08007785 	.word	0x08007785
 8007730:	08007785 	.word	0x08007785
 8007734:	08007785 	.word	0x08007785
 8007738:	08007767 	.word	0x08007767
 800773c:	08007785 	.word	0x08007785
 8007740:	08007785 	.word	0x08007785
 8007744:	08007785 	.word	0x08007785
 8007748:	08007771 	.word	0x08007771
 800774c:	08007785 	.word	0x08007785
 8007750:	08007785 	.word	0x08007785
 8007754:	08007785 	.word	0x08007785
 8007758:	0800777b 	.word	0x0800777b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007762:	60fb      	str	r3, [r7, #12]

      break;
 8007764:	e00f      	b.n	8007786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	60fb      	str	r3, [r7, #12]

      break;
 800776e:	e00a      	b.n	8007786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007776:	60fb      	str	r3, [r7, #12]

      break;
 8007778:	e005      	b.n	8007786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007780:	60fb      	str	r3, [r7, #12]

      break;
 8007782:	e000      	b.n	8007786 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007784:	bf00      	nop
  }

  return tmpreg;
 8007786:	68fb      	ldr	r3, [r7, #12]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a46      	ldr	r2, [pc, #280]	@ (8007910 <TIM_Base_SetConfig+0x12c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d013      	beq.n	8007824 <TIM_Base_SetConfig+0x40>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007802:	d00f      	beq.n	8007824 <TIM_Base_SetConfig+0x40>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a43      	ldr	r2, [pc, #268]	@ (8007914 <TIM_Base_SetConfig+0x130>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00b      	beq.n	8007824 <TIM_Base_SetConfig+0x40>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a42      	ldr	r2, [pc, #264]	@ (8007918 <TIM_Base_SetConfig+0x134>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d007      	beq.n	8007824 <TIM_Base_SetConfig+0x40>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a41      	ldr	r2, [pc, #260]	@ (800791c <TIM_Base_SetConfig+0x138>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d003      	beq.n	8007824 <TIM_Base_SetConfig+0x40>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a40      	ldr	r2, [pc, #256]	@ (8007920 <TIM_Base_SetConfig+0x13c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d108      	bne.n	8007836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a35      	ldr	r2, [pc, #212]	@ (8007910 <TIM_Base_SetConfig+0x12c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d02b      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007844:	d027      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a32      	ldr	r2, [pc, #200]	@ (8007914 <TIM_Base_SetConfig+0x130>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d023      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a31      	ldr	r2, [pc, #196]	@ (8007918 <TIM_Base_SetConfig+0x134>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01f      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a30      	ldr	r2, [pc, #192]	@ (800791c <TIM_Base_SetConfig+0x138>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d01b      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2f      	ldr	r2, [pc, #188]	@ (8007920 <TIM_Base_SetConfig+0x13c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d017      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2e      	ldr	r2, [pc, #184]	@ (8007924 <TIM_Base_SetConfig+0x140>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2d      	ldr	r2, [pc, #180]	@ (8007928 <TIM_Base_SetConfig+0x144>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00f      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a2c      	ldr	r2, [pc, #176]	@ (800792c <TIM_Base_SetConfig+0x148>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00b      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a2b      	ldr	r2, [pc, #172]	@ (8007930 <TIM_Base_SetConfig+0x14c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a2a      	ldr	r2, [pc, #168]	@ (8007934 <TIM_Base_SetConfig+0x150>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_Base_SetConfig+0xb2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a29      	ldr	r2, [pc, #164]	@ (8007938 <TIM_Base_SetConfig+0x154>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d108      	bne.n	80078a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a10      	ldr	r2, [pc, #64]	@ (8007910 <TIM_Base_SetConfig+0x12c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_Base_SetConfig+0xf8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a12      	ldr	r2, [pc, #72]	@ (8007920 <TIM_Base_SetConfig+0x13c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d103      	bne.n	80078e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d105      	bne.n	8007902 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f023 0201 	bic.w	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	611a      	str	r2, [r3, #16]
  }
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40010400 	.word	0x40010400
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800
 8007930:	40001800 	.word	0x40001800
 8007934:	40001c00 	.word	0x40001c00
 8007938:	40002000 	.word	0x40002000

0800793c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	f023 0201 	bic.w	r2, r3, #1
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f023 0302 	bic.w	r3, r3, #2
 8007984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a20      	ldr	r2, [pc, #128]	@ (8007a14 <TIM_OC1_SetConfig+0xd8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC1_SetConfig+0x64>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1f      	ldr	r2, [pc, #124]	@ (8007a18 <TIM_OC1_SetConfig+0xdc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10c      	bne.n	80079ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0308 	bic.w	r3, r3, #8
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f023 0304 	bic.w	r3, r3, #4
 80079b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a15      	ldr	r2, [pc, #84]	@ (8007a14 <TIM_OC1_SetConfig+0xd8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d003      	beq.n	80079ca <TIM_OC1_SetConfig+0x8e>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a14      	ldr	r2, [pc, #80]	@ (8007a18 <TIM_OC1_SetConfig+0xdc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d111      	bne.n	80079ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	621a      	str	r2, [r3, #32]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40010400 	.word	0x40010400

08007a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	f023 0210 	bic.w	r2, r3, #16
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f023 0320 	bic.w	r3, r3, #32
 8007a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a22      	ldr	r2, [pc, #136]	@ (8007b00 <TIM_OC2_SetConfig+0xe4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_OC2_SetConfig+0x68>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a21      	ldr	r2, [pc, #132]	@ (8007b04 <TIM_OC2_SetConfig+0xe8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d10d      	bne.n	8007aa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a17      	ldr	r2, [pc, #92]	@ (8007b00 <TIM_OC2_SetConfig+0xe4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_OC2_SetConfig+0x94>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a16      	ldr	r2, [pc, #88]	@ (8007b04 <TIM_OC2_SetConfig+0xe8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d113      	bne.n	8007ad8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40010000 	.word	0x40010000
 8007b04:	40010400 	.word	0x40010400

08007b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a21      	ldr	r2, [pc, #132]	@ (8007be8 <TIM_OC3_SetConfig+0xe0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d003      	beq.n	8007b6e <TIM_OC3_SetConfig+0x66>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a20      	ldr	r2, [pc, #128]	@ (8007bec <TIM_OC3_SetConfig+0xe4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d10d      	bne.n	8007b8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	@ (8007be8 <TIM_OC3_SetConfig+0xe0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_OC3_SetConfig+0x92>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a15      	ldr	r2, [pc, #84]	@ (8007bec <TIM_OC3_SetConfig+0xe4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d113      	bne.n	8007bc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	621a      	str	r2, [r3, #32]
}
 8007bdc:	bf00      	nop
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40010400 	.word	0x40010400

08007bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	031b      	lsls	r3, r3, #12
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a12      	ldr	r2, [pc, #72]	@ (8007c94 <TIM_OC4_SetConfig+0xa4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d003      	beq.n	8007c58 <TIM_OC4_SetConfig+0x68>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a11      	ldr	r2, [pc, #68]	@ (8007c98 <TIM_OC4_SetConfig+0xa8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d109      	bne.n	8007c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	019b      	lsls	r3, r3, #6
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40010000 	.word	0x40010000
 8007c98:	40010400 	.word	0x40010400

08007c9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	f023 0201 	bic.w	r2, r3, #1
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4a28      	ldr	r2, [pc, #160]	@ (8007d68 <TIM_TI1_SetConfig+0xcc>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d01b      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd0:	d017      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a25      	ldr	r2, [pc, #148]	@ (8007d6c <TIM_TI1_SetConfig+0xd0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4a24      	ldr	r2, [pc, #144]	@ (8007d70 <TIM_TI1_SetConfig+0xd4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00f      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4a23      	ldr	r2, [pc, #140]	@ (8007d74 <TIM_TI1_SetConfig+0xd8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d00b      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4a22      	ldr	r2, [pc, #136]	@ (8007d78 <TIM_TI1_SetConfig+0xdc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d007      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4a21      	ldr	r2, [pc, #132]	@ (8007d7c <TIM_TI1_SetConfig+0xe0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d003      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4a20      	ldr	r2, [pc, #128]	@ (8007d80 <TIM_TI1_SetConfig+0xe4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d101      	bne.n	8007d06 <TIM_TI1_SetConfig+0x6a>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <TIM_TI1_SetConfig+0x6c>
 8007d06:	2300      	movs	r3, #0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d008      	beq.n	8007d1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	e003      	b.n	8007d26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f023 030a 	bic.w	r3, r3, #10
 8007d40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f003 030a 	and.w	r3, r3, #10
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	621a      	str	r2, [r3, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40000800 	.word	0x40000800
 8007d74:	40000c00 	.word	0x40000c00
 8007d78:	40010400 	.word	0x40010400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40001800 	.word	0x40001800

08007d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f023 0201 	bic.w	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f023 030a 	bic.w	r3, r3, #10
 8007dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	621a      	str	r2, [r3, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b087      	sub	sp, #28
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f023 0210 	bic.w	r2, r3, #16
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	031b      	lsls	r3, r3, #12
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	621a      	str	r2, [r3, #32]
}
 8007e50:	bf00      	nop
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f023 0210 	bic.w	r2, r3, #16
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	031b      	lsls	r3, r3, #12
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	621a      	str	r2, [r3, #32]
}
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ef8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	621a      	str	r2, [r3, #32]
}
 8007f28:	bf00      	nop
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	031b      	lsls	r3, r3, #12
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007f86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	031b      	lsls	r3, r3, #12
 8007f8c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f043 0307 	orr.w	r3, r3, #7
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	609a      	str	r2, [r3, #8]
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	431a      	orrs	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4313      	orrs	r3, r2
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	609a      	str	r2, [r3, #8]
}
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2201      	movs	r2, #1
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1a      	ldr	r2, [r3, #32]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	43db      	mvns	r3, r3
 8008046:	401a      	ands	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1a      	ldr	r2, [r3, #32]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	fa01 f303 	lsl.w	r3, r1, r3
 800805c:	431a      	orrs	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	621a      	str	r2, [r3, #32]
}
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008084:	2302      	movs	r3, #2
 8008086:	e05a      	b.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a21      	ldr	r2, [pc, #132]	@ (800814c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d022      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d4:	d01d      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1d      	ldr	r2, [pc, #116]	@ (8008150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d018      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d013      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a18      	ldr	r2, [pc, #96]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a17      	ldr	r2, [pc, #92]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a15      	ldr	r2, [pc, #84]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d10c      	bne.n	800812c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4313      	orrs	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40010400 	.word	0x40010400
 8008160:	40014000 	.word	0x40014000
 8008164:	40001800 	.word	0x40001800

08008168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008180:	2302      	movs	r3, #2
 8008182:	e03d      	b.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e042      	b.n	80082cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fb fd0a 	bl	8003c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2224      	movs	r2, #36	@ 0x24
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fe91 	bl	8008fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800828c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695a      	ldr	r2, [r3, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800829c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	@ 0x28
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d175      	bne.n	80083e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <HAL_UART_Transmit+0x2c>
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e06e      	b.n	80083e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2221      	movs	r2, #33	@ 0x21
 800830e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008312:	f7fb feab 	bl	800406c <HAL_GetTick>
 8008316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800832c:	d108      	bne.n	8008340 <HAL_UART_Transmit+0x6c>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e003      	b.n	8008348 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008348:	e02e      	b.n	80083a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2200      	movs	r2, #0
 8008352:	2180      	movs	r1, #128	@ 0x80
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 fbdb 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e03a      	b.n	80083e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008380:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	3302      	adds	r3, #2
 8008386:	61bb      	str	r3, [r7, #24]
 8008388:	e007      	b.n	800839a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	3301      	adds	r3, #1
 8008398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1cb      	bne.n	800834a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2200      	movs	r2, #0
 80083ba:	2140      	movs	r1, #64	@ 0x40
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fba7 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e006      	b.n	80083e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	e000      	b.n	80083e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80083e0:	2302      	movs	r3, #2
  }
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3720      	adds	r7, #32
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	4613      	mov	r3, r2
 80083f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b20      	cmp	r3, #32
 8008402:	d112      	bne.n	800842a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <HAL_UART_Receive_IT+0x26>
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e00b      	b.n	800842c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	461a      	mov	r2, r3
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fbce 	bl	8008bc2 <UART_Start_Receive_IT>
 8008426:	4603      	mov	r3, r0
 8008428:	e000      	b.n	800842c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800842a:	2302      	movs	r3, #2
  }
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b09a      	sub	sp, #104	@ 0x68
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	330c      	adds	r3, #12
 8008442:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800844c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800844e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008452:	667b      	str	r3, [r7, #100]	@ 0x64
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800845c:	657a      	str	r2, [r7, #84]	@ 0x54
 800845e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008462:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800846a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e5      	bne.n	800843c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3314      	adds	r3, #20
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	663b      	str	r3, [r7, #96]	@ 0x60
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008490:	643a      	str	r2, [r7, #64]	@ 0x40
 8008492:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008496:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e5      	bne.n	8008470 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d119      	bne.n	80084e0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	330c      	adds	r3, #12
 80084b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f023 0310 	bic.w	r3, r3, #16
 80084c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	330c      	adds	r3, #12
 80084ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80084cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e5      	bne.n	80084ac <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ea:	2b40      	cmp	r3, #64	@ 0x40
 80084ec:	d13f      	bne.n	800856e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3314      	adds	r3, #20
 80084f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008504:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3314      	adds	r3, #20
 800850c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800850e:	61ba      	str	r2, [r7, #24]
 8008510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6979      	ldr	r1, [r7, #20]
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	613b      	str	r3, [r7, #16]
   return(result);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e5      	bne.n	80084ee <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d013      	beq.n	8008552 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852e:	4a19      	ldr	r2, [pc, #100]	@ (8008594 <HAL_UART_AbortReceive_IT+0x160>)
 8008530:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008536:	4618      	mov	r0, r3
 8008538:	f7fc fb49 	bl	8004bce <HAL_DMA_Abort_IT>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d022      	beq.n	8008588 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	e01a      	b.n	8008588 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2220      	movs	r2, #32
 800855c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fabc 	bl	8008ae4 <HAL_UART_AbortReceiveCpltCallback>
 800856c:	e00c      	b.n	8008588 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 faae 	bl	8008ae4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3768      	adds	r7, #104	@ 0x68
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	08008d25 	.word	0x08008d25

08008598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b0ba      	sub	sp, #232	@ 0xe8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80085d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10f      	bne.n	80085fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <HAL_UART_IRQHandler+0x66>
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fc14 	bl	8008e24 <UART_Receive_IT>
      return;
 80085fc:	e25b      	b.n	8008ab6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80de 	beq.w	80087c4 <HAL_UART_IRQHandler+0x22c>
 8008608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	d106      	bne.n	8008622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008618:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80d1 	beq.w	80087c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <HAL_UART_IRQHandler+0xae>
 800862e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800863e:	f043 0201 	orr.w	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <HAL_UART_IRQHandler+0xd2>
 8008652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008662:	f043 0202 	orr.w	r2, r3, #2
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <HAL_UART_IRQHandler+0xf6>
 8008676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008686:	f043 0204 	orr.w	r2, r3, #4
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d011      	beq.n	80086be <HAL_UART_IRQHandler+0x126>
 800869a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b6:	f043 0208 	orr.w	r2, r3, #8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 81f2 	beq.w	8008aac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HAL_UART_IRQHandler+0x14e>
 80086d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fb9f 	bl	8008e24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f0:	2b40      	cmp	r3, #64	@ 0x40
 80086f2:	bf0c      	ite	eq
 80086f4:	2301      	moveq	r3, #1
 80086f6:	2300      	movne	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <HAL_UART_IRQHandler+0x17a>
 800870a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800870e:	2b00      	cmp	r3, #0
 8008710:	d04f      	beq.n	80087b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa8f 	bl	8008c36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008722:	2b40      	cmp	r3, #64	@ 0x40
 8008724:	d141      	bne.n	80087aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3314      	adds	r3, #20
 800872c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800873c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3314      	adds	r3, #20
 800874e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800875e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800876a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1d9      	bne.n	8008726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d013      	beq.n	80087a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877e:	4a7e      	ldr	r2, [pc, #504]	@ (8008978 <HAL_UART_IRQHandler+0x3e0>)
 8008780:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008786:	4618      	mov	r0, r3
 8008788:	f7fc fa21 	bl	8004bce <HAL_DMA_Abort_IT>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d016      	beq.n	80087c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	e00e      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f994 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	e00a      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f990 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	e006      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f98c 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80087be:	e175      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	bf00      	nop
    return;
 80087c2:	e173      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f040 814f 	bne.w	8008a6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8148 	beq.w	8008a6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8141 	beq.w	8008a6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ea:	2300      	movs	r3, #0
 80087ec:	60bb      	str	r3, [r7, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	60bb      	str	r3, [r7, #8]
 80087fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880a:	2b40      	cmp	r3, #64	@ 0x40
 800880c:	f040 80b6 	bne.w	800897c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800881c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8145 	beq.w	8008ab0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800882a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800882e:	429a      	cmp	r2, r3
 8008830:	f080 813e 	bcs.w	8008ab0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800883a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008846:	f000 8088 	beq.w	800895a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008876:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800887a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008882:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800888e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1d9      	bne.n	800884a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3314      	adds	r3, #20
 800889c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3314      	adds	r3, #20
 80088b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e1      	bne.n	8008896 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3314      	adds	r3, #20
 80088d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3314      	adds	r3, #20
 80088f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e3      	bne.n	80088d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800892a:	f023 0310 	bic.w	r3, r3, #16
 800892e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800893c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800893e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008942:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800894a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e3      	bne.n	8008918 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008954:	4618      	mov	r0, r3
 8008956:	f7fc f8ca 	bl	8004aee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008968:	b29b      	uxth	r3, r3
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	b29b      	uxth	r3, r3
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8c1 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008976:	e09b      	b.n	8008ab0 <HAL_UART_IRQHandler+0x518>
 8008978:	08008cfd 	.word	0x08008cfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008984:	b29b      	uxth	r3, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 808e 	beq.w	8008ab4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8089 	beq.w	8008ab4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	330c      	adds	r3, #12
 80089a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	330c      	adds	r3, #12
 80089c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80089c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80089c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e3      	bne.n	80089a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3314      	adds	r3, #20
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	623b      	str	r3, [r7, #32]
   return(result);
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3314      	adds	r3, #20
 80089fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e3      	bne.n	80089da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	330c      	adds	r3, #12
 8008a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0310 	bic.w	r3, r3, #16
 8008a36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	330c      	adds	r3, #12
 8008a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a44:	61fa      	str	r2, [r7, #28]
 8008a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	69b9      	ldr	r1, [r7, #24]
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	617b      	str	r3, [r7, #20]
   return(result);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e3      	bne.n	8008a20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f847 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a6a:	e023      	b.n	8008ab4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d009      	beq.n	8008a8c <HAL_UART_IRQHandler+0x4f4>
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f965 	bl	8008d54 <UART_Transmit_IT>
    return;
 8008a8a:	e014      	b.n	8008ab6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00e      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x51e>
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d008      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f9a5 	bl	8008df4 <UART_EndTransmit_IT>
    return;
 8008aaa:	e004      	b.n	8008ab6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008aac:	bf00      	nop
 8008aae:	e002      	b.n	8008ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ab0:	bf00      	nop
 8008ab2:	e000      	b.n	8008ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ab4:	bf00      	nop
  }
}
 8008ab6:	37e8      	adds	r7, #232	@ 0xe8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b20:	e03b      	b.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d037      	beq.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2a:	f7fb fa9f 	bl	800406c <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	6a3a      	ldr	r2, [r7, #32]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e03a      	b.n	8008bba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f003 0304 	and.w	r3, r3, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d023      	beq.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b80      	cmp	r3, #128	@ 0x80
 8008b56:	d020      	beq.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d01d      	beq.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d116      	bne.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f857 	bl	8008c36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e00f      	b.n	8008bba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	bf0c      	ite	eq
 8008baa:	2301      	moveq	r3, #1
 8008bac:	2300      	movne	r3, #0
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d0b4      	beq.n	8008b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b085      	sub	sp, #20
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	88fa      	ldrh	r2, [r7, #6]
 8008bda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	88fa      	ldrh	r2, [r7, #6]
 8008be0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2222      	movs	r2, #34	@ 0x22
 8008bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d007      	beq.n	8008c08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	695a      	ldr	r2, [r3, #20]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0201 	orr.w	r2, r2, #1
 8008c16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0220 	orr.w	r2, r2, #32
 8008c26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b095      	sub	sp, #84	@ 0x54
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	330c      	adds	r3, #12
 8008c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	330c      	adds	r3, #12
 8008c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e5      	bne.n	8008c3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3314      	adds	r3, #20
 8008c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3314      	adds	r3, #20
 8008c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e5      	bne.n	8008c72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d119      	bne.n	8008ce2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	330c      	adds	r3, #12
 8008cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f023 0310 	bic.w	r3, r3, #16
 8008cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	330c      	adds	r3, #12
 8008ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cce:	61ba      	str	r2, [r7, #24]
 8008cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6979      	ldr	r1, [r7, #20]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	613b      	str	r3, [r7, #16]
   return(result);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008cf0:	bf00      	nop
 8008cf2:	3754      	adds	r7, #84	@ 0x54
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff feda 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d30:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fecc 	bl	8008ae4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b21      	cmp	r3, #33	@ 0x21
 8008d66:	d13e      	bne.n	8008de6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d70:	d114      	bne.n	8008d9c <UART_Transmit_IT+0x48>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d110      	bne.n	8008d9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	1c9a      	adds	r2, r3, #2
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]
 8008d9a:	e008      	b.n	8008dae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	1c59      	adds	r1, r3, #1
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6211      	str	r1, [r2, #32]
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10f      	bne.n	8008de2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008dd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008de0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fe51 	bl	8008abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08c      	sub	sp, #48	@ 0x30
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b22      	cmp	r3, #34	@ 0x22
 8008e36:	f040 80ae 	bne.w	8008f96 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e42:	d117      	bne.n	8008e74 <UART_Receive_IT+0x50>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d113      	bne.n	8008e74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6c:	1c9a      	adds	r2, r3, #2
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e72:	e026      	b.n	8008ec2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e86:	d007      	beq.n	8008e98 <UART_Receive_IT+0x74>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10a      	bne.n	8008ea6 <UART_Receive_IT+0x82>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea2:	701a      	strb	r2, [r3, #0]
 8008ea4:	e008      	b.n	8008eb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d15d      	bne.n	8008f92 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0220 	bic.w	r2, r2, #32
 8008ee4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ef4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	695a      	ldr	r2, [r3, #20]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0201 	bic.w	r2, r2, #1
 8008f04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d135      	bne.n	8008f88 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	330c      	adds	r3, #12
 8008f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	613b      	str	r3, [r7, #16]
   return(result);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f023 0310 	bic.w	r3, r3, #16
 8008f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f42:	623a      	str	r2, [r7, #32]
 8008f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	69f9      	ldr	r1, [r7, #28]
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e5      	bne.n	8008f22 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b10      	cmp	r3, #16
 8008f62:	d10a      	bne.n	8008f7a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fdb9 	bl	8008af8 <HAL_UARTEx_RxEventCallback>
 8008f86:	e002      	b.n	8008f8e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7f8 fcb1 	bl	80018f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e002      	b.n	8008f98 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e000      	b.n	8008f98 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008f96:	2302      	movs	r3, #2
  }
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3730      	adds	r7, #48	@ 0x30
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa4:	b0c0      	sub	sp, #256	@ 0x100
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fbc:	68d9      	ldr	r1, [r3, #12]
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	ea40 0301 	orr.w	r3, r0, r1
 8008fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ff8:	f021 010c 	bic.w	r1, r1, #12
 8008ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009006:	430b      	orrs	r3, r1
 8009008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800900a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901a:	6999      	ldr	r1, [r3, #24]
 800901c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	ea40 0301 	orr.w	r3, r0, r1
 8009026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b8f      	ldr	r3, [pc, #572]	@ (800926c <UART_SetConfig+0x2cc>)
 8009030:	429a      	cmp	r2, r3
 8009032:	d005      	beq.n	8009040 <UART_SetConfig+0xa0>
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4b8d      	ldr	r3, [pc, #564]	@ (8009270 <UART_SetConfig+0x2d0>)
 800903c:	429a      	cmp	r2, r3
 800903e:	d104      	bne.n	800904a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009040:	f7fd fc1e 	bl	8006880 <HAL_RCC_GetPCLK2Freq>
 8009044:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009048:	e003      	b.n	8009052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800904a:	f7fd fc05 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 800904e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800905c:	f040 810c 	bne.w	8009278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009064:	2200      	movs	r2, #0
 8009066:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800906a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800906e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009072:	4622      	mov	r2, r4
 8009074:	462b      	mov	r3, r5
 8009076:	1891      	adds	r1, r2, r2
 8009078:	65b9      	str	r1, [r7, #88]	@ 0x58
 800907a:	415b      	adcs	r3, r3
 800907c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800907e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009082:	4621      	mov	r1, r4
 8009084:	eb12 0801 	adds.w	r8, r2, r1
 8009088:	4629      	mov	r1, r5
 800908a:	eb43 0901 	adc.w	r9, r3, r1
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800909a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800909e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090a2:	4690      	mov	r8, r2
 80090a4:	4699      	mov	r9, r3
 80090a6:	4623      	mov	r3, r4
 80090a8:	eb18 0303 	adds.w	r3, r8, r3
 80090ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090b0:	462b      	mov	r3, r5
 80090b2:	eb49 0303 	adc.w	r3, r9, r3
 80090b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80090ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090ce:	460b      	mov	r3, r1
 80090d0:	18db      	adds	r3, r3, r3
 80090d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80090d4:	4613      	mov	r3, r2
 80090d6:	eb42 0303 	adc.w	r3, r2, r3
 80090da:	657b      	str	r3, [r7, #84]	@ 0x54
 80090dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80090e4:	f7f7 fd90 	bl	8000c08 <__aeabi_uldivmod>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4b61      	ldr	r3, [pc, #388]	@ (8009274 <UART_SetConfig+0x2d4>)
 80090ee:	fba3 2302 	umull	r2, r3, r3, r2
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	011c      	lsls	r4, r3, #4
 80090f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009100:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009108:	4642      	mov	r2, r8
 800910a:	464b      	mov	r3, r9
 800910c:	1891      	adds	r1, r2, r2
 800910e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009110:	415b      	adcs	r3, r3
 8009112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009118:	4641      	mov	r1, r8
 800911a:	eb12 0a01 	adds.w	sl, r2, r1
 800911e:	4649      	mov	r1, r9
 8009120:	eb43 0b01 	adc.w	fp, r3, r1
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009138:	4692      	mov	sl, r2
 800913a:	469b      	mov	fp, r3
 800913c:	4643      	mov	r3, r8
 800913e:	eb1a 0303 	adds.w	r3, sl, r3
 8009142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009146:	464b      	mov	r3, r9
 8009148:	eb4b 0303 	adc.w	r3, fp, r3
 800914c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800915c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009164:	460b      	mov	r3, r1
 8009166:	18db      	adds	r3, r3, r3
 8009168:	643b      	str	r3, [r7, #64]	@ 0x40
 800916a:	4613      	mov	r3, r2
 800916c:	eb42 0303 	adc.w	r3, r2, r3
 8009170:	647b      	str	r3, [r7, #68]	@ 0x44
 8009172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800917a:	f7f7 fd45 	bl	8000c08 <__aeabi_uldivmod>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4611      	mov	r1, r2
 8009184:	4b3b      	ldr	r3, [pc, #236]	@ (8009274 <UART_SetConfig+0x2d4>)
 8009186:	fba3 2301 	umull	r2, r3, r3, r1
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	2264      	movs	r2, #100	@ 0x64
 800918e:	fb02 f303 	mul.w	r3, r2, r3
 8009192:	1acb      	subs	r3, r1, r3
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800919a:	4b36      	ldr	r3, [pc, #216]	@ (8009274 <UART_SetConfig+0x2d4>)
 800919c:	fba3 2302 	umull	r2, r3, r3, r2
 80091a0:	095b      	lsrs	r3, r3, #5
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80091a8:	441c      	add	r4, r3
 80091aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80091b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	1891      	adds	r1, r2, r2
 80091c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80091c4:	415b      	adcs	r3, r3
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80091cc:	4641      	mov	r1, r8
 80091ce:	1851      	adds	r1, r2, r1
 80091d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80091d2:	4649      	mov	r1, r9
 80091d4:	414b      	adcs	r3, r1
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80091e4:	4659      	mov	r1, fp
 80091e6:	00cb      	lsls	r3, r1, #3
 80091e8:	4651      	mov	r1, sl
 80091ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ee:	4651      	mov	r1, sl
 80091f0:	00ca      	lsls	r2, r1, #3
 80091f2:	4610      	mov	r0, r2
 80091f4:	4619      	mov	r1, r3
 80091f6:	4603      	mov	r3, r0
 80091f8:	4642      	mov	r2, r8
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009200:	464b      	mov	r3, r9
 8009202:	460a      	mov	r2, r1
 8009204:	eb42 0303 	adc.w	r3, r2, r3
 8009208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009218:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800921c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009220:	460b      	mov	r3, r1
 8009222:	18db      	adds	r3, r3, r3
 8009224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009226:	4613      	mov	r3, r2
 8009228:	eb42 0303 	adc.w	r3, r2, r3
 800922c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800922e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009236:	f7f7 fce7 	bl	8000c08 <__aeabi_uldivmod>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <UART_SetConfig+0x2d4>)
 8009240:	fba3 1302 	umull	r1, r3, r3, r2
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	2164      	movs	r1, #100	@ 0x64
 8009248:	fb01 f303 	mul.w	r3, r1, r3
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	3332      	adds	r3, #50	@ 0x32
 8009252:	4a08      	ldr	r2, [pc, #32]	@ (8009274 <UART_SetConfig+0x2d4>)
 8009254:	fba2 2303 	umull	r2, r3, r2, r3
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f003 0207 	and.w	r2, r3, #7
 800925e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4422      	add	r2, r4
 8009266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009268:	e106      	b.n	8009478 <UART_SetConfig+0x4d8>
 800926a:	bf00      	nop
 800926c:	40011000 	.word	0x40011000
 8009270:	40011400 	.word	0x40011400
 8009274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800927c:	2200      	movs	r2, #0
 800927e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009282:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800928a:	4642      	mov	r2, r8
 800928c:	464b      	mov	r3, r9
 800928e:	1891      	adds	r1, r2, r2
 8009290:	6239      	str	r1, [r7, #32]
 8009292:	415b      	adcs	r3, r3
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
 8009296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800929a:	4641      	mov	r1, r8
 800929c:	1854      	adds	r4, r2, r1
 800929e:	4649      	mov	r1, r9
 80092a0:	eb43 0501 	adc.w	r5, r3, r1
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 0300 	mov.w	r3, #0
 80092ac:	00eb      	lsls	r3, r5, #3
 80092ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092b2:	00e2      	lsls	r2, r4, #3
 80092b4:	4614      	mov	r4, r2
 80092b6:	461d      	mov	r5, r3
 80092b8:	4643      	mov	r3, r8
 80092ba:	18e3      	adds	r3, r4, r3
 80092bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092c0:	464b      	mov	r3, r9
 80092c2:	eb45 0303 	adc.w	r3, r5, r3
 80092c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	f04f 0300 	mov.w	r3, #0
 80092e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80092e6:	4629      	mov	r1, r5
 80092e8:	008b      	lsls	r3, r1, #2
 80092ea:	4621      	mov	r1, r4
 80092ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092f0:	4621      	mov	r1, r4
 80092f2:	008a      	lsls	r2, r1, #2
 80092f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80092f8:	f7f7 fc86 	bl	8000c08 <__aeabi_uldivmod>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4b60      	ldr	r3, [pc, #384]	@ (8009484 <UART_SetConfig+0x4e4>)
 8009302:	fba3 2302 	umull	r2, r3, r3, r2
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	011c      	lsls	r4, r3, #4
 800930a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800930e:	2200      	movs	r2, #0
 8009310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009314:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800931c:	4642      	mov	r2, r8
 800931e:	464b      	mov	r3, r9
 8009320:	1891      	adds	r1, r2, r2
 8009322:	61b9      	str	r1, [r7, #24]
 8009324:	415b      	adcs	r3, r3
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800932c:	4641      	mov	r1, r8
 800932e:	1851      	adds	r1, r2, r1
 8009330:	6139      	str	r1, [r7, #16]
 8009332:	4649      	mov	r1, r9
 8009334:	414b      	adcs	r3, r1
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009344:	4659      	mov	r1, fp
 8009346:	00cb      	lsls	r3, r1, #3
 8009348:	4651      	mov	r1, sl
 800934a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800934e:	4651      	mov	r1, sl
 8009350:	00ca      	lsls	r2, r1, #3
 8009352:	4610      	mov	r0, r2
 8009354:	4619      	mov	r1, r3
 8009356:	4603      	mov	r3, r0
 8009358:	4642      	mov	r2, r8
 800935a:	189b      	adds	r3, r3, r2
 800935c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009360:	464b      	mov	r3, r9
 8009362:	460a      	mov	r2, r1
 8009364:	eb42 0303 	adc.w	r3, r2, r3
 8009368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800936c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009376:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	f04f 0300 	mov.w	r3, #0
 8009380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009384:	4649      	mov	r1, r9
 8009386:	008b      	lsls	r3, r1, #2
 8009388:	4641      	mov	r1, r8
 800938a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800938e:	4641      	mov	r1, r8
 8009390:	008a      	lsls	r2, r1, #2
 8009392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009396:	f7f7 fc37 	bl	8000c08 <__aeabi_uldivmod>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	4b38      	ldr	r3, [pc, #224]	@ (8009484 <UART_SetConfig+0x4e4>)
 80093a2:	fba3 2301 	umull	r2, r3, r3, r1
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	2264      	movs	r2, #100	@ 0x64
 80093aa:	fb02 f303 	mul.w	r3, r2, r3
 80093ae:	1acb      	subs	r3, r1, r3
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	3332      	adds	r3, #50	@ 0x32
 80093b4:	4a33      	ldr	r2, [pc, #204]	@ (8009484 <UART_SetConfig+0x4e4>)
 80093b6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093c0:	441c      	add	r4, r3
 80093c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093c6:	2200      	movs	r2, #0
 80093c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80093ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80093cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80093d0:	4642      	mov	r2, r8
 80093d2:	464b      	mov	r3, r9
 80093d4:	1891      	adds	r1, r2, r2
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	415b      	adcs	r3, r3
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093e0:	4641      	mov	r1, r8
 80093e2:	1851      	adds	r1, r2, r1
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	4649      	mov	r1, r9
 80093e8:	414b      	adcs	r3, r1
 80093ea:	607b      	str	r3, [r7, #4]
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093f8:	4659      	mov	r1, fp
 80093fa:	00cb      	lsls	r3, r1, #3
 80093fc:	4651      	mov	r1, sl
 80093fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009402:	4651      	mov	r1, sl
 8009404:	00ca      	lsls	r2, r1, #3
 8009406:	4610      	mov	r0, r2
 8009408:	4619      	mov	r1, r3
 800940a:	4603      	mov	r3, r0
 800940c:	4642      	mov	r2, r8
 800940e:	189b      	adds	r3, r3, r2
 8009410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009412:	464b      	mov	r3, r9
 8009414:	460a      	mov	r2, r1
 8009416:	eb42 0303 	adc.w	r3, r2, r3
 800941a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800941c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	663b      	str	r3, [r7, #96]	@ 0x60
 8009426:	667a      	str	r2, [r7, #100]	@ 0x64
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	f04f 0300 	mov.w	r3, #0
 8009430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009434:	4649      	mov	r1, r9
 8009436:	008b      	lsls	r3, r1, #2
 8009438:	4641      	mov	r1, r8
 800943a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800943e:	4641      	mov	r1, r8
 8009440:	008a      	lsls	r2, r1, #2
 8009442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009446:	f7f7 fbdf 	bl	8000c08 <__aeabi_uldivmod>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <UART_SetConfig+0x4e4>)
 8009450:	fba3 1302 	umull	r1, r3, r3, r2
 8009454:	095b      	lsrs	r3, r3, #5
 8009456:	2164      	movs	r1, #100	@ 0x64
 8009458:	fb01 f303 	mul.w	r3, r1, r3
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	011b      	lsls	r3, r3, #4
 8009460:	3332      	adds	r3, #50	@ 0x32
 8009462:	4a08      	ldr	r2, [pc, #32]	@ (8009484 <UART_SetConfig+0x4e4>)
 8009464:	fba2 2303 	umull	r2, r3, r2, r3
 8009468:	095b      	lsrs	r3, r3, #5
 800946a:	f003 020f 	and.w	r2, r3, #15
 800946e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4422      	add	r2, r4
 8009476:	609a      	str	r2, [r3, #8]
}
 8009478:	bf00      	nop
 800947a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800947e:	46bd      	mov	sp, r7
 8009480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009484:	51eb851f 	.word	0x51eb851f

08009488 <__NVIC_SetPriority>:
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009498:	2b00      	cmp	r3, #0
 800949a:	db0a      	blt.n	80094b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	490c      	ldr	r1, [pc, #48]	@ (80094d4 <__NVIC_SetPriority+0x4c>)
 80094a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094a6:	0112      	lsls	r2, r2, #4
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	440b      	add	r3, r1
 80094ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80094b0:	e00a      	b.n	80094c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	4908      	ldr	r1, [pc, #32]	@ (80094d8 <__NVIC_SetPriority+0x50>)
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	3b04      	subs	r3, #4
 80094c0:	0112      	lsls	r2, r2, #4
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	440b      	add	r3, r1
 80094c6:	761a      	strb	r2, [r3, #24]
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	e000e100 	.word	0xe000e100
 80094d8:	e000ed00 	.word	0xe000ed00

080094dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094dc:	b580      	push	{r7, lr}
 80094de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80094e0:	2100      	movs	r1, #0
 80094e2:	f06f 0004 	mvn.w	r0, #4
 80094e6:	f7ff ffcf 	bl	8009488 <__NVIC_SetPriority>
#endif
}
 80094ea:	bf00      	nop
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f6:	f3ef 8305 	mrs	r3, IPSR
 80094fa:	603b      	str	r3, [r7, #0]
  return(result);
 80094fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009502:	f06f 0305 	mvn.w	r3, #5
 8009506:	607b      	str	r3, [r7, #4]
 8009508:	e00c      	b.n	8009524 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800950a:	4b0a      	ldr	r3, [pc, #40]	@ (8009534 <osKernelInitialize+0x44>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d105      	bne.n	800951e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009512:	4b08      	ldr	r3, [pc, #32]	@ (8009534 <osKernelInitialize+0x44>)
 8009514:	2201      	movs	r2, #1
 8009516:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009518:	2300      	movs	r3, #0
 800951a:	607b      	str	r3, [r7, #4]
 800951c:	e002      	b.n	8009524 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800951e:	f04f 33ff 	mov.w	r3, #4294967295
 8009522:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009524:	687b      	ldr	r3, [r7, #4]
}
 8009526:	4618      	mov	r0, r3
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000550 	.word	0x20000550

08009538 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800953e:	f3ef 8305 	mrs	r3, IPSR
 8009542:	603b      	str	r3, [r7, #0]
  return(result);
 8009544:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <osKernelStart+0x1a>
    stat = osErrorISR;
 800954a:	f06f 0305 	mvn.w	r3, #5
 800954e:	607b      	str	r3, [r7, #4]
 8009550:	e010      	b.n	8009574 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009552:	4b0b      	ldr	r3, [pc, #44]	@ (8009580 <osKernelStart+0x48>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d109      	bne.n	800956e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800955a:	f7ff ffbf 	bl	80094dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800955e:	4b08      	ldr	r3, [pc, #32]	@ (8009580 <osKernelStart+0x48>)
 8009560:	2202      	movs	r2, #2
 8009562:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009564:	f001 f87a 	bl	800a65c <vTaskStartScheduler>
      stat = osOK;
 8009568:	2300      	movs	r3, #0
 800956a:	607b      	str	r3, [r7, #4]
 800956c:	e002      	b.n	8009574 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800956e:	f04f 33ff 	mov.w	r3, #4294967295
 8009572:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009574:	687b      	ldr	r3, [r7, #4]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000550 	.word	0x20000550

08009584 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009584:	b580      	push	{r7, lr}
 8009586:	b08e      	sub	sp, #56	@ 0x38
 8009588:	af04      	add	r7, sp, #16
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009590:	2300      	movs	r3, #0
 8009592:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009594:	f3ef 8305 	mrs	r3, IPSR
 8009598:	617b      	str	r3, [r7, #20]
  return(result);
 800959a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800959c:	2b00      	cmp	r3, #0
 800959e:	d17e      	bne.n	800969e <osThreadNew+0x11a>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d07b      	beq.n	800969e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80095a6:	2380      	movs	r3, #128	@ 0x80
 80095a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80095aa:	2318      	movs	r3, #24
 80095ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80095b2:	f04f 33ff 	mov.w	r3, #4294967295
 80095b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d045      	beq.n	800964a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <osThreadNew+0x48>
        name = attr->name;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d008      	beq.n	80095f2 <osThreadNew+0x6e>
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2b38      	cmp	r3, #56	@ 0x38
 80095e4:	d805      	bhi.n	80095f2 <osThreadNew+0x6e>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <osThreadNew+0x72>
        return (NULL);
 80095f2:	2300      	movs	r3, #0
 80095f4:	e054      	b.n	80096a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	089b      	lsrs	r3, r3, #2
 8009604:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00e      	beq.n	800962c <osThreadNew+0xa8>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	2b5b      	cmp	r3, #91	@ 0x5b
 8009614:	d90a      	bls.n	800962c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800961a:	2b00      	cmp	r3, #0
 800961c:	d006      	beq.n	800962c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <osThreadNew+0xa8>
        mem = 1;
 8009626:	2301      	movs	r3, #1
 8009628:	61bb      	str	r3, [r7, #24]
 800962a:	e010      	b.n	800964e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10c      	bne.n	800964e <osThreadNew+0xca>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d108      	bne.n	800964e <osThreadNew+0xca>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d104      	bne.n	800964e <osThreadNew+0xca>
          mem = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	61bb      	str	r3, [r7, #24]
 8009648:	e001      	b.n	800964e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d110      	bne.n	8009676 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800965c:	9202      	str	r2, [sp, #8]
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6a3a      	ldr	r2, [r7, #32]
 8009668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fe1a 	bl	800a2a4 <xTaskCreateStatic>
 8009670:	4603      	mov	r3, r0
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	e013      	b.n	800969e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d110      	bne.n	800969e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	b29a      	uxth	r2, r3
 8009680:	f107 0310 	add.w	r3, r7, #16
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 fe68 	bl	800a364 <xTaskCreate>
 8009694:	4603      	mov	r3, r0
 8009696:	2b01      	cmp	r3, #1
 8009698:	d001      	beq.n	800969e <osThreadNew+0x11a>
            hTask = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800969e:	693b      	ldr	r3, [r7, #16]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3728      	adds	r7, #40	@ 0x28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b0:	f3ef 8305 	mrs	r3, IPSR
 80096b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80096b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <osDelay+0x1c>
    stat = osErrorISR;
 80096bc:	f06f 0305 	mvn.w	r3, #5
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e007      	b.n	80096d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 ff8e 	bl	800a5f0 <vTaskDelay>
    }
  }

  return (stat);
 80096d4:	68fb      	ldr	r3, [r7, #12]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4a07      	ldr	r2, [pc, #28]	@ (800970c <vApplicationGetIdleTaskMemory+0x2c>)
 80096f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	4a06      	ldr	r2, [pc, #24]	@ (8009710 <vApplicationGetIdleTaskMemory+0x30>)
 80096f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2280      	movs	r2, #128	@ 0x80
 80096fc:	601a      	str	r2, [r3, #0]
}
 80096fe:	bf00      	nop
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000554 	.word	0x20000554
 8009710:	200005b0 	.word	0x200005b0

08009714 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4a07      	ldr	r2, [pc, #28]	@ (8009740 <vApplicationGetTimerTaskMemory+0x2c>)
 8009724:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	4a06      	ldr	r2, [pc, #24]	@ (8009744 <vApplicationGetTimerTaskMemory+0x30>)
 800972a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009732:	601a      	str	r2, [r3, #0]
}
 8009734:	bf00      	nop
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	200007b0 	.word	0x200007b0
 8009744:	2000080c 	.word	0x2000080c

08009748 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f103 0208 	add.w	r2, r3, #8
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f04f 32ff 	mov.w	r2, #4294967295
 8009760:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f103 0208 	add.w	r2, r3, #8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f103 0208 	add.w	r2, r3, #8
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009796:	bf00      	nop
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ea:	b480      	push	{r7}
 80097ec:	b085      	sub	sp, #20
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009800:	d103      	bne.n	800980a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	e00c      	b.n	8009824 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3308      	adds	r3, #8
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	e002      	b.n	8009818 <vListInsert+0x2e>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	429a      	cmp	r2, r3
 8009822:	d2f6      	bcs.n	8009812 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]
}
 8009850:	bf00      	nop
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	6892      	ldr	r2, [r2, #8]
 8009872:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	6852      	ldr	r2, [r2, #4]
 800987c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	429a      	cmp	r2, r3
 8009886:	d103      	bne.n	8009890 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689a      	ldr	r2, [r3, #8]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10b      	bne.n	80098dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	e7fd      	b.n	80098d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80098dc:	f002 f87c 	bl	800b9d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e8:	68f9      	ldr	r1, [r7, #12]
 80098ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	441a      	add	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800990c:	3b01      	subs	r3, #1
 800990e:	68f9      	ldr	r1, [r7, #12]
 8009910:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009912:	fb01 f303 	mul.w	r3, r1, r3
 8009916:	441a      	add	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	22ff      	movs	r2, #255	@ 0xff
 8009920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	22ff      	movs	r2, #255	@ 0xff
 8009928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d114      	bne.n	800995c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d01a      	beq.n	8009970 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3310      	adds	r3, #16
 800993e:	4618      	mov	r0, r3
 8009940:	f001 f91a 	bl	800ab78 <xTaskRemoveFromEventList>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d012      	beq.n	8009970 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800994a:	4b0d      	ldr	r3, [pc, #52]	@ (8009980 <xQueueGenericReset+0xd0>)
 800994c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	e009      	b.n	8009970 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3310      	adds	r3, #16
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff fef1 	bl	8009748 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3324      	adds	r3, #36	@ 0x24
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff feec 	bl	8009748 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009970:	f002 f864 	bl	800ba3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009974:	2301      	movs	r3, #1
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08e      	sub	sp, #56	@ 0x38
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10b      	bne.n	80099b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	e7fd      	b.n	80099ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <xQueueGenericCreateStatic+0x56>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <xQueueGenericCreateStatic+0x5a>
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <xQueueGenericCreateStatic+0x5c>
 80099de:	2300      	movs	r3, #0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	623b      	str	r3, [r7, #32]
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <xQueueGenericCreateStatic+0x84>
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <xQueueGenericCreateStatic+0x88>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e000      	b.n	8009a0e <xQueueGenericCreateStatic+0x8a>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10b      	bne.n	8009a2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	61fb      	str	r3, [r7, #28]
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	e7fd      	b.n	8009a26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a2a:	2350      	movs	r3, #80	@ 0x50
 8009a2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b50      	cmp	r3, #80	@ 0x50
 8009a32:	d00b      	beq.n	8009a4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	61bb      	str	r3, [r7, #24]
}
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
 8009a4a:	e7fd      	b.n	8009a48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00d      	beq.n	8009a74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 f805 	bl	8009a7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3730      	adds	r7, #48	@ 0x30
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
 8009a8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e002      	b.n	8009aa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009aac:	2101      	movs	r1, #1
 8009aae:	69b8      	ldr	r0, [r7, #24]
 8009ab0:	f7ff fefe 	bl	80098b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08e      	sub	sp, #56	@ 0x38
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10b      	bne.n	8009af8 <xQueueGenericSend+0x34>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009af2:	bf00      	nop
 8009af4:	bf00      	nop
 8009af6:	e7fd      	b.n	8009af4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <xQueueGenericSend+0x42>
 8009afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <xQueueGenericSend+0x46>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <xQueueGenericSend+0x48>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10b      	bne.n	8009b28 <xQueueGenericSend+0x64>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b22:	bf00      	nop
 8009b24:	bf00      	nop
 8009b26:	e7fd      	b.n	8009b24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d103      	bne.n	8009b36 <xQueueGenericSend+0x72>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d101      	bne.n	8009b3a <xQueueGenericSend+0x76>
 8009b36:	2301      	movs	r3, #1
 8009b38:	e000      	b.n	8009b3c <xQueueGenericSend+0x78>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10b      	bne.n	8009b58 <xQueueGenericSend+0x94>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	623b      	str	r3, [r7, #32]
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	e7fd      	b.n	8009b54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b58:	f001 f9ce 	bl	800aef8 <xTaskGetSchedulerState>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d102      	bne.n	8009b68 <xQueueGenericSend+0xa4>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <xQueueGenericSend+0xa8>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e000      	b.n	8009b6e <xQueueGenericSend+0xaa>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10b      	bne.n	8009b8a <xQueueGenericSend+0xc6>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	61fb      	str	r3, [r7, #28]
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	e7fd      	b.n	8009b86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b8a:	f001 ff25 	bl	800b9d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d302      	bcc.n	8009ba0 <xQueueGenericSend+0xdc>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d129      	bne.n	8009bf4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	68b9      	ldr	r1, [r7, #8]
 8009ba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ba6:	f000 fa0f 	bl	8009fc8 <prvCopyDataToQueue>
 8009baa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d010      	beq.n	8009bd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb6:	3324      	adds	r3, #36	@ 0x24
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 ffdd 	bl	800ab78 <xTaskRemoveFromEventList>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d013      	beq.n	8009bec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8009cc4 <xQueueGenericSend+0x200>)
 8009bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	e00a      	b.n	8009bec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d007      	beq.n	8009bec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009bdc:	4b39      	ldr	r3, [pc, #228]	@ (8009cc4 <xQueueGenericSend+0x200>)
 8009bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009bec:	f001 ff26 	bl	800ba3c <vPortExitCritical>
				return pdPASS;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e063      	b.n	8009cbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d103      	bne.n	8009c02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bfa:	f001 ff1f 	bl	800ba3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e05c      	b.n	8009cbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c08:	f107 0314 	add.w	r3, r7, #20
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f001 f817 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c12:	2301      	movs	r3, #1
 8009c14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c16:	f001 ff11 	bl	800ba3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c1a:	f000 fd87 	bl	800a72c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c1e:	f001 fedb 	bl	800b9d8 <vPortEnterCritical>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c28:	b25b      	sxtb	r3, r3
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d103      	bne.n	8009c38 <xQueueGenericSend+0x174>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c3e:	b25b      	sxtb	r3, r3
 8009c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c44:	d103      	bne.n	8009c4e <xQueueGenericSend+0x18a>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c4e:	f001 fef5 	bl	800ba3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c52:	1d3a      	adds	r2, r7, #4
 8009c54:	f107 0314 	add.w	r3, r7, #20
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f001 f806 	bl	800ac6c <xTaskCheckForTimeOut>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d124      	bne.n	8009cb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c68:	f000 faa6 	bl	800a1b8 <prvIsQueueFull>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d018      	beq.n	8009ca4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	3310      	adds	r3, #16
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4611      	mov	r1, r2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 ff2a 	bl	800aad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c82:	f000 fa31 	bl	800a0e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c86:	f000 fd5f 	bl	800a748 <xTaskResumeAll>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f47f af7c 	bne.w	8009b8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009c92:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc4 <xQueueGenericSend+0x200>)
 8009c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	e772      	b.n	8009b8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ca6:	f000 fa1f 	bl	800a0e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009caa:	f000 fd4d 	bl	800a748 <xTaskResumeAll>
 8009cae:	e76c      	b.n	8009b8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009cb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cb2:	f000 fa19 	bl	800a0e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cb6:	f000 fd47 	bl	800a748 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3738      	adds	r7, #56	@ 0x38
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	e000ed04 	.word	0xe000ed04

08009cc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b090      	sub	sp, #64	@ 0x40
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10b      	bne.n	8009cf8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	e7fd      	b.n	8009cf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d103      	bne.n	8009d06 <xQueueGenericSendFromISR+0x3e>
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <xQueueGenericSendFromISR+0x42>
 8009d06:	2301      	movs	r3, #1
 8009d08:	e000      	b.n	8009d0c <xQueueGenericSendFromISR+0x44>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10b      	bne.n	8009d28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d103      	bne.n	8009d36 <xQueueGenericSendFromISR+0x6e>
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d101      	bne.n	8009d3a <xQueueGenericSendFromISR+0x72>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <xQueueGenericSendFromISR+0x74>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	623b      	str	r3, [r7, #32]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d58:	f001 ff1e 	bl	800bb98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	61fa      	str	r2, [r7, #28]
 8009d72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <xQueueGenericSendFromISR+0xc2>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d12f      	bne.n	8009dea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009da0:	f000 f912 	bl	8009fc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009da4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d112      	bne.n	8009dd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d016      	beq.n	8009de4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db8:	3324      	adds	r3, #36	@ 0x24
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fedc 	bl	800ab78 <xTaskRemoveFromEventList>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00e      	beq.n	8009de4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00b      	beq.n	8009de4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	e007      	b.n	8009de4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009dd8:	3301      	adds	r3, #1
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	b25a      	sxtb	r2, r3
 8009dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009de4:	2301      	movs	r3, #1
 8009de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009de8:	e001      	b.n	8009dee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009df8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3740      	adds	r7, #64	@ 0x40
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08c      	sub	sp, #48	@ 0x30
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e10:	2300      	movs	r3, #0
 8009e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10b      	bne.n	8009e36 <xQueueReceive+0x32>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	623b      	str	r3, [r7, #32]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <xQueueReceive+0x40>
 8009e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <xQueueReceive+0x44>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e000      	b.n	8009e4a <xQueueReceive+0x46>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10b      	bne.n	8009e66 <xQueueReceive+0x62>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	61fb      	str	r3, [r7, #28]
}
 8009e60:	bf00      	nop
 8009e62:	bf00      	nop
 8009e64:	e7fd      	b.n	8009e62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e66:	f001 f847 	bl	800aef8 <xTaskGetSchedulerState>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d102      	bne.n	8009e76 <xQueueReceive+0x72>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <xQueueReceive+0x76>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e000      	b.n	8009e7c <xQueueReceive+0x78>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10b      	bne.n	8009e98 <xQueueReceive+0x94>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	61bb      	str	r3, [r7, #24]
}
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	e7fd      	b.n	8009e94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e98:	f001 fd9e 	bl	800b9d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01f      	beq.n	8009ee8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009eac:	f000 f8f6 	bl	800a09c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb2:	1e5a      	subs	r2, r3, #1
 8009eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00f      	beq.n	8009ee0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec2:	3310      	adds	r3, #16
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fe57 	bl	800ab78 <xTaskRemoveFromEventList>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d007      	beq.n	8009ee0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8009fc4 <xQueueReceive+0x1c0>)
 8009ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ee0:	f001 fdac 	bl	800ba3c <vPortExitCritical>
				return pdPASS;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e069      	b.n	8009fbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eee:	f001 fda5 	bl	800ba3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e062      	b.n	8009fbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009efc:	f107 0310 	add.w	r3, r7, #16
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 fe9d 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f0a:	f001 fd97 	bl	800ba3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f0e:	f000 fc0d 	bl	800a72c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f12:	f001 fd61 	bl	800b9d8 <vPortEnterCritical>
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f1c:	b25b      	sxtb	r3, r3
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f22:	d103      	bne.n	8009f2c <xQueueReceive+0x128>
 8009f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d103      	bne.n	8009f42 <xQueueReceive+0x13e>
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f42:	f001 fd7b 	bl	800ba3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f46:	1d3a      	adds	r2, r7, #4
 8009f48:	f107 0310 	add.w	r3, r7, #16
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 fe8c 	bl	800ac6c <xTaskCheckForTimeOut>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d123      	bne.n	8009fa2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f5c:	f000 f916 	bl	800a18c <prvIsQueueEmpty>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d017      	beq.n	8009f96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f68:	3324      	adds	r3, #36	@ 0x24
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fdb0 	bl	800aad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f76:	f000 f8b7 	bl	800a0e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f7a:	f000 fbe5 	bl	800a748 <xTaskResumeAll>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d189      	bne.n	8009e98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009f84:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc4 <xQueueReceive+0x1c0>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	e780      	b.n	8009e98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f98:	f000 f8a6 	bl	800a0e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f9c:	f000 fbd4 	bl	800a748 <xTaskResumeAll>
 8009fa0:	e77a      	b.n	8009e98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fa4:	f000 f8a0 	bl	800a0e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fa8:	f000 fbce 	bl	800a748 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fae:	f000 f8ed 	bl	800a18c <prvIsQueueEmpty>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f43f af6f 	beq.w	8009e98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3730      	adds	r7, #48	@ 0x30
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	e000ed04 	.word	0xe000ed04

08009fc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10d      	bne.n	800a002 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d14d      	bne.n	800a08a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 ff9e 	bl	800af34 <xTaskPriorityDisinherit>
 8009ff8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	609a      	str	r2, [r3, #8]
 800a000:	e043      	b.n	800a08a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d119      	bne.n	800a03c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6858      	ldr	r0, [r3, #4]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a010:	461a      	mov	r2, r3
 800a012:	68b9      	ldr	r1, [r7, #8]
 800a014:	f003 f831 	bl	800d07a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a020:	441a      	add	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d32b      	bcc.n	800a08a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	605a      	str	r2, [r3, #4]
 800a03a:	e026      	b.n	800a08a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	68d8      	ldr	r0, [r3, #12]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a044:	461a      	mov	r2, r3
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	f003 f817 	bl	800d07a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a054:	425b      	negs	r3, r3
 800a056:	441a      	add	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	429a      	cmp	r2, r3
 800a066:	d207      	bcs.n	800a078 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a070:	425b      	negs	r3, r3
 800a072:	441a      	add	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d105      	bne.n	800a08a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	3b01      	subs	r3, #1
 800a088:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a092:	697b      	ldr	r3, [r7, #20]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d018      	beq.n	800a0e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b6:	441a      	add	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d303      	bcc.n	800a0d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68d9      	ldr	r1, [r3, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6838      	ldr	r0, [r7, #0]
 800a0dc:	f002 ffcd 	bl	800d07a <memcpy>
	}
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0f0:	f001 fc72 	bl	800b9d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0fc:	e011      	b.n	800a122 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a102:	2b00      	cmp	r3, #0
 800a104:	d012      	beq.n	800a12c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3324      	adds	r3, #36	@ 0x24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fd34 	bl	800ab78 <xTaskRemoveFromEventList>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a116:	f000 fe0d 	bl	800ad34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a126:	2b00      	cmp	r3, #0
 800a128:	dce9      	bgt.n	800a0fe <prvUnlockQueue+0x16>
 800a12a:	e000      	b.n	800a12e <prvUnlockQueue+0x46>
					break;
 800a12c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	22ff      	movs	r2, #255	@ 0xff
 800a132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a136:	f001 fc81 	bl	800ba3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a13a:	f001 fc4d 	bl	800b9d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a144:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a146:	e011      	b.n	800a16c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d012      	beq.n	800a176 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3310      	adds	r3, #16
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fd0f 	bl	800ab78 <xTaskRemoveFromEventList>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a160:	f000 fde8 	bl	800ad34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	3b01      	subs	r3, #1
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a16c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a170:	2b00      	cmp	r3, #0
 800a172:	dce9      	bgt.n	800a148 <prvUnlockQueue+0x60>
 800a174:	e000      	b.n	800a178 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a176:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	22ff      	movs	r2, #255	@ 0xff
 800a17c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a180:	f001 fc5c 	bl	800ba3c <vPortExitCritical>
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a194:	f001 fc20 	bl	800b9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e001      	b.n	800a1aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1aa:	f001 fc47 	bl	800ba3c <vPortExitCritical>

	return xReturn;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1c0:	f001 fc0a 	bl	800b9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d102      	bne.n	800a1d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	e001      	b.n	800a1da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1da:	f001 fc2f 	bl	800ba3c <vPortExitCritical>

	return xReturn;
 800a1de:	68fb      	ldr	r3, [r7, #12]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	e014      	b.n	800a222 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a1f8:	4a0f      	ldr	r2, [pc, #60]	@ (800a238 <vQueueAddToRegistry+0x50>)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a204:	490c      	ldr	r1, [pc, #48]	@ (800a238 <vQueueAddToRegistry+0x50>)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a20e:	4a0a      	ldr	r2, [pc, #40]	@ (800a238 <vQueueAddToRegistry+0x50>)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	4413      	add	r3, r2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a21a:	e006      	b.n	800a22a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3301      	adds	r3, #1
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b07      	cmp	r3, #7
 800a226:	d9e7      	bls.n	800a1f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	20000c0c 	.word	0x20000c0c

0800a23c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a24c:	f001 fbc4 	bl	800b9d8 <vPortEnterCritical>
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a256:	b25b      	sxtb	r3, r3
 800a258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25c:	d103      	bne.n	800a266 <vQueueWaitForMessageRestricted+0x2a>
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a26c:	b25b      	sxtb	r3, r3
 800a26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a272:	d103      	bne.n	800a27c <vQueueWaitForMessageRestricted+0x40>
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a27c:	f001 fbde 	bl	800ba3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3324      	adds	r3, #36	@ 0x24
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fc45 	bl	800ab20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f7ff ff26 	bl	800a0e8 <prvUnlockQueue>
	}
 800a29c:	bf00      	nop
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b08e      	sub	sp, #56	@ 0x38
 800a2a8:	af04      	add	r7, sp, #16
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	623b      	str	r3, [r7, #32]
}
 800a2ca:	bf00      	nop
 800a2cc:	bf00      	nop
 800a2ce:	e7fd      	b.n	800a2cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10b      	bne.n	800a2ee <xTaskCreateStatic+0x4a>
	__asm volatile
 800a2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	61fb      	str	r3, [r7, #28]
}
 800a2e8:	bf00      	nop
 800a2ea:	bf00      	nop
 800a2ec:	e7fd      	b.n	800a2ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2ee:	235c      	movs	r3, #92	@ 0x5c
 800a2f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800a2f6:	d00b      	beq.n	800a310 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	61bb      	str	r3, [r7, #24]
}
 800a30a:	bf00      	nop
 800a30c:	bf00      	nop
 800a30e:	e7fd      	b.n	800a30c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a310:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01e      	beq.n	800a356 <xTaskCreateStatic+0xb2>
 800a318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d01b      	beq.n	800a356 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a320:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a326:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	2202      	movs	r2, #2
 800a32c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a330:	2300      	movs	r3, #0
 800a332:	9303      	str	r3, [sp, #12]
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	f107 0314 	add.w	r3, r7, #20
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 f850 	bl	800a3ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a34e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a350:	f000 f8de 	bl	800a510 <prvAddNewTaskToReadyList>
 800a354:	e001      	b.n	800a35a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a35a:	697b      	ldr	r3, [r7, #20]
	}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3728      	adds	r7, #40	@ 0x28
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08c      	sub	sp, #48	@ 0x30
 800a368:	af04      	add	r7, sp, #16
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	603b      	str	r3, [r7, #0]
 800a370:	4613      	mov	r3, r2
 800a372:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4618      	mov	r0, r3
 800a37a:	f001 fc4f 	bl	800bc1c <pvPortMalloc>
 800a37e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00e      	beq.n	800a3a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a386:	205c      	movs	r0, #92	@ 0x5c
 800a388:	f001 fc48 	bl	800bc1c <pvPortMalloc>
 800a38c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	631a      	str	r2, [r3, #48]	@ 0x30
 800a39a:	e005      	b.n	800a3a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f001 fd0b 	bl	800bdb8 <vPortFree>
 800a3a2:	e001      	b.n	800a3a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d017      	beq.n	800a3de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3b6:	88fa      	ldrh	r2, [r7, #6]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9303      	str	r3, [sp, #12]
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f80e 	bl	800a3ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3d2:	69f8      	ldr	r0, [r7, #28]
 800a3d4:	f000 f89c 	bl	800a510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	e002      	b.n	800a3e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3de:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3e4:	69bb      	ldr	r3, [r7, #24]
	}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b088      	sub	sp, #32
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	607a      	str	r2, [r7, #4]
 800a3fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	461a      	mov	r2, r3
 800a406:	21a5      	movs	r1, #165	@ 0xa5
 800a408:	f002 fda5 	bl	800cf56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a416:	3b01      	subs	r3, #1
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	f023 0307 	bic.w	r3, r3, #7
 800a424:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	f003 0307 	and.w	r3, r3, #7
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00b      	beq.n	800a448 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	617b      	str	r3, [r7, #20]
}
 800a442:	bf00      	nop
 800a444:	bf00      	nop
 800a446:	e7fd      	b.n	800a444 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d01f      	beq.n	800a48e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a44e:	2300      	movs	r3, #0
 800a450:	61fb      	str	r3, [r7, #28]
 800a452:	e012      	b.n	800a47a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	4413      	add	r3, r2
 800a45a:	7819      	ldrb	r1, [r3, #0]
 800a45c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	4413      	add	r3, r2
 800a462:	3334      	adds	r3, #52	@ 0x34
 800a464:	460a      	mov	r2, r1
 800a466:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	4413      	add	r3, r2
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d006      	beq.n	800a482 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	3301      	adds	r3, #1
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	2b0f      	cmp	r3, #15
 800a47e:	d9e9      	bls.n	800a454 <prvInitialiseNewTask+0x66>
 800a480:	e000      	b.n	800a484 <prvInitialiseNewTask+0x96>
			{
				break;
 800a482:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a48c:	e003      	b.n	800a496 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a498:	2b37      	cmp	r3, #55	@ 0x37
 800a49a:	d901      	bls.n	800a4a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a49c:	2337      	movs	r3, #55	@ 0x37
 800a49e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff f966 	bl	8009788 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	3318      	adds	r3, #24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff f961 	bl	8009788 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	2200      	movs	r2, #0
 800a4e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	68f9      	ldr	r1, [r7, #12]
 800a4ee:	69b8      	ldr	r0, [r7, #24]
 800a4f0:	f001 f93e 	bl	800b770 <pxPortInitialiseStack>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a506:	bf00      	nop
 800a508:	3720      	adds	r7, #32
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
	...

0800a510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a518:	f001 fa5e 	bl	800b9d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a51c:	4b2d      	ldr	r3, [pc, #180]	@ (800a5d4 <prvAddNewTaskToReadyList+0xc4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3301      	adds	r3, #1
 800a522:	4a2c      	ldr	r2, [pc, #176]	@ (800a5d4 <prvAddNewTaskToReadyList+0xc4>)
 800a524:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a526:	4b2c      	ldr	r3, [pc, #176]	@ (800a5d8 <prvAddNewTaskToReadyList+0xc8>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d109      	bne.n	800a542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a52e:	4a2a      	ldr	r2, [pc, #168]	@ (800a5d8 <prvAddNewTaskToReadyList+0xc8>)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a534:	4b27      	ldr	r3, [pc, #156]	@ (800a5d4 <prvAddNewTaskToReadyList+0xc4>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d110      	bne.n	800a55e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a53c:	f000 fc1e 	bl	800ad7c <prvInitialiseTaskLists>
 800a540:	e00d      	b.n	800a55e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a542:	4b26      	ldr	r3, [pc, #152]	@ (800a5dc <prvAddNewTaskToReadyList+0xcc>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d109      	bne.n	800a55e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a54a:	4b23      	ldr	r3, [pc, #140]	@ (800a5d8 <prvAddNewTaskToReadyList+0xc8>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	429a      	cmp	r2, r3
 800a556:	d802      	bhi.n	800a55e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a558:	4a1f      	ldr	r2, [pc, #124]	@ (800a5d8 <prvAddNewTaskToReadyList+0xc8>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a55e:	4b20      	ldr	r3, [pc, #128]	@ (800a5e0 <prvAddNewTaskToReadyList+0xd0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3301      	adds	r3, #1
 800a564:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e0 <prvAddNewTaskToReadyList+0xd0>)
 800a566:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a568:	4b1d      	ldr	r3, [pc, #116]	@ (800a5e0 <prvAddNewTaskToReadyList+0xd0>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a574:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e4 <prvAddNewTaskToReadyList+0xd4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d903      	bls.n	800a584 <prvAddNewTaskToReadyList+0x74>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a580:	4a18      	ldr	r2, [pc, #96]	@ (800a5e4 <prvAddNewTaskToReadyList+0xd4>)
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4a15      	ldr	r2, [pc, #84]	@ (800a5e8 <prvAddNewTaskToReadyList+0xd8>)
 800a592:	441a      	add	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3304      	adds	r3, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7ff f901 	bl	80097a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5a0:	f001 fa4c 	bl	800ba3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a5dc <prvAddNewTaskToReadyList+0xcc>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00e      	beq.n	800a5ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <prvAddNewTaskToReadyList+0xc8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d207      	bcs.n	800a5ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a5ec <prvAddNewTaskToReadyList+0xdc>)
 800a5bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20001120 	.word	0x20001120
 800a5d8:	20000c4c 	.word	0x20000c4c
 800a5dc:	2000112c 	.word	0x2000112c
 800a5e0:	2000113c 	.word	0x2000113c
 800a5e4:	20001128 	.word	0x20001128
 800a5e8:	20000c50 	.word	0x20000c50
 800a5ec:	e000ed04 	.word	0xe000ed04

0800a5f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d018      	beq.n	800a634 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a602:	4b14      	ldr	r3, [pc, #80]	@ (800a654 <vTaskDelay+0x64>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00b      	beq.n	800a622 <vTaskDelay+0x32>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	60bb      	str	r3, [r7, #8]
}
 800a61c:	bf00      	nop
 800a61e:	bf00      	nop
 800a620:	e7fd      	b.n	800a61e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a622:	f000 f883 	bl	800a72c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a626:	2100      	movs	r1, #0
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fcf3 	bl	800b014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a62e:	f000 f88b 	bl	800a748 <xTaskResumeAll>
 800a632:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d107      	bne.n	800a64a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a63a:	4b07      	ldr	r3, [pc, #28]	@ (800a658 <vTaskDelay+0x68>)
 800a63c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a64a:	bf00      	nop
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20001148 	.word	0x20001148
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08a      	sub	sp, #40	@ 0x28
 800a660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a662:	2300      	movs	r3, #0
 800a664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a666:	2300      	movs	r3, #0
 800a668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a66a:	463a      	mov	r2, r7
 800a66c:	1d39      	adds	r1, r7, #4
 800a66e:	f107 0308 	add.w	r3, r7, #8
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff f834 	bl	80096e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	9202      	str	r2, [sp, #8]
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	2300      	movs	r3, #0
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	2300      	movs	r3, #0
 800a688:	460a      	mov	r2, r1
 800a68a:	4922      	ldr	r1, [pc, #136]	@ (800a714 <vTaskStartScheduler+0xb8>)
 800a68c:	4822      	ldr	r0, [pc, #136]	@ (800a718 <vTaskStartScheduler+0xbc>)
 800a68e:	f7ff fe09 	bl	800a2a4 <xTaskCreateStatic>
 800a692:	4603      	mov	r3, r0
 800a694:	4a21      	ldr	r2, [pc, #132]	@ (800a71c <vTaskStartScheduler+0xc0>)
 800a696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a698:	4b20      	ldr	r3, [pc, #128]	@ (800a71c <vTaskStartScheduler+0xc0>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	e001      	b.n	800a6aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d102      	bne.n	800a6b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6b0:	f000 fd04 	bl	800b0bc <xTimerCreateTimerTask>
 800a6b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d116      	bne.n	800a6ea <vTaskStartScheduler+0x8e>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	613b      	str	r3, [r7, #16]
}
 800a6ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6d0:	4b13      	ldr	r3, [pc, #76]	@ (800a720 <vTaskStartScheduler+0xc4>)
 800a6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6d8:	4b12      	ldr	r3, [pc, #72]	@ (800a724 <vTaskStartScheduler+0xc8>)
 800a6da:	2201      	movs	r2, #1
 800a6dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6de:	4b12      	ldr	r3, [pc, #72]	@ (800a728 <vTaskStartScheduler+0xcc>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6e4:	f001 f8d4 	bl	800b890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6e8:	e00f      	b.n	800a70a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f0:	d10b      	bne.n	800a70a <vTaskStartScheduler+0xae>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	60fb      	str	r3, [r7, #12]
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	e7fd      	b.n	800a706 <vTaskStartScheduler+0xaa>
}
 800a70a:	bf00      	nop
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	0800f24c 	.word	0x0800f24c
 800a718:	0800ad4d 	.word	0x0800ad4d
 800a71c:	20001144 	.word	0x20001144
 800a720:	20001140 	.word	0x20001140
 800a724:	2000112c 	.word	0x2000112c
 800a728:	20001124 	.word	0x20001124

0800a72c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a730:	4b04      	ldr	r3, [pc, #16]	@ (800a744 <vTaskSuspendAll+0x18>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3301      	adds	r3, #1
 800a736:	4a03      	ldr	r2, [pc, #12]	@ (800a744 <vTaskSuspendAll+0x18>)
 800a738:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a73a:	bf00      	nop
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	20001148 	.word	0x20001148

0800a748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a752:	2300      	movs	r3, #0
 800a754:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a756:	4b42      	ldr	r3, [pc, #264]	@ (800a860 <xTaskResumeAll+0x118>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10b      	bne.n	800a776 <xTaskResumeAll+0x2e>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	603b      	str	r3, [r7, #0]
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	e7fd      	b.n	800a772 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a776:	f001 f92f 	bl	800b9d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a77a:	4b39      	ldr	r3, [pc, #228]	@ (800a860 <xTaskResumeAll+0x118>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3b01      	subs	r3, #1
 800a780:	4a37      	ldr	r2, [pc, #220]	@ (800a860 <xTaskResumeAll+0x118>)
 800a782:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a784:	4b36      	ldr	r3, [pc, #216]	@ (800a860 <xTaskResumeAll+0x118>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d162      	bne.n	800a852 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a78c:	4b35      	ldr	r3, [pc, #212]	@ (800a864 <xTaskResumeAll+0x11c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d05e      	beq.n	800a852 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a794:	e02f      	b.n	800a7f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a796:	4b34      	ldr	r3, [pc, #208]	@ (800a868 <xTaskResumeAll+0x120>)
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3318      	adds	r3, #24
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff f85a 	bl	800985c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff f855 	bl	800985c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a86c <xTaskResumeAll+0x124>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d903      	bls.n	800a7c6 <xTaskResumeAll+0x7e>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a86c <xTaskResumeAll+0x124>)
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4a27      	ldr	r2, [pc, #156]	@ (800a870 <xTaskResumeAll+0x128>)
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f7fe ffe0 	bl	80097a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e6:	4b23      	ldr	r3, [pc, #140]	@ (800a874 <xTaskResumeAll+0x12c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d302      	bcc.n	800a7f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a7f0:	4b21      	ldr	r3, [pc, #132]	@ (800a878 <xTaskResumeAll+0x130>)
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a868 <xTaskResumeAll+0x120>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1cb      	bne.n	800a796 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a804:	f000 fb58 	bl	800aeb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a808:	4b1c      	ldr	r3, [pc, #112]	@ (800a87c <xTaskResumeAll+0x134>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d010      	beq.n	800a836 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a814:	f000 f846 	bl	800a8a4 <xTaskIncrementTick>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a81e:	4b16      	ldr	r3, [pc, #88]	@ (800a878 <xTaskResumeAll+0x130>)
 800a820:	2201      	movs	r2, #1
 800a822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3b01      	subs	r3, #1
 800a828:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1f1      	bne.n	800a814 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a830:	4b12      	ldr	r3, [pc, #72]	@ (800a87c <xTaskResumeAll+0x134>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a836:	4b10      	ldr	r3, [pc, #64]	@ (800a878 <xTaskResumeAll+0x130>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a83e:	2301      	movs	r3, #1
 800a840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a842:	4b0f      	ldr	r3, [pc, #60]	@ (800a880 <xTaskResumeAll+0x138>)
 800a844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a852:	f001 f8f3 	bl	800ba3c <vPortExitCritical>

	return xAlreadyYielded;
 800a856:	68bb      	ldr	r3, [r7, #8]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20001148 	.word	0x20001148
 800a864:	20001120 	.word	0x20001120
 800a868:	200010e0 	.word	0x200010e0
 800a86c:	20001128 	.word	0x20001128
 800a870:	20000c50 	.word	0x20000c50
 800a874:	20000c4c 	.word	0x20000c4c
 800a878:	20001134 	.word	0x20001134
 800a87c:	20001130 	.word	0x20001130
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a88a:	4b05      	ldr	r3, [pc, #20]	@ (800a8a0 <xTaskGetTickCount+0x1c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a890:	687b      	ldr	r3, [r7, #4]
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20001124 	.word	0x20001124

0800a8a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a9ec <xTaskIncrementTick+0x148>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 8090 	bne.w	800a9d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8b8:	4b4d      	ldr	r3, [pc, #308]	@ (800a9f0 <xTaskIncrementTick+0x14c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8c0:	4a4b      	ldr	r2, [pc, #300]	@ (800a9f0 <xTaskIncrementTick+0x14c>)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d121      	bne.n	800a910 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8cc:	4b49      	ldr	r3, [pc, #292]	@ (800a9f4 <xTaskIncrementTick+0x150>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00b      	beq.n	800a8ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	603b      	str	r3, [r7, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	e7fd      	b.n	800a8ea <xTaskIncrementTick+0x46>
 800a8ee:	4b41      	ldr	r3, [pc, #260]	@ (800a9f4 <xTaskIncrementTick+0x150>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]
 800a8f4:	4b40      	ldr	r3, [pc, #256]	@ (800a9f8 <xTaskIncrementTick+0x154>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a3e      	ldr	r2, [pc, #248]	@ (800a9f4 <xTaskIncrementTick+0x150>)
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	4a3e      	ldr	r2, [pc, #248]	@ (800a9f8 <xTaskIncrementTick+0x154>)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	4b3e      	ldr	r3, [pc, #248]	@ (800a9fc <xTaskIncrementTick+0x158>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3301      	adds	r3, #1
 800a908:	4a3c      	ldr	r2, [pc, #240]	@ (800a9fc <xTaskIncrementTick+0x158>)
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	f000 fad4 	bl	800aeb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a910:	4b3b      	ldr	r3, [pc, #236]	@ (800aa00 <xTaskIncrementTick+0x15c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	429a      	cmp	r2, r3
 800a918:	d349      	bcc.n	800a9ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a91a:	4b36      	ldr	r3, [pc, #216]	@ (800a9f4 <xTaskIncrementTick+0x150>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d104      	bne.n	800a92e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a924:	4b36      	ldr	r3, [pc, #216]	@ (800aa00 <xTaskIncrementTick+0x15c>)
 800a926:	f04f 32ff 	mov.w	r2, #4294967295
 800a92a:	601a      	str	r2, [r3, #0]
					break;
 800a92c:	e03f      	b.n	800a9ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92e:	4b31      	ldr	r3, [pc, #196]	@ (800a9f4 <xTaskIncrementTick+0x150>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	429a      	cmp	r2, r3
 800a944:	d203      	bcs.n	800a94e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a946:	4a2e      	ldr	r2, [pc, #184]	@ (800aa00 <xTaskIncrementTick+0x15c>)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a94c:	e02f      	b.n	800a9ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	3304      	adds	r3, #4
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe ff82 	bl	800985c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	3318      	adds	r3, #24
 800a964:	4618      	mov	r0, r3
 800a966:	f7fe ff79 	bl	800985c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	4b25      	ldr	r3, [pc, #148]	@ (800aa04 <xTaskIncrementTick+0x160>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	d903      	bls.n	800a97e <xTaskIncrementTick+0xda>
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97a:	4a22      	ldr	r2, [pc, #136]	@ (800aa04 <xTaskIncrementTick+0x160>)
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4a1f      	ldr	r2, [pc, #124]	@ (800aa08 <xTaskIncrementTick+0x164>)
 800a98c:	441a      	add	r2, r3
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	3304      	adds	r3, #4
 800a992:	4619      	mov	r1, r3
 800a994:	4610      	mov	r0, r2
 800a996:	f7fe ff04 	bl	80097a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a99e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa0c <xTaskIncrementTick+0x168>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d3b8      	bcc.n	800a91a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9ac:	e7b5      	b.n	800a91a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9ae:	4b17      	ldr	r3, [pc, #92]	@ (800aa0c <xTaskIncrementTick+0x168>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b4:	4914      	ldr	r1, [pc, #80]	@ (800aa08 <xTaskIncrementTick+0x164>)
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	440b      	add	r3, r1
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d901      	bls.n	800a9ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9ca:	4b11      	ldr	r3, [pc, #68]	@ (800aa10 <xTaskIncrementTick+0x16c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d007      	beq.n	800a9e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	617b      	str	r3, [r7, #20]
 800a9d6:	e004      	b.n	800a9e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9d8:	4b0e      	ldr	r3, [pc, #56]	@ (800aa14 <xTaskIncrementTick+0x170>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	4a0d      	ldr	r2, [pc, #52]	@ (800aa14 <xTaskIncrementTick+0x170>)
 800a9e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9e2:	697b      	ldr	r3, [r7, #20]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20001148 	.word	0x20001148
 800a9f0:	20001124 	.word	0x20001124
 800a9f4:	200010d8 	.word	0x200010d8
 800a9f8:	200010dc 	.word	0x200010dc
 800a9fc:	20001138 	.word	0x20001138
 800aa00:	20001140 	.word	0x20001140
 800aa04:	20001128 	.word	0x20001128
 800aa08:	20000c50 	.word	0x20000c50
 800aa0c:	20000c4c 	.word	0x20000c4c
 800aa10:	20001134 	.word	0x20001134
 800aa14:	20001130 	.word	0x20001130

0800aa18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa1e:	4b28      	ldr	r3, [pc, #160]	@ (800aac0 <vTaskSwitchContext+0xa8>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa26:	4b27      	ldr	r3, [pc, #156]	@ (800aac4 <vTaskSwitchContext+0xac>)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa2c:	e042      	b.n	800aab4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800aa2e:	4b25      	ldr	r3, [pc, #148]	@ (800aac4 <vTaskSwitchContext+0xac>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa34:	4b24      	ldr	r3, [pc, #144]	@ (800aac8 <vTaskSwitchContext+0xb0>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e011      	b.n	800aa60 <vTaskSwitchContext+0x48>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10b      	bne.n	800aa5a <vTaskSwitchContext+0x42>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	607b      	str	r3, [r7, #4]
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop
 800aa58:	e7fd      	b.n	800aa56 <vTaskSwitchContext+0x3e>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	491a      	ldr	r1, [pc, #104]	@ (800aacc <vTaskSwitchContext+0xb4>)
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	440b      	add	r3, r1
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0e3      	beq.n	800aa3c <vTaskSwitchContext+0x24>
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4a13      	ldr	r2, [pc, #76]	@ (800aacc <vTaskSwitchContext+0xb4>)
 800aa80:	4413      	add	r3, r2
 800aa82:	60bb      	str	r3, [r7, #8]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	685a      	ldr	r2, [r3, #4]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	605a      	str	r2, [r3, #4]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	3308      	adds	r3, #8
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d104      	bne.n	800aaa4 <vTaskSwitchContext+0x8c>
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	605a      	str	r2, [r3, #4]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	4a09      	ldr	r2, [pc, #36]	@ (800aad0 <vTaskSwitchContext+0xb8>)
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	4a06      	ldr	r2, [pc, #24]	@ (800aac8 <vTaskSwitchContext+0xb0>)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6013      	str	r3, [r2, #0]
}
 800aab4:	bf00      	nop
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	20001148 	.word	0x20001148
 800aac4:	20001134 	.word	0x20001134
 800aac8:	20001128 	.word	0x20001128
 800aacc:	20000c50 	.word	0x20000c50
 800aad0:	20000c4c 	.word	0x20000c4c

0800aad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10b      	bne.n	800aafc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	60fb      	str	r3, [r7, #12]
}
 800aaf6:	bf00      	nop
 800aaf8:	bf00      	nop
 800aafa:	e7fd      	b.n	800aaf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aafc:	4b07      	ldr	r3, [pc, #28]	@ (800ab1c <vTaskPlaceOnEventList+0x48>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3318      	adds	r3, #24
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7fe fe70 	bl	80097ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	6838      	ldr	r0, [r7, #0]
 800ab0e:	f000 fa81 	bl	800b014 <prvAddCurrentTaskToDelayedList>
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000c4c 	.word	0x20000c4c

0800ab20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10b      	bne.n	800ab4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	617b      	str	r3, [r7, #20]
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	e7fd      	b.n	800ab46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab74 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3318      	adds	r3, #24
 800ab50:	4619      	mov	r1, r3
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7fe fe25 	bl	80097a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ab5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f000 fa54 	bl	800b014 <prvAddCurrentTaskToDelayedList>
	}
 800ab6c:	bf00      	nop
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20000c4c 	.word	0x20000c4c

0800ab78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10b      	bne.n	800aba6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	60fb      	str	r3, [r7, #12]
}
 800aba0:	bf00      	nop
 800aba2:	bf00      	nop
 800aba4:	e7fd      	b.n	800aba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	3318      	adds	r3, #24
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe fe56 	bl	800985c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac28 <xTaskRemoveFromEventList+0xb0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d11d      	bne.n	800abf4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	3304      	adds	r3, #4
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fe fe4d 	bl	800985c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc6:	4b19      	ldr	r3, [pc, #100]	@ (800ac2c <xTaskRemoveFromEventList+0xb4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d903      	bls.n	800abd6 <xTaskRemoveFromEventList+0x5e>
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd2:	4a16      	ldr	r2, [pc, #88]	@ (800ac2c <xTaskRemoveFromEventList+0xb4>)
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4a13      	ldr	r2, [pc, #76]	@ (800ac30 <xTaskRemoveFromEventList+0xb8>)
 800abe4:	441a      	add	r2, r3
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3304      	adds	r3, #4
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f7fe fdd8 	bl	80097a2 <vListInsertEnd>
 800abf2:	e005      	b.n	800ac00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	3318      	adds	r3, #24
 800abf8:	4619      	mov	r1, r3
 800abfa:	480e      	ldr	r0, [pc, #56]	@ (800ac34 <xTaskRemoveFromEventList+0xbc>)
 800abfc:	f7fe fdd1 	bl	80097a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac04:	4b0c      	ldr	r3, [pc, #48]	@ (800ac38 <xTaskRemoveFromEventList+0xc0>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d905      	bls.n	800ac1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac12:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <xTaskRemoveFromEventList+0xc4>)
 800ac14:	2201      	movs	r2, #1
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	e001      	b.n	800ac1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac1e:	697b      	ldr	r3, [r7, #20]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20001148 	.word	0x20001148
 800ac2c:	20001128 	.word	0x20001128
 800ac30:	20000c50 	.word	0x20000c50
 800ac34:	200010e0 	.word	0x200010e0
 800ac38:	20000c4c 	.word	0x20000c4c
 800ac3c:	20001134 	.word	0x20001134

0800ac40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac48:	4b06      	ldr	r3, [pc, #24]	@ (800ac64 <vTaskInternalSetTimeOutState+0x24>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac50:	4b05      	ldr	r3, [pc, #20]	@ (800ac68 <vTaskInternalSetTimeOutState+0x28>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	605a      	str	r2, [r3, #4]
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	20001138 	.word	0x20001138
 800ac68:	20001124 	.word	0x20001124

0800ac6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	613b      	str	r3, [r7, #16]
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10b      	bne.n	800acb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	60fb      	str	r3, [r7, #12]
}
 800acac:	bf00      	nop
 800acae:	bf00      	nop
 800acb0:	e7fd      	b.n	800acae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800acb2:	f000 fe91 	bl	800b9d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acb6:	4b1d      	ldr	r3, [pc, #116]	@ (800ad2c <xTaskCheckForTimeOut+0xc0>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acce:	d102      	bne.n	800acd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acd0:	2300      	movs	r3, #0
 800acd2:	61fb      	str	r3, [r7, #28]
 800acd4:	e023      	b.n	800ad1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	4b15      	ldr	r3, [pc, #84]	@ (800ad30 <xTaskCheckForTimeOut+0xc4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d007      	beq.n	800acf2 <xTaskCheckForTimeOut+0x86>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d302      	bcc.n	800acf2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800acec:	2301      	movs	r3, #1
 800acee:	61fb      	str	r3, [r7, #28]
 800acf0:	e015      	b.n	800ad1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d20b      	bcs.n	800ad14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	1ad2      	subs	r2, r2, r3
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff ff99 	bl	800ac40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	61fb      	str	r3, [r7, #28]
 800ad12:	e004      	b.n	800ad1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad1e:	f000 fe8d 	bl	800ba3c <vPortExitCritical>

	return xReturn;
 800ad22:	69fb      	ldr	r3, [r7, #28]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3720      	adds	r7, #32
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	20001124 	.word	0x20001124
 800ad30:	20001138 	.word	0x20001138

0800ad34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad34:	b480      	push	{r7}
 800ad36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad38:	4b03      	ldr	r3, [pc, #12]	@ (800ad48 <vTaskMissedYield+0x14>)
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]
}
 800ad3e:	bf00      	nop
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	20001134 	.word	0x20001134

0800ad4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad54:	f000 f852 	bl	800adfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad58:	4b06      	ldr	r3, [pc, #24]	@ (800ad74 <prvIdleTask+0x28>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d9f9      	bls.n	800ad54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad60:	4b05      	ldr	r3, [pc, #20]	@ (800ad78 <prvIdleTask+0x2c>)
 800ad62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad70:	e7f0      	b.n	800ad54 <prvIdleTask+0x8>
 800ad72:	bf00      	nop
 800ad74:	20000c50 	.word	0x20000c50
 800ad78:	e000ed04 	.word	0xe000ed04

0800ad7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad82:	2300      	movs	r3, #0
 800ad84:	607b      	str	r3, [r7, #4]
 800ad86:	e00c      	b.n	800ada2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4a12      	ldr	r2, [pc, #72]	@ (800addc <prvInitialiseTaskLists+0x60>)
 800ad94:	4413      	add	r3, r2
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe fcd6 	bl	8009748 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	607b      	str	r3, [r7, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b37      	cmp	r3, #55	@ 0x37
 800ada6:	d9ef      	bls.n	800ad88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ada8:	480d      	ldr	r0, [pc, #52]	@ (800ade0 <prvInitialiseTaskLists+0x64>)
 800adaa:	f7fe fccd 	bl	8009748 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adae:	480d      	ldr	r0, [pc, #52]	@ (800ade4 <prvInitialiseTaskLists+0x68>)
 800adb0:	f7fe fcca 	bl	8009748 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800adb4:	480c      	ldr	r0, [pc, #48]	@ (800ade8 <prvInitialiseTaskLists+0x6c>)
 800adb6:	f7fe fcc7 	bl	8009748 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adba:	480c      	ldr	r0, [pc, #48]	@ (800adec <prvInitialiseTaskLists+0x70>)
 800adbc:	f7fe fcc4 	bl	8009748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adc0:	480b      	ldr	r0, [pc, #44]	@ (800adf0 <prvInitialiseTaskLists+0x74>)
 800adc2:	f7fe fcc1 	bl	8009748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adc6:	4b0b      	ldr	r3, [pc, #44]	@ (800adf4 <prvInitialiseTaskLists+0x78>)
 800adc8:	4a05      	ldr	r2, [pc, #20]	@ (800ade0 <prvInitialiseTaskLists+0x64>)
 800adca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adcc:	4b0a      	ldr	r3, [pc, #40]	@ (800adf8 <prvInitialiseTaskLists+0x7c>)
 800adce:	4a05      	ldr	r2, [pc, #20]	@ (800ade4 <prvInitialiseTaskLists+0x68>)
 800add0:	601a      	str	r2, [r3, #0]
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000c50 	.word	0x20000c50
 800ade0:	200010b0 	.word	0x200010b0
 800ade4:	200010c4 	.word	0x200010c4
 800ade8:	200010e0 	.word	0x200010e0
 800adec:	200010f4 	.word	0x200010f4
 800adf0:	2000110c 	.word	0x2000110c
 800adf4:	200010d8 	.word	0x200010d8
 800adf8:	200010dc 	.word	0x200010dc

0800adfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae02:	e019      	b.n	800ae38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae04:	f000 fde8 	bl	800b9d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae08:	4b10      	ldr	r3, [pc, #64]	@ (800ae4c <prvCheckTasksWaitingTermination+0x50>)
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fe fd21 	bl	800985c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae50 <prvCheckTasksWaitingTermination+0x54>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	4a0b      	ldr	r2, [pc, #44]	@ (800ae50 <prvCheckTasksWaitingTermination+0x54>)
 800ae22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae24:	4b0b      	ldr	r3, [pc, #44]	@ (800ae54 <prvCheckTasksWaitingTermination+0x58>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae54 <prvCheckTasksWaitingTermination+0x58>)
 800ae2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae2e:	f000 fe05 	bl	800ba3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f810 	bl	800ae58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae38:	4b06      	ldr	r3, [pc, #24]	@ (800ae54 <prvCheckTasksWaitingTermination+0x58>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e1      	bne.n	800ae04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae40:	bf00      	nop
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200010f4 	.word	0x200010f4
 800ae50:	20001120 	.word	0x20001120
 800ae54:	20001108 	.word	0x20001108

0800ae58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d108      	bne.n	800ae7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 ffa2 	bl	800bdb8 <vPortFree>
				vPortFree( pxTCB );
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 ff9f 	bl	800bdb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae7a:	e019      	b.n	800aeb0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d103      	bne.n	800ae8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 ff96 	bl	800bdb8 <vPortFree>
	}
 800ae8c:	e010      	b.n	800aeb0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d00b      	beq.n	800aeb0 <prvDeleteTCB+0x58>
	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	60fb      	str	r3, [r7, #12]
}
 800aeaa:	bf00      	nop
 800aeac:	bf00      	nop
 800aeae:	e7fd      	b.n	800aeac <prvDeleteTCB+0x54>
	}
 800aeb0:	bf00      	nop
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aebe:	4b0c      	ldr	r3, [pc, #48]	@ (800aef0 <prvResetNextTaskUnblockTime+0x38>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d104      	bne.n	800aed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aec8:	4b0a      	ldr	r3, [pc, #40]	@ (800aef4 <prvResetNextTaskUnblockTime+0x3c>)
 800aeca:	f04f 32ff 	mov.w	r2, #4294967295
 800aece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aed0:	e008      	b.n	800aee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed2:	4b07      	ldr	r3, [pc, #28]	@ (800aef0 <prvResetNextTaskUnblockTime+0x38>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a04      	ldr	r2, [pc, #16]	@ (800aef4 <prvResetNextTaskUnblockTime+0x3c>)
 800aee2:	6013      	str	r3, [r2, #0]
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	200010d8 	.word	0x200010d8
 800aef4:	20001140 	.word	0x20001140

0800aef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aefe:	4b0b      	ldr	r3, [pc, #44]	@ (800af2c <xTaskGetSchedulerState+0x34>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af06:	2301      	movs	r3, #1
 800af08:	607b      	str	r3, [r7, #4]
 800af0a:	e008      	b.n	800af1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af0c:	4b08      	ldr	r3, [pc, #32]	@ (800af30 <xTaskGetSchedulerState+0x38>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d102      	bne.n	800af1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af14:	2302      	movs	r3, #2
 800af16:	607b      	str	r3, [r7, #4]
 800af18:	e001      	b.n	800af1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af1a:	2300      	movs	r3, #0
 800af1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af1e:	687b      	ldr	r3, [r7, #4]
	}
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	2000112c 	.word	0x2000112c
 800af30:	20001148 	.word	0x20001148

0800af34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d058      	beq.n	800affc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af4a:	4b2f      	ldr	r3, [pc, #188]	@ (800b008 <xTaskPriorityDisinherit+0xd4>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	429a      	cmp	r2, r3
 800af52:	d00b      	beq.n	800af6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	60fb      	str	r3, [r7, #12]
}
 800af66:	bf00      	nop
 800af68:	bf00      	nop
 800af6a:	e7fd      	b.n	800af68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10b      	bne.n	800af8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	60bb      	str	r3, [r7, #8]
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d02c      	beq.n	800affc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d128      	bne.n	800affc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3304      	adds	r3, #4
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fc54 	bl	800985c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afcc:	4b0f      	ldr	r3, [pc, #60]	@ (800b00c <xTaskPriorityDisinherit+0xd8>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d903      	bls.n	800afdc <xTaskPriorityDisinherit+0xa8>
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd8:	4a0c      	ldr	r2, [pc, #48]	@ (800b00c <xTaskPriorityDisinherit+0xd8>)
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4a09      	ldr	r2, [pc, #36]	@ (800b010 <xTaskPriorityDisinherit+0xdc>)
 800afea:	441a      	add	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fe fbd5 	bl	80097a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800affc:	697b      	ldr	r3, [r7, #20]
	}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20000c4c 	.word	0x20000c4c
 800b00c:	20001128 	.word	0x20001128
 800b010:	20000c50 	.word	0x20000c50

0800b014 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b01e:	4b21      	ldr	r3, [pc, #132]	@ (800b0a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b024:	4b20      	ldr	r3, [pc, #128]	@ (800b0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	3304      	adds	r3, #4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe fc16 	bl	800985c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d10a      	bne.n	800b04e <prvAddCurrentTaskToDelayedList+0x3a>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d007      	beq.n	800b04e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b03e:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3304      	adds	r3, #4
 800b044:	4619      	mov	r1, r3
 800b046:	4819      	ldr	r0, [pc, #100]	@ (800b0ac <prvAddCurrentTaskToDelayedList+0x98>)
 800b048:	f7fe fbab 	bl	80097a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b04c:	e026      	b.n	800b09c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4413      	add	r3, r2
 800b054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b056:	4b14      	ldr	r3, [pc, #80]	@ (800b0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	429a      	cmp	r2, r3
 800b064:	d209      	bcs.n	800b07a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b066:	4b12      	ldr	r3, [pc, #72]	@ (800b0b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3304      	adds	r3, #4
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f7fe fbb9 	bl	80097ea <vListInsert>
}
 800b078:	e010      	b.n	800b09c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b07a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f7fe fbaf 	bl	80097ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b08c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	429a      	cmp	r2, r3
 800b094:	d202      	bcs.n	800b09c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b096:	4a08      	ldr	r2, [pc, #32]	@ (800b0b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	6013      	str	r3, [r2, #0]
}
 800b09c:	bf00      	nop
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20001124 	.word	0x20001124
 800b0a8:	20000c4c 	.word	0x20000c4c
 800b0ac:	2000110c 	.word	0x2000110c
 800b0b0:	200010dc 	.word	0x200010dc
 800b0b4:	200010d8 	.word	0x200010d8
 800b0b8:	20001140 	.word	0x20001140

0800b0bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08a      	sub	sp, #40	@ 0x28
 800b0c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b0c6:	f000 fb13 	bl	800b6f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b0ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b140 <xTimerCreateTimerTask+0x84>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d021      	beq.n	800b116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b0da:	1d3a      	adds	r2, r7, #4
 800b0dc:	f107 0108 	add.w	r1, r7, #8
 800b0e0:	f107 030c 	add.w	r3, r7, #12
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe fb15 	bl	8009714 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	9202      	str	r2, [sp, #8]
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	460a      	mov	r2, r1
 800b0fc:	4911      	ldr	r1, [pc, #68]	@ (800b144 <xTimerCreateTimerTask+0x88>)
 800b0fe:	4812      	ldr	r0, [pc, #72]	@ (800b148 <xTimerCreateTimerTask+0x8c>)
 800b100:	f7ff f8d0 	bl	800a2a4 <xTaskCreateStatic>
 800b104:	4603      	mov	r3, r0
 800b106:	4a11      	ldr	r2, [pc, #68]	@ (800b14c <xTimerCreateTimerTask+0x90>)
 800b108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b10a:	4b10      	ldr	r3, [pc, #64]	@ (800b14c <xTimerCreateTimerTask+0x90>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b112:	2301      	movs	r3, #1
 800b114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10b      	bne.n	800b134 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	613b      	str	r3, [r7, #16]
}
 800b12e:	bf00      	nop
 800b130:	bf00      	nop
 800b132:	e7fd      	b.n	800b130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b134:	697b      	ldr	r3, [r7, #20]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	2000117c 	.word	0x2000117c
 800b144:	0800f254 	.word	0x0800f254
 800b148:	0800b289 	.word	0x0800b289
 800b14c:	20001180 	.word	0x20001180

0800b150 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	@ 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b15e:	2300      	movs	r3, #0
 800b160:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10b      	bne.n	800b180 <xTimerGenericCommand+0x30>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	623b      	str	r3, [r7, #32]
}
 800b17a:	bf00      	nop
 800b17c:	bf00      	nop
 800b17e:	e7fd      	b.n	800b17c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b180:	4b19      	ldr	r3, [pc, #100]	@ (800b1e8 <xTimerGenericCommand+0x98>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d02a      	beq.n	800b1de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b05      	cmp	r3, #5
 800b198:	dc18      	bgt.n	800b1cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b19a:	f7ff fead 	bl	800aef8 <xTaskGetSchedulerState>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d109      	bne.n	800b1b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1a4:	4b10      	ldr	r3, [pc, #64]	@ (800b1e8 <xTimerGenericCommand+0x98>)
 800b1a6:	6818      	ldr	r0, [r3, #0]
 800b1a8:	f107 0110 	add.w	r1, r7, #16
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1b0:	f7fe fc88 	bl	8009ac4 <xQueueGenericSend>
 800b1b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1b6:	e012      	b.n	800b1de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b1e8 <xTimerGenericCommand+0x98>)
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	f107 0110 	add.w	r1, r7, #16
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f7fe fc7e 	bl	8009ac4 <xQueueGenericSend>
 800b1c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1ca:	e008      	b.n	800b1de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b1cc:	4b06      	ldr	r3, [pc, #24]	@ (800b1e8 <xTimerGenericCommand+0x98>)
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	f107 0110 	add.w	r1, r7, #16
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	f7fe fd76 	bl	8009cc8 <xQueueGenericSendFromISR>
 800b1dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3728      	adds	r7, #40	@ 0x28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	2000117c 	.word	0x2000117c

0800b1ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f6:	4b23      	ldr	r3, [pc, #140]	@ (800b284 <prvProcessExpiredTimer+0x98>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	3304      	adds	r3, #4
 800b204:	4618      	mov	r0, r3
 800b206:	f7fe fb29 	bl	800985c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b210:	f003 0304 	and.w	r3, r3, #4
 800b214:	2b00      	cmp	r3, #0
 800b216:	d023      	beq.n	800b260 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	699a      	ldr	r2, [r3, #24]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	18d1      	adds	r1, r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	6978      	ldr	r0, [r7, #20]
 800b226:	f000 f8d5 	bl	800b3d4 <prvInsertTimerInActiveList>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d020      	beq.n	800b272 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b230:	2300      	movs	r3, #0
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	2100      	movs	r1, #0
 800b23a:	6978      	ldr	r0, [r7, #20]
 800b23c:	f7ff ff88 	bl	800b150 <xTimerGenericCommand>
 800b240:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d114      	bne.n	800b272 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	60fb      	str	r3, [r7, #12]
}
 800b25a:	bf00      	nop
 800b25c:	bf00      	nop
 800b25e:	e7fd      	b.n	800b25c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b266:	f023 0301 	bic.w	r3, r3, #1
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	6978      	ldr	r0, [r7, #20]
 800b278:	4798      	blx	r3
}
 800b27a:	bf00      	nop
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20001174 	.word	0x20001174

0800b288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b290:	f107 0308 	add.w	r3, r7, #8
 800b294:	4618      	mov	r0, r3
 800b296:	f000 f859 	bl	800b34c <prvGetNextExpireTime>
 800b29a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f805 	bl	800b2b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b2a6:	f000 f8d7 	bl	800b458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2aa:	bf00      	nop
 800b2ac:	e7f0      	b.n	800b290 <prvTimerTask+0x8>
	...

0800b2b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2ba:	f7ff fa37 	bl	800a72c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2be:	f107 0308 	add.w	r3, r7, #8
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 f866 	bl	800b394 <prvSampleTimeNow>
 800b2c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d130      	bne.n	800b332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <prvProcessTimerOrBlockTask+0x3c>
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d806      	bhi.n	800b2ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b2de:	f7ff fa33 	bl	800a748 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b2e2:	68f9      	ldr	r1, [r7, #12]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff ff81 	bl	800b1ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b2ea:	e024      	b.n	800b336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d008      	beq.n	800b304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b2f2:	4b13      	ldr	r3, [pc, #76]	@ (800b340 <prvProcessTimerOrBlockTask+0x90>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <prvProcessTimerOrBlockTask+0x50>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <prvProcessTimerOrBlockTask+0x52>
 800b300:	2300      	movs	r3, #0
 800b302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b304:	4b0f      	ldr	r3, [pc, #60]	@ (800b344 <prvProcessTimerOrBlockTask+0x94>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4619      	mov	r1, r3
 800b312:	f7fe ff93 	bl	800a23c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b316:	f7ff fa17 	bl	800a748 <xTaskResumeAll>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b320:	4b09      	ldr	r3, [pc, #36]	@ (800b348 <prvProcessTimerOrBlockTask+0x98>)
 800b322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	f3bf 8f6f 	isb	sy
}
 800b330:	e001      	b.n	800b336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b332:	f7ff fa09 	bl	800a748 <xTaskResumeAll>
}
 800b336:	bf00      	nop
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20001178 	.word	0x20001178
 800b344:	2000117c 	.word	0x2000117c
 800b348:	e000ed04 	.word	0xe000ed04

0800b34c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b354:	4b0e      	ldr	r3, [pc, #56]	@ (800b390 <prvGetNextExpireTime+0x44>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <prvGetNextExpireTime+0x16>
 800b35e:	2201      	movs	r2, #1
 800b360:	e000      	b.n	800b364 <prvGetNextExpireTime+0x18>
 800b362:	2200      	movs	r2, #0
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b370:	4b07      	ldr	r3, [pc, #28]	@ (800b390 <prvGetNextExpireTime+0x44>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e001      	b.n	800b380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b380:	68fb      	ldr	r3, [r7, #12]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	20001174 	.word	0x20001174

0800b394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b39c:	f7ff fa72 	bl	800a884 <xTaskGetTickCount>
 800b3a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d0 <prvSampleTimeNow+0x3c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d205      	bcs.n	800b3b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b3ac:	f000 f93a 	bl	800b624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3be:	4a04      	ldr	r2, [pc, #16]	@ (800b3d0 <prvSampleTimeNow+0x3c>)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20001184 	.word	0x20001184

0800b3d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d812      	bhi.n	800b420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	d302      	bcc.n	800b40e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b408:	2301      	movs	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e01b      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b40e:	4b10      	ldr	r3, [pc, #64]	@ (800b450 <prvInsertTimerInActiveList+0x7c>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3304      	adds	r3, #4
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f7fe f9e6 	bl	80097ea <vListInsert>
 800b41e:	e012      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d206      	bcs.n	800b436 <prvInsertTimerInActiveList+0x62>
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d302      	bcc.n	800b436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e007      	b.n	800b446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b436:	4b07      	ldr	r3, [pc, #28]	@ (800b454 <prvInsertTimerInActiveList+0x80>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4619      	mov	r1, r3
 800b440:	4610      	mov	r0, r2
 800b442:	f7fe f9d2 	bl	80097ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b446:	697b      	ldr	r3, [r7, #20]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20001178 	.word	0x20001178
 800b454:	20001174 	.word	0x20001174

0800b458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08e      	sub	sp, #56	@ 0x38
 800b45c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b45e:	e0ce      	b.n	800b5fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	da19      	bge.n	800b49a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b466:	1d3b      	adds	r3, r7, #4
 800b468:	3304      	adds	r3, #4
 800b46a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fb      	str	r3, [r7, #28]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b490:	6850      	ldr	r0, [r2, #4]
 800b492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b494:	6892      	ldr	r2, [r2, #8]
 800b496:	4611      	mov	r1, r2
 800b498:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f2c0 80ae 	blt.w	800b5fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d004      	beq.n	800b4b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe f9d2 	bl	800985c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff ff6a 	bl	800b394 <prvSampleTimeNow>
 800b4c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b09      	cmp	r3, #9
 800b4c6:	f200 8097 	bhi.w	800b5f8 <prvProcessReceivedCommands+0x1a0>
 800b4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d0 <prvProcessReceivedCommands+0x78>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b4f9 	.word	0x0800b4f9
 800b4d8:	0800b4f9 	.word	0x0800b4f9
 800b4dc:	0800b56f 	.word	0x0800b56f
 800b4e0:	0800b583 	.word	0x0800b583
 800b4e4:	0800b5cf 	.word	0x0800b5cf
 800b4e8:	0800b4f9 	.word	0x0800b4f9
 800b4ec:	0800b4f9 	.word	0x0800b4f9
 800b4f0:	0800b56f 	.word	0x0800b56f
 800b4f4:	0800b583 	.word	0x0800b583
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4fe:	f043 0301 	orr.w	r3, r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	18d1      	adds	r1, r2, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b518:	f7ff ff5c 	bl	800b3d4 <prvInsertTimerInActiveList>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d06c      	beq.n	800b5fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b00      	cmp	r3, #0
 800b536:	d061      	beq.n	800b5fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	441a      	add	r2, r3
 800b540:	2300      	movs	r3, #0
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	2300      	movs	r3, #0
 800b546:	2100      	movs	r1, #0
 800b548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b54a:	f7ff fe01 	bl	800b150 <xTimerGenericCommand>
 800b54e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d152      	bne.n	800b5fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	61bb      	str	r3, [r7, #24]
}
 800b568:	bf00      	nop
 800b56a:	bf00      	nop
 800b56c:	e7fd      	b.n	800b56a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b574:	f023 0301 	bic.w	r3, r3, #1
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b580:	e03d      	b.n	800b5fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b588:	f043 0301 	orr.w	r3, r3, #1
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b598:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10b      	bne.n	800b5ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	617b      	str	r3, [r7, #20]
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop
 800b5b8:	e7fd      	b.n	800b5b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c0:	18d1      	adds	r1, r2, r3
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5c8:	f7ff ff04 	bl	800b3d4 <prvInsertTimerInActiveList>
					break;
 800b5cc:	e017      	b.n	800b5fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b5dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5de:	f000 fbeb 	bl	800bdb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b5e2:	e00c      	b.n	800b5fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5ea:	f023 0301 	bic.w	r3, r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b5f6:	e002      	b.n	800b5fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b5f8:	bf00      	nop
 800b5fa:	e000      	b.n	800b5fe <prvProcessReceivedCommands+0x1a6>
					break;
 800b5fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5fe:	4b08      	ldr	r3, [pc, #32]	@ (800b620 <prvProcessReceivedCommands+0x1c8>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	1d39      	adds	r1, r7, #4
 800b604:	2200      	movs	r2, #0
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fbfc 	bl	8009e04 <xQueueReceive>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f47f af26 	bne.w	800b460 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop
 800b618:	3730      	adds	r7, #48	@ 0x30
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	2000117c 	.word	0x2000117c

0800b624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b62a:	e049      	b.n	800b6c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b62c:	4b2e      	ldr	r3, [pc, #184]	@ (800b6e8 <prvSwitchTimerLists+0xc4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b636:	4b2c      	ldr	r3, [pc, #176]	@ (800b6e8 <prvSwitchTimerLists+0xc4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3304      	adds	r3, #4
 800b644:	4618      	mov	r0, r3
 800b646:	f7fe f909 	bl	800985c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b658:	f003 0304 	and.w	r3, r3, #4
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d02f      	beq.n	800b6c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	699b      	ldr	r3, [r3, #24]
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	4413      	add	r3, r2
 800b668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d90e      	bls.n	800b690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b67e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e8 <prvSwitchTimerLists+0xc4>)
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3304      	adds	r3, #4
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f7fe f8ae 	bl	80097ea <vListInsert>
 800b68e:	e017      	b.n	800b6c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b690:	2300      	movs	r3, #0
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	2300      	movs	r3, #0
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	2100      	movs	r1, #0
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f7ff fd58 	bl	800b150 <xTimerGenericCommand>
 800b6a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10b      	bne.n	800b6c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	603b      	str	r3, [r7, #0]
}
 800b6ba:	bf00      	nop
 800b6bc:	bf00      	nop
 800b6be:	e7fd      	b.n	800b6bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6c0:	4b09      	ldr	r3, [pc, #36]	@ (800b6e8 <prvSwitchTimerLists+0xc4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1b0      	bne.n	800b62c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b6ca:	4b07      	ldr	r3, [pc, #28]	@ (800b6e8 <prvSwitchTimerLists+0xc4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b6d0:	4b06      	ldr	r3, [pc, #24]	@ (800b6ec <prvSwitchTimerLists+0xc8>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a04      	ldr	r2, [pc, #16]	@ (800b6e8 <prvSwitchTimerLists+0xc4>)
 800b6d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b6d8:	4a04      	ldr	r2, [pc, #16]	@ (800b6ec <prvSwitchTimerLists+0xc8>)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	6013      	str	r3, [r2, #0]
}
 800b6de:	bf00      	nop
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20001174 	.word	0x20001174
 800b6ec:	20001178 	.word	0x20001178

0800b6f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b6f6:	f000 f96f 	bl	800b9d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b6fa:	4b15      	ldr	r3, [pc, #84]	@ (800b750 <prvCheckForValidListAndQueue+0x60>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d120      	bne.n	800b744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b702:	4814      	ldr	r0, [pc, #80]	@ (800b754 <prvCheckForValidListAndQueue+0x64>)
 800b704:	f7fe f820 	bl	8009748 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b708:	4813      	ldr	r0, [pc, #76]	@ (800b758 <prvCheckForValidListAndQueue+0x68>)
 800b70a:	f7fe f81d 	bl	8009748 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b70e:	4b13      	ldr	r3, [pc, #76]	@ (800b75c <prvCheckForValidListAndQueue+0x6c>)
 800b710:	4a10      	ldr	r2, [pc, #64]	@ (800b754 <prvCheckForValidListAndQueue+0x64>)
 800b712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b714:	4b12      	ldr	r3, [pc, #72]	@ (800b760 <prvCheckForValidListAndQueue+0x70>)
 800b716:	4a10      	ldr	r2, [pc, #64]	@ (800b758 <prvCheckForValidListAndQueue+0x68>)
 800b718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b71a:	2300      	movs	r3, #0
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	4b11      	ldr	r3, [pc, #68]	@ (800b764 <prvCheckForValidListAndQueue+0x74>)
 800b720:	4a11      	ldr	r2, [pc, #68]	@ (800b768 <prvCheckForValidListAndQueue+0x78>)
 800b722:	2110      	movs	r1, #16
 800b724:	200a      	movs	r0, #10
 800b726:	f7fe f92d 	bl	8009984 <xQueueGenericCreateStatic>
 800b72a:	4603      	mov	r3, r0
 800b72c:	4a08      	ldr	r2, [pc, #32]	@ (800b750 <prvCheckForValidListAndQueue+0x60>)
 800b72e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b730:	4b07      	ldr	r3, [pc, #28]	@ (800b750 <prvCheckForValidListAndQueue+0x60>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d005      	beq.n	800b744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b738:	4b05      	ldr	r3, [pc, #20]	@ (800b750 <prvCheckForValidListAndQueue+0x60>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	490b      	ldr	r1, [pc, #44]	@ (800b76c <prvCheckForValidListAndQueue+0x7c>)
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fd52 	bl	800a1e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b744:	f000 f97a 	bl	800ba3c <vPortExitCritical>
}
 800b748:	bf00      	nop
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	2000117c 	.word	0x2000117c
 800b754:	2000114c 	.word	0x2000114c
 800b758:	20001160 	.word	0x20001160
 800b75c:	20001174 	.word	0x20001174
 800b760:	20001178 	.word	0x20001178
 800b764:	20001228 	.word	0x20001228
 800b768:	20001188 	.word	0x20001188
 800b76c:	0800f25c 	.word	0x0800f25c

0800b770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3b04      	subs	r3, #4
 800b780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3b04      	subs	r3, #4
 800b78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f023 0201 	bic.w	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3b04      	subs	r3, #4
 800b79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7a0:	4a0c      	ldr	r2, [pc, #48]	@ (800b7d4 <pxPortInitialiseStack+0x64>)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3b14      	subs	r3, #20
 800b7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f06f 0202 	mvn.w	r2, #2
 800b7be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3b20      	subs	r3, #32
 800b7c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr
 800b7d4:	0800b7d9 	.word	0x0800b7d9

0800b7d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7e2:	4b13      	ldr	r3, [pc, #76]	@ (800b830 <prvTaskExitError+0x58>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ea:	d00b      	beq.n	800b804 <prvTaskExitError+0x2c>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	60fb      	str	r3, [r7, #12]
}
 800b7fe:	bf00      	nop
 800b800:	bf00      	nop
 800b802:	e7fd      	b.n	800b800 <prvTaskExitError+0x28>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60bb      	str	r3, [r7, #8]
}
 800b816:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b818:	bf00      	nop
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d0fc      	beq.n	800b81a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b820:	bf00      	nop
 800b822:	bf00      	nop
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	20000010 	.word	0x20000010
	...

0800b840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b840:	4b07      	ldr	r3, [pc, #28]	@ (800b860 <pxCurrentTCBConst2>)
 800b842:	6819      	ldr	r1, [r3, #0]
 800b844:	6808      	ldr	r0, [r1, #0]
 800b846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84a:	f380 8809 	msr	PSP, r0
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f04f 0000 	mov.w	r0, #0
 800b856:	f380 8811 	msr	BASEPRI, r0
 800b85a:	4770      	bx	lr
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst2>:
 800b860:	20000c4c 	.word	0x20000c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b868:	4808      	ldr	r0, [pc, #32]	@ (800b88c <prvPortStartFirstTask+0x24>)
 800b86a:	6800      	ldr	r0, [r0, #0]
 800b86c:	6800      	ldr	r0, [r0, #0]
 800b86e:	f380 8808 	msr	MSP, r0
 800b872:	f04f 0000 	mov.w	r0, #0
 800b876:	f380 8814 	msr	CONTROL, r0
 800b87a:	b662      	cpsie	i
 800b87c:	b661      	cpsie	f
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	df00      	svc	0
 800b888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b88a:	bf00      	nop
 800b88c:	e000ed08 	.word	0xe000ed08

0800b890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b896:	4b47      	ldr	r3, [pc, #284]	@ (800b9b4 <xPortStartScheduler+0x124>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a47      	ldr	r2, [pc, #284]	@ (800b9b8 <xPortStartScheduler+0x128>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d10b      	bne.n	800b8b8 <xPortStartScheduler+0x28>
	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	613b      	str	r3, [r7, #16]
}
 800b8b2:	bf00      	nop
 800b8b4:	bf00      	nop
 800b8b6:	e7fd      	b.n	800b8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8b8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9b4 <xPortStartScheduler+0x124>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a3f      	ldr	r2, [pc, #252]	@ (800b9bc <xPortStartScheduler+0x12c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d10b      	bne.n	800b8da <xPortStartScheduler+0x4a>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	60fb      	str	r3, [r7, #12]
}
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop
 800b8d8:	e7fd      	b.n	800b8d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8da:	4b39      	ldr	r3, [pc, #228]	@ (800b9c0 <xPortStartScheduler+0x130>)
 800b8dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	22ff      	movs	r2, #255	@ 0xff
 800b8ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	4b31      	ldr	r3, [pc, #196]	@ (800b9c4 <xPortStartScheduler+0x134>)
 800b900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b902:	4b31      	ldr	r3, [pc, #196]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b904:	2207      	movs	r2, #7
 800b906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b908:	e009      	b.n	800b91e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b90a:	4b2f      	ldr	r3, [pc, #188]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3b01      	subs	r3, #1
 800b910:	4a2d      	ldr	r2, [pc, #180]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	b2db      	uxtb	r3, r3
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b91e:	78fb      	ldrb	r3, [r7, #3]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b926:	2b80      	cmp	r3, #128	@ 0x80
 800b928:	d0ef      	beq.n	800b90a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b92a:	4b27      	ldr	r3, [pc, #156]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f1c3 0307 	rsb	r3, r3, #7
 800b932:	2b04      	cmp	r3, #4
 800b934:	d00b      	beq.n	800b94e <xPortStartScheduler+0xbe>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60bb      	str	r3, [r7, #8]
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	e7fd      	b.n	800b94a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b94e:	4b1e      	ldr	r3, [pc, #120]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	021b      	lsls	r3, r3, #8
 800b954:	4a1c      	ldr	r2, [pc, #112]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b958:	4b1b      	ldr	r3, [pc, #108]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b960:	4a19      	ldr	r2, [pc, #100]	@ (800b9c8 <xPortStartScheduler+0x138>)
 800b962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	b2da      	uxtb	r2, r3
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b96c:	4b17      	ldr	r3, [pc, #92]	@ (800b9cc <xPortStartScheduler+0x13c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a16      	ldr	r2, [pc, #88]	@ (800b9cc <xPortStartScheduler+0x13c>)
 800b972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b978:	4b14      	ldr	r3, [pc, #80]	@ (800b9cc <xPortStartScheduler+0x13c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a13      	ldr	r2, [pc, #76]	@ (800b9cc <xPortStartScheduler+0x13c>)
 800b97e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b984:	f000 f8da 	bl	800bb3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b988:	4b11      	ldr	r3, [pc, #68]	@ (800b9d0 <xPortStartScheduler+0x140>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b98e:	f000 f8f9 	bl	800bb84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b992:	4b10      	ldr	r3, [pc, #64]	@ (800b9d4 <xPortStartScheduler+0x144>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a0f      	ldr	r2, [pc, #60]	@ (800b9d4 <xPortStartScheduler+0x144>)
 800b998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b99c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b99e:	f7ff ff63 	bl	800b868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9a2:	f7ff f839 	bl	800aa18 <vTaskSwitchContext>
	prvTaskExitError();
 800b9a6:	f7ff ff17 	bl	800b7d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	e000ed00 	.word	0xe000ed00
 800b9b8:	410fc271 	.word	0x410fc271
 800b9bc:	410fc270 	.word	0x410fc270
 800b9c0:	e000e400 	.word	0xe000e400
 800b9c4:	20001278 	.word	0x20001278
 800b9c8:	2000127c 	.word	0x2000127c
 800b9cc:	e000ed20 	.word	0xe000ed20
 800b9d0:	20000010 	.word	0x20000010
 800b9d4:	e000ef34 	.word	0xe000ef34

0800b9d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	607b      	str	r3, [r7, #4]
}
 800b9f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9f2:	4b10      	ldr	r3, [pc, #64]	@ (800ba34 <vPortEnterCritical+0x5c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	4a0e      	ldr	r2, [pc, #56]	@ (800ba34 <vPortEnterCritical+0x5c>)
 800b9fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800ba34 <vPortEnterCritical+0x5c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d110      	bne.n	800ba26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba04:	4b0c      	ldr	r3, [pc, #48]	@ (800ba38 <vPortEnterCritical+0x60>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00b      	beq.n	800ba26 <vPortEnterCritical+0x4e>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	603b      	str	r3, [r7, #0]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <vPortEnterCritical+0x4a>
	}
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	20000010 	.word	0x20000010
 800ba38:	e000ed04 	.word	0xe000ed04

0800ba3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba42:	4b12      	ldr	r3, [pc, #72]	@ (800ba8c <vPortExitCritical+0x50>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <vPortExitCritical+0x26>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	607b      	str	r3, [r7, #4]
}
 800ba5c:	bf00      	nop
 800ba5e:	bf00      	nop
 800ba60:	e7fd      	b.n	800ba5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba62:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <vPortExitCritical+0x50>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	4a08      	ldr	r2, [pc, #32]	@ (800ba8c <vPortExitCritical+0x50>)
 800ba6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba6c:	4b07      	ldr	r3, [pc, #28]	@ (800ba8c <vPortExitCritical+0x50>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d105      	bne.n	800ba80 <vPortExitCritical+0x44>
 800ba74:	2300      	movs	r3, #0
 800ba76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	f383 8811 	msr	BASEPRI, r3
}
 800ba7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	20000010 	.word	0x20000010

0800ba90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba90:	f3ef 8009 	mrs	r0, PSP
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	4b15      	ldr	r3, [pc, #84]	@ (800baf0 <pxCurrentTCBConst>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	f01e 0f10 	tst.w	lr, #16
 800baa0:	bf08      	it	eq
 800baa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800baa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baaa:	6010      	str	r0, [r2, #0]
 800baac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bab4:	f380 8811 	msr	BASEPRI, r0
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f7fe ffaa 	bl	800aa18 <vTaskSwitchContext>
 800bac4:	f04f 0000 	mov.w	r0, #0
 800bac8:	f380 8811 	msr	BASEPRI, r0
 800bacc:	bc09      	pop	{r0, r3}
 800bace:	6819      	ldr	r1, [r3, #0]
 800bad0:	6808      	ldr	r0, [r1, #0]
 800bad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad6:	f01e 0f10 	tst.w	lr, #16
 800bada:	bf08      	it	eq
 800badc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bae0:	f380 8809 	msr	PSP, r0
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	f3af 8000 	nop.w

0800baf0 <pxCurrentTCBConst>:
 800baf0:	20000c4c 	.word	0x20000c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop

0800baf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	607b      	str	r3, [r7, #4]
}
 800bb10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb12:	f7fe fec7 	bl	800a8a4 <xTaskIncrementTick>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb1c:	4b06      	ldr	r3, [pc, #24]	@ (800bb38 <xPortSysTickHandler+0x40>)
 800bb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	2300      	movs	r3, #0
 800bb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	f383 8811 	msr	BASEPRI, r3
}
 800bb2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	e000ed04 	.word	0xe000ed04

0800bb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb40:	4b0b      	ldr	r3, [pc, #44]	@ (800bb70 <vPortSetupTimerInterrupt+0x34>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb46:	4b0b      	ldr	r3, [pc, #44]	@ (800bb74 <vPortSetupTimerInterrupt+0x38>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb78 <vPortSetupTimerInterrupt+0x3c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a0a      	ldr	r2, [pc, #40]	@ (800bb7c <vPortSetupTimerInterrupt+0x40>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	099b      	lsrs	r3, r3, #6
 800bb58:	4a09      	ldr	r2, [pc, #36]	@ (800bb80 <vPortSetupTimerInterrupt+0x44>)
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb5e:	4b04      	ldr	r3, [pc, #16]	@ (800bb70 <vPortSetupTimerInterrupt+0x34>)
 800bb60:	2207      	movs	r2, #7
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	bf00      	nop
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	e000e010 	.word	0xe000e010
 800bb74:	e000e018 	.word	0xe000e018
 800bb78:	20000004 	.word	0x20000004
 800bb7c:	10624dd3 	.word	0x10624dd3
 800bb80:	e000e014 	.word	0xe000e014

0800bb84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bb94 <vPortEnableVFP+0x10>
 800bb88:	6801      	ldr	r1, [r0, #0]
 800bb8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bb8e:	6001      	str	r1, [r0, #0]
 800bb90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb92:	bf00      	nop
 800bb94:	e000ed88 	.word	0xe000ed88

0800bb98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb9e:	f3ef 8305 	mrs	r3, IPSR
 800bba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b0f      	cmp	r3, #15
 800bba8:	d915      	bls.n	800bbd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbaa:	4a18      	ldr	r2, [pc, #96]	@ (800bc0c <vPortValidateInterruptPriority+0x74>)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4413      	add	r3, r2
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbb4:	4b16      	ldr	r3, [pc, #88]	@ (800bc10 <vPortValidateInterruptPriority+0x78>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	7afa      	ldrb	r2, [r7, #11]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d20b      	bcs.n	800bbd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	607b      	str	r3, [r7, #4]
}
 800bbd0:	bf00      	nop
 800bbd2:	bf00      	nop
 800bbd4:	e7fd      	b.n	800bbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800bc14 <vPortValidateInterruptPriority+0x7c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bbde:	4b0e      	ldr	r3, [pc, #56]	@ (800bc18 <vPortValidateInterruptPriority+0x80>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d90b      	bls.n	800bbfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	603b      	str	r3, [r7, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	bf00      	nop
 800bbfc:	e7fd      	b.n	800bbfa <vPortValidateInterruptPriority+0x62>
	}
 800bbfe:	bf00      	nop
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	e000e3f0 	.word	0xe000e3f0
 800bc10:	20001278 	.word	0x20001278
 800bc14:	e000ed0c 	.word	0xe000ed0c
 800bc18:	2000127c 	.word	0x2000127c

0800bc1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	@ 0x28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc24:	2300      	movs	r3, #0
 800bc26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc28:	f7fe fd80 	bl	800a72c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc2c:	4b5c      	ldr	r3, [pc, #368]	@ (800bda0 <pvPortMalloc+0x184>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc34:	f000 f924 	bl	800be80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc38:	4b5a      	ldr	r3, [pc, #360]	@ (800bda4 <pvPortMalloc+0x188>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4013      	ands	r3, r2
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f040 8095 	bne.w	800bd70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d01e      	beq.n	800bc8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bc4c:	2208      	movs	r2, #8
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4413      	add	r3, r2
 800bc52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f003 0307 	and.w	r3, r3, #7
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d015      	beq.n	800bc8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f023 0307 	bic.w	r3, r3, #7
 800bc64:	3308      	adds	r3, #8
 800bc66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f003 0307 	and.w	r3, r3, #7
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00b      	beq.n	800bc8a <pvPortMalloc+0x6e>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	617b      	str	r3, [r7, #20]
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop
 800bc88:	e7fd      	b.n	800bc86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d06f      	beq.n	800bd70 <pvPortMalloc+0x154>
 800bc90:	4b45      	ldr	r3, [pc, #276]	@ (800bda8 <pvPortMalloc+0x18c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d86a      	bhi.n	800bd70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc9a:	4b44      	ldr	r3, [pc, #272]	@ (800bdac <pvPortMalloc+0x190>)
 800bc9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc9e:	4b43      	ldr	r3, [pc, #268]	@ (800bdac <pvPortMalloc+0x190>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bca4:	e004      	b.n	800bcb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d903      	bls.n	800bcc2 <pvPortMalloc+0xa6>
 800bcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1f1      	bne.n	800bca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bcc2:	4b37      	ldr	r3, [pc, #220]	@ (800bda0 <pvPortMalloc+0x184>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d051      	beq.n	800bd70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bccc:	6a3b      	ldr	r3, [r7, #32]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2208      	movs	r2, #8
 800bcd2:	4413      	add	r3, r2
 800bcd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	6a3b      	ldr	r3, [r7, #32]
 800bcdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce0:	685a      	ldr	r2, [r3, #4]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	1ad2      	subs	r2, r2, r3
 800bce6:	2308      	movs	r3, #8
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d920      	bls.n	800bd30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bcee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	f003 0307 	and.w	r3, r3, #7
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00b      	beq.n	800bd18 <pvPortMalloc+0xfc>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	613b      	str	r3, [r7, #16]
}
 800bd12:	bf00      	nop
 800bd14:	bf00      	nop
 800bd16:	e7fd      	b.n	800bd14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	1ad2      	subs	r2, r2, r3
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd2a:	69b8      	ldr	r0, [r7, #24]
 800bd2c:	f000 f90a 	bl	800bf44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd30:	4b1d      	ldr	r3, [pc, #116]	@ (800bda8 <pvPortMalloc+0x18c>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	4a1b      	ldr	r2, [pc, #108]	@ (800bda8 <pvPortMalloc+0x18c>)
 800bd3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd3e:	4b1a      	ldr	r3, [pc, #104]	@ (800bda8 <pvPortMalloc+0x18c>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	4b1b      	ldr	r3, [pc, #108]	@ (800bdb0 <pvPortMalloc+0x194>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d203      	bcs.n	800bd52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd4a:	4b17      	ldr	r3, [pc, #92]	@ (800bda8 <pvPortMalloc+0x18c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a18      	ldr	r2, [pc, #96]	@ (800bdb0 <pvPortMalloc+0x194>)
 800bd50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	4b13      	ldr	r3, [pc, #76]	@ (800bda4 <pvPortMalloc+0x188>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd66:	4b13      	ldr	r3, [pc, #76]	@ (800bdb4 <pvPortMalloc+0x198>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	4a11      	ldr	r2, [pc, #68]	@ (800bdb4 <pvPortMalloc+0x198>)
 800bd6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd70:	f7fe fcea 	bl	800a748 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <pvPortMalloc+0x17a>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	60fb      	str	r3, [r7, #12]
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	e7fd      	b.n	800bd92 <pvPortMalloc+0x176>
	return pvReturn;
 800bd96:	69fb      	ldr	r3, [r7, #28]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3728      	adds	r7, #40	@ 0x28
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20004e88 	.word	0x20004e88
 800bda4:	20004e9c 	.word	0x20004e9c
 800bda8:	20004e8c 	.word	0x20004e8c
 800bdac:	20004e80 	.word	0x20004e80
 800bdb0:	20004e90 	.word	0x20004e90
 800bdb4:	20004e94 	.word	0x20004e94

0800bdb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d04f      	beq.n	800be6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bdca:	2308      	movs	r3, #8
 800bdcc:	425b      	negs	r3, r3
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	4b25      	ldr	r3, [pc, #148]	@ (800be74 <vPortFree+0xbc>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4013      	ands	r3, r2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10b      	bne.n	800bdfe <vPortFree+0x46>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	60fb      	str	r3, [r7, #12]
}
 800bdf8:	bf00      	nop
 800bdfa:	bf00      	nop
 800bdfc:	e7fd      	b.n	800bdfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00b      	beq.n	800be1e <vPortFree+0x66>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	60bb      	str	r3, [r7, #8]
}
 800be18:	bf00      	nop
 800be1a:	bf00      	nop
 800be1c:	e7fd      	b.n	800be1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	4b14      	ldr	r3, [pc, #80]	@ (800be74 <vPortFree+0xbc>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4013      	ands	r3, r2
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01e      	beq.n	800be6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d11a      	bne.n	800be6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	4b0e      	ldr	r3, [pc, #56]	@ (800be74 <vPortFree+0xbc>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	43db      	mvns	r3, r3
 800be3e:	401a      	ands	r2, r3
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be44:	f7fe fc72 	bl	800a72c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	4b0a      	ldr	r3, [pc, #40]	@ (800be78 <vPortFree+0xc0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4413      	add	r3, r2
 800be52:	4a09      	ldr	r2, [pc, #36]	@ (800be78 <vPortFree+0xc0>)
 800be54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be56:	6938      	ldr	r0, [r7, #16]
 800be58:	f000 f874 	bl	800bf44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be5c:	4b07      	ldr	r3, [pc, #28]	@ (800be7c <vPortFree+0xc4>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3301      	adds	r3, #1
 800be62:	4a06      	ldr	r2, [pc, #24]	@ (800be7c <vPortFree+0xc4>)
 800be64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be66:	f7fe fc6f 	bl	800a748 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be6a:	bf00      	nop
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20004e9c 	.word	0x20004e9c
 800be78:	20004e8c 	.word	0x20004e8c
 800be7c:	20004e98 	.word	0x20004e98

0800be80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800be8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be8c:	4b27      	ldr	r3, [pc, #156]	@ (800bf2c <prvHeapInit+0xac>)
 800be8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f003 0307 	and.w	r3, r3, #7
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00c      	beq.n	800beb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3307      	adds	r3, #7
 800be9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f023 0307 	bic.w	r3, r3, #7
 800bea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	4a1f      	ldr	r2, [pc, #124]	@ (800bf2c <prvHeapInit+0xac>)
 800beb0:	4413      	add	r3, r2
 800beb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800beb8:	4a1d      	ldr	r2, [pc, #116]	@ (800bf30 <prvHeapInit+0xb0>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bebe:	4b1c      	ldr	r3, [pc, #112]	@ (800bf30 <prvHeapInit+0xb0>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	4413      	add	r3, r2
 800beca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800becc:	2208      	movs	r2, #8
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	1a9b      	subs	r3, r3, r2
 800bed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f023 0307 	bic.w	r3, r3, #7
 800beda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4a15      	ldr	r2, [pc, #84]	@ (800bf34 <prvHeapInit+0xb4>)
 800bee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bee2:	4b14      	ldr	r3, [pc, #80]	@ (800bf34 <prvHeapInit+0xb4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2200      	movs	r2, #0
 800bee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800beea:	4b12      	ldr	r3, [pc, #72]	@ (800bf34 <prvHeapInit+0xb4>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2200      	movs	r2, #0
 800bef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	1ad2      	subs	r2, r2, r3
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf00:	4b0c      	ldr	r3, [pc, #48]	@ (800bf34 <prvHeapInit+0xb4>)
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	4a0a      	ldr	r2, [pc, #40]	@ (800bf38 <prvHeapInit+0xb8>)
 800bf0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	4a09      	ldr	r2, [pc, #36]	@ (800bf3c <prvHeapInit+0xbc>)
 800bf16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf18:	4b09      	ldr	r3, [pc, #36]	@ (800bf40 <prvHeapInit+0xc0>)
 800bf1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf1e:	601a      	str	r2, [r3, #0]
}
 800bf20:	bf00      	nop
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	20001280 	.word	0x20001280
 800bf30:	20004e80 	.word	0x20004e80
 800bf34:	20004e88 	.word	0x20004e88
 800bf38:	20004e90 	.word	0x20004e90
 800bf3c:	20004e8c 	.word	0x20004e8c
 800bf40:	20004e9c 	.word	0x20004e9c

0800bf44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf4c:	4b28      	ldr	r3, [pc, #160]	@ (800bff0 <prvInsertBlockIntoFreeList+0xac>)
 800bf4e:	60fb      	str	r3, [r7, #12]
 800bf50:	e002      	b.n	800bf58 <prvInsertBlockIntoFreeList+0x14>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d8f7      	bhi.n	800bf52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d108      	bne.n	800bf86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	441a      	add	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	441a      	add	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d118      	bne.n	800bfcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	4b15      	ldr	r3, [pc, #84]	@ (800bff4 <prvInsertBlockIntoFreeList+0xb0>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d00d      	beq.n	800bfc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	441a      	add	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	e008      	b.n	800bfd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bff4 <prvInsertBlockIntoFreeList+0xb0>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	e003      	b.n	800bfd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d002      	beq.n	800bfe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfe2:	bf00      	nop
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20004e80 	.word	0x20004e80
 800bff4:	20004e88 	.word	0x20004e88

0800bff8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800bffe:	2300      	movs	r3, #0
 800c000:	71fb      	strb	r3, [r7, #7]
 800c002:	e026      	b.n	800c052 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800c004:	79fb      	ldrb	r3, [r7, #7]
 800c006:	3b50      	subs	r3, #80	@ 0x50
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2100      	movs	r1, #0
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f82b 	bl	800c068 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800c012:	2100      	movs	r1, #0
 800c014:	2000      	movs	r0, #0
 800c016:	f000 f827 	bl	800c068 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800c01a:	2100      	movs	r1, #0
 800c01c:	2010      	movs	r0, #16
 800c01e:	f000 f823 	bl	800c068 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800c022:	2300      	movs	r3, #0
 800c024:	71bb      	strb	r3, [r7, #6]
 800c026:	e00d      	b.n	800c044 <OLED_Refresh_Gram+0x4c>
 800c028:	79ba      	ldrb	r2, [r7, #6]
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	490d      	ldr	r1, [pc, #52]	@ (800c064 <OLED_Refresh_Gram+0x6c>)
 800c02e:	00d2      	lsls	r2, r2, #3
 800c030:	440a      	add	r2, r1
 800c032:	4413      	add	r3, r2
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2101      	movs	r1, #1
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 f815 	bl	800c068 <OLED_WR_Byte>
 800c03e:	79bb      	ldrb	r3, [r7, #6]
 800c040:	3301      	adds	r3, #1
 800c042:	71bb      	strb	r3, [r7, #6]
 800c044:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	daed      	bge.n	800c028 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800c04c:	79fb      	ldrb	r3, [r7, #7]
 800c04e:	3301      	adds	r3, #1
 800c050:	71fb      	strb	r3, [r7, #7]
 800c052:	79fb      	ldrb	r3, [r7, #7]
 800c054:	2b07      	cmp	r3, #7
 800c056:	d9d5      	bls.n	800c004 <OLED_Refresh_Gram+0xc>
	}   
}
 800c058:	bf00      	nop
 800c05a:	bf00      	nop
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20004ea0 	.word	0x20004ea0

0800c068 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	460a      	mov	r2, r1
 800c072:	71fb      	strb	r3, [r7, #7]
 800c074:	4613      	mov	r3, r2
 800c076:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800c078:	79bb      	ldrb	r3, [r7, #6]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d006      	beq.n	800c08c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800c07e:	2201      	movs	r2, #1
 800c080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c084:	481c      	ldr	r0, [pc, #112]	@ (800c0f8 <OLED_WR_Byte+0x90>)
 800c086:	f7f8 ff61 	bl	8004f4c <HAL_GPIO_WritePin>
 800c08a:	e005      	b.n	800c098 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800c08c:	2200      	movs	r2, #0
 800c08e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c092:	4819      	ldr	r0, [pc, #100]	@ (800c0f8 <OLED_WR_Byte+0x90>)
 800c094:	f7f8 ff5a 	bl	8004f4c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800c098:	2300      	movs	r3, #0
 800c09a:	73fb      	strb	r3, [r7, #15]
 800c09c:	e01e      	b.n	800c0dc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2120      	movs	r1, #32
 800c0a2:	4815      	ldr	r0, [pc, #84]	@ (800c0f8 <OLED_WR_Byte+0x90>)
 800c0a4:	f7f8 ff52 	bl	8004f4c <HAL_GPIO_WritePin>
		if(dat&0x80)
 800c0a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	da05      	bge.n	800c0bc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	2140      	movs	r1, #64	@ 0x40
 800c0b4:	4810      	ldr	r0, [pc, #64]	@ (800c0f8 <OLED_WR_Byte+0x90>)
 800c0b6:	f7f8 ff49 	bl	8004f4c <HAL_GPIO_WritePin>
 800c0ba:	e004      	b.n	800c0c6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2140      	movs	r1, #64	@ 0x40
 800c0c0:	480d      	ldr	r0, [pc, #52]	@ (800c0f8 <OLED_WR_Byte+0x90>)
 800c0c2:	f7f8 ff43 	bl	8004f4c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	2120      	movs	r1, #32
 800c0ca:	480b      	ldr	r0, [pc, #44]	@ (800c0f8 <OLED_WR_Byte+0x90>)
 800c0cc:	f7f8 ff3e 	bl	8004f4c <HAL_GPIO_WritePin>
		dat<<=1;   
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	73fb      	strb	r3, [r7, #15]
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
 800c0de:	2b07      	cmp	r3, #7
 800c0e0:	d9dd      	bls.n	800c09e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c0e8:	4803      	ldr	r0, [pc, #12]	@ (800c0f8 <OLED_WR_Byte+0x90>)
 800c0ea:	f7f8 ff2f 	bl	8004f4c <HAL_GPIO_WritePin>
} 
 800c0ee:	bf00      	nop
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	40021000 	.word	0x40021000

0800c0fc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800c102:	2300      	movs	r3, #0
 800c104:	71fb      	strb	r3, [r7, #7]
 800c106:	e014      	b.n	800c132 <OLED_Clear+0x36>
 800c108:	2300      	movs	r3, #0
 800c10a:	71bb      	strb	r3, [r7, #6]
 800c10c:	e00a      	b.n	800c124 <OLED_Clear+0x28>
 800c10e:	79ba      	ldrb	r2, [r7, #6]
 800c110:	79fb      	ldrb	r3, [r7, #7]
 800c112:	490c      	ldr	r1, [pc, #48]	@ (800c144 <OLED_Clear+0x48>)
 800c114:	00d2      	lsls	r2, r2, #3
 800c116:	440a      	add	r2, r1
 800c118:	4413      	add	r3, r2
 800c11a:	2200      	movs	r2, #0
 800c11c:	701a      	strb	r2, [r3, #0]
 800c11e:	79bb      	ldrb	r3, [r7, #6]
 800c120:	3301      	adds	r3, #1
 800c122:	71bb      	strb	r3, [r7, #6]
 800c124:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	daf0      	bge.n	800c10e <OLED_Clear+0x12>
 800c12c:	79fb      	ldrb	r3, [r7, #7]
 800c12e:	3301      	adds	r3, #1
 800c130:	71fb      	strb	r3, [r7, #7]
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	2b07      	cmp	r3, #7
 800c136:	d9e7      	bls.n	800c108 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800c138:	f7ff ff5e 	bl	800bff8 <OLED_Refresh_Gram>
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20004ea0 	.word	0x20004ea0

0800c148 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4603      	mov	r3, r0
 800c150:	71fb      	strb	r3, [r7, #7]
 800c152:	460b      	mov	r3, r1
 800c154:	71bb      	strb	r3, [r7, #6]
 800c156:	4613      	mov	r3, r2
 800c158:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800c15e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c162:	2b00      	cmp	r3, #0
 800c164:	db41      	blt.n	800c1ea <OLED_DrawPoint+0xa2>
 800c166:	79bb      	ldrb	r3, [r7, #6]
 800c168:	2b3f      	cmp	r3, #63	@ 0x3f
 800c16a:	d83e      	bhi.n	800c1ea <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800c16c:	79bb      	ldrb	r3, [r7, #6]
 800c16e:	08db      	lsrs	r3, r3, #3
 800c170:	b2db      	uxtb	r3, r3
 800c172:	f1c3 0307 	rsb	r3, r3, #7
 800c176:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800c178:	79bb      	ldrb	r3, [r7, #6]
 800c17a:	f003 0307 	and.w	r3, r3, #7
 800c17e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800c180:	7b7b      	ldrb	r3, [r7, #13]
 800c182:	f1c3 0307 	rsb	r3, r3, #7
 800c186:	2201      	movs	r2, #1
 800c188:	fa02 f303 	lsl.w	r3, r2, r3
 800c18c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800c18e:	797b      	ldrb	r3, [r7, #5]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d012      	beq.n	800c1ba <OLED_DrawPoint+0x72>
 800c194:	79fa      	ldrb	r2, [r7, #7]
 800c196:	7bbb      	ldrb	r3, [r7, #14]
 800c198:	4917      	ldr	r1, [pc, #92]	@ (800c1f8 <OLED_DrawPoint+0xb0>)
 800c19a:	00d2      	lsls	r2, r2, #3
 800c19c:	440a      	add	r2, r1
 800c19e:	4413      	add	r3, r2
 800c1a0:	7818      	ldrb	r0, [r3, #0]
 800c1a2:	79fa      	ldrb	r2, [r7, #7]
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	7bf9      	ldrb	r1, [r7, #15]
 800c1a8:	4301      	orrs	r1, r0
 800c1aa:	b2c8      	uxtb	r0, r1
 800c1ac:	4912      	ldr	r1, [pc, #72]	@ (800c1f8 <OLED_DrawPoint+0xb0>)
 800c1ae:	00d2      	lsls	r2, r2, #3
 800c1b0:	440a      	add	r2, r1
 800c1b2:	4413      	add	r3, r2
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	701a      	strb	r2, [r3, #0]
 800c1b8:	e018      	b.n	800c1ec <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800c1ba:	79fa      	ldrb	r2, [r7, #7]
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	490e      	ldr	r1, [pc, #56]	@ (800c1f8 <OLED_DrawPoint+0xb0>)
 800c1c0:	00d2      	lsls	r2, r2, #3
 800c1c2:	440a      	add	r2, r1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	b25a      	sxtb	r2, r3
 800c1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ce:	43db      	mvns	r3, r3
 800c1d0:	b25b      	sxtb	r3, r3
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	b259      	sxtb	r1, r3
 800c1d6:	79fa      	ldrb	r2, [r7, #7]
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	b2c8      	uxtb	r0, r1
 800c1dc:	4906      	ldr	r1, [pc, #24]	@ (800c1f8 <OLED_DrawPoint+0xb0>)
 800c1de:	00d2      	lsls	r2, r2, #3
 800c1e0:	440a      	add	r2, r1
 800c1e2:	4413      	add	r3, r2
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	701a      	strb	r2, [r3, #0]
 800c1e8:	e000      	b.n	800c1ec <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800c1ea:	bf00      	nop
}
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	20004ea0 	.word	0x20004ea0

0800c1fc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800c1fc:	b590      	push	{r4, r7, lr}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	4604      	mov	r4, r0
 800c204:	4608      	mov	r0, r1
 800c206:	4611      	mov	r1, r2
 800c208:	461a      	mov	r2, r3
 800c20a:	4623      	mov	r3, r4
 800c20c:	71fb      	strb	r3, [r7, #7]
 800c20e:	4603      	mov	r3, r0
 800c210:	71bb      	strb	r3, [r7, #6]
 800c212:	460b      	mov	r3, r1
 800c214:	717b      	strb	r3, [r7, #5]
 800c216:	4613      	mov	r3, r2
 800c218:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800c21a:	79bb      	ldrb	r3, [r7, #6]
 800c21c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800c21e:	797b      	ldrb	r3, [r7, #5]
 800c220:	3b20      	subs	r3, #32
 800c222:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800c224:	2300      	movs	r3, #0
 800c226:	73bb      	strb	r3, [r7, #14]
 800c228:	e04d      	b.n	800c2c6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800c22a:	793b      	ldrb	r3, [r7, #4]
 800c22c:	2b0c      	cmp	r3, #12
 800c22e:	d10b      	bne.n	800c248 <OLED_ShowChar+0x4c>
 800c230:	797a      	ldrb	r2, [r7, #5]
 800c232:	7bb9      	ldrb	r1, [r7, #14]
 800c234:	4828      	ldr	r0, [pc, #160]	@ (800c2d8 <OLED_ShowChar+0xdc>)
 800c236:	4613      	mov	r3, r2
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4403      	add	r3, r0
 800c240:	440b      	add	r3, r1
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	73fb      	strb	r3, [r7, #15]
 800c246:	e007      	b.n	800c258 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800c248:	797a      	ldrb	r2, [r7, #5]
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	4923      	ldr	r1, [pc, #140]	@ (800c2dc <OLED_ShowChar+0xe0>)
 800c24e:	0112      	lsls	r2, r2, #4
 800c250:	440a      	add	r2, r1
 800c252:	4413      	add	r3, r2
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800c258:	2300      	movs	r3, #0
 800c25a:	737b      	strb	r3, [r7, #13]
 800c25c:	e02d      	b.n	800c2ba <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800c25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c262:	2b00      	cmp	r3, #0
 800c264:	da07      	bge.n	800c276 <OLED_ShowChar+0x7a>
 800c266:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c26a:	79b9      	ldrb	r1, [r7, #6]
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff ff6a 	bl	800c148 <OLED_DrawPoint>
 800c274:	e00c      	b.n	800c290 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800c276:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	bf0c      	ite	eq
 800c27e:	2301      	moveq	r3, #1
 800c280:	2300      	movne	r3, #0
 800c282:	b2db      	uxtb	r3, r3
 800c284:	461a      	mov	r2, r3
 800c286:	79b9      	ldrb	r1, [r7, #6]
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff ff5c 	bl	800c148 <OLED_DrawPoint>
			temp<<=1;
 800c290:	7bfb      	ldrb	r3, [r7, #15]
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	73fb      	strb	r3, [r7, #15]
			y++;
 800c296:	79bb      	ldrb	r3, [r7, #6]
 800c298:	3301      	adds	r3, #1
 800c29a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800c29c:	79ba      	ldrb	r2, [r7, #6]
 800c29e:	7b3b      	ldrb	r3, [r7, #12]
 800c2a0:	1ad2      	subs	r2, r2, r3
 800c2a2:	793b      	ldrb	r3, [r7, #4]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d105      	bne.n	800c2b4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800c2a8:	7b3b      	ldrb	r3, [r7, #12]
 800c2aa:	71bb      	strb	r3, [r7, #6]
				x++;
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	71fb      	strb	r3, [r7, #7]
				break;
 800c2b2:	e005      	b.n	800c2c0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800c2b4:	7b7b      	ldrb	r3, [r7, #13]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	737b      	strb	r3, [r7, #13]
 800c2ba:	7b7b      	ldrb	r3, [r7, #13]
 800c2bc:	2b07      	cmp	r3, #7
 800c2be:	d9ce      	bls.n	800c25e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	73bb      	strb	r3, [r7, #14]
 800c2c6:	7bba      	ldrb	r2, [r7, #14]
 800c2c8:	793b      	ldrb	r3, [r7, #4]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d3ad      	bcc.n	800c22a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800c2ce:	bf00      	nop
 800c2d0:	bf00      	nop
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd90      	pop	{r4, r7, pc}
 800c2d8:	0800f3c0 	.word	0x0800f3c0
 800c2dc:	0800f834 	.word	0x0800f834

0800c2e0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af02      	add	r7, sp, #8
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	603a      	str	r2, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800c2f0:	e01f      	b.n	800c332 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	2b7a      	cmp	r3, #122	@ 0x7a
 800c2f6:	d904      	bls.n	800c302 <OLED_ShowString+0x22>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	71fb      	strb	r3, [r7, #7]
 800c2fc:	79bb      	ldrb	r3, [r7, #6]
 800c2fe:	3310      	adds	r3, #16
 800c300:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800c302:	79bb      	ldrb	r3, [r7, #6]
 800c304:	2b3a      	cmp	r3, #58	@ 0x3a
 800c306:	d905      	bls.n	800c314 <OLED_ShowString+0x34>
 800c308:	2300      	movs	r3, #0
 800c30a:	71fb      	strb	r3, [r7, #7]
 800c30c:	79fb      	ldrb	r3, [r7, #7]
 800c30e:	71bb      	strb	r3, [r7, #6]
 800c310:	f7ff fef4 	bl	800c0fc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	79b9      	ldrb	r1, [r7, #6]
 800c31a:	79f8      	ldrb	r0, [r7, #7]
 800c31c:	2301      	movs	r3, #1
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	230c      	movs	r3, #12
 800c322:	f7ff ff6b 	bl	800c1fc <OLED_ShowChar>
        x+=8;
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	3308      	adds	r3, #8
 800c32a:	71fb      	strb	r3, [r7, #7]
        p++;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	3301      	adds	r3, #1
 800c330:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1db      	bne.n	800c2f2 <OLED_ShowString+0x12>
    }  
}	 
 800c33a:	bf00      	nop
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <OLED_Init>:

void OLED_Init(void)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800c348:	f7f9 fe2e 	bl	8005fa8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800c34c:	4b41      	ldr	r3, [pc, #260]	@ (800c454 <OLED_Init+0x110>)
 800c34e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c350:	4a40      	ldr	r2, [pc, #256]	@ (800c454 <OLED_Init+0x110>)
 800c352:	f023 0301 	bic.w	r3, r3, #1
 800c356:	6713      	str	r3, [r2, #112]	@ 0x70
 800c358:	4b3e      	ldr	r3, [pc, #248]	@ (800c454 <OLED_Init+0x110>)
 800c35a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c35c:	4a3d      	ldr	r2, [pc, #244]	@ (800c454 <OLED_Init+0x110>)
 800c35e:	f023 0304 	bic.w	r3, r3, #4
 800c362:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800c364:	f7f9 fe34 	bl	8005fd0 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800c368:	2200      	movs	r2, #0
 800c36a:	2180      	movs	r1, #128	@ 0x80
 800c36c:	483a      	ldr	r0, [pc, #232]	@ (800c458 <OLED_Init+0x114>)
 800c36e:	f7f8 fded 	bl	8004f4c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800c372:	2064      	movs	r0, #100	@ 0x64
 800c374:	f7f7 fe86 	bl	8004084 <HAL_Delay>
	OLED_RST_Set();
 800c378:	2201      	movs	r2, #1
 800c37a:	2180      	movs	r1, #128	@ 0x80
 800c37c:	4836      	ldr	r0, [pc, #216]	@ (800c458 <OLED_Init+0x114>)
 800c37e:	f7f8 fde5 	bl	8004f4c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800c382:	2100      	movs	r1, #0
 800c384:	20ae      	movs	r0, #174	@ 0xae
 800c386:	f7ff fe6f 	bl	800c068 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800c38a:	2100      	movs	r1, #0
 800c38c:	20d5      	movs	r0, #213	@ 0xd5
 800c38e:	f7ff fe6b 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800c392:	2100      	movs	r1, #0
 800c394:	2050      	movs	r0, #80	@ 0x50
 800c396:	f7ff fe67 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800c39a:	2100      	movs	r1, #0
 800c39c:	20a8      	movs	r0, #168	@ 0xa8
 800c39e:	f7ff fe63 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	203f      	movs	r0, #63	@ 0x3f
 800c3a6:	f7ff fe5f 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	20d3      	movs	r0, #211	@ 0xd3
 800c3ae:	f7ff fe5b 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	f7ff fe57 	bl	800c068 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	2040      	movs	r0, #64	@ 0x40
 800c3be:	f7ff fe53 	bl	800c068 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	208d      	movs	r0, #141	@ 0x8d
 800c3c6:	f7ff fe4f 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	2014      	movs	r0, #20
 800c3ce:	f7ff fe4b 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	2020      	movs	r0, #32
 800c3d6:	f7ff fe47 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800c3da:	2100      	movs	r1, #0
 800c3dc:	2002      	movs	r0, #2
 800c3de:	f7ff fe43 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	20a1      	movs	r0, #161	@ 0xa1
 800c3e6:	f7ff fe3f 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	20c0      	movs	r0, #192	@ 0xc0
 800c3ee:	f7ff fe3b 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	20da      	movs	r0, #218	@ 0xda
 800c3f6:	f7ff fe37 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	2012      	movs	r0, #18
 800c3fe:	f7ff fe33 	bl	800c068 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800c402:	2100      	movs	r1, #0
 800c404:	2081      	movs	r0, #129	@ 0x81
 800c406:	f7ff fe2f 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800c40a:	2100      	movs	r1, #0
 800c40c:	20ef      	movs	r0, #239	@ 0xef
 800c40e:	f7ff fe2b 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800c412:	2100      	movs	r1, #0
 800c414:	20d9      	movs	r0, #217	@ 0xd9
 800c416:	f7ff fe27 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800c41a:	2100      	movs	r1, #0
 800c41c:	20f1      	movs	r0, #241	@ 0xf1
 800c41e:	f7ff fe23 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800c422:	2100      	movs	r1, #0
 800c424:	20db      	movs	r0, #219	@ 0xdb
 800c426:	f7ff fe1f 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800c42a:	2100      	movs	r1, #0
 800c42c:	2030      	movs	r0, #48	@ 0x30
 800c42e:	f7ff fe1b 	bl	800c068 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800c432:	2100      	movs	r1, #0
 800c434:	20a4      	movs	r0, #164	@ 0xa4
 800c436:	f7ff fe17 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800c43a:	2100      	movs	r1, #0
 800c43c:	20a6      	movs	r0, #166	@ 0xa6
 800c43e:	f7ff fe13 	bl	800c068 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800c442:	2100      	movs	r1, #0
 800c444:	20af      	movs	r0, #175	@ 0xaf
 800c446:	f7ff fe0f 	bl	800c068 <OLED_WR_Byte>
	OLED_Clear(); 
 800c44a:	f7ff fe57 	bl	800c0fc <OLED_Clear>
 800c44e:	bf00      	nop
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	40023800 	.word	0x40023800
 800c458:	40021000 	.word	0x40021000

0800c45c <__cvt>:
 800c45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c460:	ec57 6b10 	vmov	r6, r7, d0
 800c464:	2f00      	cmp	r7, #0
 800c466:	460c      	mov	r4, r1
 800c468:	4619      	mov	r1, r3
 800c46a:	463b      	mov	r3, r7
 800c46c:	bfbb      	ittet	lt
 800c46e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c472:	461f      	movlt	r7, r3
 800c474:	2300      	movge	r3, #0
 800c476:	232d      	movlt	r3, #45	@ 0x2d
 800c478:	700b      	strb	r3, [r1, #0]
 800c47a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c47c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c480:	4691      	mov	r9, r2
 800c482:	f023 0820 	bic.w	r8, r3, #32
 800c486:	bfbc      	itt	lt
 800c488:	4632      	movlt	r2, r6
 800c48a:	4616      	movlt	r6, r2
 800c48c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c490:	d005      	beq.n	800c49e <__cvt+0x42>
 800c492:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c496:	d100      	bne.n	800c49a <__cvt+0x3e>
 800c498:	3401      	adds	r4, #1
 800c49a:	2102      	movs	r1, #2
 800c49c:	e000      	b.n	800c4a0 <__cvt+0x44>
 800c49e:	2103      	movs	r1, #3
 800c4a0:	ab03      	add	r3, sp, #12
 800c4a2:	9301      	str	r3, [sp, #4]
 800c4a4:	ab02      	add	r3, sp, #8
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	ec47 6b10 	vmov	d0, r6, r7
 800c4ac:	4653      	mov	r3, sl
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	f000 fe7a 	bl	800d1a8 <_dtoa_r>
 800c4b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	d119      	bne.n	800c4f0 <__cvt+0x94>
 800c4bc:	f019 0f01 	tst.w	r9, #1
 800c4c0:	d00e      	beq.n	800c4e0 <__cvt+0x84>
 800c4c2:	eb00 0904 	add.w	r9, r0, r4
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f4 fb0b 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4d2:	b108      	cbz	r0, 800c4d8 <__cvt+0x7c>
 800c4d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4d8:	2230      	movs	r2, #48	@ 0x30
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	454b      	cmp	r3, r9
 800c4de:	d31e      	bcc.n	800c51e <__cvt+0xc2>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4e4:	1b5b      	subs	r3, r3, r5
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	6013      	str	r3, [r2, #0]
 800c4ea:	b004      	add	sp, #16
 800c4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4f4:	eb00 0904 	add.w	r9, r0, r4
 800c4f8:	d1e5      	bne.n	800c4c6 <__cvt+0x6a>
 800c4fa:	7803      	ldrb	r3, [r0, #0]
 800c4fc:	2b30      	cmp	r3, #48	@ 0x30
 800c4fe:	d10a      	bne.n	800c516 <__cvt+0xba>
 800c500:	2200      	movs	r2, #0
 800c502:	2300      	movs	r3, #0
 800c504:	4630      	mov	r0, r6
 800c506:	4639      	mov	r1, r7
 800c508:	f7f4 faee 	bl	8000ae8 <__aeabi_dcmpeq>
 800c50c:	b918      	cbnz	r0, 800c516 <__cvt+0xba>
 800c50e:	f1c4 0401 	rsb	r4, r4, #1
 800c512:	f8ca 4000 	str.w	r4, [sl]
 800c516:	f8da 3000 	ldr.w	r3, [sl]
 800c51a:	4499      	add	r9, r3
 800c51c:	e7d3      	b.n	800c4c6 <__cvt+0x6a>
 800c51e:	1c59      	adds	r1, r3, #1
 800c520:	9103      	str	r1, [sp, #12]
 800c522:	701a      	strb	r2, [r3, #0]
 800c524:	e7d9      	b.n	800c4da <__cvt+0x7e>

0800c526 <__exponent>:
 800c526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c528:	2900      	cmp	r1, #0
 800c52a:	bfba      	itte	lt
 800c52c:	4249      	neglt	r1, r1
 800c52e:	232d      	movlt	r3, #45	@ 0x2d
 800c530:	232b      	movge	r3, #43	@ 0x2b
 800c532:	2909      	cmp	r1, #9
 800c534:	7002      	strb	r2, [r0, #0]
 800c536:	7043      	strb	r3, [r0, #1]
 800c538:	dd29      	ble.n	800c58e <__exponent+0x68>
 800c53a:	f10d 0307 	add.w	r3, sp, #7
 800c53e:	461d      	mov	r5, r3
 800c540:	270a      	movs	r7, #10
 800c542:	461a      	mov	r2, r3
 800c544:	fbb1 f6f7 	udiv	r6, r1, r7
 800c548:	fb07 1416 	mls	r4, r7, r6, r1
 800c54c:	3430      	adds	r4, #48	@ 0x30
 800c54e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c552:	460c      	mov	r4, r1
 800c554:	2c63      	cmp	r4, #99	@ 0x63
 800c556:	f103 33ff 	add.w	r3, r3, #4294967295
 800c55a:	4631      	mov	r1, r6
 800c55c:	dcf1      	bgt.n	800c542 <__exponent+0x1c>
 800c55e:	3130      	adds	r1, #48	@ 0x30
 800c560:	1e94      	subs	r4, r2, #2
 800c562:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c566:	1c41      	adds	r1, r0, #1
 800c568:	4623      	mov	r3, r4
 800c56a:	42ab      	cmp	r3, r5
 800c56c:	d30a      	bcc.n	800c584 <__exponent+0x5e>
 800c56e:	f10d 0309 	add.w	r3, sp, #9
 800c572:	1a9b      	subs	r3, r3, r2
 800c574:	42ac      	cmp	r4, r5
 800c576:	bf88      	it	hi
 800c578:	2300      	movhi	r3, #0
 800c57a:	3302      	adds	r3, #2
 800c57c:	4403      	add	r3, r0
 800c57e:	1a18      	subs	r0, r3, r0
 800c580:	b003      	add	sp, #12
 800c582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c584:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c588:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c58c:	e7ed      	b.n	800c56a <__exponent+0x44>
 800c58e:	2330      	movs	r3, #48	@ 0x30
 800c590:	3130      	adds	r1, #48	@ 0x30
 800c592:	7083      	strb	r3, [r0, #2]
 800c594:	70c1      	strb	r1, [r0, #3]
 800c596:	1d03      	adds	r3, r0, #4
 800c598:	e7f1      	b.n	800c57e <__exponent+0x58>
	...

0800c59c <_printf_float>:
 800c59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a0:	b08d      	sub	sp, #52	@ 0x34
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c5a8:	4616      	mov	r6, r2
 800c5aa:	461f      	mov	r7, r3
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	f000 fced 	bl	800cf8c <_localeconv_r>
 800c5b2:	6803      	ldr	r3, [r0, #0]
 800c5b4:	9304      	str	r3, [sp, #16]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7f3 fe6a 	bl	8000290 <strlen>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5c4:	9005      	str	r0, [sp, #20]
 800c5c6:	3307      	adds	r3, #7
 800c5c8:	f023 0307 	bic.w	r3, r3, #7
 800c5cc:	f103 0208 	add.w	r2, r3, #8
 800c5d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5d4:	f8d4 b000 	ldr.w	fp, [r4]
 800c5d8:	f8c8 2000 	str.w	r2, [r8]
 800c5dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c5e4:	9307      	str	r3, [sp, #28]
 800c5e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c5ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5f2:	4b9c      	ldr	r3, [pc, #624]	@ (800c864 <_printf_float+0x2c8>)
 800c5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f8:	f7f4 faa8 	bl	8000b4c <__aeabi_dcmpun>
 800c5fc:	bb70      	cbnz	r0, 800c65c <_printf_float+0xc0>
 800c5fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c602:	4b98      	ldr	r3, [pc, #608]	@ (800c864 <_printf_float+0x2c8>)
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	f7f4 fa82 	bl	8000b10 <__aeabi_dcmple>
 800c60c:	bb30      	cbnz	r0, 800c65c <_printf_float+0xc0>
 800c60e:	2200      	movs	r2, #0
 800c610:	2300      	movs	r3, #0
 800c612:	4640      	mov	r0, r8
 800c614:	4649      	mov	r1, r9
 800c616:	f7f4 fa71 	bl	8000afc <__aeabi_dcmplt>
 800c61a:	b110      	cbz	r0, 800c622 <_printf_float+0x86>
 800c61c:	232d      	movs	r3, #45	@ 0x2d
 800c61e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c622:	4a91      	ldr	r2, [pc, #580]	@ (800c868 <_printf_float+0x2cc>)
 800c624:	4b91      	ldr	r3, [pc, #580]	@ (800c86c <_printf_float+0x2d0>)
 800c626:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c62a:	bf94      	ite	ls
 800c62c:	4690      	movls	r8, r2
 800c62e:	4698      	movhi	r8, r3
 800c630:	2303      	movs	r3, #3
 800c632:	6123      	str	r3, [r4, #16]
 800c634:	f02b 0304 	bic.w	r3, fp, #4
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	f04f 0900 	mov.w	r9, #0
 800c63e:	9700      	str	r7, [sp, #0]
 800c640:	4633      	mov	r3, r6
 800c642:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c644:	4621      	mov	r1, r4
 800c646:	4628      	mov	r0, r5
 800c648:	f000 f9d2 	bl	800c9f0 <_printf_common>
 800c64c:	3001      	adds	r0, #1
 800c64e:	f040 808d 	bne.w	800c76c <_printf_float+0x1d0>
 800c652:	f04f 30ff 	mov.w	r0, #4294967295
 800c656:	b00d      	add	sp, #52	@ 0x34
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65c:	4642      	mov	r2, r8
 800c65e:	464b      	mov	r3, r9
 800c660:	4640      	mov	r0, r8
 800c662:	4649      	mov	r1, r9
 800c664:	f7f4 fa72 	bl	8000b4c <__aeabi_dcmpun>
 800c668:	b140      	cbz	r0, 800c67c <_printf_float+0xe0>
 800c66a:	464b      	mov	r3, r9
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bfbc      	itt	lt
 800c670:	232d      	movlt	r3, #45	@ 0x2d
 800c672:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c676:	4a7e      	ldr	r2, [pc, #504]	@ (800c870 <_printf_float+0x2d4>)
 800c678:	4b7e      	ldr	r3, [pc, #504]	@ (800c874 <_printf_float+0x2d8>)
 800c67a:	e7d4      	b.n	800c626 <_printf_float+0x8a>
 800c67c:	6863      	ldr	r3, [r4, #4]
 800c67e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c682:	9206      	str	r2, [sp, #24]
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	d13b      	bne.n	800c700 <_printf_float+0x164>
 800c688:	2306      	movs	r3, #6
 800c68a:	6063      	str	r3, [r4, #4]
 800c68c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c690:	2300      	movs	r3, #0
 800c692:	6022      	str	r2, [r4, #0]
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	ab0a      	add	r3, sp, #40	@ 0x28
 800c698:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c69c:	ab09      	add	r3, sp, #36	@ 0x24
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	6861      	ldr	r1, [r4, #4]
 800c6a2:	ec49 8b10 	vmov	d0, r8, r9
 800c6a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f7ff fed6 	bl	800c45c <__cvt>
 800c6b0:	9b06      	ldr	r3, [sp, #24]
 800c6b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6b4:	2b47      	cmp	r3, #71	@ 0x47
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	d129      	bne.n	800c70e <_printf_float+0x172>
 800c6ba:	1cc8      	adds	r0, r1, #3
 800c6bc:	db02      	blt.n	800c6c4 <_printf_float+0x128>
 800c6be:	6863      	ldr	r3, [r4, #4]
 800c6c0:	4299      	cmp	r1, r3
 800c6c2:	dd41      	ble.n	800c748 <_printf_float+0x1ac>
 800c6c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c6c8:	fa5f fa8a 	uxtb.w	sl, sl
 800c6cc:	3901      	subs	r1, #1
 800c6ce:	4652      	mov	r2, sl
 800c6d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c6d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6d6:	f7ff ff26 	bl	800c526 <__exponent>
 800c6da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6dc:	1813      	adds	r3, r2, r0
 800c6de:	2a01      	cmp	r2, #1
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	6123      	str	r3, [r4, #16]
 800c6e4:	dc02      	bgt.n	800c6ec <_printf_float+0x150>
 800c6e6:	6822      	ldr	r2, [r4, #0]
 800c6e8:	07d2      	lsls	r2, r2, #31
 800c6ea:	d501      	bpl.n	800c6f0 <_printf_float+0x154>
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d0a2      	beq.n	800c63e <_printf_float+0xa2>
 800c6f8:	232d      	movs	r3, #45	@ 0x2d
 800c6fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6fe:	e79e      	b.n	800c63e <_printf_float+0xa2>
 800c700:	9a06      	ldr	r2, [sp, #24]
 800c702:	2a47      	cmp	r2, #71	@ 0x47
 800c704:	d1c2      	bne.n	800c68c <_printf_float+0xf0>
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1c0      	bne.n	800c68c <_printf_float+0xf0>
 800c70a:	2301      	movs	r3, #1
 800c70c:	e7bd      	b.n	800c68a <_printf_float+0xee>
 800c70e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c712:	d9db      	bls.n	800c6cc <_printf_float+0x130>
 800c714:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c718:	d118      	bne.n	800c74c <_printf_float+0x1b0>
 800c71a:	2900      	cmp	r1, #0
 800c71c:	6863      	ldr	r3, [r4, #4]
 800c71e:	dd0b      	ble.n	800c738 <_printf_float+0x19c>
 800c720:	6121      	str	r1, [r4, #16]
 800c722:	b913      	cbnz	r3, 800c72a <_printf_float+0x18e>
 800c724:	6822      	ldr	r2, [r4, #0]
 800c726:	07d0      	lsls	r0, r2, #31
 800c728:	d502      	bpl.n	800c730 <_printf_float+0x194>
 800c72a:	3301      	adds	r3, #1
 800c72c:	440b      	add	r3, r1
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c732:	f04f 0900 	mov.w	r9, #0
 800c736:	e7db      	b.n	800c6f0 <_printf_float+0x154>
 800c738:	b913      	cbnz	r3, 800c740 <_printf_float+0x1a4>
 800c73a:	6822      	ldr	r2, [r4, #0]
 800c73c:	07d2      	lsls	r2, r2, #31
 800c73e:	d501      	bpl.n	800c744 <_printf_float+0x1a8>
 800c740:	3302      	adds	r3, #2
 800c742:	e7f4      	b.n	800c72e <_printf_float+0x192>
 800c744:	2301      	movs	r3, #1
 800c746:	e7f2      	b.n	800c72e <_printf_float+0x192>
 800c748:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c74e:	4299      	cmp	r1, r3
 800c750:	db05      	blt.n	800c75e <_printf_float+0x1c2>
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	6121      	str	r1, [r4, #16]
 800c756:	07d8      	lsls	r0, r3, #31
 800c758:	d5ea      	bpl.n	800c730 <_printf_float+0x194>
 800c75a:	1c4b      	adds	r3, r1, #1
 800c75c:	e7e7      	b.n	800c72e <_printf_float+0x192>
 800c75e:	2900      	cmp	r1, #0
 800c760:	bfd4      	ite	le
 800c762:	f1c1 0202 	rsble	r2, r1, #2
 800c766:	2201      	movgt	r2, #1
 800c768:	4413      	add	r3, r2
 800c76a:	e7e0      	b.n	800c72e <_printf_float+0x192>
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	055a      	lsls	r2, r3, #21
 800c770:	d407      	bmi.n	800c782 <_printf_float+0x1e6>
 800c772:	6923      	ldr	r3, [r4, #16]
 800c774:	4642      	mov	r2, r8
 800c776:	4631      	mov	r1, r6
 800c778:	4628      	mov	r0, r5
 800c77a:	47b8      	blx	r7
 800c77c:	3001      	adds	r0, #1
 800c77e:	d12b      	bne.n	800c7d8 <_printf_float+0x23c>
 800c780:	e767      	b.n	800c652 <_printf_float+0xb6>
 800c782:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c786:	f240 80dd 	bls.w	800c944 <_printf_float+0x3a8>
 800c78a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c78e:	2200      	movs	r2, #0
 800c790:	2300      	movs	r3, #0
 800c792:	f7f4 f9a9 	bl	8000ae8 <__aeabi_dcmpeq>
 800c796:	2800      	cmp	r0, #0
 800c798:	d033      	beq.n	800c802 <_printf_float+0x266>
 800c79a:	4a37      	ldr	r2, [pc, #220]	@ (800c878 <_printf_float+0x2dc>)
 800c79c:	2301      	movs	r3, #1
 800c79e:	4631      	mov	r1, r6
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	47b8      	blx	r7
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	f43f af54 	beq.w	800c652 <_printf_float+0xb6>
 800c7aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c7ae:	4543      	cmp	r3, r8
 800c7b0:	db02      	blt.n	800c7b8 <_printf_float+0x21c>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	07d8      	lsls	r0, r3, #31
 800c7b6:	d50f      	bpl.n	800c7d8 <_printf_float+0x23c>
 800c7b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4628      	mov	r0, r5
 800c7c0:	47b8      	blx	r7
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f43f af45 	beq.w	800c652 <_printf_float+0xb6>
 800c7c8:	f04f 0900 	mov.w	r9, #0
 800c7cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7d0:	f104 0a1a 	add.w	sl, r4, #26
 800c7d4:	45c8      	cmp	r8, r9
 800c7d6:	dc09      	bgt.n	800c7ec <_printf_float+0x250>
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	079b      	lsls	r3, r3, #30
 800c7dc:	f100 8103 	bmi.w	800c9e6 <_printf_float+0x44a>
 800c7e0:	68e0      	ldr	r0, [r4, #12]
 800c7e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7e4:	4298      	cmp	r0, r3
 800c7e6:	bfb8      	it	lt
 800c7e8:	4618      	movlt	r0, r3
 800c7ea:	e734      	b.n	800c656 <_printf_float+0xba>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	4652      	mov	r2, sl
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	47b8      	blx	r7
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	f43f af2b 	beq.w	800c652 <_printf_float+0xb6>
 800c7fc:	f109 0901 	add.w	r9, r9, #1
 800c800:	e7e8      	b.n	800c7d4 <_printf_float+0x238>
 800c802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c804:	2b00      	cmp	r3, #0
 800c806:	dc39      	bgt.n	800c87c <_printf_float+0x2e0>
 800c808:	4a1b      	ldr	r2, [pc, #108]	@ (800c878 <_printf_float+0x2dc>)
 800c80a:	2301      	movs	r3, #1
 800c80c:	4631      	mov	r1, r6
 800c80e:	4628      	mov	r0, r5
 800c810:	47b8      	blx	r7
 800c812:	3001      	adds	r0, #1
 800c814:	f43f af1d 	beq.w	800c652 <_printf_float+0xb6>
 800c818:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c81c:	ea59 0303 	orrs.w	r3, r9, r3
 800c820:	d102      	bne.n	800c828 <_printf_float+0x28c>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	07d9      	lsls	r1, r3, #31
 800c826:	d5d7      	bpl.n	800c7d8 <_printf_float+0x23c>
 800c828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c82c:	4631      	mov	r1, r6
 800c82e:	4628      	mov	r0, r5
 800c830:	47b8      	blx	r7
 800c832:	3001      	adds	r0, #1
 800c834:	f43f af0d 	beq.w	800c652 <_printf_float+0xb6>
 800c838:	f04f 0a00 	mov.w	sl, #0
 800c83c:	f104 0b1a 	add.w	fp, r4, #26
 800c840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c842:	425b      	negs	r3, r3
 800c844:	4553      	cmp	r3, sl
 800c846:	dc01      	bgt.n	800c84c <_printf_float+0x2b0>
 800c848:	464b      	mov	r3, r9
 800c84a:	e793      	b.n	800c774 <_printf_float+0x1d8>
 800c84c:	2301      	movs	r3, #1
 800c84e:	465a      	mov	r2, fp
 800c850:	4631      	mov	r1, r6
 800c852:	4628      	mov	r0, r5
 800c854:	47b8      	blx	r7
 800c856:	3001      	adds	r0, #1
 800c858:	f43f aefb 	beq.w	800c652 <_printf_float+0xb6>
 800c85c:	f10a 0a01 	add.w	sl, sl, #1
 800c860:	e7ee      	b.n	800c840 <_printf_float+0x2a4>
 800c862:	bf00      	nop
 800c864:	7fefffff 	.word	0x7fefffff
 800c868:	0800fe24 	.word	0x0800fe24
 800c86c:	0800fe28 	.word	0x0800fe28
 800c870:	0800fe2c 	.word	0x0800fe2c
 800c874:	0800fe30 	.word	0x0800fe30
 800c878:	0800fe34 	.word	0x0800fe34
 800c87c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c87e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c882:	4553      	cmp	r3, sl
 800c884:	bfa8      	it	ge
 800c886:	4653      	movge	r3, sl
 800c888:	2b00      	cmp	r3, #0
 800c88a:	4699      	mov	r9, r3
 800c88c:	dc36      	bgt.n	800c8fc <_printf_float+0x360>
 800c88e:	f04f 0b00 	mov.w	fp, #0
 800c892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c896:	f104 021a 	add.w	r2, r4, #26
 800c89a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c89c:	9306      	str	r3, [sp, #24]
 800c89e:	eba3 0309 	sub.w	r3, r3, r9
 800c8a2:	455b      	cmp	r3, fp
 800c8a4:	dc31      	bgt.n	800c90a <_printf_float+0x36e>
 800c8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a8:	459a      	cmp	sl, r3
 800c8aa:	dc3a      	bgt.n	800c922 <_printf_float+0x386>
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	07da      	lsls	r2, r3, #31
 800c8b0:	d437      	bmi.n	800c922 <_printf_float+0x386>
 800c8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b4:	ebaa 0903 	sub.w	r9, sl, r3
 800c8b8:	9b06      	ldr	r3, [sp, #24]
 800c8ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c8be:	4599      	cmp	r9, r3
 800c8c0:	bfa8      	it	ge
 800c8c2:	4699      	movge	r9, r3
 800c8c4:	f1b9 0f00 	cmp.w	r9, #0
 800c8c8:	dc33      	bgt.n	800c932 <_printf_float+0x396>
 800c8ca:	f04f 0800 	mov.w	r8, #0
 800c8ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8d2:	f104 0b1a 	add.w	fp, r4, #26
 800c8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d8:	ebaa 0303 	sub.w	r3, sl, r3
 800c8dc:	eba3 0309 	sub.w	r3, r3, r9
 800c8e0:	4543      	cmp	r3, r8
 800c8e2:	f77f af79 	ble.w	800c7d8 <_printf_float+0x23c>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	465a      	mov	r2, fp
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	f43f aeae 	beq.w	800c652 <_printf_float+0xb6>
 800c8f6:	f108 0801 	add.w	r8, r8, #1
 800c8fa:	e7ec      	b.n	800c8d6 <_printf_float+0x33a>
 800c8fc:	4642      	mov	r2, r8
 800c8fe:	4631      	mov	r1, r6
 800c900:	4628      	mov	r0, r5
 800c902:	47b8      	blx	r7
 800c904:	3001      	adds	r0, #1
 800c906:	d1c2      	bne.n	800c88e <_printf_float+0x2f2>
 800c908:	e6a3      	b.n	800c652 <_printf_float+0xb6>
 800c90a:	2301      	movs	r3, #1
 800c90c:	4631      	mov	r1, r6
 800c90e:	4628      	mov	r0, r5
 800c910:	9206      	str	r2, [sp, #24]
 800c912:	47b8      	blx	r7
 800c914:	3001      	adds	r0, #1
 800c916:	f43f ae9c 	beq.w	800c652 <_printf_float+0xb6>
 800c91a:	9a06      	ldr	r2, [sp, #24]
 800c91c:	f10b 0b01 	add.w	fp, fp, #1
 800c920:	e7bb      	b.n	800c89a <_printf_float+0x2fe>
 800c922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c926:	4631      	mov	r1, r6
 800c928:	4628      	mov	r0, r5
 800c92a:	47b8      	blx	r7
 800c92c:	3001      	adds	r0, #1
 800c92e:	d1c0      	bne.n	800c8b2 <_printf_float+0x316>
 800c930:	e68f      	b.n	800c652 <_printf_float+0xb6>
 800c932:	9a06      	ldr	r2, [sp, #24]
 800c934:	464b      	mov	r3, r9
 800c936:	4442      	add	r2, r8
 800c938:	4631      	mov	r1, r6
 800c93a:	4628      	mov	r0, r5
 800c93c:	47b8      	blx	r7
 800c93e:	3001      	adds	r0, #1
 800c940:	d1c3      	bne.n	800c8ca <_printf_float+0x32e>
 800c942:	e686      	b.n	800c652 <_printf_float+0xb6>
 800c944:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c948:	f1ba 0f01 	cmp.w	sl, #1
 800c94c:	dc01      	bgt.n	800c952 <_printf_float+0x3b6>
 800c94e:	07db      	lsls	r3, r3, #31
 800c950:	d536      	bpl.n	800c9c0 <_printf_float+0x424>
 800c952:	2301      	movs	r3, #1
 800c954:	4642      	mov	r2, r8
 800c956:	4631      	mov	r1, r6
 800c958:	4628      	mov	r0, r5
 800c95a:	47b8      	blx	r7
 800c95c:	3001      	adds	r0, #1
 800c95e:	f43f ae78 	beq.w	800c652 <_printf_float+0xb6>
 800c962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c966:	4631      	mov	r1, r6
 800c968:	4628      	mov	r0, r5
 800c96a:	47b8      	blx	r7
 800c96c:	3001      	adds	r0, #1
 800c96e:	f43f ae70 	beq.w	800c652 <_printf_float+0xb6>
 800c972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c976:	2200      	movs	r2, #0
 800c978:	2300      	movs	r3, #0
 800c97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c97e:	f7f4 f8b3 	bl	8000ae8 <__aeabi_dcmpeq>
 800c982:	b9c0      	cbnz	r0, 800c9b6 <_printf_float+0x41a>
 800c984:	4653      	mov	r3, sl
 800c986:	f108 0201 	add.w	r2, r8, #1
 800c98a:	4631      	mov	r1, r6
 800c98c:	4628      	mov	r0, r5
 800c98e:	47b8      	blx	r7
 800c990:	3001      	adds	r0, #1
 800c992:	d10c      	bne.n	800c9ae <_printf_float+0x412>
 800c994:	e65d      	b.n	800c652 <_printf_float+0xb6>
 800c996:	2301      	movs	r3, #1
 800c998:	465a      	mov	r2, fp
 800c99a:	4631      	mov	r1, r6
 800c99c:	4628      	mov	r0, r5
 800c99e:	47b8      	blx	r7
 800c9a0:	3001      	adds	r0, #1
 800c9a2:	f43f ae56 	beq.w	800c652 <_printf_float+0xb6>
 800c9a6:	f108 0801 	add.w	r8, r8, #1
 800c9aa:	45d0      	cmp	r8, sl
 800c9ac:	dbf3      	blt.n	800c996 <_printf_float+0x3fa>
 800c9ae:	464b      	mov	r3, r9
 800c9b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c9b4:	e6df      	b.n	800c776 <_printf_float+0x1da>
 800c9b6:	f04f 0800 	mov.w	r8, #0
 800c9ba:	f104 0b1a 	add.w	fp, r4, #26
 800c9be:	e7f4      	b.n	800c9aa <_printf_float+0x40e>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	4642      	mov	r2, r8
 800c9c4:	e7e1      	b.n	800c98a <_printf_float+0x3ee>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	464a      	mov	r2, r9
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	47b8      	blx	r7
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	f43f ae3e 	beq.w	800c652 <_printf_float+0xb6>
 800c9d6:	f108 0801 	add.w	r8, r8, #1
 800c9da:	68e3      	ldr	r3, [r4, #12]
 800c9dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c9de:	1a5b      	subs	r3, r3, r1
 800c9e0:	4543      	cmp	r3, r8
 800c9e2:	dcf0      	bgt.n	800c9c6 <_printf_float+0x42a>
 800c9e4:	e6fc      	b.n	800c7e0 <_printf_float+0x244>
 800c9e6:	f04f 0800 	mov.w	r8, #0
 800c9ea:	f104 0919 	add.w	r9, r4, #25
 800c9ee:	e7f4      	b.n	800c9da <_printf_float+0x43e>

0800c9f0 <_printf_common>:
 800c9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f4:	4616      	mov	r6, r2
 800c9f6:	4698      	mov	r8, r3
 800c9f8:	688a      	ldr	r2, [r1, #8]
 800c9fa:	690b      	ldr	r3, [r1, #16]
 800c9fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca00:	4293      	cmp	r3, r2
 800ca02:	bfb8      	it	lt
 800ca04:	4613      	movlt	r3, r2
 800ca06:	6033      	str	r3, [r6, #0]
 800ca08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	460c      	mov	r4, r1
 800ca10:	b10a      	cbz	r2, 800ca16 <_printf_common+0x26>
 800ca12:	3301      	adds	r3, #1
 800ca14:	6033      	str	r3, [r6, #0]
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	0699      	lsls	r1, r3, #26
 800ca1a:	bf42      	ittt	mi
 800ca1c:	6833      	ldrmi	r3, [r6, #0]
 800ca1e:	3302      	addmi	r3, #2
 800ca20:	6033      	strmi	r3, [r6, #0]
 800ca22:	6825      	ldr	r5, [r4, #0]
 800ca24:	f015 0506 	ands.w	r5, r5, #6
 800ca28:	d106      	bne.n	800ca38 <_printf_common+0x48>
 800ca2a:	f104 0a19 	add.w	sl, r4, #25
 800ca2e:	68e3      	ldr	r3, [r4, #12]
 800ca30:	6832      	ldr	r2, [r6, #0]
 800ca32:	1a9b      	subs	r3, r3, r2
 800ca34:	42ab      	cmp	r3, r5
 800ca36:	dc26      	bgt.n	800ca86 <_printf_common+0x96>
 800ca38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca3c:	6822      	ldr	r2, [r4, #0]
 800ca3e:	3b00      	subs	r3, #0
 800ca40:	bf18      	it	ne
 800ca42:	2301      	movne	r3, #1
 800ca44:	0692      	lsls	r2, r2, #26
 800ca46:	d42b      	bmi.n	800caa0 <_printf_common+0xb0>
 800ca48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca4c:	4641      	mov	r1, r8
 800ca4e:	4638      	mov	r0, r7
 800ca50:	47c8      	blx	r9
 800ca52:	3001      	adds	r0, #1
 800ca54:	d01e      	beq.n	800ca94 <_printf_common+0xa4>
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	6922      	ldr	r2, [r4, #16]
 800ca5a:	f003 0306 	and.w	r3, r3, #6
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	bf02      	ittt	eq
 800ca62:	68e5      	ldreq	r5, [r4, #12]
 800ca64:	6833      	ldreq	r3, [r6, #0]
 800ca66:	1aed      	subeq	r5, r5, r3
 800ca68:	68a3      	ldr	r3, [r4, #8]
 800ca6a:	bf0c      	ite	eq
 800ca6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca70:	2500      	movne	r5, #0
 800ca72:	4293      	cmp	r3, r2
 800ca74:	bfc4      	itt	gt
 800ca76:	1a9b      	subgt	r3, r3, r2
 800ca78:	18ed      	addgt	r5, r5, r3
 800ca7a:	2600      	movs	r6, #0
 800ca7c:	341a      	adds	r4, #26
 800ca7e:	42b5      	cmp	r5, r6
 800ca80:	d11a      	bne.n	800cab8 <_printf_common+0xc8>
 800ca82:	2000      	movs	r0, #0
 800ca84:	e008      	b.n	800ca98 <_printf_common+0xa8>
 800ca86:	2301      	movs	r3, #1
 800ca88:	4652      	mov	r2, sl
 800ca8a:	4641      	mov	r1, r8
 800ca8c:	4638      	mov	r0, r7
 800ca8e:	47c8      	blx	r9
 800ca90:	3001      	adds	r0, #1
 800ca92:	d103      	bne.n	800ca9c <_printf_common+0xac>
 800ca94:	f04f 30ff 	mov.w	r0, #4294967295
 800ca98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9c:	3501      	adds	r5, #1
 800ca9e:	e7c6      	b.n	800ca2e <_printf_common+0x3e>
 800caa0:	18e1      	adds	r1, r4, r3
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	2030      	movs	r0, #48	@ 0x30
 800caa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800caaa:	4422      	add	r2, r4
 800caac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cab0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cab4:	3302      	adds	r3, #2
 800cab6:	e7c7      	b.n	800ca48 <_printf_common+0x58>
 800cab8:	2301      	movs	r3, #1
 800caba:	4622      	mov	r2, r4
 800cabc:	4641      	mov	r1, r8
 800cabe:	4638      	mov	r0, r7
 800cac0:	47c8      	blx	r9
 800cac2:	3001      	adds	r0, #1
 800cac4:	d0e6      	beq.n	800ca94 <_printf_common+0xa4>
 800cac6:	3601      	adds	r6, #1
 800cac8:	e7d9      	b.n	800ca7e <_printf_common+0x8e>
	...

0800cacc <_printf_i>:
 800cacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cad0:	7e0f      	ldrb	r7, [r1, #24]
 800cad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cad4:	2f78      	cmp	r7, #120	@ 0x78
 800cad6:	4691      	mov	r9, r2
 800cad8:	4680      	mov	r8, r0
 800cada:	460c      	mov	r4, r1
 800cadc:	469a      	mov	sl, r3
 800cade:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cae2:	d807      	bhi.n	800caf4 <_printf_i+0x28>
 800cae4:	2f62      	cmp	r7, #98	@ 0x62
 800cae6:	d80a      	bhi.n	800cafe <_printf_i+0x32>
 800cae8:	2f00      	cmp	r7, #0
 800caea:	f000 80d2 	beq.w	800cc92 <_printf_i+0x1c6>
 800caee:	2f58      	cmp	r7, #88	@ 0x58
 800caf0:	f000 80b9 	beq.w	800cc66 <_printf_i+0x19a>
 800caf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800caf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cafc:	e03a      	b.n	800cb74 <_printf_i+0xa8>
 800cafe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb02:	2b15      	cmp	r3, #21
 800cb04:	d8f6      	bhi.n	800caf4 <_printf_i+0x28>
 800cb06:	a101      	add	r1, pc, #4	@ (adr r1, 800cb0c <_printf_i+0x40>)
 800cb08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb0c:	0800cb65 	.word	0x0800cb65
 800cb10:	0800cb79 	.word	0x0800cb79
 800cb14:	0800caf5 	.word	0x0800caf5
 800cb18:	0800caf5 	.word	0x0800caf5
 800cb1c:	0800caf5 	.word	0x0800caf5
 800cb20:	0800caf5 	.word	0x0800caf5
 800cb24:	0800cb79 	.word	0x0800cb79
 800cb28:	0800caf5 	.word	0x0800caf5
 800cb2c:	0800caf5 	.word	0x0800caf5
 800cb30:	0800caf5 	.word	0x0800caf5
 800cb34:	0800caf5 	.word	0x0800caf5
 800cb38:	0800cc79 	.word	0x0800cc79
 800cb3c:	0800cba3 	.word	0x0800cba3
 800cb40:	0800cc33 	.word	0x0800cc33
 800cb44:	0800caf5 	.word	0x0800caf5
 800cb48:	0800caf5 	.word	0x0800caf5
 800cb4c:	0800cc9b 	.word	0x0800cc9b
 800cb50:	0800caf5 	.word	0x0800caf5
 800cb54:	0800cba3 	.word	0x0800cba3
 800cb58:	0800caf5 	.word	0x0800caf5
 800cb5c:	0800caf5 	.word	0x0800caf5
 800cb60:	0800cc3b 	.word	0x0800cc3b
 800cb64:	6833      	ldr	r3, [r6, #0]
 800cb66:	1d1a      	adds	r2, r3, #4
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6032      	str	r2, [r6, #0]
 800cb6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb74:	2301      	movs	r3, #1
 800cb76:	e09d      	b.n	800ccb4 <_printf_i+0x1e8>
 800cb78:	6833      	ldr	r3, [r6, #0]
 800cb7a:	6820      	ldr	r0, [r4, #0]
 800cb7c:	1d19      	adds	r1, r3, #4
 800cb7e:	6031      	str	r1, [r6, #0]
 800cb80:	0606      	lsls	r6, r0, #24
 800cb82:	d501      	bpl.n	800cb88 <_printf_i+0xbc>
 800cb84:	681d      	ldr	r5, [r3, #0]
 800cb86:	e003      	b.n	800cb90 <_printf_i+0xc4>
 800cb88:	0645      	lsls	r5, r0, #25
 800cb8a:	d5fb      	bpl.n	800cb84 <_printf_i+0xb8>
 800cb8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	da03      	bge.n	800cb9c <_printf_i+0xd0>
 800cb94:	232d      	movs	r3, #45	@ 0x2d
 800cb96:	426d      	negs	r5, r5
 800cb98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb9c:	4859      	ldr	r0, [pc, #356]	@ (800cd04 <_printf_i+0x238>)
 800cb9e:	230a      	movs	r3, #10
 800cba0:	e011      	b.n	800cbc6 <_printf_i+0xfa>
 800cba2:	6821      	ldr	r1, [r4, #0]
 800cba4:	6833      	ldr	r3, [r6, #0]
 800cba6:	0608      	lsls	r0, r1, #24
 800cba8:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbac:	d402      	bmi.n	800cbb4 <_printf_i+0xe8>
 800cbae:	0649      	lsls	r1, r1, #25
 800cbb0:	bf48      	it	mi
 800cbb2:	b2ad      	uxthmi	r5, r5
 800cbb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbb6:	4853      	ldr	r0, [pc, #332]	@ (800cd04 <_printf_i+0x238>)
 800cbb8:	6033      	str	r3, [r6, #0]
 800cbba:	bf14      	ite	ne
 800cbbc:	230a      	movne	r3, #10
 800cbbe:	2308      	moveq	r3, #8
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbc6:	6866      	ldr	r6, [r4, #4]
 800cbc8:	60a6      	str	r6, [r4, #8]
 800cbca:	2e00      	cmp	r6, #0
 800cbcc:	bfa2      	ittt	ge
 800cbce:	6821      	ldrge	r1, [r4, #0]
 800cbd0:	f021 0104 	bicge.w	r1, r1, #4
 800cbd4:	6021      	strge	r1, [r4, #0]
 800cbd6:	b90d      	cbnz	r5, 800cbdc <_printf_i+0x110>
 800cbd8:	2e00      	cmp	r6, #0
 800cbda:	d04b      	beq.n	800cc74 <_printf_i+0x1a8>
 800cbdc:	4616      	mov	r6, r2
 800cbde:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbe2:	fb03 5711 	mls	r7, r3, r1, r5
 800cbe6:	5dc7      	ldrb	r7, [r0, r7]
 800cbe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbec:	462f      	mov	r7, r5
 800cbee:	42bb      	cmp	r3, r7
 800cbf0:	460d      	mov	r5, r1
 800cbf2:	d9f4      	bls.n	800cbde <_printf_i+0x112>
 800cbf4:	2b08      	cmp	r3, #8
 800cbf6:	d10b      	bne.n	800cc10 <_printf_i+0x144>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	07df      	lsls	r7, r3, #31
 800cbfc:	d508      	bpl.n	800cc10 <_printf_i+0x144>
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	6861      	ldr	r1, [r4, #4]
 800cc02:	4299      	cmp	r1, r3
 800cc04:	bfde      	ittt	le
 800cc06:	2330      	movle	r3, #48	@ 0x30
 800cc08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc10:	1b92      	subs	r2, r2, r6
 800cc12:	6122      	str	r2, [r4, #16]
 800cc14:	f8cd a000 	str.w	sl, [sp]
 800cc18:	464b      	mov	r3, r9
 800cc1a:	aa03      	add	r2, sp, #12
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	4640      	mov	r0, r8
 800cc20:	f7ff fee6 	bl	800c9f0 <_printf_common>
 800cc24:	3001      	adds	r0, #1
 800cc26:	d14a      	bne.n	800ccbe <_printf_i+0x1f2>
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2c:	b004      	add	sp, #16
 800cc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	f043 0320 	orr.w	r3, r3, #32
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	4833      	ldr	r0, [pc, #204]	@ (800cd08 <_printf_i+0x23c>)
 800cc3c:	2778      	movs	r7, #120	@ 0x78
 800cc3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	6831      	ldr	r1, [r6, #0]
 800cc46:	061f      	lsls	r7, r3, #24
 800cc48:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc4c:	d402      	bmi.n	800cc54 <_printf_i+0x188>
 800cc4e:	065f      	lsls	r7, r3, #25
 800cc50:	bf48      	it	mi
 800cc52:	b2ad      	uxthmi	r5, r5
 800cc54:	6031      	str	r1, [r6, #0]
 800cc56:	07d9      	lsls	r1, r3, #31
 800cc58:	bf44      	itt	mi
 800cc5a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc5e:	6023      	strmi	r3, [r4, #0]
 800cc60:	b11d      	cbz	r5, 800cc6a <_printf_i+0x19e>
 800cc62:	2310      	movs	r3, #16
 800cc64:	e7ac      	b.n	800cbc0 <_printf_i+0xf4>
 800cc66:	4827      	ldr	r0, [pc, #156]	@ (800cd04 <_printf_i+0x238>)
 800cc68:	e7e9      	b.n	800cc3e <_printf_i+0x172>
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	f023 0320 	bic.w	r3, r3, #32
 800cc70:	6023      	str	r3, [r4, #0]
 800cc72:	e7f6      	b.n	800cc62 <_printf_i+0x196>
 800cc74:	4616      	mov	r6, r2
 800cc76:	e7bd      	b.n	800cbf4 <_printf_i+0x128>
 800cc78:	6833      	ldr	r3, [r6, #0]
 800cc7a:	6825      	ldr	r5, [r4, #0]
 800cc7c:	6961      	ldr	r1, [r4, #20]
 800cc7e:	1d18      	adds	r0, r3, #4
 800cc80:	6030      	str	r0, [r6, #0]
 800cc82:	062e      	lsls	r6, r5, #24
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	d501      	bpl.n	800cc8c <_printf_i+0x1c0>
 800cc88:	6019      	str	r1, [r3, #0]
 800cc8a:	e002      	b.n	800cc92 <_printf_i+0x1c6>
 800cc8c:	0668      	lsls	r0, r5, #25
 800cc8e:	d5fb      	bpl.n	800cc88 <_printf_i+0x1bc>
 800cc90:	8019      	strh	r1, [r3, #0]
 800cc92:	2300      	movs	r3, #0
 800cc94:	6123      	str	r3, [r4, #16]
 800cc96:	4616      	mov	r6, r2
 800cc98:	e7bc      	b.n	800cc14 <_printf_i+0x148>
 800cc9a:	6833      	ldr	r3, [r6, #0]
 800cc9c:	1d1a      	adds	r2, r3, #4
 800cc9e:	6032      	str	r2, [r6, #0]
 800cca0:	681e      	ldr	r6, [r3, #0]
 800cca2:	6862      	ldr	r2, [r4, #4]
 800cca4:	2100      	movs	r1, #0
 800cca6:	4630      	mov	r0, r6
 800cca8:	f7f3 faa2 	bl	80001f0 <memchr>
 800ccac:	b108      	cbz	r0, 800ccb2 <_printf_i+0x1e6>
 800ccae:	1b80      	subs	r0, r0, r6
 800ccb0:	6060      	str	r0, [r4, #4]
 800ccb2:	6863      	ldr	r3, [r4, #4]
 800ccb4:	6123      	str	r3, [r4, #16]
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccbc:	e7aa      	b.n	800cc14 <_printf_i+0x148>
 800ccbe:	6923      	ldr	r3, [r4, #16]
 800ccc0:	4632      	mov	r2, r6
 800ccc2:	4649      	mov	r1, r9
 800ccc4:	4640      	mov	r0, r8
 800ccc6:	47d0      	blx	sl
 800ccc8:	3001      	adds	r0, #1
 800ccca:	d0ad      	beq.n	800cc28 <_printf_i+0x15c>
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	079b      	lsls	r3, r3, #30
 800ccd0:	d413      	bmi.n	800ccfa <_printf_i+0x22e>
 800ccd2:	68e0      	ldr	r0, [r4, #12]
 800ccd4:	9b03      	ldr	r3, [sp, #12]
 800ccd6:	4298      	cmp	r0, r3
 800ccd8:	bfb8      	it	lt
 800ccda:	4618      	movlt	r0, r3
 800ccdc:	e7a6      	b.n	800cc2c <_printf_i+0x160>
 800ccde:	2301      	movs	r3, #1
 800cce0:	4632      	mov	r2, r6
 800cce2:	4649      	mov	r1, r9
 800cce4:	4640      	mov	r0, r8
 800cce6:	47d0      	blx	sl
 800cce8:	3001      	adds	r0, #1
 800ccea:	d09d      	beq.n	800cc28 <_printf_i+0x15c>
 800ccec:	3501      	adds	r5, #1
 800ccee:	68e3      	ldr	r3, [r4, #12]
 800ccf0:	9903      	ldr	r1, [sp, #12]
 800ccf2:	1a5b      	subs	r3, r3, r1
 800ccf4:	42ab      	cmp	r3, r5
 800ccf6:	dcf2      	bgt.n	800ccde <_printf_i+0x212>
 800ccf8:	e7eb      	b.n	800ccd2 <_printf_i+0x206>
 800ccfa:	2500      	movs	r5, #0
 800ccfc:	f104 0619 	add.w	r6, r4, #25
 800cd00:	e7f5      	b.n	800ccee <_printf_i+0x222>
 800cd02:	bf00      	nop
 800cd04:	0800fe36 	.word	0x0800fe36
 800cd08:	0800fe47 	.word	0x0800fe47

0800cd0c <std>:
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	b510      	push	{r4, lr}
 800cd10:	4604      	mov	r4, r0
 800cd12:	e9c0 3300 	strd	r3, r3, [r0]
 800cd16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd1a:	6083      	str	r3, [r0, #8]
 800cd1c:	8181      	strh	r1, [r0, #12]
 800cd1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd20:	81c2      	strh	r2, [r0, #14]
 800cd22:	6183      	str	r3, [r0, #24]
 800cd24:	4619      	mov	r1, r3
 800cd26:	2208      	movs	r2, #8
 800cd28:	305c      	adds	r0, #92	@ 0x5c
 800cd2a:	f000 f914 	bl	800cf56 <memset>
 800cd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd64 <std+0x58>)
 800cd30:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd32:	4b0d      	ldr	r3, [pc, #52]	@ (800cd68 <std+0x5c>)
 800cd34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd36:	4b0d      	ldr	r3, [pc, #52]	@ (800cd6c <std+0x60>)
 800cd38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd70 <std+0x64>)
 800cd3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd74 <std+0x68>)
 800cd40:	6224      	str	r4, [r4, #32]
 800cd42:	429c      	cmp	r4, r3
 800cd44:	d006      	beq.n	800cd54 <std+0x48>
 800cd46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd4a:	4294      	cmp	r4, r2
 800cd4c:	d002      	beq.n	800cd54 <std+0x48>
 800cd4e:	33d0      	adds	r3, #208	@ 0xd0
 800cd50:	429c      	cmp	r4, r3
 800cd52:	d105      	bne.n	800cd60 <std+0x54>
 800cd54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd5c:	f000 b98a 	b.w	800d074 <__retarget_lock_init_recursive>
 800cd60:	bd10      	pop	{r4, pc}
 800cd62:	bf00      	nop
 800cd64:	0800ced1 	.word	0x0800ced1
 800cd68:	0800cef3 	.word	0x0800cef3
 800cd6c:	0800cf2b 	.word	0x0800cf2b
 800cd70:	0800cf4f 	.word	0x0800cf4f
 800cd74:	200052a0 	.word	0x200052a0

0800cd78 <stdio_exit_handler>:
 800cd78:	4a02      	ldr	r2, [pc, #8]	@ (800cd84 <stdio_exit_handler+0xc>)
 800cd7a:	4903      	ldr	r1, [pc, #12]	@ (800cd88 <stdio_exit_handler+0x10>)
 800cd7c:	4803      	ldr	r0, [pc, #12]	@ (800cd8c <stdio_exit_handler+0x14>)
 800cd7e:	f000 b869 	b.w	800ce54 <_fwalk_sglue>
 800cd82:	bf00      	nop
 800cd84:	20000014 	.word	0x20000014
 800cd88:	0800e9ed 	.word	0x0800e9ed
 800cd8c:	20000024 	.word	0x20000024

0800cd90 <cleanup_stdio>:
 800cd90:	6841      	ldr	r1, [r0, #4]
 800cd92:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc4 <cleanup_stdio+0x34>)
 800cd94:	4299      	cmp	r1, r3
 800cd96:	b510      	push	{r4, lr}
 800cd98:	4604      	mov	r4, r0
 800cd9a:	d001      	beq.n	800cda0 <cleanup_stdio+0x10>
 800cd9c:	f001 fe26 	bl	800e9ec <_fflush_r>
 800cda0:	68a1      	ldr	r1, [r4, #8]
 800cda2:	4b09      	ldr	r3, [pc, #36]	@ (800cdc8 <cleanup_stdio+0x38>)
 800cda4:	4299      	cmp	r1, r3
 800cda6:	d002      	beq.n	800cdae <cleanup_stdio+0x1e>
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f001 fe1f 	bl	800e9ec <_fflush_r>
 800cdae:	68e1      	ldr	r1, [r4, #12]
 800cdb0:	4b06      	ldr	r3, [pc, #24]	@ (800cdcc <cleanup_stdio+0x3c>)
 800cdb2:	4299      	cmp	r1, r3
 800cdb4:	d004      	beq.n	800cdc0 <cleanup_stdio+0x30>
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdbc:	f001 be16 	b.w	800e9ec <_fflush_r>
 800cdc0:	bd10      	pop	{r4, pc}
 800cdc2:	bf00      	nop
 800cdc4:	200052a0 	.word	0x200052a0
 800cdc8:	20005308 	.word	0x20005308
 800cdcc:	20005370 	.word	0x20005370

0800cdd0 <global_stdio_init.part.0>:
 800cdd0:	b510      	push	{r4, lr}
 800cdd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ce00 <global_stdio_init.part.0+0x30>)
 800cdd4:	4c0b      	ldr	r4, [pc, #44]	@ (800ce04 <global_stdio_init.part.0+0x34>)
 800cdd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ce08 <global_stdio_init.part.0+0x38>)
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	4620      	mov	r0, r4
 800cddc:	2200      	movs	r2, #0
 800cdde:	2104      	movs	r1, #4
 800cde0:	f7ff ff94 	bl	800cd0c <std>
 800cde4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cde8:	2201      	movs	r2, #1
 800cdea:	2109      	movs	r1, #9
 800cdec:	f7ff ff8e 	bl	800cd0c <std>
 800cdf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdfa:	2112      	movs	r1, #18
 800cdfc:	f7ff bf86 	b.w	800cd0c <std>
 800ce00:	200053d8 	.word	0x200053d8
 800ce04:	200052a0 	.word	0x200052a0
 800ce08:	0800cd79 	.word	0x0800cd79

0800ce0c <__sfp_lock_acquire>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	@ (800ce14 <__sfp_lock_acquire+0x8>)
 800ce0e:	f000 b932 	b.w	800d076 <__retarget_lock_acquire_recursive>
 800ce12:	bf00      	nop
 800ce14:	200053e1 	.word	0x200053e1

0800ce18 <__sfp_lock_release>:
 800ce18:	4801      	ldr	r0, [pc, #4]	@ (800ce20 <__sfp_lock_release+0x8>)
 800ce1a:	f000 b92d 	b.w	800d078 <__retarget_lock_release_recursive>
 800ce1e:	bf00      	nop
 800ce20:	200053e1 	.word	0x200053e1

0800ce24 <__sinit>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	4604      	mov	r4, r0
 800ce28:	f7ff fff0 	bl	800ce0c <__sfp_lock_acquire>
 800ce2c:	6a23      	ldr	r3, [r4, #32]
 800ce2e:	b11b      	cbz	r3, 800ce38 <__sinit+0x14>
 800ce30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce34:	f7ff bff0 	b.w	800ce18 <__sfp_lock_release>
 800ce38:	4b04      	ldr	r3, [pc, #16]	@ (800ce4c <__sinit+0x28>)
 800ce3a:	6223      	str	r3, [r4, #32]
 800ce3c:	4b04      	ldr	r3, [pc, #16]	@ (800ce50 <__sinit+0x2c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1f5      	bne.n	800ce30 <__sinit+0xc>
 800ce44:	f7ff ffc4 	bl	800cdd0 <global_stdio_init.part.0>
 800ce48:	e7f2      	b.n	800ce30 <__sinit+0xc>
 800ce4a:	bf00      	nop
 800ce4c:	0800cd91 	.word	0x0800cd91
 800ce50:	200053d8 	.word	0x200053d8

0800ce54 <_fwalk_sglue>:
 800ce54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce58:	4607      	mov	r7, r0
 800ce5a:	4688      	mov	r8, r1
 800ce5c:	4614      	mov	r4, r2
 800ce5e:	2600      	movs	r6, #0
 800ce60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce64:	f1b9 0901 	subs.w	r9, r9, #1
 800ce68:	d505      	bpl.n	800ce76 <_fwalk_sglue+0x22>
 800ce6a:	6824      	ldr	r4, [r4, #0]
 800ce6c:	2c00      	cmp	r4, #0
 800ce6e:	d1f7      	bne.n	800ce60 <_fwalk_sglue+0xc>
 800ce70:	4630      	mov	r0, r6
 800ce72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce76:	89ab      	ldrh	r3, [r5, #12]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d907      	bls.n	800ce8c <_fwalk_sglue+0x38>
 800ce7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce80:	3301      	adds	r3, #1
 800ce82:	d003      	beq.n	800ce8c <_fwalk_sglue+0x38>
 800ce84:	4629      	mov	r1, r5
 800ce86:	4638      	mov	r0, r7
 800ce88:	47c0      	blx	r8
 800ce8a:	4306      	orrs	r6, r0
 800ce8c:	3568      	adds	r5, #104	@ 0x68
 800ce8e:	e7e9      	b.n	800ce64 <_fwalk_sglue+0x10>

0800ce90 <siprintf>:
 800ce90:	b40e      	push	{r1, r2, r3}
 800ce92:	b500      	push	{lr}
 800ce94:	b09c      	sub	sp, #112	@ 0x70
 800ce96:	ab1d      	add	r3, sp, #116	@ 0x74
 800ce98:	9002      	str	r0, [sp, #8]
 800ce9a:	9006      	str	r0, [sp, #24]
 800ce9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cea0:	4809      	ldr	r0, [pc, #36]	@ (800cec8 <siprintf+0x38>)
 800cea2:	9107      	str	r1, [sp, #28]
 800cea4:	9104      	str	r1, [sp, #16]
 800cea6:	4909      	ldr	r1, [pc, #36]	@ (800cecc <siprintf+0x3c>)
 800cea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceac:	9105      	str	r1, [sp, #20]
 800ceae:	6800      	ldr	r0, [r0, #0]
 800ceb0:	9301      	str	r3, [sp, #4]
 800ceb2:	a902      	add	r1, sp, #8
 800ceb4:	f001 fc1a 	bl	800e6ec <_svfiprintf_r>
 800ceb8:	9b02      	ldr	r3, [sp, #8]
 800ceba:	2200      	movs	r2, #0
 800cebc:	701a      	strb	r2, [r3, #0]
 800cebe:	b01c      	add	sp, #112	@ 0x70
 800cec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec4:	b003      	add	sp, #12
 800cec6:	4770      	bx	lr
 800cec8:	20000020 	.word	0x20000020
 800cecc:	ffff0208 	.word	0xffff0208

0800ced0 <__sread>:
 800ced0:	b510      	push	{r4, lr}
 800ced2:	460c      	mov	r4, r1
 800ced4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced8:	f000 f87e 	bl	800cfd8 <_read_r>
 800cedc:	2800      	cmp	r0, #0
 800cede:	bfab      	itete	ge
 800cee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cee2:	89a3      	ldrhlt	r3, [r4, #12]
 800cee4:	181b      	addge	r3, r3, r0
 800cee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ceea:	bfac      	ite	ge
 800ceec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ceee:	81a3      	strhlt	r3, [r4, #12]
 800cef0:	bd10      	pop	{r4, pc}

0800cef2 <__swrite>:
 800cef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef6:	461f      	mov	r7, r3
 800cef8:	898b      	ldrh	r3, [r1, #12]
 800cefa:	05db      	lsls	r3, r3, #23
 800cefc:	4605      	mov	r5, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	4616      	mov	r6, r2
 800cf02:	d505      	bpl.n	800cf10 <__swrite+0x1e>
 800cf04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf08:	2302      	movs	r3, #2
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f000 f852 	bl	800cfb4 <_lseek_r>
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf1a:	81a3      	strh	r3, [r4, #12]
 800cf1c:	4632      	mov	r2, r6
 800cf1e:	463b      	mov	r3, r7
 800cf20:	4628      	mov	r0, r5
 800cf22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf26:	f000 b869 	b.w	800cffc <_write_r>

0800cf2a <__sseek>:
 800cf2a:	b510      	push	{r4, lr}
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf32:	f000 f83f 	bl	800cfb4 <_lseek_r>
 800cf36:	1c43      	adds	r3, r0, #1
 800cf38:	89a3      	ldrh	r3, [r4, #12]
 800cf3a:	bf15      	itete	ne
 800cf3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf46:	81a3      	strheq	r3, [r4, #12]
 800cf48:	bf18      	it	ne
 800cf4a:	81a3      	strhne	r3, [r4, #12]
 800cf4c:	bd10      	pop	{r4, pc}

0800cf4e <__sclose>:
 800cf4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf52:	f000 b81f 	b.w	800cf94 <_close_r>

0800cf56 <memset>:
 800cf56:	4402      	add	r2, r0
 800cf58:	4603      	mov	r3, r0
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d100      	bne.n	800cf60 <memset+0xa>
 800cf5e:	4770      	bx	lr
 800cf60:	f803 1b01 	strb.w	r1, [r3], #1
 800cf64:	e7f9      	b.n	800cf5a <memset+0x4>

0800cf66 <strncmp>:
 800cf66:	b510      	push	{r4, lr}
 800cf68:	b16a      	cbz	r2, 800cf86 <strncmp+0x20>
 800cf6a:	3901      	subs	r1, #1
 800cf6c:	1884      	adds	r4, r0, r2
 800cf6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d103      	bne.n	800cf82 <strncmp+0x1c>
 800cf7a:	42a0      	cmp	r0, r4
 800cf7c:	d001      	beq.n	800cf82 <strncmp+0x1c>
 800cf7e:	2a00      	cmp	r2, #0
 800cf80:	d1f5      	bne.n	800cf6e <strncmp+0x8>
 800cf82:	1ad0      	subs	r0, r2, r3
 800cf84:	bd10      	pop	{r4, pc}
 800cf86:	4610      	mov	r0, r2
 800cf88:	e7fc      	b.n	800cf84 <strncmp+0x1e>
	...

0800cf8c <_localeconv_r>:
 800cf8c:	4800      	ldr	r0, [pc, #0]	@ (800cf90 <_localeconv_r+0x4>)
 800cf8e:	4770      	bx	lr
 800cf90:	20000160 	.word	0x20000160

0800cf94 <_close_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4d06      	ldr	r5, [pc, #24]	@ (800cfb0 <_close_r+0x1c>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	f7f6 ff58 	bl	8003e54 <_close>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_close_r+0x1a>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_close_r+0x1a>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	200053dc 	.word	0x200053dc

0800cfb4 <_lseek_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d07      	ldr	r5, [pc, #28]	@ (800cfd4 <_lseek_r+0x20>)
 800cfb8:	4604      	mov	r4, r0
 800cfba:	4608      	mov	r0, r1
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	602a      	str	r2, [r5, #0]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f7f6 ff6d 	bl	8003ea2 <_lseek>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d102      	bne.n	800cfd2 <_lseek_r+0x1e>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	b103      	cbz	r3, 800cfd2 <_lseek_r+0x1e>
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	200053dc 	.word	0x200053dc

0800cfd8 <_read_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4d07      	ldr	r5, [pc, #28]	@ (800cff8 <_read_r+0x20>)
 800cfdc:	4604      	mov	r4, r0
 800cfde:	4608      	mov	r0, r1
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	602a      	str	r2, [r5, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f7f6 fefb 	bl	8003de2 <_read>
 800cfec:	1c43      	adds	r3, r0, #1
 800cfee:	d102      	bne.n	800cff6 <_read_r+0x1e>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	b103      	cbz	r3, 800cff6 <_read_r+0x1e>
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
 800cff8:	200053dc 	.word	0x200053dc

0800cffc <_write_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	4d07      	ldr	r5, [pc, #28]	@ (800d01c <_write_r+0x20>)
 800d000:	4604      	mov	r4, r0
 800d002:	4608      	mov	r0, r1
 800d004:	4611      	mov	r1, r2
 800d006:	2200      	movs	r2, #0
 800d008:	602a      	str	r2, [r5, #0]
 800d00a:	461a      	mov	r2, r3
 800d00c:	f7f6 ff06 	bl	8003e1c <_write>
 800d010:	1c43      	adds	r3, r0, #1
 800d012:	d102      	bne.n	800d01a <_write_r+0x1e>
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	b103      	cbz	r3, 800d01a <_write_r+0x1e>
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	bd38      	pop	{r3, r4, r5, pc}
 800d01c:	200053dc 	.word	0x200053dc

0800d020 <__errno>:
 800d020:	4b01      	ldr	r3, [pc, #4]	@ (800d028 <__errno+0x8>)
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20000020 	.word	0x20000020

0800d02c <__libc_init_array>:
 800d02c:	b570      	push	{r4, r5, r6, lr}
 800d02e:	4d0d      	ldr	r5, [pc, #52]	@ (800d064 <__libc_init_array+0x38>)
 800d030:	4c0d      	ldr	r4, [pc, #52]	@ (800d068 <__libc_init_array+0x3c>)
 800d032:	1b64      	subs	r4, r4, r5
 800d034:	10a4      	asrs	r4, r4, #2
 800d036:	2600      	movs	r6, #0
 800d038:	42a6      	cmp	r6, r4
 800d03a:	d109      	bne.n	800d050 <__libc_init_array+0x24>
 800d03c:	4d0b      	ldr	r5, [pc, #44]	@ (800d06c <__libc_init_array+0x40>)
 800d03e:	4c0c      	ldr	r4, [pc, #48]	@ (800d070 <__libc_init_array+0x44>)
 800d040:	f002 f864 	bl	800f10c <_init>
 800d044:	1b64      	subs	r4, r4, r5
 800d046:	10a4      	asrs	r4, r4, #2
 800d048:	2600      	movs	r6, #0
 800d04a:	42a6      	cmp	r6, r4
 800d04c:	d105      	bne.n	800d05a <__libc_init_array+0x2e>
 800d04e:	bd70      	pop	{r4, r5, r6, pc}
 800d050:	f855 3b04 	ldr.w	r3, [r5], #4
 800d054:	4798      	blx	r3
 800d056:	3601      	adds	r6, #1
 800d058:	e7ee      	b.n	800d038 <__libc_init_array+0xc>
 800d05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d05e:	4798      	blx	r3
 800d060:	3601      	adds	r6, #1
 800d062:	e7f2      	b.n	800d04a <__libc_init_array+0x1e>
 800d064:	080101a0 	.word	0x080101a0
 800d068:	080101a0 	.word	0x080101a0
 800d06c:	080101a0 	.word	0x080101a0
 800d070:	080101a4 	.word	0x080101a4

0800d074 <__retarget_lock_init_recursive>:
 800d074:	4770      	bx	lr

0800d076 <__retarget_lock_acquire_recursive>:
 800d076:	4770      	bx	lr

0800d078 <__retarget_lock_release_recursive>:
 800d078:	4770      	bx	lr

0800d07a <memcpy>:
 800d07a:	440a      	add	r2, r1
 800d07c:	4291      	cmp	r1, r2
 800d07e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d082:	d100      	bne.n	800d086 <memcpy+0xc>
 800d084:	4770      	bx	lr
 800d086:	b510      	push	{r4, lr}
 800d088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d08c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d090:	4291      	cmp	r1, r2
 800d092:	d1f9      	bne.n	800d088 <memcpy+0xe>
 800d094:	bd10      	pop	{r4, pc}

0800d096 <quorem>:
 800d096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09a:	6903      	ldr	r3, [r0, #16]
 800d09c:	690c      	ldr	r4, [r1, #16]
 800d09e:	42a3      	cmp	r3, r4
 800d0a0:	4607      	mov	r7, r0
 800d0a2:	db7e      	blt.n	800d1a2 <quorem+0x10c>
 800d0a4:	3c01      	subs	r4, #1
 800d0a6:	f101 0814 	add.w	r8, r1, #20
 800d0aa:	00a3      	lsls	r3, r4, #2
 800d0ac:	f100 0514 	add.w	r5, r0, #20
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0cc:	d32e      	bcc.n	800d12c <quorem+0x96>
 800d0ce:	f04f 0a00 	mov.w	sl, #0
 800d0d2:	46c4      	mov	ip, r8
 800d0d4:	46ae      	mov	lr, r5
 800d0d6:	46d3      	mov	fp, sl
 800d0d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0dc:	b298      	uxth	r0, r3
 800d0de:	fb06 a000 	mla	r0, r6, r0, sl
 800d0e2:	0c02      	lsrs	r2, r0, #16
 800d0e4:	0c1b      	lsrs	r3, r3, #16
 800d0e6:	fb06 2303 	mla	r3, r6, r3, r2
 800d0ea:	f8de 2000 	ldr.w	r2, [lr]
 800d0ee:	b280      	uxth	r0, r0
 800d0f0:	b292      	uxth	r2, r2
 800d0f2:	1a12      	subs	r2, r2, r0
 800d0f4:	445a      	add	r2, fp
 800d0f6:	f8de 0000 	ldr.w	r0, [lr]
 800d0fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d104:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d108:	b292      	uxth	r2, r2
 800d10a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d10e:	45e1      	cmp	r9, ip
 800d110:	f84e 2b04 	str.w	r2, [lr], #4
 800d114:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d118:	d2de      	bcs.n	800d0d8 <quorem+0x42>
 800d11a:	9b00      	ldr	r3, [sp, #0]
 800d11c:	58eb      	ldr	r3, [r5, r3]
 800d11e:	b92b      	cbnz	r3, 800d12c <quorem+0x96>
 800d120:	9b01      	ldr	r3, [sp, #4]
 800d122:	3b04      	subs	r3, #4
 800d124:	429d      	cmp	r5, r3
 800d126:	461a      	mov	r2, r3
 800d128:	d32f      	bcc.n	800d18a <quorem+0xf4>
 800d12a:	613c      	str	r4, [r7, #16]
 800d12c:	4638      	mov	r0, r7
 800d12e:	f001 f979 	bl	800e424 <__mcmp>
 800d132:	2800      	cmp	r0, #0
 800d134:	db25      	blt.n	800d182 <quorem+0xec>
 800d136:	4629      	mov	r1, r5
 800d138:	2000      	movs	r0, #0
 800d13a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d13e:	f8d1 c000 	ldr.w	ip, [r1]
 800d142:	fa1f fe82 	uxth.w	lr, r2
 800d146:	fa1f f38c 	uxth.w	r3, ip
 800d14a:	eba3 030e 	sub.w	r3, r3, lr
 800d14e:	4403      	add	r3, r0
 800d150:	0c12      	lsrs	r2, r2, #16
 800d152:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d156:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d160:	45c1      	cmp	r9, r8
 800d162:	f841 3b04 	str.w	r3, [r1], #4
 800d166:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d16a:	d2e6      	bcs.n	800d13a <quorem+0xa4>
 800d16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d174:	b922      	cbnz	r2, 800d180 <quorem+0xea>
 800d176:	3b04      	subs	r3, #4
 800d178:	429d      	cmp	r5, r3
 800d17a:	461a      	mov	r2, r3
 800d17c:	d30b      	bcc.n	800d196 <quorem+0x100>
 800d17e:	613c      	str	r4, [r7, #16]
 800d180:	3601      	adds	r6, #1
 800d182:	4630      	mov	r0, r6
 800d184:	b003      	add	sp, #12
 800d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18a:	6812      	ldr	r2, [r2, #0]
 800d18c:	3b04      	subs	r3, #4
 800d18e:	2a00      	cmp	r2, #0
 800d190:	d1cb      	bne.n	800d12a <quorem+0x94>
 800d192:	3c01      	subs	r4, #1
 800d194:	e7c6      	b.n	800d124 <quorem+0x8e>
 800d196:	6812      	ldr	r2, [r2, #0]
 800d198:	3b04      	subs	r3, #4
 800d19a:	2a00      	cmp	r2, #0
 800d19c:	d1ef      	bne.n	800d17e <quorem+0xe8>
 800d19e:	3c01      	subs	r4, #1
 800d1a0:	e7ea      	b.n	800d178 <quorem+0xe2>
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	e7ee      	b.n	800d184 <quorem+0xee>
	...

0800d1a8 <_dtoa_r>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	69c7      	ldr	r7, [r0, #28]
 800d1ae:	b099      	sub	sp, #100	@ 0x64
 800d1b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1b4:	ec55 4b10 	vmov	r4, r5, d0
 800d1b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d1ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800d1bc:	4683      	mov	fp, r0
 800d1be:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1c2:	b97f      	cbnz	r7, 800d1e4 <_dtoa_r+0x3c>
 800d1c4:	2010      	movs	r0, #16
 800d1c6:	f000 fdfd 	bl	800ddc4 <malloc>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d1d0:	b920      	cbnz	r0, 800d1dc <_dtoa_r+0x34>
 800d1d2:	4ba7      	ldr	r3, [pc, #668]	@ (800d470 <_dtoa_r+0x2c8>)
 800d1d4:	21ef      	movs	r1, #239	@ 0xef
 800d1d6:	48a7      	ldr	r0, [pc, #668]	@ (800d474 <_dtoa_r+0x2cc>)
 800d1d8:	f001 fc5a 	bl	800ea90 <__assert_func>
 800d1dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d1e0:	6007      	str	r7, [r0, #0]
 800d1e2:	60c7      	str	r7, [r0, #12]
 800d1e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1e8:	6819      	ldr	r1, [r3, #0]
 800d1ea:	b159      	cbz	r1, 800d204 <_dtoa_r+0x5c>
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	604a      	str	r2, [r1, #4]
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	4093      	lsls	r3, r2
 800d1f4:	608b      	str	r3, [r1, #8]
 800d1f6:	4658      	mov	r0, fp
 800d1f8:	f000 feda 	bl	800dfb0 <_Bfree>
 800d1fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	1e2b      	subs	r3, r5, #0
 800d206:	bfb9      	ittee	lt
 800d208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d20c:	9303      	strlt	r3, [sp, #12]
 800d20e:	2300      	movge	r3, #0
 800d210:	6033      	strge	r3, [r6, #0]
 800d212:	9f03      	ldr	r7, [sp, #12]
 800d214:	4b98      	ldr	r3, [pc, #608]	@ (800d478 <_dtoa_r+0x2d0>)
 800d216:	bfbc      	itt	lt
 800d218:	2201      	movlt	r2, #1
 800d21a:	6032      	strlt	r2, [r6, #0]
 800d21c:	43bb      	bics	r3, r7
 800d21e:	d112      	bne.n	800d246 <_dtoa_r+0x9e>
 800d220:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d222:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d22c:	4323      	orrs	r3, r4
 800d22e:	f000 854d 	beq.w	800dccc <_dtoa_r+0xb24>
 800d232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d234:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d48c <_dtoa_r+0x2e4>
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 854f 	beq.w	800dcdc <_dtoa_r+0xb34>
 800d23e:	f10a 0303 	add.w	r3, sl, #3
 800d242:	f000 bd49 	b.w	800dcd8 <_dtoa_r+0xb30>
 800d246:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d24a:	2200      	movs	r2, #0
 800d24c:	ec51 0b17 	vmov	r0, r1, d7
 800d250:	2300      	movs	r3, #0
 800d252:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d256:	f7f3 fc47 	bl	8000ae8 <__aeabi_dcmpeq>
 800d25a:	4680      	mov	r8, r0
 800d25c:	b158      	cbz	r0, 800d276 <_dtoa_r+0xce>
 800d25e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d260:	2301      	movs	r3, #1
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d266:	b113      	cbz	r3, 800d26e <_dtoa_r+0xc6>
 800d268:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d26a:	4b84      	ldr	r3, [pc, #528]	@ (800d47c <_dtoa_r+0x2d4>)
 800d26c:	6013      	str	r3, [r2, #0]
 800d26e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d490 <_dtoa_r+0x2e8>
 800d272:	f000 bd33 	b.w	800dcdc <_dtoa_r+0xb34>
 800d276:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d27a:	aa16      	add	r2, sp, #88	@ 0x58
 800d27c:	a917      	add	r1, sp, #92	@ 0x5c
 800d27e:	4658      	mov	r0, fp
 800d280:	f001 f980 	bl	800e584 <__d2b>
 800d284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d288:	4681      	mov	r9, r0
 800d28a:	2e00      	cmp	r6, #0
 800d28c:	d077      	beq.n	800d37e <_dtoa_r+0x1d6>
 800d28e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d290:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d29c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4b74      	ldr	r3, [pc, #464]	@ (800d480 <_dtoa_r+0x2d8>)
 800d2ae:	f7f2 fffb 	bl	80002a8 <__aeabi_dsub>
 800d2b2:	a369      	add	r3, pc, #420	@ (adr r3, 800d458 <_dtoa_r+0x2b0>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f3 f9ae 	bl	8000618 <__aeabi_dmul>
 800d2bc:	a368      	add	r3, pc, #416	@ (adr r3, 800d460 <_dtoa_r+0x2b8>)
 800d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c2:	f7f2 fff3 	bl	80002ac <__adddf3>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	f7f3 f93a 	bl	8000544 <__aeabi_i2d>
 800d2d0:	a365      	add	r3, pc, #404	@ (adr r3, 800d468 <_dtoa_r+0x2c0>)
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	f7f3 f99f 	bl	8000618 <__aeabi_dmul>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4620      	mov	r0, r4
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	f7f2 ffe3 	bl	80002ac <__adddf3>
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	f7f3 fc45 	bl	8000b78 <__aeabi_d2iz>
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	4607      	mov	r7, r0
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	f7f3 fc00 	bl	8000afc <__aeabi_dcmplt>
 800d2fc:	b140      	cbz	r0, 800d310 <_dtoa_r+0x168>
 800d2fe:	4638      	mov	r0, r7
 800d300:	f7f3 f920 	bl	8000544 <__aeabi_i2d>
 800d304:	4622      	mov	r2, r4
 800d306:	462b      	mov	r3, r5
 800d308:	f7f3 fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800d30c:	b900      	cbnz	r0, 800d310 <_dtoa_r+0x168>
 800d30e:	3f01      	subs	r7, #1
 800d310:	2f16      	cmp	r7, #22
 800d312:	d851      	bhi.n	800d3b8 <_dtoa_r+0x210>
 800d314:	4b5b      	ldr	r3, [pc, #364]	@ (800d484 <_dtoa_r+0x2dc>)
 800d316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d322:	f7f3 fbeb 	bl	8000afc <__aeabi_dcmplt>
 800d326:	2800      	cmp	r0, #0
 800d328:	d048      	beq.n	800d3bc <_dtoa_r+0x214>
 800d32a:	3f01      	subs	r7, #1
 800d32c:	2300      	movs	r3, #0
 800d32e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d330:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d332:	1b9b      	subs	r3, r3, r6
 800d334:	1e5a      	subs	r2, r3, #1
 800d336:	bf44      	itt	mi
 800d338:	f1c3 0801 	rsbmi	r8, r3, #1
 800d33c:	2300      	movmi	r3, #0
 800d33e:	9208      	str	r2, [sp, #32]
 800d340:	bf54      	ite	pl
 800d342:	f04f 0800 	movpl.w	r8, #0
 800d346:	9308      	strmi	r3, [sp, #32]
 800d348:	2f00      	cmp	r7, #0
 800d34a:	db39      	blt.n	800d3c0 <_dtoa_r+0x218>
 800d34c:	9b08      	ldr	r3, [sp, #32]
 800d34e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d350:	443b      	add	r3, r7
 800d352:	9308      	str	r3, [sp, #32]
 800d354:	2300      	movs	r3, #0
 800d356:	930a      	str	r3, [sp, #40]	@ 0x28
 800d358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d35a:	2b09      	cmp	r3, #9
 800d35c:	d864      	bhi.n	800d428 <_dtoa_r+0x280>
 800d35e:	2b05      	cmp	r3, #5
 800d360:	bfc4      	itt	gt
 800d362:	3b04      	subgt	r3, #4
 800d364:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d368:	f1a3 0302 	sub.w	r3, r3, #2
 800d36c:	bfcc      	ite	gt
 800d36e:	2400      	movgt	r4, #0
 800d370:	2401      	movle	r4, #1
 800d372:	2b03      	cmp	r3, #3
 800d374:	d863      	bhi.n	800d43e <_dtoa_r+0x296>
 800d376:	e8df f003 	tbb	[pc, r3]
 800d37a:	372a      	.short	0x372a
 800d37c:	5535      	.short	0x5535
 800d37e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d382:	441e      	add	r6, r3
 800d384:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d388:	2b20      	cmp	r3, #32
 800d38a:	bfc1      	itttt	gt
 800d38c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d390:	409f      	lslgt	r7, r3
 800d392:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d396:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d39a:	bfd6      	itet	le
 800d39c:	f1c3 0320 	rsble	r3, r3, #32
 800d3a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d3a4:	fa04 f003 	lslle.w	r0, r4, r3
 800d3a8:	f7f3 f8bc 	bl	8000524 <__aeabi_ui2d>
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d3b2:	3e01      	subs	r6, #1
 800d3b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d3b6:	e777      	b.n	800d2a8 <_dtoa_r+0x100>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e7b8      	b.n	800d32e <_dtoa_r+0x186>
 800d3bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3be:	e7b7      	b.n	800d330 <_dtoa_r+0x188>
 800d3c0:	427b      	negs	r3, r7
 800d3c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	eba8 0807 	sub.w	r8, r8, r7
 800d3ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3cc:	e7c4      	b.n	800d358 <_dtoa_r+0x1b0>
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dc35      	bgt.n	800d444 <_dtoa_r+0x29c>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	9307      	str	r3, [sp, #28]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3e2:	e00b      	b.n	800d3fc <_dtoa_r+0x254>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e7f3      	b.n	800d3d0 <_dtoa_r+0x228>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ee:	18fb      	adds	r3, r7, r3
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	9307      	str	r3, [sp, #28]
 800d3f8:	bfb8      	it	lt
 800d3fa:	2301      	movlt	r3, #1
 800d3fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d400:	2100      	movs	r1, #0
 800d402:	2204      	movs	r2, #4
 800d404:	f102 0514 	add.w	r5, r2, #20
 800d408:	429d      	cmp	r5, r3
 800d40a:	d91f      	bls.n	800d44c <_dtoa_r+0x2a4>
 800d40c:	6041      	str	r1, [r0, #4]
 800d40e:	4658      	mov	r0, fp
 800d410:	f000 fd8e 	bl	800df30 <_Balloc>
 800d414:	4682      	mov	sl, r0
 800d416:	2800      	cmp	r0, #0
 800d418:	d13c      	bne.n	800d494 <_dtoa_r+0x2ec>
 800d41a:	4b1b      	ldr	r3, [pc, #108]	@ (800d488 <_dtoa_r+0x2e0>)
 800d41c:	4602      	mov	r2, r0
 800d41e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d422:	e6d8      	b.n	800d1d6 <_dtoa_r+0x2e>
 800d424:	2301      	movs	r3, #1
 800d426:	e7e0      	b.n	800d3ea <_dtoa_r+0x242>
 800d428:	2401      	movs	r4, #1
 800d42a:	2300      	movs	r3, #0
 800d42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d42e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d430:	f04f 33ff 	mov.w	r3, #4294967295
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	9307      	str	r3, [sp, #28]
 800d438:	2200      	movs	r2, #0
 800d43a:	2312      	movs	r3, #18
 800d43c:	e7d0      	b.n	800d3e0 <_dtoa_r+0x238>
 800d43e:	2301      	movs	r3, #1
 800d440:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d442:	e7f5      	b.n	800d430 <_dtoa_r+0x288>
 800d444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	9307      	str	r3, [sp, #28]
 800d44a:	e7d7      	b.n	800d3fc <_dtoa_r+0x254>
 800d44c:	3101      	adds	r1, #1
 800d44e:	0052      	lsls	r2, r2, #1
 800d450:	e7d8      	b.n	800d404 <_dtoa_r+0x25c>
 800d452:	bf00      	nop
 800d454:	f3af 8000 	nop.w
 800d458:	636f4361 	.word	0x636f4361
 800d45c:	3fd287a7 	.word	0x3fd287a7
 800d460:	8b60c8b3 	.word	0x8b60c8b3
 800d464:	3fc68a28 	.word	0x3fc68a28
 800d468:	509f79fb 	.word	0x509f79fb
 800d46c:	3fd34413 	.word	0x3fd34413
 800d470:	0800fe65 	.word	0x0800fe65
 800d474:	0800fe7c 	.word	0x0800fe7c
 800d478:	7ff00000 	.word	0x7ff00000
 800d47c:	0800fe35 	.word	0x0800fe35
 800d480:	3ff80000 	.word	0x3ff80000
 800d484:	0800ff78 	.word	0x0800ff78
 800d488:	0800fed4 	.word	0x0800fed4
 800d48c:	0800fe61 	.word	0x0800fe61
 800d490:	0800fe34 	.word	0x0800fe34
 800d494:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d498:	6018      	str	r0, [r3, #0]
 800d49a:	9b07      	ldr	r3, [sp, #28]
 800d49c:	2b0e      	cmp	r3, #14
 800d49e:	f200 80a4 	bhi.w	800d5ea <_dtoa_r+0x442>
 800d4a2:	2c00      	cmp	r4, #0
 800d4a4:	f000 80a1 	beq.w	800d5ea <_dtoa_r+0x442>
 800d4a8:	2f00      	cmp	r7, #0
 800d4aa:	dd33      	ble.n	800d514 <_dtoa_r+0x36c>
 800d4ac:	4bad      	ldr	r3, [pc, #692]	@ (800d764 <_dtoa_r+0x5bc>)
 800d4ae:	f007 020f 	and.w	r2, r7, #15
 800d4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b6:	ed93 7b00 	vldr	d7, [r3]
 800d4ba:	05f8      	lsls	r0, r7, #23
 800d4bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d4c4:	d516      	bpl.n	800d4f4 <_dtoa_r+0x34c>
 800d4c6:	4ba8      	ldr	r3, [pc, #672]	@ (800d768 <_dtoa_r+0x5c0>)
 800d4c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4d0:	f7f3 f9cc 	bl	800086c <__aeabi_ddiv>
 800d4d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4d8:	f004 040f 	and.w	r4, r4, #15
 800d4dc:	2603      	movs	r6, #3
 800d4de:	4da2      	ldr	r5, [pc, #648]	@ (800d768 <_dtoa_r+0x5c0>)
 800d4e0:	b954      	cbnz	r4, 800d4f8 <_dtoa_r+0x350>
 800d4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ea:	f7f3 f9bf 	bl	800086c <__aeabi_ddiv>
 800d4ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4f2:	e028      	b.n	800d546 <_dtoa_r+0x39e>
 800d4f4:	2602      	movs	r6, #2
 800d4f6:	e7f2      	b.n	800d4de <_dtoa_r+0x336>
 800d4f8:	07e1      	lsls	r1, r4, #31
 800d4fa:	d508      	bpl.n	800d50e <_dtoa_r+0x366>
 800d4fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d500:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d504:	f7f3 f888 	bl	8000618 <__aeabi_dmul>
 800d508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d50c:	3601      	adds	r6, #1
 800d50e:	1064      	asrs	r4, r4, #1
 800d510:	3508      	adds	r5, #8
 800d512:	e7e5      	b.n	800d4e0 <_dtoa_r+0x338>
 800d514:	f000 80d2 	beq.w	800d6bc <_dtoa_r+0x514>
 800d518:	427c      	negs	r4, r7
 800d51a:	4b92      	ldr	r3, [pc, #584]	@ (800d764 <_dtoa_r+0x5bc>)
 800d51c:	4d92      	ldr	r5, [pc, #584]	@ (800d768 <_dtoa_r+0x5c0>)
 800d51e:	f004 020f 	and.w	r2, r4, #15
 800d522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d52e:	f7f3 f873 	bl	8000618 <__aeabi_dmul>
 800d532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d536:	1124      	asrs	r4, r4, #4
 800d538:	2300      	movs	r3, #0
 800d53a:	2602      	movs	r6, #2
 800d53c:	2c00      	cmp	r4, #0
 800d53e:	f040 80b2 	bne.w	800d6a6 <_dtoa_r+0x4fe>
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1d3      	bne.n	800d4ee <_dtoa_r+0x346>
 800d546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d548:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 80b7 	beq.w	800d6c0 <_dtoa_r+0x518>
 800d552:	4b86      	ldr	r3, [pc, #536]	@ (800d76c <_dtoa_r+0x5c4>)
 800d554:	2200      	movs	r2, #0
 800d556:	4620      	mov	r0, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	f7f3 facf 	bl	8000afc <__aeabi_dcmplt>
 800d55e:	2800      	cmp	r0, #0
 800d560:	f000 80ae 	beq.w	800d6c0 <_dtoa_r+0x518>
 800d564:	9b07      	ldr	r3, [sp, #28]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 80aa 	beq.w	800d6c0 <_dtoa_r+0x518>
 800d56c:	9b00      	ldr	r3, [sp, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	dd37      	ble.n	800d5e2 <_dtoa_r+0x43a>
 800d572:	1e7b      	subs	r3, r7, #1
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	4620      	mov	r0, r4
 800d578:	4b7d      	ldr	r3, [pc, #500]	@ (800d770 <_dtoa_r+0x5c8>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	4629      	mov	r1, r5
 800d57e:	f7f3 f84b 	bl	8000618 <__aeabi_dmul>
 800d582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d586:	9c00      	ldr	r4, [sp, #0]
 800d588:	3601      	adds	r6, #1
 800d58a:	4630      	mov	r0, r6
 800d58c:	f7f2 ffda 	bl	8000544 <__aeabi_i2d>
 800d590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d594:	f7f3 f840 	bl	8000618 <__aeabi_dmul>
 800d598:	4b76      	ldr	r3, [pc, #472]	@ (800d774 <_dtoa_r+0x5cc>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	f7f2 fe86 	bl	80002ac <__adddf3>
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d5a6:	2c00      	cmp	r4, #0
 800d5a8:	f040 808d 	bne.w	800d6c6 <_dtoa_r+0x51e>
 800d5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b0:	4b71      	ldr	r3, [pc, #452]	@ (800d778 <_dtoa_r+0x5d0>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f7f2 fe78 	bl	80002a8 <__aeabi_dsub>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5c0:	462a      	mov	r2, r5
 800d5c2:	4633      	mov	r3, r6
 800d5c4:	f7f3 fab8 	bl	8000b38 <__aeabi_dcmpgt>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	f040 828b 	bne.w	800dae4 <_dtoa_r+0x93c>
 800d5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5d2:	462a      	mov	r2, r5
 800d5d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5d8:	f7f3 fa90 	bl	8000afc <__aeabi_dcmplt>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	f040 8128 	bne.w	800d832 <_dtoa_r+0x68a>
 800d5e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d5e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d5ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f2c0 815a 	blt.w	800d8a6 <_dtoa_r+0x6fe>
 800d5f2:	2f0e      	cmp	r7, #14
 800d5f4:	f300 8157 	bgt.w	800d8a6 <_dtoa_r+0x6fe>
 800d5f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d764 <_dtoa_r+0x5bc>)
 800d5fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5fe:	ed93 7b00 	vldr	d7, [r3]
 800d602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d604:	2b00      	cmp	r3, #0
 800d606:	ed8d 7b00 	vstr	d7, [sp]
 800d60a:	da03      	bge.n	800d614 <_dtoa_r+0x46c>
 800d60c:	9b07      	ldr	r3, [sp, #28]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f340 8101 	ble.w	800d816 <_dtoa_r+0x66e>
 800d614:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d618:	4656      	mov	r6, sl
 800d61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	f7f3 f923 	bl	800086c <__aeabi_ddiv>
 800d626:	f7f3 faa7 	bl	8000b78 <__aeabi_d2iz>
 800d62a:	4680      	mov	r8, r0
 800d62c:	f7f2 ff8a 	bl	8000544 <__aeabi_i2d>
 800d630:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d634:	f7f2 fff0 	bl	8000618 <__aeabi_dmul>
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d644:	f7f2 fe30 	bl	80002a8 <__aeabi_dsub>
 800d648:	f806 4b01 	strb.w	r4, [r6], #1
 800d64c:	9d07      	ldr	r5, [sp, #28]
 800d64e:	eba6 040a 	sub.w	r4, r6, sl
 800d652:	42a5      	cmp	r5, r4
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	f040 8117 	bne.w	800d88a <_dtoa_r+0x6e2>
 800d65c:	f7f2 fe26 	bl	80002ac <__adddf3>
 800d660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d664:	4604      	mov	r4, r0
 800d666:	460d      	mov	r5, r1
 800d668:	f7f3 fa66 	bl	8000b38 <__aeabi_dcmpgt>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f040 80f9 	bne.w	800d864 <_dtoa_r+0x6bc>
 800d672:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d676:	4620      	mov	r0, r4
 800d678:	4629      	mov	r1, r5
 800d67a:	f7f3 fa35 	bl	8000ae8 <__aeabi_dcmpeq>
 800d67e:	b118      	cbz	r0, 800d688 <_dtoa_r+0x4e0>
 800d680:	f018 0f01 	tst.w	r8, #1
 800d684:	f040 80ee 	bne.w	800d864 <_dtoa_r+0x6bc>
 800d688:	4649      	mov	r1, r9
 800d68a:	4658      	mov	r0, fp
 800d68c:	f000 fc90 	bl	800dfb0 <_Bfree>
 800d690:	2300      	movs	r3, #0
 800d692:	7033      	strb	r3, [r6, #0]
 800d694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d696:	3701      	adds	r7, #1
 800d698:	601f      	str	r7, [r3, #0]
 800d69a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f000 831d 	beq.w	800dcdc <_dtoa_r+0xb34>
 800d6a2:	601e      	str	r6, [r3, #0]
 800d6a4:	e31a      	b.n	800dcdc <_dtoa_r+0xb34>
 800d6a6:	07e2      	lsls	r2, r4, #31
 800d6a8:	d505      	bpl.n	800d6b6 <_dtoa_r+0x50e>
 800d6aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6ae:	f7f2 ffb3 	bl	8000618 <__aeabi_dmul>
 800d6b2:	3601      	adds	r6, #1
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	1064      	asrs	r4, r4, #1
 800d6b8:	3508      	adds	r5, #8
 800d6ba:	e73f      	b.n	800d53c <_dtoa_r+0x394>
 800d6bc:	2602      	movs	r6, #2
 800d6be:	e742      	b.n	800d546 <_dtoa_r+0x39e>
 800d6c0:	9c07      	ldr	r4, [sp, #28]
 800d6c2:	9704      	str	r7, [sp, #16]
 800d6c4:	e761      	b.n	800d58a <_dtoa_r+0x3e2>
 800d6c6:	4b27      	ldr	r3, [pc, #156]	@ (800d764 <_dtoa_r+0x5bc>)
 800d6c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6d2:	4454      	add	r4, sl
 800d6d4:	2900      	cmp	r1, #0
 800d6d6:	d053      	beq.n	800d780 <_dtoa_r+0x5d8>
 800d6d8:	4928      	ldr	r1, [pc, #160]	@ (800d77c <_dtoa_r+0x5d4>)
 800d6da:	2000      	movs	r0, #0
 800d6dc:	f7f3 f8c6 	bl	800086c <__aeabi_ddiv>
 800d6e0:	4633      	mov	r3, r6
 800d6e2:	462a      	mov	r2, r5
 800d6e4:	f7f2 fde0 	bl	80002a8 <__aeabi_dsub>
 800d6e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6ec:	4656      	mov	r6, sl
 800d6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6f2:	f7f3 fa41 	bl	8000b78 <__aeabi_d2iz>
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	f7f2 ff24 	bl	8000544 <__aeabi_i2d>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d704:	f7f2 fdd0 	bl	80002a8 <__aeabi_dsub>
 800d708:	3530      	adds	r5, #48	@ 0x30
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d712:	f806 5b01 	strb.w	r5, [r6], #1
 800d716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d71a:	f7f3 f9ef 	bl	8000afc <__aeabi_dcmplt>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d171      	bne.n	800d806 <_dtoa_r+0x65e>
 800d722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d726:	4911      	ldr	r1, [pc, #68]	@ (800d76c <_dtoa_r+0x5c4>)
 800d728:	2000      	movs	r0, #0
 800d72a:	f7f2 fdbd 	bl	80002a8 <__aeabi_dsub>
 800d72e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d732:	f7f3 f9e3 	bl	8000afc <__aeabi_dcmplt>
 800d736:	2800      	cmp	r0, #0
 800d738:	f040 8095 	bne.w	800d866 <_dtoa_r+0x6be>
 800d73c:	42a6      	cmp	r6, r4
 800d73e:	f43f af50 	beq.w	800d5e2 <_dtoa_r+0x43a>
 800d742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d746:	4b0a      	ldr	r3, [pc, #40]	@ (800d770 <_dtoa_r+0x5c8>)
 800d748:	2200      	movs	r2, #0
 800d74a:	f7f2 ff65 	bl	8000618 <__aeabi_dmul>
 800d74e:	4b08      	ldr	r3, [pc, #32]	@ (800d770 <_dtoa_r+0x5c8>)
 800d750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d754:	2200      	movs	r2, #0
 800d756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d75a:	f7f2 ff5d 	bl	8000618 <__aeabi_dmul>
 800d75e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d762:	e7c4      	b.n	800d6ee <_dtoa_r+0x546>
 800d764:	0800ff78 	.word	0x0800ff78
 800d768:	0800ff50 	.word	0x0800ff50
 800d76c:	3ff00000 	.word	0x3ff00000
 800d770:	40240000 	.word	0x40240000
 800d774:	401c0000 	.word	0x401c0000
 800d778:	40140000 	.word	0x40140000
 800d77c:	3fe00000 	.word	0x3fe00000
 800d780:	4631      	mov	r1, r6
 800d782:	4628      	mov	r0, r5
 800d784:	f7f2 ff48 	bl	8000618 <__aeabi_dmul>
 800d788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d78c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d78e:	4656      	mov	r6, sl
 800d790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d794:	f7f3 f9f0 	bl	8000b78 <__aeabi_d2iz>
 800d798:	4605      	mov	r5, r0
 800d79a:	f7f2 fed3 	bl	8000544 <__aeabi_i2d>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7a6:	f7f2 fd7f 	bl	80002a8 <__aeabi_dsub>
 800d7aa:	3530      	adds	r5, #48	@ 0x30
 800d7ac:	f806 5b01 	strb.w	r5, [r6], #1
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	42a6      	cmp	r6, r4
 800d7b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7ba:	f04f 0200 	mov.w	r2, #0
 800d7be:	d124      	bne.n	800d80a <_dtoa_r+0x662>
 800d7c0:	4bac      	ldr	r3, [pc, #688]	@ (800da74 <_dtoa_r+0x8cc>)
 800d7c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7c6:	f7f2 fd71 	bl	80002ac <__adddf3>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7d2:	f7f3 f9b1 	bl	8000b38 <__aeabi_dcmpgt>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d145      	bne.n	800d866 <_dtoa_r+0x6be>
 800d7da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7de:	49a5      	ldr	r1, [pc, #660]	@ (800da74 <_dtoa_r+0x8cc>)
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	f7f2 fd61 	bl	80002a8 <__aeabi_dsub>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ee:	f7f3 f985 	bl	8000afc <__aeabi_dcmplt>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f43f aef5 	beq.w	800d5e2 <_dtoa_r+0x43a>
 800d7f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d7fa:	1e73      	subs	r3, r6, #1
 800d7fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d802:	2b30      	cmp	r3, #48	@ 0x30
 800d804:	d0f8      	beq.n	800d7f8 <_dtoa_r+0x650>
 800d806:	9f04      	ldr	r7, [sp, #16]
 800d808:	e73e      	b.n	800d688 <_dtoa_r+0x4e0>
 800d80a:	4b9b      	ldr	r3, [pc, #620]	@ (800da78 <_dtoa_r+0x8d0>)
 800d80c:	f7f2 ff04 	bl	8000618 <__aeabi_dmul>
 800d810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d814:	e7bc      	b.n	800d790 <_dtoa_r+0x5e8>
 800d816:	d10c      	bne.n	800d832 <_dtoa_r+0x68a>
 800d818:	4b98      	ldr	r3, [pc, #608]	@ (800da7c <_dtoa_r+0x8d4>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d820:	f7f2 fefa 	bl	8000618 <__aeabi_dmul>
 800d824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d828:	f7f3 f97c 	bl	8000b24 <__aeabi_dcmpge>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	f000 8157 	beq.w	800dae0 <_dtoa_r+0x938>
 800d832:	2400      	movs	r4, #0
 800d834:	4625      	mov	r5, r4
 800d836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d838:	43db      	mvns	r3, r3
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	4656      	mov	r6, sl
 800d83e:	2700      	movs	r7, #0
 800d840:	4621      	mov	r1, r4
 800d842:	4658      	mov	r0, fp
 800d844:	f000 fbb4 	bl	800dfb0 <_Bfree>
 800d848:	2d00      	cmp	r5, #0
 800d84a:	d0dc      	beq.n	800d806 <_dtoa_r+0x65e>
 800d84c:	b12f      	cbz	r7, 800d85a <_dtoa_r+0x6b2>
 800d84e:	42af      	cmp	r7, r5
 800d850:	d003      	beq.n	800d85a <_dtoa_r+0x6b2>
 800d852:	4639      	mov	r1, r7
 800d854:	4658      	mov	r0, fp
 800d856:	f000 fbab 	bl	800dfb0 <_Bfree>
 800d85a:	4629      	mov	r1, r5
 800d85c:	4658      	mov	r0, fp
 800d85e:	f000 fba7 	bl	800dfb0 <_Bfree>
 800d862:	e7d0      	b.n	800d806 <_dtoa_r+0x65e>
 800d864:	9704      	str	r7, [sp, #16]
 800d866:	4633      	mov	r3, r6
 800d868:	461e      	mov	r6, r3
 800d86a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d86e:	2a39      	cmp	r2, #57	@ 0x39
 800d870:	d107      	bne.n	800d882 <_dtoa_r+0x6da>
 800d872:	459a      	cmp	sl, r3
 800d874:	d1f8      	bne.n	800d868 <_dtoa_r+0x6c0>
 800d876:	9a04      	ldr	r2, [sp, #16]
 800d878:	3201      	adds	r2, #1
 800d87a:	9204      	str	r2, [sp, #16]
 800d87c:	2230      	movs	r2, #48	@ 0x30
 800d87e:	f88a 2000 	strb.w	r2, [sl]
 800d882:	781a      	ldrb	r2, [r3, #0]
 800d884:	3201      	adds	r2, #1
 800d886:	701a      	strb	r2, [r3, #0]
 800d888:	e7bd      	b.n	800d806 <_dtoa_r+0x65e>
 800d88a:	4b7b      	ldr	r3, [pc, #492]	@ (800da78 <_dtoa_r+0x8d0>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	f7f2 fec3 	bl	8000618 <__aeabi_dmul>
 800d892:	2200      	movs	r2, #0
 800d894:	2300      	movs	r3, #0
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	f7f3 f925 	bl	8000ae8 <__aeabi_dcmpeq>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	f43f aebb 	beq.w	800d61a <_dtoa_r+0x472>
 800d8a4:	e6f0      	b.n	800d688 <_dtoa_r+0x4e0>
 800d8a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d8a8:	2a00      	cmp	r2, #0
 800d8aa:	f000 80db 	beq.w	800da64 <_dtoa_r+0x8bc>
 800d8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8b0:	2a01      	cmp	r2, #1
 800d8b2:	f300 80bf 	bgt.w	800da34 <_dtoa_r+0x88c>
 800d8b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d8b8:	2a00      	cmp	r2, #0
 800d8ba:	f000 80b7 	beq.w	800da2c <_dtoa_r+0x884>
 800d8be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d8c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8c4:	4646      	mov	r6, r8
 800d8c6:	9a08      	ldr	r2, [sp, #32]
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	441a      	add	r2, r3
 800d8cc:	4658      	mov	r0, fp
 800d8ce:	4498      	add	r8, r3
 800d8d0:	9208      	str	r2, [sp, #32]
 800d8d2:	f000 fc21 	bl	800e118 <__i2b>
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	b15e      	cbz	r6, 800d8f2 <_dtoa_r+0x74a>
 800d8da:	9b08      	ldr	r3, [sp, #32]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	dd08      	ble.n	800d8f2 <_dtoa_r+0x74a>
 800d8e0:	42b3      	cmp	r3, r6
 800d8e2:	9a08      	ldr	r2, [sp, #32]
 800d8e4:	bfa8      	it	ge
 800d8e6:	4633      	movge	r3, r6
 800d8e8:	eba8 0803 	sub.w	r8, r8, r3
 800d8ec:	1af6      	subs	r6, r6, r3
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	9308      	str	r3, [sp, #32]
 800d8f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8f4:	b1f3      	cbz	r3, 800d934 <_dtoa_r+0x78c>
 800d8f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 80b7 	beq.w	800da6c <_dtoa_r+0x8c4>
 800d8fe:	b18c      	cbz	r4, 800d924 <_dtoa_r+0x77c>
 800d900:	4629      	mov	r1, r5
 800d902:	4622      	mov	r2, r4
 800d904:	4658      	mov	r0, fp
 800d906:	f000 fcc7 	bl	800e298 <__pow5mult>
 800d90a:	464a      	mov	r2, r9
 800d90c:	4601      	mov	r1, r0
 800d90e:	4605      	mov	r5, r0
 800d910:	4658      	mov	r0, fp
 800d912:	f000 fc17 	bl	800e144 <__multiply>
 800d916:	4649      	mov	r1, r9
 800d918:	9004      	str	r0, [sp, #16]
 800d91a:	4658      	mov	r0, fp
 800d91c:	f000 fb48 	bl	800dfb0 <_Bfree>
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	4699      	mov	r9, r3
 800d924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d926:	1b1a      	subs	r2, r3, r4
 800d928:	d004      	beq.n	800d934 <_dtoa_r+0x78c>
 800d92a:	4649      	mov	r1, r9
 800d92c:	4658      	mov	r0, fp
 800d92e:	f000 fcb3 	bl	800e298 <__pow5mult>
 800d932:	4681      	mov	r9, r0
 800d934:	2101      	movs	r1, #1
 800d936:	4658      	mov	r0, fp
 800d938:	f000 fbee 	bl	800e118 <__i2b>
 800d93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d93e:	4604      	mov	r4, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 81cf 	beq.w	800dce4 <_dtoa_r+0xb3c>
 800d946:	461a      	mov	r2, r3
 800d948:	4601      	mov	r1, r0
 800d94a:	4658      	mov	r0, fp
 800d94c:	f000 fca4 	bl	800e298 <__pow5mult>
 800d950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d952:	2b01      	cmp	r3, #1
 800d954:	4604      	mov	r4, r0
 800d956:	f300 8095 	bgt.w	800da84 <_dtoa_r+0x8dc>
 800d95a:	9b02      	ldr	r3, [sp, #8]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 8087 	bne.w	800da70 <_dtoa_r+0x8c8>
 800d962:	9b03      	ldr	r3, [sp, #12]
 800d964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f040 8089 	bne.w	800da80 <_dtoa_r+0x8d8>
 800d96e:	9b03      	ldr	r3, [sp, #12]
 800d970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d974:	0d1b      	lsrs	r3, r3, #20
 800d976:	051b      	lsls	r3, r3, #20
 800d978:	b12b      	cbz	r3, 800d986 <_dtoa_r+0x7de>
 800d97a:	9b08      	ldr	r3, [sp, #32]
 800d97c:	3301      	adds	r3, #1
 800d97e:	9308      	str	r3, [sp, #32]
 800d980:	f108 0801 	add.w	r8, r8, #1
 800d984:	2301      	movs	r3, #1
 800d986:	930a      	str	r3, [sp, #40]	@ 0x28
 800d988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f000 81b0 	beq.w	800dcf0 <_dtoa_r+0xb48>
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d996:	6918      	ldr	r0, [r3, #16]
 800d998:	f000 fb72 	bl	800e080 <__hi0bits>
 800d99c:	f1c0 0020 	rsb	r0, r0, #32
 800d9a0:	9b08      	ldr	r3, [sp, #32]
 800d9a2:	4418      	add	r0, r3
 800d9a4:	f010 001f 	ands.w	r0, r0, #31
 800d9a8:	d077      	beq.n	800da9a <_dtoa_r+0x8f2>
 800d9aa:	f1c0 0320 	rsb	r3, r0, #32
 800d9ae:	2b04      	cmp	r3, #4
 800d9b0:	dd6b      	ble.n	800da8a <_dtoa_r+0x8e2>
 800d9b2:	9b08      	ldr	r3, [sp, #32]
 800d9b4:	f1c0 001c 	rsb	r0, r0, #28
 800d9b8:	4403      	add	r3, r0
 800d9ba:	4480      	add	r8, r0
 800d9bc:	4406      	add	r6, r0
 800d9be:	9308      	str	r3, [sp, #32]
 800d9c0:	f1b8 0f00 	cmp.w	r8, #0
 800d9c4:	dd05      	ble.n	800d9d2 <_dtoa_r+0x82a>
 800d9c6:	4649      	mov	r1, r9
 800d9c8:	4642      	mov	r2, r8
 800d9ca:	4658      	mov	r0, fp
 800d9cc:	f000 fcbe 	bl	800e34c <__lshift>
 800d9d0:	4681      	mov	r9, r0
 800d9d2:	9b08      	ldr	r3, [sp, #32]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	dd05      	ble.n	800d9e4 <_dtoa_r+0x83c>
 800d9d8:	4621      	mov	r1, r4
 800d9da:	461a      	mov	r2, r3
 800d9dc:	4658      	mov	r0, fp
 800d9de:	f000 fcb5 	bl	800e34c <__lshift>
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d059      	beq.n	800da9e <_dtoa_r+0x8f6>
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fd19 	bl	800e424 <__mcmp>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	da53      	bge.n	800da9e <_dtoa_r+0x8f6>
 800d9f6:	1e7b      	subs	r3, r7, #1
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	220a      	movs	r2, #10
 800da00:	4658      	mov	r0, fp
 800da02:	f000 faf7 	bl	800dff4 <__multadd>
 800da06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da08:	4681      	mov	r9, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 8172 	beq.w	800dcf4 <_dtoa_r+0xb4c>
 800da10:	2300      	movs	r3, #0
 800da12:	4629      	mov	r1, r5
 800da14:	220a      	movs	r2, #10
 800da16:	4658      	mov	r0, fp
 800da18:	f000 faec 	bl	800dff4 <__multadd>
 800da1c:	9b00      	ldr	r3, [sp, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	4605      	mov	r5, r0
 800da22:	dc67      	bgt.n	800daf4 <_dtoa_r+0x94c>
 800da24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da26:	2b02      	cmp	r3, #2
 800da28:	dc41      	bgt.n	800daae <_dtoa_r+0x906>
 800da2a:	e063      	b.n	800daf4 <_dtoa_r+0x94c>
 800da2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da32:	e746      	b.n	800d8c2 <_dtoa_r+0x71a>
 800da34:	9b07      	ldr	r3, [sp, #28]
 800da36:	1e5c      	subs	r4, r3, #1
 800da38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	bfbf      	itttt	lt
 800da3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800da42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800da44:	1ae3      	sublt	r3, r4, r3
 800da46:	bfb4      	ite	lt
 800da48:	18d2      	addlt	r2, r2, r3
 800da4a:	1b1c      	subge	r4, r3, r4
 800da4c:	9b07      	ldr	r3, [sp, #28]
 800da4e:	bfbc      	itt	lt
 800da50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800da52:	2400      	movlt	r4, #0
 800da54:	2b00      	cmp	r3, #0
 800da56:	bfb5      	itete	lt
 800da58:	eba8 0603 	sublt.w	r6, r8, r3
 800da5c:	9b07      	ldrge	r3, [sp, #28]
 800da5e:	2300      	movlt	r3, #0
 800da60:	4646      	movge	r6, r8
 800da62:	e730      	b.n	800d8c6 <_dtoa_r+0x71e>
 800da64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800da68:	4646      	mov	r6, r8
 800da6a:	e735      	b.n	800d8d8 <_dtoa_r+0x730>
 800da6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da6e:	e75c      	b.n	800d92a <_dtoa_r+0x782>
 800da70:	2300      	movs	r3, #0
 800da72:	e788      	b.n	800d986 <_dtoa_r+0x7de>
 800da74:	3fe00000 	.word	0x3fe00000
 800da78:	40240000 	.word	0x40240000
 800da7c:	40140000 	.word	0x40140000
 800da80:	9b02      	ldr	r3, [sp, #8]
 800da82:	e780      	b.n	800d986 <_dtoa_r+0x7de>
 800da84:	2300      	movs	r3, #0
 800da86:	930a      	str	r3, [sp, #40]	@ 0x28
 800da88:	e782      	b.n	800d990 <_dtoa_r+0x7e8>
 800da8a:	d099      	beq.n	800d9c0 <_dtoa_r+0x818>
 800da8c:	9a08      	ldr	r2, [sp, #32]
 800da8e:	331c      	adds	r3, #28
 800da90:	441a      	add	r2, r3
 800da92:	4498      	add	r8, r3
 800da94:	441e      	add	r6, r3
 800da96:	9208      	str	r2, [sp, #32]
 800da98:	e792      	b.n	800d9c0 <_dtoa_r+0x818>
 800da9a:	4603      	mov	r3, r0
 800da9c:	e7f6      	b.n	800da8c <_dtoa_r+0x8e4>
 800da9e:	9b07      	ldr	r3, [sp, #28]
 800daa0:	9704      	str	r7, [sp, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dc20      	bgt.n	800dae8 <_dtoa_r+0x940>
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daaa:	2b02      	cmp	r3, #2
 800daac:	dd1e      	ble.n	800daec <_dtoa_r+0x944>
 800daae:	9b00      	ldr	r3, [sp, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f47f aec0 	bne.w	800d836 <_dtoa_r+0x68e>
 800dab6:	4621      	mov	r1, r4
 800dab8:	2205      	movs	r2, #5
 800daba:	4658      	mov	r0, fp
 800dabc:	f000 fa9a 	bl	800dff4 <__multadd>
 800dac0:	4601      	mov	r1, r0
 800dac2:	4604      	mov	r4, r0
 800dac4:	4648      	mov	r0, r9
 800dac6:	f000 fcad 	bl	800e424 <__mcmp>
 800daca:	2800      	cmp	r0, #0
 800dacc:	f77f aeb3 	ble.w	800d836 <_dtoa_r+0x68e>
 800dad0:	4656      	mov	r6, sl
 800dad2:	2331      	movs	r3, #49	@ 0x31
 800dad4:	f806 3b01 	strb.w	r3, [r6], #1
 800dad8:	9b04      	ldr	r3, [sp, #16]
 800dada:	3301      	adds	r3, #1
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	e6ae      	b.n	800d83e <_dtoa_r+0x696>
 800dae0:	9c07      	ldr	r4, [sp, #28]
 800dae2:	9704      	str	r7, [sp, #16]
 800dae4:	4625      	mov	r5, r4
 800dae6:	e7f3      	b.n	800dad0 <_dtoa_r+0x928>
 800dae8:	9b07      	ldr	r3, [sp, #28]
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 8104 	beq.w	800dcfc <_dtoa_r+0xb54>
 800daf4:	2e00      	cmp	r6, #0
 800daf6:	dd05      	ble.n	800db04 <_dtoa_r+0x95c>
 800daf8:	4629      	mov	r1, r5
 800dafa:	4632      	mov	r2, r6
 800dafc:	4658      	mov	r0, fp
 800dafe:	f000 fc25 	bl	800e34c <__lshift>
 800db02:	4605      	mov	r5, r0
 800db04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db06:	2b00      	cmp	r3, #0
 800db08:	d05a      	beq.n	800dbc0 <_dtoa_r+0xa18>
 800db0a:	6869      	ldr	r1, [r5, #4]
 800db0c:	4658      	mov	r0, fp
 800db0e:	f000 fa0f 	bl	800df30 <_Balloc>
 800db12:	4606      	mov	r6, r0
 800db14:	b928      	cbnz	r0, 800db22 <_dtoa_r+0x97a>
 800db16:	4b84      	ldr	r3, [pc, #528]	@ (800dd28 <_dtoa_r+0xb80>)
 800db18:	4602      	mov	r2, r0
 800db1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db1e:	f7ff bb5a 	b.w	800d1d6 <_dtoa_r+0x2e>
 800db22:	692a      	ldr	r2, [r5, #16]
 800db24:	3202      	adds	r2, #2
 800db26:	0092      	lsls	r2, r2, #2
 800db28:	f105 010c 	add.w	r1, r5, #12
 800db2c:	300c      	adds	r0, #12
 800db2e:	f7ff faa4 	bl	800d07a <memcpy>
 800db32:	2201      	movs	r2, #1
 800db34:	4631      	mov	r1, r6
 800db36:	4658      	mov	r0, fp
 800db38:	f000 fc08 	bl	800e34c <__lshift>
 800db3c:	f10a 0301 	add.w	r3, sl, #1
 800db40:	9307      	str	r3, [sp, #28]
 800db42:	9b00      	ldr	r3, [sp, #0]
 800db44:	4453      	add	r3, sl
 800db46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db48:	9b02      	ldr	r3, [sp, #8]
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	462f      	mov	r7, r5
 800db50:	930a      	str	r3, [sp, #40]	@ 0x28
 800db52:	4605      	mov	r5, r0
 800db54:	9b07      	ldr	r3, [sp, #28]
 800db56:	4621      	mov	r1, r4
 800db58:	3b01      	subs	r3, #1
 800db5a:	4648      	mov	r0, r9
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	f7ff fa9a 	bl	800d096 <quorem>
 800db62:	4639      	mov	r1, r7
 800db64:	9002      	str	r0, [sp, #8]
 800db66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db6a:	4648      	mov	r0, r9
 800db6c:	f000 fc5a 	bl	800e424 <__mcmp>
 800db70:	462a      	mov	r2, r5
 800db72:	9008      	str	r0, [sp, #32]
 800db74:	4621      	mov	r1, r4
 800db76:	4658      	mov	r0, fp
 800db78:	f000 fc70 	bl	800e45c <__mdiff>
 800db7c:	68c2      	ldr	r2, [r0, #12]
 800db7e:	4606      	mov	r6, r0
 800db80:	bb02      	cbnz	r2, 800dbc4 <_dtoa_r+0xa1c>
 800db82:	4601      	mov	r1, r0
 800db84:	4648      	mov	r0, r9
 800db86:	f000 fc4d 	bl	800e424 <__mcmp>
 800db8a:	4602      	mov	r2, r0
 800db8c:	4631      	mov	r1, r6
 800db8e:	4658      	mov	r0, fp
 800db90:	920e      	str	r2, [sp, #56]	@ 0x38
 800db92:	f000 fa0d 	bl	800dfb0 <_Bfree>
 800db96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db9a:	9e07      	ldr	r6, [sp, #28]
 800db9c:	ea43 0102 	orr.w	r1, r3, r2
 800dba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba2:	4319      	orrs	r1, r3
 800dba4:	d110      	bne.n	800dbc8 <_dtoa_r+0xa20>
 800dba6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbaa:	d029      	beq.n	800dc00 <_dtoa_r+0xa58>
 800dbac:	9b08      	ldr	r3, [sp, #32]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	dd02      	ble.n	800dbb8 <_dtoa_r+0xa10>
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dbb8:	9b00      	ldr	r3, [sp, #0]
 800dbba:	f883 8000 	strb.w	r8, [r3]
 800dbbe:	e63f      	b.n	800d840 <_dtoa_r+0x698>
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	e7bb      	b.n	800db3c <_dtoa_r+0x994>
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	e7e1      	b.n	800db8c <_dtoa_r+0x9e4>
 800dbc8:	9b08      	ldr	r3, [sp, #32]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	db04      	blt.n	800dbd8 <_dtoa_r+0xa30>
 800dbce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbd0:	430b      	orrs	r3, r1
 800dbd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dbd4:	430b      	orrs	r3, r1
 800dbd6:	d120      	bne.n	800dc1a <_dtoa_r+0xa72>
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	dded      	ble.n	800dbb8 <_dtoa_r+0xa10>
 800dbdc:	4649      	mov	r1, r9
 800dbde:	2201      	movs	r2, #1
 800dbe0:	4658      	mov	r0, fp
 800dbe2:	f000 fbb3 	bl	800e34c <__lshift>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4681      	mov	r9, r0
 800dbea:	f000 fc1b 	bl	800e424 <__mcmp>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	dc03      	bgt.n	800dbfa <_dtoa_r+0xa52>
 800dbf2:	d1e1      	bne.n	800dbb8 <_dtoa_r+0xa10>
 800dbf4:	f018 0f01 	tst.w	r8, #1
 800dbf8:	d0de      	beq.n	800dbb8 <_dtoa_r+0xa10>
 800dbfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbfe:	d1d8      	bne.n	800dbb2 <_dtoa_r+0xa0a>
 800dc00:	9a00      	ldr	r2, [sp, #0]
 800dc02:	2339      	movs	r3, #57	@ 0x39
 800dc04:	7013      	strb	r3, [r2, #0]
 800dc06:	4633      	mov	r3, r6
 800dc08:	461e      	mov	r6, r3
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc10:	2a39      	cmp	r2, #57	@ 0x39
 800dc12:	d052      	beq.n	800dcba <_dtoa_r+0xb12>
 800dc14:	3201      	adds	r2, #1
 800dc16:	701a      	strb	r2, [r3, #0]
 800dc18:	e612      	b.n	800d840 <_dtoa_r+0x698>
 800dc1a:	2a00      	cmp	r2, #0
 800dc1c:	dd07      	ble.n	800dc2e <_dtoa_r+0xa86>
 800dc1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc22:	d0ed      	beq.n	800dc00 <_dtoa_r+0xa58>
 800dc24:	9a00      	ldr	r2, [sp, #0]
 800dc26:	f108 0301 	add.w	r3, r8, #1
 800dc2a:	7013      	strb	r3, [r2, #0]
 800dc2c:	e608      	b.n	800d840 <_dtoa_r+0x698>
 800dc2e:	9b07      	ldr	r3, [sp, #28]
 800dc30:	9a07      	ldr	r2, [sp, #28]
 800dc32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dc36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d028      	beq.n	800dc8e <_dtoa_r+0xae6>
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	2300      	movs	r3, #0
 800dc40:	220a      	movs	r2, #10
 800dc42:	4658      	mov	r0, fp
 800dc44:	f000 f9d6 	bl	800dff4 <__multadd>
 800dc48:	42af      	cmp	r7, r5
 800dc4a:	4681      	mov	r9, r0
 800dc4c:	f04f 0300 	mov.w	r3, #0
 800dc50:	f04f 020a 	mov.w	r2, #10
 800dc54:	4639      	mov	r1, r7
 800dc56:	4658      	mov	r0, fp
 800dc58:	d107      	bne.n	800dc6a <_dtoa_r+0xac2>
 800dc5a:	f000 f9cb 	bl	800dff4 <__multadd>
 800dc5e:	4607      	mov	r7, r0
 800dc60:	4605      	mov	r5, r0
 800dc62:	9b07      	ldr	r3, [sp, #28]
 800dc64:	3301      	adds	r3, #1
 800dc66:	9307      	str	r3, [sp, #28]
 800dc68:	e774      	b.n	800db54 <_dtoa_r+0x9ac>
 800dc6a:	f000 f9c3 	bl	800dff4 <__multadd>
 800dc6e:	4629      	mov	r1, r5
 800dc70:	4607      	mov	r7, r0
 800dc72:	2300      	movs	r3, #0
 800dc74:	220a      	movs	r2, #10
 800dc76:	4658      	mov	r0, fp
 800dc78:	f000 f9bc 	bl	800dff4 <__multadd>
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	e7f0      	b.n	800dc62 <_dtoa_r+0xaba>
 800dc80:	9b00      	ldr	r3, [sp, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bfcc      	ite	gt
 800dc86:	461e      	movgt	r6, r3
 800dc88:	2601      	movle	r6, #1
 800dc8a:	4456      	add	r6, sl
 800dc8c:	2700      	movs	r7, #0
 800dc8e:	4649      	mov	r1, r9
 800dc90:	2201      	movs	r2, #1
 800dc92:	4658      	mov	r0, fp
 800dc94:	f000 fb5a 	bl	800e34c <__lshift>
 800dc98:	4621      	mov	r1, r4
 800dc9a:	4681      	mov	r9, r0
 800dc9c:	f000 fbc2 	bl	800e424 <__mcmp>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	dcb0      	bgt.n	800dc06 <_dtoa_r+0xa5e>
 800dca4:	d102      	bne.n	800dcac <_dtoa_r+0xb04>
 800dca6:	f018 0f01 	tst.w	r8, #1
 800dcaa:	d1ac      	bne.n	800dc06 <_dtoa_r+0xa5e>
 800dcac:	4633      	mov	r3, r6
 800dcae:	461e      	mov	r6, r3
 800dcb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcb4:	2a30      	cmp	r2, #48	@ 0x30
 800dcb6:	d0fa      	beq.n	800dcae <_dtoa_r+0xb06>
 800dcb8:	e5c2      	b.n	800d840 <_dtoa_r+0x698>
 800dcba:	459a      	cmp	sl, r3
 800dcbc:	d1a4      	bne.n	800dc08 <_dtoa_r+0xa60>
 800dcbe:	9b04      	ldr	r3, [sp, #16]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	9304      	str	r3, [sp, #16]
 800dcc4:	2331      	movs	r3, #49	@ 0x31
 800dcc6:	f88a 3000 	strb.w	r3, [sl]
 800dcca:	e5b9      	b.n	800d840 <_dtoa_r+0x698>
 800dccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dd2c <_dtoa_r+0xb84>
 800dcd2:	b11b      	cbz	r3, 800dcdc <_dtoa_r+0xb34>
 800dcd4:	f10a 0308 	add.w	r3, sl, #8
 800dcd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	4650      	mov	r0, sl
 800dcde:	b019      	add	sp, #100	@ 0x64
 800dce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	f77f ae37 	ble.w	800d95a <_dtoa_r+0x7b2>
 800dcec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcee:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	e655      	b.n	800d9a0 <_dtoa_r+0x7f8>
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f77f aed6 	ble.w	800daa8 <_dtoa_r+0x900>
 800dcfc:	4656      	mov	r6, sl
 800dcfe:	4621      	mov	r1, r4
 800dd00:	4648      	mov	r0, r9
 800dd02:	f7ff f9c8 	bl	800d096 <quorem>
 800dd06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd0a:	f806 8b01 	strb.w	r8, [r6], #1
 800dd0e:	9b00      	ldr	r3, [sp, #0]
 800dd10:	eba6 020a 	sub.w	r2, r6, sl
 800dd14:	4293      	cmp	r3, r2
 800dd16:	ddb3      	ble.n	800dc80 <_dtoa_r+0xad8>
 800dd18:	4649      	mov	r1, r9
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	220a      	movs	r2, #10
 800dd1e:	4658      	mov	r0, fp
 800dd20:	f000 f968 	bl	800dff4 <__multadd>
 800dd24:	4681      	mov	r9, r0
 800dd26:	e7ea      	b.n	800dcfe <_dtoa_r+0xb56>
 800dd28:	0800fed4 	.word	0x0800fed4
 800dd2c:	0800fe58 	.word	0x0800fe58

0800dd30 <_free_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4605      	mov	r5, r0
 800dd34:	2900      	cmp	r1, #0
 800dd36:	d041      	beq.n	800ddbc <_free_r+0x8c>
 800dd38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd3c:	1f0c      	subs	r4, r1, #4
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	bfb8      	it	lt
 800dd42:	18e4      	addlt	r4, r4, r3
 800dd44:	f000 f8e8 	bl	800df18 <__malloc_lock>
 800dd48:	4a1d      	ldr	r2, [pc, #116]	@ (800ddc0 <_free_r+0x90>)
 800dd4a:	6813      	ldr	r3, [r2, #0]
 800dd4c:	b933      	cbnz	r3, 800dd5c <_free_r+0x2c>
 800dd4e:	6063      	str	r3, [r4, #4]
 800dd50:	6014      	str	r4, [r2, #0]
 800dd52:	4628      	mov	r0, r5
 800dd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd58:	f000 b8e4 	b.w	800df24 <__malloc_unlock>
 800dd5c:	42a3      	cmp	r3, r4
 800dd5e:	d908      	bls.n	800dd72 <_free_r+0x42>
 800dd60:	6820      	ldr	r0, [r4, #0]
 800dd62:	1821      	adds	r1, r4, r0
 800dd64:	428b      	cmp	r3, r1
 800dd66:	bf01      	itttt	eq
 800dd68:	6819      	ldreq	r1, [r3, #0]
 800dd6a:	685b      	ldreq	r3, [r3, #4]
 800dd6c:	1809      	addeq	r1, r1, r0
 800dd6e:	6021      	streq	r1, [r4, #0]
 800dd70:	e7ed      	b.n	800dd4e <_free_r+0x1e>
 800dd72:	461a      	mov	r2, r3
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	b10b      	cbz	r3, 800dd7c <_free_r+0x4c>
 800dd78:	42a3      	cmp	r3, r4
 800dd7a:	d9fa      	bls.n	800dd72 <_free_r+0x42>
 800dd7c:	6811      	ldr	r1, [r2, #0]
 800dd7e:	1850      	adds	r0, r2, r1
 800dd80:	42a0      	cmp	r0, r4
 800dd82:	d10b      	bne.n	800dd9c <_free_r+0x6c>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	4401      	add	r1, r0
 800dd88:	1850      	adds	r0, r2, r1
 800dd8a:	4283      	cmp	r3, r0
 800dd8c:	6011      	str	r1, [r2, #0]
 800dd8e:	d1e0      	bne.n	800dd52 <_free_r+0x22>
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	6053      	str	r3, [r2, #4]
 800dd96:	4408      	add	r0, r1
 800dd98:	6010      	str	r0, [r2, #0]
 800dd9a:	e7da      	b.n	800dd52 <_free_r+0x22>
 800dd9c:	d902      	bls.n	800dda4 <_free_r+0x74>
 800dd9e:	230c      	movs	r3, #12
 800dda0:	602b      	str	r3, [r5, #0]
 800dda2:	e7d6      	b.n	800dd52 <_free_r+0x22>
 800dda4:	6820      	ldr	r0, [r4, #0]
 800dda6:	1821      	adds	r1, r4, r0
 800dda8:	428b      	cmp	r3, r1
 800ddaa:	bf04      	itt	eq
 800ddac:	6819      	ldreq	r1, [r3, #0]
 800ddae:	685b      	ldreq	r3, [r3, #4]
 800ddb0:	6063      	str	r3, [r4, #4]
 800ddb2:	bf04      	itt	eq
 800ddb4:	1809      	addeq	r1, r1, r0
 800ddb6:	6021      	streq	r1, [r4, #0]
 800ddb8:	6054      	str	r4, [r2, #4]
 800ddba:	e7ca      	b.n	800dd52 <_free_r+0x22>
 800ddbc:	bd38      	pop	{r3, r4, r5, pc}
 800ddbe:	bf00      	nop
 800ddc0:	200053e8 	.word	0x200053e8

0800ddc4 <malloc>:
 800ddc4:	4b02      	ldr	r3, [pc, #8]	@ (800ddd0 <malloc+0xc>)
 800ddc6:	4601      	mov	r1, r0
 800ddc8:	6818      	ldr	r0, [r3, #0]
 800ddca:	f000 b825 	b.w	800de18 <_malloc_r>
 800ddce:	bf00      	nop
 800ddd0:	20000020 	.word	0x20000020

0800ddd4 <sbrk_aligned>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	4e0f      	ldr	r6, [pc, #60]	@ (800de14 <sbrk_aligned+0x40>)
 800ddd8:	460c      	mov	r4, r1
 800ddda:	6831      	ldr	r1, [r6, #0]
 800dddc:	4605      	mov	r5, r0
 800ddde:	b911      	cbnz	r1, 800dde6 <sbrk_aligned+0x12>
 800dde0:	f000 fe46 	bl	800ea70 <_sbrk_r>
 800dde4:	6030      	str	r0, [r6, #0]
 800dde6:	4621      	mov	r1, r4
 800dde8:	4628      	mov	r0, r5
 800ddea:	f000 fe41 	bl	800ea70 <_sbrk_r>
 800ddee:	1c43      	adds	r3, r0, #1
 800ddf0:	d103      	bne.n	800ddfa <sbrk_aligned+0x26>
 800ddf2:	f04f 34ff 	mov.w	r4, #4294967295
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	bd70      	pop	{r4, r5, r6, pc}
 800ddfa:	1cc4      	adds	r4, r0, #3
 800ddfc:	f024 0403 	bic.w	r4, r4, #3
 800de00:	42a0      	cmp	r0, r4
 800de02:	d0f8      	beq.n	800ddf6 <sbrk_aligned+0x22>
 800de04:	1a21      	subs	r1, r4, r0
 800de06:	4628      	mov	r0, r5
 800de08:	f000 fe32 	bl	800ea70 <_sbrk_r>
 800de0c:	3001      	adds	r0, #1
 800de0e:	d1f2      	bne.n	800ddf6 <sbrk_aligned+0x22>
 800de10:	e7ef      	b.n	800ddf2 <sbrk_aligned+0x1e>
 800de12:	bf00      	nop
 800de14:	200053e4 	.word	0x200053e4

0800de18 <_malloc_r>:
 800de18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de1c:	1ccd      	adds	r5, r1, #3
 800de1e:	f025 0503 	bic.w	r5, r5, #3
 800de22:	3508      	adds	r5, #8
 800de24:	2d0c      	cmp	r5, #12
 800de26:	bf38      	it	cc
 800de28:	250c      	movcc	r5, #12
 800de2a:	2d00      	cmp	r5, #0
 800de2c:	4606      	mov	r6, r0
 800de2e:	db01      	blt.n	800de34 <_malloc_r+0x1c>
 800de30:	42a9      	cmp	r1, r5
 800de32:	d904      	bls.n	800de3e <_malloc_r+0x26>
 800de34:	230c      	movs	r3, #12
 800de36:	6033      	str	r3, [r6, #0]
 800de38:	2000      	movs	r0, #0
 800de3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df14 <_malloc_r+0xfc>
 800de42:	f000 f869 	bl	800df18 <__malloc_lock>
 800de46:	f8d8 3000 	ldr.w	r3, [r8]
 800de4a:	461c      	mov	r4, r3
 800de4c:	bb44      	cbnz	r4, 800dea0 <_malloc_r+0x88>
 800de4e:	4629      	mov	r1, r5
 800de50:	4630      	mov	r0, r6
 800de52:	f7ff ffbf 	bl	800ddd4 <sbrk_aligned>
 800de56:	1c43      	adds	r3, r0, #1
 800de58:	4604      	mov	r4, r0
 800de5a:	d158      	bne.n	800df0e <_malloc_r+0xf6>
 800de5c:	f8d8 4000 	ldr.w	r4, [r8]
 800de60:	4627      	mov	r7, r4
 800de62:	2f00      	cmp	r7, #0
 800de64:	d143      	bne.n	800deee <_malloc_r+0xd6>
 800de66:	2c00      	cmp	r4, #0
 800de68:	d04b      	beq.n	800df02 <_malloc_r+0xea>
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	4639      	mov	r1, r7
 800de6e:	4630      	mov	r0, r6
 800de70:	eb04 0903 	add.w	r9, r4, r3
 800de74:	f000 fdfc 	bl	800ea70 <_sbrk_r>
 800de78:	4581      	cmp	r9, r0
 800de7a:	d142      	bne.n	800df02 <_malloc_r+0xea>
 800de7c:	6821      	ldr	r1, [r4, #0]
 800de7e:	1a6d      	subs	r5, r5, r1
 800de80:	4629      	mov	r1, r5
 800de82:	4630      	mov	r0, r6
 800de84:	f7ff ffa6 	bl	800ddd4 <sbrk_aligned>
 800de88:	3001      	adds	r0, #1
 800de8a:	d03a      	beq.n	800df02 <_malloc_r+0xea>
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	442b      	add	r3, r5
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	f8d8 3000 	ldr.w	r3, [r8]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	bb62      	cbnz	r2, 800def4 <_malloc_r+0xdc>
 800de9a:	f8c8 7000 	str.w	r7, [r8]
 800de9e:	e00f      	b.n	800dec0 <_malloc_r+0xa8>
 800dea0:	6822      	ldr	r2, [r4, #0]
 800dea2:	1b52      	subs	r2, r2, r5
 800dea4:	d420      	bmi.n	800dee8 <_malloc_r+0xd0>
 800dea6:	2a0b      	cmp	r2, #11
 800dea8:	d917      	bls.n	800deda <_malloc_r+0xc2>
 800deaa:	1961      	adds	r1, r4, r5
 800deac:	42a3      	cmp	r3, r4
 800deae:	6025      	str	r5, [r4, #0]
 800deb0:	bf18      	it	ne
 800deb2:	6059      	strne	r1, [r3, #4]
 800deb4:	6863      	ldr	r3, [r4, #4]
 800deb6:	bf08      	it	eq
 800deb8:	f8c8 1000 	streq.w	r1, [r8]
 800debc:	5162      	str	r2, [r4, r5]
 800debe:	604b      	str	r3, [r1, #4]
 800dec0:	4630      	mov	r0, r6
 800dec2:	f000 f82f 	bl	800df24 <__malloc_unlock>
 800dec6:	f104 000b 	add.w	r0, r4, #11
 800deca:	1d23      	adds	r3, r4, #4
 800decc:	f020 0007 	bic.w	r0, r0, #7
 800ded0:	1ac2      	subs	r2, r0, r3
 800ded2:	bf1c      	itt	ne
 800ded4:	1a1b      	subne	r3, r3, r0
 800ded6:	50a3      	strne	r3, [r4, r2]
 800ded8:	e7af      	b.n	800de3a <_malloc_r+0x22>
 800deda:	6862      	ldr	r2, [r4, #4]
 800dedc:	42a3      	cmp	r3, r4
 800dede:	bf0c      	ite	eq
 800dee0:	f8c8 2000 	streq.w	r2, [r8]
 800dee4:	605a      	strne	r2, [r3, #4]
 800dee6:	e7eb      	b.n	800dec0 <_malloc_r+0xa8>
 800dee8:	4623      	mov	r3, r4
 800deea:	6864      	ldr	r4, [r4, #4]
 800deec:	e7ae      	b.n	800de4c <_malloc_r+0x34>
 800deee:	463c      	mov	r4, r7
 800def0:	687f      	ldr	r7, [r7, #4]
 800def2:	e7b6      	b.n	800de62 <_malloc_r+0x4a>
 800def4:	461a      	mov	r2, r3
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	42a3      	cmp	r3, r4
 800defa:	d1fb      	bne.n	800def4 <_malloc_r+0xdc>
 800defc:	2300      	movs	r3, #0
 800defe:	6053      	str	r3, [r2, #4]
 800df00:	e7de      	b.n	800dec0 <_malloc_r+0xa8>
 800df02:	230c      	movs	r3, #12
 800df04:	6033      	str	r3, [r6, #0]
 800df06:	4630      	mov	r0, r6
 800df08:	f000 f80c 	bl	800df24 <__malloc_unlock>
 800df0c:	e794      	b.n	800de38 <_malloc_r+0x20>
 800df0e:	6005      	str	r5, [r0, #0]
 800df10:	e7d6      	b.n	800dec0 <_malloc_r+0xa8>
 800df12:	bf00      	nop
 800df14:	200053e8 	.word	0x200053e8

0800df18 <__malloc_lock>:
 800df18:	4801      	ldr	r0, [pc, #4]	@ (800df20 <__malloc_lock+0x8>)
 800df1a:	f7ff b8ac 	b.w	800d076 <__retarget_lock_acquire_recursive>
 800df1e:	bf00      	nop
 800df20:	200053e0 	.word	0x200053e0

0800df24 <__malloc_unlock>:
 800df24:	4801      	ldr	r0, [pc, #4]	@ (800df2c <__malloc_unlock+0x8>)
 800df26:	f7ff b8a7 	b.w	800d078 <__retarget_lock_release_recursive>
 800df2a:	bf00      	nop
 800df2c:	200053e0 	.word	0x200053e0

0800df30 <_Balloc>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	69c6      	ldr	r6, [r0, #28]
 800df34:	4604      	mov	r4, r0
 800df36:	460d      	mov	r5, r1
 800df38:	b976      	cbnz	r6, 800df58 <_Balloc+0x28>
 800df3a:	2010      	movs	r0, #16
 800df3c:	f7ff ff42 	bl	800ddc4 <malloc>
 800df40:	4602      	mov	r2, r0
 800df42:	61e0      	str	r0, [r4, #28]
 800df44:	b920      	cbnz	r0, 800df50 <_Balloc+0x20>
 800df46:	4b18      	ldr	r3, [pc, #96]	@ (800dfa8 <_Balloc+0x78>)
 800df48:	4818      	ldr	r0, [pc, #96]	@ (800dfac <_Balloc+0x7c>)
 800df4a:	216b      	movs	r1, #107	@ 0x6b
 800df4c:	f000 fda0 	bl	800ea90 <__assert_func>
 800df50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df54:	6006      	str	r6, [r0, #0]
 800df56:	60c6      	str	r6, [r0, #12]
 800df58:	69e6      	ldr	r6, [r4, #28]
 800df5a:	68f3      	ldr	r3, [r6, #12]
 800df5c:	b183      	cbz	r3, 800df80 <_Balloc+0x50>
 800df5e:	69e3      	ldr	r3, [r4, #28]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df66:	b9b8      	cbnz	r0, 800df98 <_Balloc+0x68>
 800df68:	2101      	movs	r1, #1
 800df6a:	fa01 f605 	lsl.w	r6, r1, r5
 800df6e:	1d72      	adds	r2, r6, #5
 800df70:	0092      	lsls	r2, r2, #2
 800df72:	4620      	mov	r0, r4
 800df74:	f000 fdaa 	bl	800eacc <_calloc_r>
 800df78:	b160      	cbz	r0, 800df94 <_Balloc+0x64>
 800df7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df7e:	e00e      	b.n	800df9e <_Balloc+0x6e>
 800df80:	2221      	movs	r2, #33	@ 0x21
 800df82:	2104      	movs	r1, #4
 800df84:	4620      	mov	r0, r4
 800df86:	f000 fda1 	bl	800eacc <_calloc_r>
 800df8a:	69e3      	ldr	r3, [r4, #28]
 800df8c:	60f0      	str	r0, [r6, #12]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1e4      	bne.n	800df5e <_Balloc+0x2e>
 800df94:	2000      	movs	r0, #0
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	6802      	ldr	r2, [r0, #0]
 800df9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfa4:	e7f7      	b.n	800df96 <_Balloc+0x66>
 800dfa6:	bf00      	nop
 800dfa8:	0800fe65 	.word	0x0800fe65
 800dfac:	0800fee5 	.word	0x0800fee5

0800dfb0 <_Bfree>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	69c6      	ldr	r6, [r0, #28]
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	b976      	cbnz	r6, 800dfd8 <_Bfree+0x28>
 800dfba:	2010      	movs	r0, #16
 800dfbc:	f7ff ff02 	bl	800ddc4 <malloc>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	61e8      	str	r0, [r5, #28]
 800dfc4:	b920      	cbnz	r0, 800dfd0 <_Bfree+0x20>
 800dfc6:	4b09      	ldr	r3, [pc, #36]	@ (800dfec <_Bfree+0x3c>)
 800dfc8:	4809      	ldr	r0, [pc, #36]	@ (800dff0 <_Bfree+0x40>)
 800dfca:	218f      	movs	r1, #143	@ 0x8f
 800dfcc:	f000 fd60 	bl	800ea90 <__assert_func>
 800dfd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfd4:	6006      	str	r6, [r0, #0]
 800dfd6:	60c6      	str	r6, [r0, #12]
 800dfd8:	b13c      	cbz	r4, 800dfea <_Bfree+0x3a>
 800dfda:	69eb      	ldr	r3, [r5, #28]
 800dfdc:	6862      	ldr	r2, [r4, #4]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfe4:	6021      	str	r1, [r4, #0]
 800dfe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfea:	bd70      	pop	{r4, r5, r6, pc}
 800dfec:	0800fe65 	.word	0x0800fe65
 800dff0:	0800fee5 	.word	0x0800fee5

0800dff4 <__multadd>:
 800dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	690d      	ldr	r5, [r1, #16]
 800dffa:	4607      	mov	r7, r0
 800dffc:	460c      	mov	r4, r1
 800dffe:	461e      	mov	r6, r3
 800e000:	f101 0c14 	add.w	ip, r1, #20
 800e004:	2000      	movs	r0, #0
 800e006:	f8dc 3000 	ldr.w	r3, [ip]
 800e00a:	b299      	uxth	r1, r3
 800e00c:	fb02 6101 	mla	r1, r2, r1, r6
 800e010:	0c1e      	lsrs	r6, r3, #16
 800e012:	0c0b      	lsrs	r3, r1, #16
 800e014:	fb02 3306 	mla	r3, r2, r6, r3
 800e018:	b289      	uxth	r1, r1
 800e01a:	3001      	adds	r0, #1
 800e01c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e020:	4285      	cmp	r5, r0
 800e022:	f84c 1b04 	str.w	r1, [ip], #4
 800e026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e02a:	dcec      	bgt.n	800e006 <__multadd+0x12>
 800e02c:	b30e      	cbz	r6, 800e072 <__multadd+0x7e>
 800e02e:	68a3      	ldr	r3, [r4, #8]
 800e030:	42ab      	cmp	r3, r5
 800e032:	dc19      	bgt.n	800e068 <__multadd+0x74>
 800e034:	6861      	ldr	r1, [r4, #4]
 800e036:	4638      	mov	r0, r7
 800e038:	3101      	adds	r1, #1
 800e03a:	f7ff ff79 	bl	800df30 <_Balloc>
 800e03e:	4680      	mov	r8, r0
 800e040:	b928      	cbnz	r0, 800e04e <__multadd+0x5a>
 800e042:	4602      	mov	r2, r0
 800e044:	4b0c      	ldr	r3, [pc, #48]	@ (800e078 <__multadd+0x84>)
 800e046:	480d      	ldr	r0, [pc, #52]	@ (800e07c <__multadd+0x88>)
 800e048:	21ba      	movs	r1, #186	@ 0xba
 800e04a:	f000 fd21 	bl	800ea90 <__assert_func>
 800e04e:	6922      	ldr	r2, [r4, #16]
 800e050:	3202      	adds	r2, #2
 800e052:	f104 010c 	add.w	r1, r4, #12
 800e056:	0092      	lsls	r2, r2, #2
 800e058:	300c      	adds	r0, #12
 800e05a:	f7ff f80e 	bl	800d07a <memcpy>
 800e05e:	4621      	mov	r1, r4
 800e060:	4638      	mov	r0, r7
 800e062:	f7ff ffa5 	bl	800dfb0 <_Bfree>
 800e066:	4644      	mov	r4, r8
 800e068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e06c:	3501      	adds	r5, #1
 800e06e:	615e      	str	r6, [r3, #20]
 800e070:	6125      	str	r5, [r4, #16]
 800e072:	4620      	mov	r0, r4
 800e074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e078:	0800fed4 	.word	0x0800fed4
 800e07c:	0800fee5 	.word	0x0800fee5

0800e080 <__hi0bits>:
 800e080:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e084:	4603      	mov	r3, r0
 800e086:	bf36      	itet	cc
 800e088:	0403      	lslcc	r3, r0, #16
 800e08a:	2000      	movcs	r0, #0
 800e08c:	2010      	movcc	r0, #16
 800e08e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e092:	bf3c      	itt	cc
 800e094:	021b      	lslcc	r3, r3, #8
 800e096:	3008      	addcc	r0, #8
 800e098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e09c:	bf3c      	itt	cc
 800e09e:	011b      	lslcc	r3, r3, #4
 800e0a0:	3004      	addcc	r0, #4
 800e0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0a6:	bf3c      	itt	cc
 800e0a8:	009b      	lslcc	r3, r3, #2
 800e0aa:	3002      	addcc	r0, #2
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	db05      	blt.n	800e0bc <__hi0bits+0x3c>
 800e0b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0b4:	f100 0001 	add.w	r0, r0, #1
 800e0b8:	bf08      	it	eq
 800e0ba:	2020      	moveq	r0, #32
 800e0bc:	4770      	bx	lr

0800e0be <__lo0bits>:
 800e0be:	6803      	ldr	r3, [r0, #0]
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	f013 0007 	ands.w	r0, r3, #7
 800e0c6:	d00b      	beq.n	800e0e0 <__lo0bits+0x22>
 800e0c8:	07d9      	lsls	r1, r3, #31
 800e0ca:	d421      	bmi.n	800e110 <__lo0bits+0x52>
 800e0cc:	0798      	lsls	r0, r3, #30
 800e0ce:	bf49      	itett	mi
 800e0d0:	085b      	lsrmi	r3, r3, #1
 800e0d2:	089b      	lsrpl	r3, r3, #2
 800e0d4:	2001      	movmi	r0, #1
 800e0d6:	6013      	strmi	r3, [r2, #0]
 800e0d8:	bf5c      	itt	pl
 800e0da:	6013      	strpl	r3, [r2, #0]
 800e0dc:	2002      	movpl	r0, #2
 800e0de:	4770      	bx	lr
 800e0e0:	b299      	uxth	r1, r3
 800e0e2:	b909      	cbnz	r1, 800e0e8 <__lo0bits+0x2a>
 800e0e4:	0c1b      	lsrs	r3, r3, #16
 800e0e6:	2010      	movs	r0, #16
 800e0e8:	b2d9      	uxtb	r1, r3
 800e0ea:	b909      	cbnz	r1, 800e0f0 <__lo0bits+0x32>
 800e0ec:	3008      	adds	r0, #8
 800e0ee:	0a1b      	lsrs	r3, r3, #8
 800e0f0:	0719      	lsls	r1, r3, #28
 800e0f2:	bf04      	itt	eq
 800e0f4:	091b      	lsreq	r3, r3, #4
 800e0f6:	3004      	addeq	r0, #4
 800e0f8:	0799      	lsls	r1, r3, #30
 800e0fa:	bf04      	itt	eq
 800e0fc:	089b      	lsreq	r3, r3, #2
 800e0fe:	3002      	addeq	r0, #2
 800e100:	07d9      	lsls	r1, r3, #31
 800e102:	d403      	bmi.n	800e10c <__lo0bits+0x4e>
 800e104:	085b      	lsrs	r3, r3, #1
 800e106:	f100 0001 	add.w	r0, r0, #1
 800e10a:	d003      	beq.n	800e114 <__lo0bits+0x56>
 800e10c:	6013      	str	r3, [r2, #0]
 800e10e:	4770      	bx	lr
 800e110:	2000      	movs	r0, #0
 800e112:	4770      	bx	lr
 800e114:	2020      	movs	r0, #32
 800e116:	4770      	bx	lr

0800e118 <__i2b>:
 800e118:	b510      	push	{r4, lr}
 800e11a:	460c      	mov	r4, r1
 800e11c:	2101      	movs	r1, #1
 800e11e:	f7ff ff07 	bl	800df30 <_Balloc>
 800e122:	4602      	mov	r2, r0
 800e124:	b928      	cbnz	r0, 800e132 <__i2b+0x1a>
 800e126:	4b05      	ldr	r3, [pc, #20]	@ (800e13c <__i2b+0x24>)
 800e128:	4805      	ldr	r0, [pc, #20]	@ (800e140 <__i2b+0x28>)
 800e12a:	f240 1145 	movw	r1, #325	@ 0x145
 800e12e:	f000 fcaf 	bl	800ea90 <__assert_func>
 800e132:	2301      	movs	r3, #1
 800e134:	6144      	str	r4, [r0, #20]
 800e136:	6103      	str	r3, [r0, #16]
 800e138:	bd10      	pop	{r4, pc}
 800e13a:	bf00      	nop
 800e13c:	0800fed4 	.word	0x0800fed4
 800e140:	0800fee5 	.word	0x0800fee5

0800e144 <__multiply>:
 800e144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	4614      	mov	r4, r2
 800e14a:	690a      	ldr	r2, [r1, #16]
 800e14c:	6923      	ldr	r3, [r4, #16]
 800e14e:	429a      	cmp	r2, r3
 800e150:	bfa8      	it	ge
 800e152:	4623      	movge	r3, r4
 800e154:	460f      	mov	r7, r1
 800e156:	bfa4      	itt	ge
 800e158:	460c      	movge	r4, r1
 800e15a:	461f      	movge	r7, r3
 800e15c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e160:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e164:	68a3      	ldr	r3, [r4, #8]
 800e166:	6861      	ldr	r1, [r4, #4]
 800e168:	eb0a 0609 	add.w	r6, sl, r9
 800e16c:	42b3      	cmp	r3, r6
 800e16e:	b085      	sub	sp, #20
 800e170:	bfb8      	it	lt
 800e172:	3101      	addlt	r1, #1
 800e174:	f7ff fedc 	bl	800df30 <_Balloc>
 800e178:	b930      	cbnz	r0, 800e188 <__multiply+0x44>
 800e17a:	4602      	mov	r2, r0
 800e17c:	4b44      	ldr	r3, [pc, #272]	@ (800e290 <__multiply+0x14c>)
 800e17e:	4845      	ldr	r0, [pc, #276]	@ (800e294 <__multiply+0x150>)
 800e180:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e184:	f000 fc84 	bl	800ea90 <__assert_func>
 800e188:	f100 0514 	add.w	r5, r0, #20
 800e18c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e190:	462b      	mov	r3, r5
 800e192:	2200      	movs	r2, #0
 800e194:	4543      	cmp	r3, r8
 800e196:	d321      	bcc.n	800e1dc <__multiply+0x98>
 800e198:	f107 0114 	add.w	r1, r7, #20
 800e19c:	f104 0214 	add.w	r2, r4, #20
 800e1a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1a8:	9302      	str	r3, [sp, #8]
 800e1aa:	1b13      	subs	r3, r2, r4
 800e1ac:	3b15      	subs	r3, #21
 800e1ae:	f023 0303 	bic.w	r3, r3, #3
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	f104 0715 	add.w	r7, r4, #21
 800e1b8:	42ba      	cmp	r2, r7
 800e1ba:	bf38      	it	cc
 800e1bc:	2304      	movcc	r3, #4
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	9b02      	ldr	r3, [sp, #8]
 800e1c2:	9103      	str	r1, [sp, #12]
 800e1c4:	428b      	cmp	r3, r1
 800e1c6:	d80c      	bhi.n	800e1e2 <__multiply+0x9e>
 800e1c8:	2e00      	cmp	r6, #0
 800e1ca:	dd03      	ble.n	800e1d4 <__multiply+0x90>
 800e1cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d05b      	beq.n	800e28c <__multiply+0x148>
 800e1d4:	6106      	str	r6, [r0, #16]
 800e1d6:	b005      	add	sp, #20
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	f843 2b04 	str.w	r2, [r3], #4
 800e1e0:	e7d8      	b.n	800e194 <__multiply+0x50>
 800e1e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1e6:	f1ba 0f00 	cmp.w	sl, #0
 800e1ea:	d024      	beq.n	800e236 <__multiply+0xf2>
 800e1ec:	f104 0e14 	add.w	lr, r4, #20
 800e1f0:	46a9      	mov	r9, r5
 800e1f2:	f04f 0c00 	mov.w	ip, #0
 800e1f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e1fa:	f8d9 3000 	ldr.w	r3, [r9]
 800e1fe:	fa1f fb87 	uxth.w	fp, r7
 800e202:	b29b      	uxth	r3, r3
 800e204:	fb0a 330b 	mla	r3, sl, fp, r3
 800e208:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e20c:	f8d9 7000 	ldr.w	r7, [r9]
 800e210:	4463      	add	r3, ip
 800e212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e216:	fb0a c70b 	mla	r7, sl, fp, ip
 800e21a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e21e:	b29b      	uxth	r3, r3
 800e220:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e224:	4572      	cmp	r2, lr
 800e226:	f849 3b04 	str.w	r3, [r9], #4
 800e22a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e22e:	d8e2      	bhi.n	800e1f6 <__multiply+0xb2>
 800e230:	9b01      	ldr	r3, [sp, #4]
 800e232:	f845 c003 	str.w	ip, [r5, r3]
 800e236:	9b03      	ldr	r3, [sp, #12]
 800e238:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e23c:	3104      	adds	r1, #4
 800e23e:	f1b9 0f00 	cmp.w	r9, #0
 800e242:	d021      	beq.n	800e288 <__multiply+0x144>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	f104 0c14 	add.w	ip, r4, #20
 800e24a:	46ae      	mov	lr, r5
 800e24c:	f04f 0a00 	mov.w	sl, #0
 800e250:	f8bc b000 	ldrh.w	fp, [ip]
 800e254:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e258:	fb09 770b 	mla	r7, r9, fp, r7
 800e25c:	4457      	add	r7, sl
 800e25e:	b29b      	uxth	r3, r3
 800e260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e264:	f84e 3b04 	str.w	r3, [lr], #4
 800e268:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e26c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e270:	f8be 3000 	ldrh.w	r3, [lr]
 800e274:	fb09 330a 	mla	r3, r9, sl, r3
 800e278:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e27c:	4562      	cmp	r2, ip
 800e27e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e282:	d8e5      	bhi.n	800e250 <__multiply+0x10c>
 800e284:	9f01      	ldr	r7, [sp, #4]
 800e286:	51eb      	str	r3, [r5, r7]
 800e288:	3504      	adds	r5, #4
 800e28a:	e799      	b.n	800e1c0 <__multiply+0x7c>
 800e28c:	3e01      	subs	r6, #1
 800e28e:	e79b      	b.n	800e1c8 <__multiply+0x84>
 800e290:	0800fed4 	.word	0x0800fed4
 800e294:	0800fee5 	.word	0x0800fee5

0800e298 <__pow5mult>:
 800e298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e29c:	4615      	mov	r5, r2
 800e29e:	f012 0203 	ands.w	r2, r2, #3
 800e2a2:	4607      	mov	r7, r0
 800e2a4:	460e      	mov	r6, r1
 800e2a6:	d007      	beq.n	800e2b8 <__pow5mult+0x20>
 800e2a8:	4c25      	ldr	r4, [pc, #148]	@ (800e340 <__pow5mult+0xa8>)
 800e2aa:	3a01      	subs	r2, #1
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2b2:	f7ff fe9f 	bl	800dff4 <__multadd>
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	10ad      	asrs	r5, r5, #2
 800e2ba:	d03d      	beq.n	800e338 <__pow5mult+0xa0>
 800e2bc:	69fc      	ldr	r4, [r7, #28]
 800e2be:	b97c      	cbnz	r4, 800e2e0 <__pow5mult+0x48>
 800e2c0:	2010      	movs	r0, #16
 800e2c2:	f7ff fd7f 	bl	800ddc4 <malloc>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	61f8      	str	r0, [r7, #28]
 800e2ca:	b928      	cbnz	r0, 800e2d8 <__pow5mult+0x40>
 800e2cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e344 <__pow5mult+0xac>)
 800e2ce:	481e      	ldr	r0, [pc, #120]	@ (800e348 <__pow5mult+0xb0>)
 800e2d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2d4:	f000 fbdc 	bl	800ea90 <__assert_func>
 800e2d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2dc:	6004      	str	r4, [r0, #0]
 800e2de:	60c4      	str	r4, [r0, #12]
 800e2e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2e8:	b94c      	cbnz	r4, 800e2fe <__pow5mult+0x66>
 800e2ea:	f240 2171 	movw	r1, #625	@ 0x271
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f7ff ff12 	bl	800e118 <__i2b>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	6003      	str	r3, [r0, #0]
 800e2fe:	f04f 0900 	mov.w	r9, #0
 800e302:	07eb      	lsls	r3, r5, #31
 800e304:	d50a      	bpl.n	800e31c <__pow5mult+0x84>
 800e306:	4631      	mov	r1, r6
 800e308:	4622      	mov	r2, r4
 800e30a:	4638      	mov	r0, r7
 800e30c:	f7ff ff1a 	bl	800e144 <__multiply>
 800e310:	4631      	mov	r1, r6
 800e312:	4680      	mov	r8, r0
 800e314:	4638      	mov	r0, r7
 800e316:	f7ff fe4b 	bl	800dfb0 <_Bfree>
 800e31a:	4646      	mov	r6, r8
 800e31c:	106d      	asrs	r5, r5, #1
 800e31e:	d00b      	beq.n	800e338 <__pow5mult+0xa0>
 800e320:	6820      	ldr	r0, [r4, #0]
 800e322:	b938      	cbnz	r0, 800e334 <__pow5mult+0x9c>
 800e324:	4622      	mov	r2, r4
 800e326:	4621      	mov	r1, r4
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff ff0b 	bl	800e144 <__multiply>
 800e32e:	6020      	str	r0, [r4, #0]
 800e330:	f8c0 9000 	str.w	r9, [r0]
 800e334:	4604      	mov	r4, r0
 800e336:	e7e4      	b.n	800e302 <__pow5mult+0x6a>
 800e338:	4630      	mov	r0, r6
 800e33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e33e:	bf00      	nop
 800e340:	0800ff40 	.word	0x0800ff40
 800e344:	0800fe65 	.word	0x0800fe65
 800e348:	0800fee5 	.word	0x0800fee5

0800e34c <__lshift>:
 800e34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e350:	460c      	mov	r4, r1
 800e352:	6849      	ldr	r1, [r1, #4]
 800e354:	6923      	ldr	r3, [r4, #16]
 800e356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e35a:	68a3      	ldr	r3, [r4, #8]
 800e35c:	4607      	mov	r7, r0
 800e35e:	4691      	mov	r9, r2
 800e360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e364:	f108 0601 	add.w	r6, r8, #1
 800e368:	42b3      	cmp	r3, r6
 800e36a:	db0b      	blt.n	800e384 <__lshift+0x38>
 800e36c:	4638      	mov	r0, r7
 800e36e:	f7ff fddf 	bl	800df30 <_Balloc>
 800e372:	4605      	mov	r5, r0
 800e374:	b948      	cbnz	r0, 800e38a <__lshift+0x3e>
 800e376:	4602      	mov	r2, r0
 800e378:	4b28      	ldr	r3, [pc, #160]	@ (800e41c <__lshift+0xd0>)
 800e37a:	4829      	ldr	r0, [pc, #164]	@ (800e420 <__lshift+0xd4>)
 800e37c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e380:	f000 fb86 	bl	800ea90 <__assert_func>
 800e384:	3101      	adds	r1, #1
 800e386:	005b      	lsls	r3, r3, #1
 800e388:	e7ee      	b.n	800e368 <__lshift+0x1c>
 800e38a:	2300      	movs	r3, #0
 800e38c:	f100 0114 	add.w	r1, r0, #20
 800e390:	f100 0210 	add.w	r2, r0, #16
 800e394:	4618      	mov	r0, r3
 800e396:	4553      	cmp	r3, sl
 800e398:	db33      	blt.n	800e402 <__lshift+0xb6>
 800e39a:	6920      	ldr	r0, [r4, #16]
 800e39c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3a0:	f104 0314 	add.w	r3, r4, #20
 800e3a4:	f019 091f 	ands.w	r9, r9, #31
 800e3a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3b0:	d02b      	beq.n	800e40a <__lshift+0xbe>
 800e3b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e3b6:	468a      	mov	sl, r1
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	6818      	ldr	r0, [r3, #0]
 800e3bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e3c0:	4310      	orrs	r0, r2
 800e3c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ca:	459c      	cmp	ip, r3
 800e3cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3d0:	d8f3      	bhi.n	800e3ba <__lshift+0x6e>
 800e3d2:	ebac 0304 	sub.w	r3, ip, r4
 800e3d6:	3b15      	subs	r3, #21
 800e3d8:	f023 0303 	bic.w	r3, r3, #3
 800e3dc:	3304      	adds	r3, #4
 800e3de:	f104 0015 	add.w	r0, r4, #21
 800e3e2:	4584      	cmp	ip, r0
 800e3e4:	bf38      	it	cc
 800e3e6:	2304      	movcc	r3, #4
 800e3e8:	50ca      	str	r2, [r1, r3]
 800e3ea:	b10a      	cbz	r2, 800e3f0 <__lshift+0xa4>
 800e3ec:	f108 0602 	add.w	r6, r8, #2
 800e3f0:	3e01      	subs	r6, #1
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	612e      	str	r6, [r5, #16]
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	f7ff fdda 	bl	800dfb0 <_Bfree>
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e402:	f842 0f04 	str.w	r0, [r2, #4]!
 800e406:	3301      	adds	r3, #1
 800e408:	e7c5      	b.n	800e396 <__lshift+0x4a>
 800e40a:	3904      	subs	r1, #4
 800e40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e410:	f841 2f04 	str.w	r2, [r1, #4]!
 800e414:	459c      	cmp	ip, r3
 800e416:	d8f9      	bhi.n	800e40c <__lshift+0xc0>
 800e418:	e7ea      	b.n	800e3f0 <__lshift+0xa4>
 800e41a:	bf00      	nop
 800e41c:	0800fed4 	.word	0x0800fed4
 800e420:	0800fee5 	.word	0x0800fee5

0800e424 <__mcmp>:
 800e424:	690a      	ldr	r2, [r1, #16]
 800e426:	4603      	mov	r3, r0
 800e428:	6900      	ldr	r0, [r0, #16]
 800e42a:	1a80      	subs	r0, r0, r2
 800e42c:	b530      	push	{r4, r5, lr}
 800e42e:	d10e      	bne.n	800e44e <__mcmp+0x2a>
 800e430:	3314      	adds	r3, #20
 800e432:	3114      	adds	r1, #20
 800e434:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e438:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e43c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e440:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e444:	4295      	cmp	r5, r2
 800e446:	d003      	beq.n	800e450 <__mcmp+0x2c>
 800e448:	d205      	bcs.n	800e456 <__mcmp+0x32>
 800e44a:	f04f 30ff 	mov.w	r0, #4294967295
 800e44e:	bd30      	pop	{r4, r5, pc}
 800e450:	42a3      	cmp	r3, r4
 800e452:	d3f3      	bcc.n	800e43c <__mcmp+0x18>
 800e454:	e7fb      	b.n	800e44e <__mcmp+0x2a>
 800e456:	2001      	movs	r0, #1
 800e458:	e7f9      	b.n	800e44e <__mcmp+0x2a>
	...

0800e45c <__mdiff>:
 800e45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e460:	4689      	mov	r9, r1
 800e462:	4606      	mov	r6, r0
 800e464:	4611      	mov	r1, r2
 800e466:	4648      	mov	r0, r9
 800e468:	4614      	mov	r4, r2
 800e46a:	f7ff ffdb 	bl	800e424 <__mcmp>
 800e46e:	1e05      	subs	r5, r0, #0
 800e470:	d112      	bne.n	800e498 <__mdiff+0x3c>
 800e472:	4629      	mov	r1, r5
 800e474:	4630      	mov	r0, r6
 800e476:	f7ff fd5b 	bl	800df30 <_Balloc>
 800e47a:	4602      	mov	r2, r0
 800e47c:	b928      	cbnz	r0, 800e48a <__mdiff+0x2e>
 800e47e:	4b3f      	ldr	r3, [pc, #252]	@ (800e57c <__mdiff+0x120>)
 800e480:	f240 2137 	movw	r1, #567	@ 0x237
 800e484:	483e      	ldr	r0, [pc, #248]	@ (800e580 <__mdiff+0x124>)
 800e486:	f000 fb03 	bl	800ea90 <__assert_func>
 800e48a:	2301      	movs	r3, #1
 800e48c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e490:	4610      	mov	r0, r2
 800e492:	b003      	add	sp, #12
 800e494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e498:	bfbc      	itt	lt
 800e49a:	464b      	movlt	r3, r9
 800e49c:	46a1      	movlt	r9, r4
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4a4:	bfba      	itte	lt
 800e4a6:	461c      	movlt	r4, r3
 800e4a8:	2501      	movlt	r5, #1
 800e4aa:	2500      	movge	r5, #0
 800e4ac:	f7ff fd40 	bl	800df30 <_Balloc>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	b918      	cbnz	r0, 800e4bc <__mdiff+0x60>
 800e4b4:	4b31      	ldr	r3, [pc, #196]	@ (800e57c <__mdiff+0x120>)
 800e4b6:	f240 2145 	movw	r1, #581	@ 0x245
 800e4ba:	e7e3      	b.n	800e484 <__mdiff+0x28>
 800e4bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4c0:	6926      	ldr	r6, [r4, #16]
 800e4c2:	60c5      	str	r5, [r0, #12]
 800e4c4:	f109 0310 	add.w	r3, r9, #16
 800e4c8:	f109 0514 	add.w	r5, r9, #20
 800e4cc:	f104 0e14 	add.w	lr, r4, #20
 800e4d0:	f100 0b14 	add.w	fp, r0, #20
 800e4d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4dc:	9301      	str	r3, [sp, #4]
 800e4de:	46d9      	mov	r9, fp
 800e4e0:	f04f 0c00 	mov.w	ip, #0
 800e4e4:	9b01      	ldr	r3, [sp, #4]
 800e4e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e4ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	fa1f f38a 	uxth.w	r3, sl
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	b283      	uxth	r3, r0
 800e4f8:	1acb      	subs	r3, r1, r3
 800e4fa:	0c00      	lsrs	r0, r0, #16
 800e4fc:	4463      	add	r3, ip
 800e4fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e502:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e506:	b29b      	uxth	r3, r3
 800e508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e50c:	4576      	cmp	r6, lr
 800e50e:	f849 3b04 	str.w	r3, [r9], #4
 800e512:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e516:	d8e5      	bhi.n	800e4e4 <__mdiff+0x88>
 800e518:	1b33      	subs	r3, r6, r4
 800e51a:	3b15      	subs	r3, #21
 800e51c:	f023 0303 	bic.w	r3, r3, #3
 800e520:	3415      	adds	r4, #21
 800e522:	3304      	adds	r3, #4
 800e524:	42a6      	cmp	r6, r4
 800e526:	bf38      	it	cc
 800e528:	2304      	movcc	r3, #4
 800e52a:	441d      	add	r5, r3
 800e52c:	445b      	add	r3, fp
 800e52e:	461e      	mov	r6, r3
 800e530:	462c      	mov	r4, r5
 800e532:	4544      	cmp	r4, r8
 800e534:	d30e      	bcc.n	800e554 <__mdiff+0xf8>
 800e536:	f108 0103 	add.w	r1, r8, #3
 800e53a:	1b49      	subs	r1, r1, r5
 800e53c:	f021 0103 	bic.w	r1, r1, #3
 800e540:	3d03      	subs	r5, #3
 800e542:	45a8      	cmp	r8, r5
 800e544:	bf38      	it	cc
 800e546:	2100      	movcc	r1, #0
 800e548:	440b      	add	r3, r1
 800e54a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e54e:	b191      	cbz	r1, 800e576 <__mdiff+0x11a>
 800e550:	6117      	str	r7, [r2, #16]
 800e552:	e79d      	b.n	800e490 <__mdiff+0x34>
 800e554:	f854 1b04 	ldr.w	r1, [r4], #4
 800e558:	46e6      	mov	lr, ip
 800e55a:	0c08      	lsrs	r0, r1, #16
 800e55c:	fa1c fc81 	uxtah	ip, ip, r1
 800e560:	4471      	add	r1, lr
 800e562:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e566:	b289      	uxth	r1, r1
 800e568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e56c:	f846 1b04 	str.w	r1, [r6], #4
 800e570:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e574:	e7dd      	b.n	800e532 <__mdiff+0xd6>
 800e576:	3f01      	subs	r7, #1
 800e578:	e7e7      	b.n	800e54a <__mdiff+0xee>
 800e57a:	bf00      	nop
 800e57c:	0800fed4 	.word	0x0800fed4
 800e580:	0800fee5 	.word	0x0800fee5

0800e584 <__d2b>:
 800e584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e588:	460f      	mov	r7, r1
 800e58a:	2101      	movs	r1, #1
 800e58c:	ec59 8b10 	vmov	r8, r9, d0
 800e590:	4616      	mov	r6, r2
 800e592:	f7ff fccd 	bl	800df30 <_Balloc>
 800e596:	4604      	mov	r4, r0
 800e598:	b930      	cbnz	r0, 800e5a8 <__d2b+0x24>
 800e59a:	4602      	mov	r2, r0
 800e59c:	4b23      	ldr	r3, [pc, #140]	@ (800e62c <__d2b+0xa8>)
 800e59e:	4824      	ldr	r0, [pc, #144]	@ (800e630 <__d2b+0xac>)
 800e5a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5a4:	f000 fa74 	bl	800ea90 <__assert_func>
 800e5a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5b0:	b10d      	cbz	r5, 800e5b6 <__d2b+0x32>
 800e5b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	f1b8 0300 	subs.w	r3, r8, #0
 800e5bc:	d023      	beq.n	800e606 <__d2b+0x82>
 800e5be:	4668      	mov	r0, sp
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	f7ff fd7c 	bl	800e0be <__lo0bits>
 800e5c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5ca:	b1d0      	cbz	r0, 800e602 <__d2b+0x7e>
 800e5cc:	f1c0 0320 	rsb	r3, r0, #32
 800e5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d4:	430b      	orrs	r3, r1
 800e5d6:	40c2      	lsrs	r2, r0
 800e5d8:	6163      	str	r3, [r4, #20]
 800e5da:	9201      	str	r2, [sp, #4]
 800e5dc:	9b01      	ldr	r3, [sp, #4]
 800e5de:	61a3      	str	r3, [r4, #24]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	bf0c      	ite	eq
 800e5e4:	2201      	moveq	r2, #1
 800e5e6:	2202      	movne	r2, #2
 800e5e8:	6122      	str	r2, [r4, #16]
 800e5ea:	b1a5      	cbz	r5, 800e616 <__d2b+0x92>
 800e5ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e5f0:	4405      	add	r5, r0
 800e5f2:	603d      	str	r5, [r7, #0]
 800e5f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e5f8:	6030      	str	r0, [r6, #0]
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	b003      	add	sp, #12
 800e5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e602:	6161      	str	r1, [r4, #20]
 800e604:	e7ea      	b.n	800e5dc <__d2b+0x58>
 800e606:	a801      	add	r0, sp, #4
 800e608:	f7ff fd59 	bl	800e0be <__lo0bits>
 800e60c:	9b01      	ldr	r3, [sp, #4]
 800e60e:	6163      	str	r3, [r4, #20]
 800e610:	3020      	adds	r0, #32
 800e612:	2201      	movs	r2, #1
 800e614:	e7e8      	b.n	800e5e8 <__d2b+0x64>
 800e616:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e61a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e61e:	6038      	str	r0, [r7, #0]
 800e620:	6918      	ldr	r0, [r3, #16]
 800e622:	f7ff fd2d 	bl	800e080 <__hi0bits>
 800e626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e62a:	e7e5      	b.n	800e5f8 <__d2b+0x74>
 800e62c:	0800fed4 	.word	0x0800fed4
 800e630:	0800fee5 	.word	0x0800fee5

0800e634 <__ssputs_r>:
 800e634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e638:	688e      	ldr	r6, [r1, #8]
 800e63a:	461f      	mov	r7, r3
 800e63c:	42be      	cmp	r6, r7
 800e63e:	680b      	ldr	r3, [r1, #0]
 800e640:	4682      	mov	sl, r0
 800e642:	460c      	mov	r4, r1
 800e644:	4690      	mov	r8, r2
 800e646:	d82d      	bhi.n	800e6a4 <__ssputs_r+0x70>
 800e648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e64c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e650:	d026      	beq.n	800e6a0 <__ssputs_r+0x6c>
 800e652:	6965      	ldr	r5, [r4, #20]
 800e654:	6909      	ldr	r1, [r1, #16]
 800e656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e65a:	eba3 0901 	sub.w	r9, r3, r1
 800e65e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e662:	1c7b      	adds	r3, r7, #1
 800e664:	444b      	add	r3, r9
 800e666:	106d      	asrs	r5, r5, #1
 800e668:	429d      	cmp	r5, r3
 800e66a:	bf38      	it	cc
 800e66c:	461d      	movcc	r5, r3
 800e66e:	0553      	lsls	r3, r2, #21
 800e670:	d527      	bpl.n	800e6c2 <__ssputs_r+0x8e>
 800e672:	4629      	mov	r1, r5
 800e674:	f7ff fbd0 	bl	800de18 <_malloc_r>
 800e678:	4606      	mov	r6, r0
 800e67a:	b360      	cbz	r0, 800e6d6 <__ssputs_r+0xa2>
 800e67c:	6921      	ldr	r1, [r4, #16]
 800e67e:	464a      	mov	r2, r9
 800e680:	f7fe fcfb 	bl	800d07a <memcpy>
 800e684:	89a3      	ldrh	r3, [r4, #12]
 800e686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e68e:	81a3      	strh	r3, [r4, #12]
 800e690:	6126      	str	r6, [r4, #16]
 800e692:	6165      	str	r5, [r4, #20]
 800e694:	444e      	add	r6, r9
 800e696:	eba5 0509 	sub.w	r5, r5, r9
 800e69a:	6026      	str	r6, [r4, #0]
 800e69c:	60a5      	str	r5, [r4, #8]
 800e69e:	463e      	mov	r6, r7
 800e6a0:	42be      	cmp	r6, r7
 800e6a2:	d900      	bls.n	800e6a6 <__ssputs_r+0x72>
 800e6a4:	463e      	mov	r6, r7
 800e6a6:	6820      	ldr	r0, [r4, #0]
 800e6a8:	4632      	mov	r2, r6
 800e6aa:	4641      	mov	r1, r8
 800e6ac:	f000 f9c6 	bl	800ea3c <memmove>
 800e6b0:	68a3      	ldr	r3, [r4, #8]
 800e6b2:	1b9b      	subs	r3, r3, r6
 800e6b4:	60a3      	str	r3, [r4, #8]
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	4433      	add	r3, r6
 800e6ba:	6023      	str	r3, [r4, #0]
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c2:	462a      	mov	r2, r5
 800e6c4:	f000 fa28 	bl	800eb18 <_realloc_r>
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	d1e0      	bne.n	800e690 <__ssputs_r+0x5c>
 800e6ce:	6921      	ldr	r1, [r4, #16]
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	f7ff fb2d 	bl	800dd30 <_free_r>
 800e6d6:	230c      	movs	r3, #12
 800e6d8:	f8ca 3000 	str.w	r3, [sl]
 800e6dc:	89a3      	ldrh	r3, [r4, #12]
 800e6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e2:	81a3      	strh	r3, [r4, #12]
 800e6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e8:	e7e9      	b.n	800e6be <__ssputs_r+0x8a>
	...

0800e6ec <_svfiprintf_r>:
 800e6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f0:	4698      	mov	r8, r3
 800e6f2:	898b      	ldrh	r3, [r1, #12]
 800e6f4:	061b      	lsls	r3, r3, #24
 800e6f6:	b09d      	sub	sp, #116	@ 0x74
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	460d      	mov	r5, r1
 800e6fc:	4614      	mov	r4, r2
 800e6fe:	d510      	bpl.n	800e722 <_svfiprintf_r+0x36>
 800e700:	690b      	ldr	r3, [r1, #16]
 800e702:	b973      	cbnz	r3, 800e722 <_svfiprintf_r+0x36>
 800e704:	2140      	movs	r1, #64	@ 0x40
 800e706:	f7ff fb87 	bl	800de18 <_malloc_r>
 800e70a:	6028      	str	r0, [r5, #0]
 800e70c:	6128      	str	r0, [r5, #16]
 800e70e:	b930      	cbnz	r0, 800e71e <_svfiprintf_r+0x32>
 800e710:	230c      	movs	r3, #12
 800e712:	603b      	str	r3, [r7, #0]
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	b01d      	add	sp, #116	@ 0x74
 800e71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71e:	2340      	movs	r3, #64	@ 0x40
 800e720:	616b      	str	r3, [r5, #20]
 800e722:	2300      	movs	r3, #0
 800e724:	9309      	str	r3, [sp, #36]	@ 0x24
 800e726:	2320      	movs	r3, #32
 800e728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e72c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e730:	2330      	movs	r3, #48	@ 0x30
 800e732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8d0 <_svfiprintf_r+0x1e4>
 800e736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e73a:	f04f 0901 	mov.w	r9, #1
 800e73e:	4623      	mov	r3, r4
 800e740:	469a      	mov	sl, r3
 800e742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e746:	b10a      	cbz	r2, 800e74c <_svfiprintf_r+0x60>
 800e748:	2a25      	cmp	r2, #37	@ 0x25
 800e74a:	d1f9      	bne.n	800e740 <_svfiprintf_r+0x54>
 800e74c:	ebba 0b04 	subs.w	fp, sl, r4
 800e750:	d00b      	beq.n	800e76a <_svfiprintf_r+0x7e>
 800e752:	465b      	mov	r3, fp
 800e754:	4622      	mov	r2, r4
 800e756:	4629      	mov	r1, r5
 800e758:	4638      	mov	r0, r7
 800e75a:	f7ff ff6b 	bl	800e634 <__ssputs_r>
 800e75e:	3001      	adds	r0, #1
 800e760:	f000 80a7 	beq.w	800e8b2 <_svfiprintf_r+0x1c6>
 800e764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e766:	445a      	add	r2, fp
 800e768:	9209      	str	r2, [sp, #36]	@ 0x24
 800e76a:	f89a 3000 	ldrb.w	r3, [sl]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 809f 	beq.w	800e8b2 <_svfiprintf_r+0x1c6>
 800e774:	2300      	movs	r3, #0
 800e776:	f04f 32ff 	mov.w	r2, #4294967295
 800e77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e77e:	f10a 0a01 	add.w	sl, sl, #1
 800e782:	9304      	str	r3, [sp, #16]
 800e784:	9307      	str	r3, [sp, #28]
 800e786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e78a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e78c:	4654      	mov	r4, sl
 800e78e:	2205      	movs	r2, #5
 800e790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e794:	484e      	ldr	r0, [pc, #312]	@ (800e8d0 <_svfiprintf_r+0x1e4>)
 800e796:	f7f1 fd2b 	bl	80001f0 <memchr>
 800e79a:	9a04      	ldr	r2, [sp, #16]
 800e79c:	b9d8      	cbnz	r0, 800e7d6 <_svfiprintf_r+0xea>
 800e79e:	06d0      	lsls	r0, r2, #27
 800e7a0:	bf44      	itt	mi
 800e7a2:	2320      	movmi	r3, #32
 800e7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7a8:	0711      	lsls	r1, r2, #28
 800e7aa:	bf44      	itt	mi
 800e7ac:	232b      	movmi	r3, #43	@ 0x2b
 800e7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7b8:	d015      	beq.n	800e7e6 <_svfiprintf_r+0xfa>
 800e7ba:	9a07      	ldr	r2, [sp, #28]
 800e7bc:	4654      	mov	r4, sl
 800e7be:	2000      	movs	r0, #0
 800e7c0:	f04f 0c0a 	mov.w	ip, #10
 800e7c4:	4621      	mov	r1, r4
 800e7c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ca:	3b30      	subs	r3, #48	@ 0x30
 800e7cc:	2b09      	cmp	r3, #9
 800e7ce:	d94b      	bls.n	800e868 <_svfiprintf_r+0x17c>
 800e7d0:	b1b0      	cbz	r0, 800e800 <_svfiprintf_r+0x114>
 800e7d2:	9207      	str	r2, [sp, #28]
 800e7d4:	e014      	b.n	800e800 <_svfiprintf_r+0x114>
 800e7d6:	eba0 0308 	sub.w	r3, r0, r8
 800e7da:	fa09 f303 	lsl.w	r3, r9, r3
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	9304      	str	r3, [sp, #16]
 800e7e2:	46a2      	mov	sl, r4
 800e7e4:	e7d2      	b.n	800e78c <_svfiprintf_r+0xa0>
 800e7e6:	9b03      	ldr	r3, [sp, #12]
 800e7e8:	1d19      	adds	r1, r3, #4
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	9103      	str	r1, [sp, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	bfbb      	ittet	lt
 800e7f2:	425b      	neglt	r3, r3
 800e7f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e7f8:	9307      	strge	r3, [sp, #28]
 800e7fa:	9307      	strlt	r3, [sp, #28]
 800e7fc:	bfb8      	it	lt
 800e7fe:	9204      	strlt	r2, [sp, #16]
 800e800:	7823      	ldrb	r3, [r4, #0]
 800e802:	2b2e      	cmp	r3, #46	@ 0x2e
 800e804:	d10a      	bne.n	800e81c <_svfiprintf_r+0x130>
 800e806:	7863      	ldrb	r3, [r4, #1]
 800e808:	2b2a      	cmp	r3, #42	@ 0x2a
 800e80a:	d132      	bne.n	800e872 <_svfiprintf_r+0x186>
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	1d1a      	adds	r2, r3, #4
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	9203      	str	r2, [sp, #12]
 800e814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e818:	3402      	adds	r4, #2
 800e81a:	9305      	str	r3, [sp, #20]
 800e81c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8e0 <_svfiprintf_r+0x1f4>
 800e820:	7821      	ldrb	r1, [r4, #0]
 800e822:	2203      	movs	r2, #3
 800e824:	4650      	mov	r0, sl
 800e826:	f7f1 fce3 	bl	80001f0 <memchr>
 800e82a:	b138      	cbz	r0, 800e83c <_svfiprintf_r+0x150>
 800e82c:	9b04      	ldr	r3, [sp, #16]
 800e82e:	eba0 000a 	sub.w	r0, r0, sl
 800e832:	2240      	movs	r2, #64	@ 0x40
 800e834:	4082      	lsls	r2, r0
 800e836:	4313      	orrs	r3, r2
 800e838:	3401      	adds	r4, #1
 800e83a:	9304      	str	r3, [sp, #16]
 800e83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e840:	4824      	ldr	r0, [pc, #144]	@ (800e8d4 <_svfiprintf_r+0x1e8>)
 800e842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e846:	2206      	movs	r2, #6
 800e848:	f7f1 fcd2 	bl	80001f0 <memchr>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d036      	beq.n	800e8be <_svfiprintf_r+0x1d2>
 800e850:	4b21      	ldr	r3, [pc, #132]	@ (800e8d8 <_svfiprintf_r+0x1ec>)
 800e852:	bb1b      	cbnz	r3, 800e89c <_svfiprintf_r+0x1b0>
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	3307      	adds	r3, #7
 800e858:	f023 0307 	bic.w	r3, r3, #7
 800e85c:	3308      	adds	r3, #8
 800e85e:	9303      	str	r3, [sp, #12]
 800e860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e862:	4433      	add	r3, r6
 800e864:	9309      	str	r3, [sp, #36]	@ 0x24
 800e866:	e76a      	b.n	800e73e <_svfiprintf_r+0x52>
 800e868:	fb0c 3202 	mla	r2, ip, r2, r3
 800e86c:	460c      	mov	r4, r1
 800e86e:	2001      	movs	r0, #1
 800e870:	e7a8      	b.n	800e7c4 <_svfiprintf_r+0xd8>
 800e872:	2300      	movs	r3, #0
 800e874:	3401      	adds	r4, #1
 800e876:	9305      	str	r3, [sp, #20]
 800e878:	4619      	mov	r1, r3
 800e87a:	f04f 0c0a 	mov.w	ip, #10
 800e87e:	4620      	mov	r0, r4
 800e880:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e884:	3a30      	subs	r2, #48	@ 0x30
 800e886:	2a09      	cmp	r2, #9
 800e888:	d903      	bls.n	800e892 <_svfiprintf_r+0x1a6>
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d0c6      	beq.n	800e81c <_svfiprintf_r+0x130>
 800e88e:	9105      	str	r1, [sp, #20]
 800e890:	e7c4      	b.n	800e81c <_svfiprintf_r+0x130>
 800e892:	fb0c 2101 	mla	r1, ip, r1, r2
 800e896:	4604      	mov	r4, r0
 800e898:	2301      	movs	r3, #1
 800e89a:	e7f0      	b.n	800e87e <_svfiprintf_r+0x192>
 800e89c:	ab03      	add	r3, sp, #12
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	462a      	mov	r2, r5
 800e8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e8dc <_svfiprintf_r+0x1f0>)
 800e8a4:	a904      	add	r1, sp, #16
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	f7fd fe78 	bl	800c59c <_printf_float>
 800e8ac:	1c42      	adds	r2, r0, #1
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	d1d6      	bne.n	800e860 <_svfiprintf_r+0x174>
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	065b      	lsls	r3, r3, #25
 800e8b6:	f53f af2d 	bmi.w	800e714 <_svfiprintf_r+0x28>
 800e8ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8bc:	e72c      	b.n	800e718 <_svfiprintf_r+0x2c>
 800e8be:	ab03      	add	r3, sp, #12
 800e8c0:	9300      	str	r3, [sp, #0]
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <_svfiprintf_r+0x1f0>)
 800e8c6:	a904      	add	r1, sp, #16
 800e8c8:	4638      	mov	r0, r7
 800e8ca:	f7fe f8ff 	bl	800cacc <_printf_i>
 800e8ce:	e7ed      	b.n	800e8ac <_svfiprintf_r+0x1c0>
 800e8d0:	08010040 	.word	0x08010040
 800e8d4:	0801004a 	.word	0x0801004a
 800e8d8:	0800c59d 	.word	0x0800c59d
 800e8dc:	0800e635 	.word	0x0800e635
 800e8e0:	08010046 	.word	0x08010046

0800e8e4 <__sflush_r>:
 800e8e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ec:	0716      	lsls	r6, r2, #28
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	d454      	bmi.n	800e99e <__sflush_r+0xba>
 800e8f4:	684b      	ldr	r3, [r1, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dc02      	bgt.n	800e900 <__sflush_r+0x1c>
 800e8fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd48      	ble.n	800e992 <__sflush_r+0xae>
 800e900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e902:	2e00      	cmp	r6, #0
 800e904:	d045      	beq.n	800e992 <__sflush_r+0xae>
 800e906:	2300      	movs	r3, #0
 800e908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e90c:	682f      	ldr	r7, [r5, #0]
 800e90e:	6a21      	ldr	r1, [r4, #32]
 800e910:	602b      	str	r3, [r5, #0]
 800e912:	d030      	beq.n	800e976 <__sflush_r+0x92>
 800e914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e916:	89a3      	ldrh	r3, [r4, #12]
 800e918:	0759      	lsls	r1, r3, #29
 800e91a:	d505      	bpl.n	800e928 <__sflush_r+0x44>
 800e91c:	6863      	ldr	r3, [r4, #4]
 800e91e:	1ad2      	subs	r2, r2, r3
 800e920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e922:	b10b      	cbz	r3, 800e928 <__sflush_r+0x44>
 800e924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e926:	1ad2      	subs	r2, r2, r3
 800e928:	2300      	movs	r3, #0
 800e92a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e92c:	6a21      	ldr	r1, [r4, #32]
 800e92e:	4628      	mov	r0, r5
 800e930:	47b0      	blx	r6
 800e932:	1c43      	adds	r3, r0, #1
 800e934:	89a3      	ldrh	r3, [r4, #12]
 800e936:	d106      	bne.n	800e946 <__sflush_r+0x62>
 800e938:	6829      	ldr	r1, [r5, #0]
 800e93a:	291d      	cmp	r1, #29
 800e93c:	d82b      	bhi.n	800e996 <__sflush_r+0xb2>
 800e93e:	4a2a      	ldr	r2, [pc, #168]	@ (800e9e8 <__sflush_r+0x104>)
 800e940:	410a      	asrs	r2, r1
 800e942:	07d6      	lsls	r6, r2, #31
 800e944:	d427      	bmi.n	800e996 <__sflush_r+0xb2>
 800e946:	2200      	movs	r2, #0
 800e948:	6062      	str	r2, [r4, #4]
 800e94a:	04d9      	lsls	r1, r3, #19
 800e94c:	6922      	ldr	r2, [r4, #16]
 800e94e:	6022      	str	r2, [r4, #0]
 800e950:	d504      	bpl.n	800e95c <__sflush_r+0x78>
 800e952:	1c42      	adds	r2, r0, #1
 800e954:	d101      	bne.n	800e95a <__sflush_r+0x76>
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	b903      	cbnz	r3, 800e95c <__sflush_r+0x78>
 800e95a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e95c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e95e:	602f      	str	r7, [r5, #0]
 800e960:	b1b9      	cbz	r1, 800e992 <__sflush_r+0xae>
 800e962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e966:	4299      	cmp	r1, r3
 800e968:	d002      	beq.n	800e970 <__sflush_r+0x8c>
 800e96a:	4628      	mov	r0, r5
 800e96c:	f7ff f9e0 	bl	800dd30 <_free_r>
 800e970:	2300      	movs	r3, #0
 800e972:	6363      	str	r3, [r4, #52]	@ 0x34
 800e974:	e00d      	b.n	800e992 <__sflush_r+0xae>
 800e976:	2301      	movs	r3, #1
 800e978:	4628      	mov	r0, r5
 800e97a:	47b0      	blx	r6
 800e97c:	4602      	mov	r2, r0
 800e97e:	1c50      	adds	r0, r2, #1
 800e980:	d1c9      	bne.n	800e916 <__sflush_r+0x32>
 800e982:	682b      	ldr	r3, [r5, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d0c6      	beq.n	800e916 <__sflush_r+0x32>
 800e988:	2b1d      	cmp	r3, #29
 800e98a:	d001      	beq.n	800e990 <__sflush_r+0xac>
 800e98c:	2b16      	cmp	r3, #22
 800e98e:	d11e      	bne.n	800e9ce <__sflush_r+0xea>
 800e990:	602f      	str	r7, [r5, #0]
 800e992:	2000      	movs	r0, #0
 800e994:	e022      	b.n	800e9dc <__sflush_r+0xf8>
 800e996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e99a:	b21b      	sxth	r3, r3
 800e99c:	e01b      	b.n	800e9d6 <__sflush_r+0xf2>
 800e99e:	690f      	ldr	r7, [r1, #16]
 800e9a0:	2f00      	cmp	r7, #0
 800e9a2:	d0f6      	beq.n	800e992 <__sflush_r+0xae>
 800e9a4:	0793      	lsls	r3, r2, #30
 800e9a6:	680e      	ldr	r6, [r1, #0]
 800e9a8:	bf08      	it	eq
 800e9aa:	694b      	ldreq	r3, [r1, #20]
 800e9ac:	600f      	str	r7, [r1, #0]
 800e9ae:	bf18      	it	ne
 800e9b0:	2300      	movne	r3, #0
 800e9b2:	eba6 0807 	sub.w	r8, r6, r7
 800e9b6:	608b      	str	r3, [r1, #8]
 800e9b8:	f1b8 0f00 	cmp.w	r8, #0
 800e9bc:	dde9      	ble.n	800e992 <__sflush_r+0xae>
 800e9be:	6a21      	ldr	r1, [r4, #32]
 800e9c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9c2:	4643      	mov	r3, r8
 800e9c4:	463a      	mov	r2, r7
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	47b0      	blx	r6
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	dc08      	bgt.n	800e9e0 <__sflush_r+0xfc>
 800e9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9d6:	81a3      	strh	r3, [r4, #12]
 800e9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e0:	4407      	add	r7, r0
 800e9e2:	eba8 0800 	sub.w	r8, r8, r0
 800e9e6:	e7e7      	b.n	800e9b8 <__sflush_r+0xd4>
 800e9e8:	dfbffffe 	.word	0xdfbffffe

0800e9ec <_fflush_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	690b      	ldr	r3, [r1, #16]
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	b913      	cbnz	r3, 800e9fc <_fflush_r+0x10>
 800e9f6:	2500      	movs	r5, #0
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	b118      	cbz	r0, 800ea06 <_fflush_r+0x1a>
 800e9fe:	6a03      	ldr	r3, [r0, #32]
 800ea00:	b90b      	cbnz	r3, 800ea06 <_fflush_r+0x1a>
 800ea02:	f7fe fa0f 	bl	800ce24 <__sinit>
 800ea06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0f3      	beq.n	800e9f6 <_fflush_r+0xa>
 800ea0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea10:	07d0      	lsls	r0, r2, #31
 800ea12:	d404      	bmi.n	800ea1e <_fflush_r+0x32>
 800ea14:	0599      	lsls	r1, r3, #22
 800ea16:	d402      	bmi.n	800ea1e <_fflush_r+0x32>
 800ea18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea1a:	f7fe fb2c 	bl	800d076 <__retarget_lock_acquire_recursive>
 800ea1e:	4628      	mov	r0, r5
 800ea20:	4621      	mov	r1, r4
 800ea22:	f7ff ff5f 	bl	800e8e4 <__sflush_r>
 800ea26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea28:	07da      	lsls	r2, r3, #31
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	d4e4      	bmi.n	800e9f8 <_fflush_r+0xc>
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	059b      	lsls	r3, r3, #22
 800ea32:	d4e1      	bmi.n	800e9f8 <_fflush_r+0xc>
 800ea34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea36:	f7fe fb1f 	bl	800d078 <__retarget_lock_release_recursive>
 800ea3a:	e7dd      	b.n	800e9f8 <_fflush_r+0xc>

0800ea3c <memmove>:
 800ea3c:	4288      	cmp	r0, r1
 800ea3e:	b510      	push	{r4, lr}
 800ea40:	eb01 0402 	add.w	r4, r1, r2
 800ea44:	d902      	bls.n	800ea4c <memmove+0x10>
 800ea46:	4284      	cmp	r4, r0
 800ea48:	4623      	mov	r3, r4
 800ea4a:	d807      	bhi.n	800ea5c <memmove+0x20>
 800ea4c:	1e43      	subs	r3, r0, #1
 800ea4e:	42a1      	cmp	r1, r4
 800ea50:	d008      	beq.n	800ea64 <memmove+0x28>
 800ea52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea5a:	e7f8      	b.n	800ea4e <memmove+0x12>
 800ea5c:	4402      	add	r2, r0
 800ea5e:	4601      	mov	r1, r0
 800ea60:	428a      	cmp	r2, r1
 800ea62:	d100      	bne.n	800ea66 <memmove+0x2a>
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea6e:	e7f7      	b.n	800ea60 <memmove+0x24>

0800ea70 <_sbrk_r>:
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4d06      	ldr	r5, [pc, #24]	@ (800ea8c <_sbrk_r+0x1c>)
 800ea74:	2300      	movs	r3, #0
 800ea76:	4604      	mov	r4, r0
 800ea78:	4608      	mov	r0, r1
 800ea7a:	602b      	str	r3, [r5, #0]
 800ea7c:	f7f5 fa1e 	bl	8003ebc <_sbrk>
 800ea80:	1c43      	adds	r3, r0, #1
 800ea82:	d102      	bne.n	800ea8a <_sbrk_r+0x1a>
 800ea84:	682b      	ldr	r3, [r5, #0]
 800ea86:	b103      	cbz	r3, 800ea8a <_sbrk_r+0x1a>
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	bd38      	pop	{r3, r4, r5, pc}
 800ea8c:	200053dc 	.word	0x200053dc

0800ea90 <__assert_func>:
 800ea90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea92:	4614      	mov	r4, r2
 800ea94:	461a      	mov	r2, r3
 800ea96:	4b09      	ldr	r3, [pc, #36]	@ (800eabc <__assert_func+0x2c>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	68d8      	ldr	r0, [r3, #12]
 800ea9e:	b954      	cbnz	r4, 800eab6 <__assert_func+0x26>
 800eaa0:	4b07      	ldr	r3, [pc, #28]	@ (800eac0 <__assert_func+0x30>)
 800eaa2:	461c      	mov	r4, r3
 800eaa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eaa8:	9100      	str	r1, [sp, #0]
 800eaaa:	462b      	mov	r3, r5
 800eaac:	4905      	ldr	r1, [pc, #20]	@ (800eac4 <__assert_func+0x34>)
 800eaae:	f000 f86f 	bl	800eb90 <fiprintf>
 800eab2:	f000 f87f 	bl	800ebb4 <abort>
 800eab6:	4b04      	ldr	r3, [pc, #16]	@ (800eac8 <__assert_func+0x38>)
 800eab8:	e7f4      	b.n	800eaa4 <__assert_func+0x14>
 800eaba:	bf00      	nop
 800eabc:	20000020 	.word	0x20000020
 800eac0:	08010096 	.word	0x08010096
 800eac4:	08010068 	.word	0x08010068
 800eac8:	0801005b 	.word	0x0801005b

0800eacc <_calloc_r>:
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	fba1 5402 	umull	r5, r4, r1, r2
 800ead2:	b93c      	cbnz	r4, 800eae4 <_calloc_r+0x18>
 800ead4:	4629      	mov	r1, r5
 800ead6:	f7ff f99f 	bl	800de18 <_malloc_r>
 800eada:	4606      	mov	r6, r0
 800eadc:	b928      	cbnz	r0, 800eaea <_calloc_r+0x1e>
 800eade:	2600      	movs	r6, #0
 800eae0:	4630      	mov	r0, r6
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
 800eae4:	220c      	movs	r2, #12
 800eae6:	6002      	str	r2, [r0, #0]
 800eae8:	e7f9      	b.n	800eade <_calloc_r+0x12>
 800eaea:	462a      	mov	r2, r5
 800eaec:	4621      	mov	r1, r4
 800eaee:	f7fe fa32 	bl	800cf56 <memset>
 800eaf2:	e7f5      	b.n	800eae0 <_calloc_r+0x14>

0800eaf4 <__ascii_mbtowc>:
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	b901      	cbnz	r1, 800eafa <__ascii_mbtowc+0x6>
 800eaf8:	a901      	add	r1, sp, #4
 800eafa:	b142      	cbz	r2, 800eb0e <__ascii_mbtowc+0x1a>
 800eafc:	b14b      	cbz	r3, 800eb12 <__ascii_mbtowc+0x1e>
 800eafe:	7813      	ldrb	r3, [r2, #0]
 800eb00:	600b      	str	r3, [r1, #0]
 800eb02:	7812      	ldrb	r2, [r2, #0]
 800eb04:	1e10      	subs	r0, r2, #0
 800eb06:	bf18      	it	ne
 800eb08:	2001      	movne	r0, #1
 800eb0a:	b002      	add	sp, #8
 800eb0c:	4770      	bx	lr
 800eb0e:	4610      	mov	r0, r2
 800eb10:	e7fb      	b.n	800eb0a <__ascii_mbtowc+0x16>
 800eb12:	f06f 0001 	mvn.w	r0, #1
 800eb16:	e7f8      	b.n	800eb0a <__ascii_mbtowc+0x16>

0800eb18 <_realloc_r>:
 800eb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	4615      	mov	r5, r2
 800eb20:	460c      	mov	r4, r1
 800eb22:	b921      	cbnz	r1, 800eb2e <_realloc_r+0x16>
 800eb24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb28:	4611      	mov	r1, r2
 800eb2a:	f7ff b975 	b.w	800de18 <_malloc_r>
 800eb2e:	b92a      	cbnz	r2, 800eb3c <_realloc_r+0x24>
 800eb30:	f7ff f8fe 	bl	800dd30 <_free_r>
 800eb34:	2400      	movs	r4, #0
 800eb36:	4620      	mov	r0, r4
 800eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3c:	f000 f841 	bl	800ebc2 <_malloc_usable_size_r>
 800eb40:	4285      	cmp	r5, r0
 800eb42:	4606      	mov	r6, r0
 800eb44:	d802      	bhi.n	800eb4c <_realloc_r+0x34>
 800eb46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb4a:	d8f4      	bhi.n	800eb36 <_realloc_r+0x1e>
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4640      	mov	r0, r8
 800eb50:	f7ff f962 	bl	800de18 <_malloc_r>
 800eb54:	4607      	mov	r7, r0
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d0ec      	beq.n	800eb34 <_realloc_r+0x1c>
 800eb5a:	42b5      	cmp	r5, r6
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4621      	mov	r1, r4
 800eb60:	bf28      	it	cs
 800eb62:	4632      	movcs	r2, r6
 800eb64:	f7fe fa89 	bl	800d07a <memcpy>
 800eb68:	4621      	mov	r1, r4
 800eb6a:	4640      	mov	r0, r8
 800eb6c:	f7ff f8e0 	bl	800dd30 <_free_r>
 800eb70:	463c      	mov	r4, r7
 800eb72:	e7e0      	b.n	800eb36 <_realloc_r+0x1e>

0800eb74 <__ascii_wctomb>:
 800eb74:	4603      	mov	r3, r0
 800eb76:	4608      	mov	r0, r1
 800eb78:	b141      	cbz	r1, 800eb8c <__ascii_wctomb+0x18>
 800eb7a:	2aff      	cmp	r2, #255	@ 0xff
 800eb7c:	d904      	bls.n	800eb88 <__ascii_wctomb+0x14>
 800eb7e:	228a      	movs	r2, #138	@ 0x8a
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	f04f 30ff 	mov.w	r0, #4294967295
 800eb86:	4770      	bx	lr
 800eb88:	700a      	strb	r2, [r1, #0]
 800eb8a:	2001      	movs	r0, #1
 800eb8c:	4770      	bx	lr
	...

0800eb90 <fiprintf>:
 800eb90:	b40e      	push	{r1, r2, r3}
 800eb92:	b503      	push	{r0, r1, lr}
 800eb94:	4601      	mov	r1, r0
 800eb96:	ab03      	add	r3, sp, #12
 800eb98:	4805      	ldr	r0, [pc, #20]	@ (800ebb0 <fiprintf+0x20>)
 800eb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb9e:	6800      	ldr	r0, [r0, #0]
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	f000 f83f 	bl	800ec24 <_vfiprintf_r>
 800eba6:	b002      	add	sp, #8
 800eba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebac:	b003      	add	sp, #12
 800ebae:	4770      	bx	lr
 800ebb0:	20000020 	.word	0x20000020

0800ebb4 <abort>:
 800ebb4:	b508      	push	{r3, lr}
 800ebb6:	2006      	movs	r0, #6
 800ebb8:	f000 fa08 	bl	800efcc <raise>
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	f7f5 f905 	bl	8003dcc <_exit>

0800ebc2 <_malloc_usable_size_r>:
 800ebc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebc6:	1f18      	subs	r0, r3, #4
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	bfbc      	itt	lt
 800ebcc:	580b      	ldrlt	r3, [r1, r0]
 800ebce:	18c0      	addlt	r0, r0, r3
 800ebd0:	4770      	bx	lr

0800ebd2 <__sfputc_r>:
 800ebd2:	6893      	ldr	r3, [r2, #8]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	b410      	push	{r4}
 800ebda:	6093      	str	r3, [r2, #8]
 800ebdc:	da08      	bge.n	800ebf0 <__sfputc_r+0x1e>
 800ebde:	6994      	ldr	r4, [r2, #24]
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	db01      	blt.n	800ebe8 <__sfputc_r+0x16>
 800ebe4:	290a      	cmp	r1, #10
 800ebe6:	d103      	bne.n	800ebf0 <__sfputc_r+0x1e>
 800ebe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebec:	f000 b932 	b.w	800ee54 <__swbuf_r>
 800ebf0:	6813      	ldr	r3, [r2, #0]
 800ebf2:	1c58      	adds	r0, r3, #1
 800ebf4:	6010      	str	r0, [r2, #0]
 800ebf6:	7019      	strb	r1, [r3, #0]
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <__sfputs_r>:
 800ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec02:	4606      	mov	r6, r0
 800ec04:	460f      	mov	r7, r1
 800ec06:	4614      	mov	r4, r2
 800ec08:	18d5      	adds	r5, r2, r3
 800ec0a:	42ac      	cmp	r4, r5
 800ec0c:	d101      	bne.n	800ec12 <__sfputs_r+0x12>
 800ec0e:	2000      	movs	r0, #0
 800ec10:	e007      	b.n	800ec22 <__sfputs_r+0x22>
 800ec12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec16:	463a      	mov	r2, r7
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f7ff ffda 	bl	800ebd2 <__sfputc_r>
 800ec1e:	1c43      	adds	r3, r0, #1
 800ec20:	d1f3      	bne.n	800ec0a <__sfputs_r+0xa>
 800ec22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec24 <_vfiprintf_r>:
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	460d      	mov	r5, r1
 800ec2a:	b09d      	sub	sp, #116	@ 0x74
 800ec2c:	4614      	mov	r4, r2
 800ec2e:	4698      	mov	r8, r3
 800ec30:	4606      	mov	r6, r0
 800ec32:	b118      	cbz	r0, 800ec3c <_vfiprintf_r+0x18>
 800ec34:	6a03      	ldr	r3, [r0, #32]
 800ec36:	b90b      	cbnz	r3, 800ec3c <_vfiprintf_r+0x18>
 800ec38:	f7fe f8f4 	bl	800ce24 <__sinit>
 800ec3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec3e:	07d9      	lsls	r1, r3, #31
 800ec40:	d405      	bmi.n	800ec4e <_vfiprintf_r+0x2a>
 800ec42:	89ab      	ldrh	r3, [r5, #12]
 800ec44:	059a      	lsls	r2, r3, #22
 800ec46:	d402      	bmi.n	800ec4e <_vfiprintf_r+0x2a>
 800ec48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec4a:	f7fe fa14 	bl	800d076 <__retarget_lock_acquire_recursive>
 800ec4e:	89ab      	ldrh	r3, [r5, #12]
 800ec50:	071b      	lsls	r3, r3, #28
 800ec52:	d501      	bpl.n	800ec58 <_vfiprintf_r+0x34>
 800ec54:	692b      	ldr	r3, [r5, #16]
 800ec56:	b99b      	cbnz	r3, 800ec80 <_vfiprintf_r+0x5c>
 800ec58:	4629      	mov	r1, r5
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f000 f938 	bl	800eed0 <__swsetup_r>
 800ec60:	b170      	cbz	r0, 800ec80 <_vfiprintf_r+0x5c>
 800ec62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec64:	07dc      	lsls	r4, r3, #31
 800ec66:	d504      	bpl.n	800ec72 <_vfiprintf_r+0x4e>
 800ec68:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6c:	b01d      	add	sp, #116	@ 0x74
 800ec6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec72:	89ab      	ldrh	r3, [r5, #12]
 800ec74:	0598      	lsls	r0, r3, #22
 800ec76:	d4f7      	bmi.n	800ec68 <_vfiprintf_r+0x44>
 800ec78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec7a:	f7fe f9fd 	bl	800d078 <__retarget_lock_release_recursive>
 800ec7e:	e7f3      	b.n	800ec68 <_vfiprintf_r+0x44>
 800ec80:	2300      	movs	r3, #0
 800ec82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec84:	2320      	movs	r3, #32
 800ec86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec8e:	2330      	movs	r3, #48	@ 0x30
 800ec90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee40 <_vfiprintf_r+0x21c>
 800ec94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec98:	f04f 0901 	mov.w	r9, #1
 800ec9c:	4623      	mov	r3, r4
 800ec9e:	469a      	mov	sl, r3
 800eca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eca4:	b10a      	cbz	r2, 800ecaa <_vfiprintf_r+0x86>
 800eca6:	2a25      	cmp	r2, #37	@ 0x25
 800eca8:	d1f9      	bne.n	800ec9e <_vfiprintf_r+0x7a>
 800ecaa:	ebba 0b04 	subs.w	fp, sl, r4
 800ecae:	d00b      	beq.n	800ecc8 <_vfiprintf_r+0xa4>
 800ecb0:	465b      	mov	r3, fp
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f7ff ffa2 	bl	800ec00 <__sfputs_r>
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	f000 80a7 	beq.w	800ee10 <_vfiprintf_r+0x1ec>
 800ecc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecc4:	445a      	add	r2, fp
 800ecc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecc8:	f89a 3000 	ldrb.w	r3, [sl]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f000 809f 	beq.w	800ee10 <_vfiprintf_r+0x1ec>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecdc:	f10a 0a01 	add.w	sl, sl, #1
 800ece0:	9304      	str	r3, [sp, #16]
 800ece2:	9307      	str	r3, [sp, #28]
 800ece4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ece8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecea:	4654      	mov	r4, sl
 800ecec:	2205      	movs	r2, #5
 800ecee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf2:	4853      	ldr	r0, [pc, #332]	@ (800ee40 <_vfiprintf_r+0x21c>)
 800ecf4:	f7f1 fa7c 	bl	80001f0 <memchr>
 800ecf8:	9a04      	ldr	r2, [sp, #16]
 800ecfa:	b9d8      	cbnz	r0, 800ed34 <_vfiprintf_r+0x110>
 800ecfc:	06d1      	lsls	r1, r2, #27
 800ecfe:	bf44      	itt	mi
 800ed00:	2320      	movmi	r3, #32
 800ed02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed06:	0713      	lsls	r3, r2, #28
 800ed08:	bf44      	itt	mi
 800ed0a:	232b      	movmi	r3, #43	@ 0x2b
 800ed0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed10:	f89a 3000 	ldrb.w	r3, [sl]
 800ed14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed16:	d015      	beq.n	800ed44 <_vfiprintf_r+0x120>
 800ed18:	9a07      	ldr	r2, [sp, #28]
 800ed1a:	4654      	mov	r4, sl
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	f04f 0c0a 	mov.w	ip, #10
 800ed22:	4621      	mov	r1, r4
 800ed24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed28:	3b30      	subs	r3, #48	@ 0x30
 800ed2a:	2b09      	cmp	r3, #9
 800ed2c:	d94b      	bls.n	800edc6 <_vfiprintf_r+0x1a2>
 800ed2e:	b1b0      	cbz	r0, 800ed5e <_vfiprintf_r+0x13a>
 800ed30:	9207      	str	r2, [sp, #28]
 800ed32:	e014      	b.n	800ed5e <_vfiprintf_r+0x13a>
 800ed34:	eba0 0308 	sub.w	r3, r0, r8
 800ed38:	fa09 f303 	lsl.w	r3, r9, r3
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	9304      	str	r3, [sp, #16]
 800ed40:	46a2      	mov	sl, r4
 800ed42:	e7d2      	b.n	800ecea <_vfiprintf_r+0xc6>
 800ed44:	9b03      	ldr	r3, [sp, #12]
 800ed46:	1d19      	adds	r1, r3, #4
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	9103      	str	r1, [sp, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	bfbb      	ittet	lt
 800ed50:	425b      	neglt	r3, r3
 800ed52:	f042 0202 	orrlt.w	r2, r2, #2
 800ed56:	9307      	strge	r3, [sp, #28]
 800ed58:	9307      	strlt	r3, [sp, #28]
 800ed5a:	bfb8      	it	lt
 800ed5c:	9204      	strlt	r2, [sp, #16]
 800ed5e:	7823      	ldrb	r3, [r4, #0]
 800ed60:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed62:	d10a      	bne.n	800ed7a <_vfiprintf_r+0x156>
 800ed64:	7863      	ldrb	r3, [r4, #1]
 800ed66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed68:	d132      	bne.n	800edd0 <_vfiprintf_r+0x1ac>
 800ed6a:	9b03      	ldr	r3, [sp, #12]
 800ed6c:	1d1a      	adds	r2, r3, #4
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	9203      	str	r2, [sp, #12]
 800ed72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed76:	3402      	adds	r4, #2
 800ed78:	9305      	str	r3, [sp, #20]
 800ed7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee50 <_vfiprintf_r+0x22c>
 800ed7e:	7821      	ldrb	r1, [r4, #0]
 800ed80:	2203      	movs	r2, #3
 800ed82:	4650      	mov	r0, sl
 800ed84:	f7f1 fa34 	bl	80001f0 <memchr>
 800ed88:	b138      	cbz	r0, 800ed9a <_vfiprintf_r+0x176>
 800ed8a:	9b04      	ldr	r3, [sp, #16]
 800ed8c:	eba0 000a 	sub.w	r0, r0, sl
 800ed90:	2240      	movs	r2, #64	@ 0x40
 800ed92:	4082      	lsls	r2, r0
 800ed94:	4313      	orrs	r3, r2
 800ed96:	3401      	adds	r4, #1
 800ed98:	9304      	str	r3, [sp, #16]
 800ed9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed9e:	4829      	ldr	r0, [pc, #164]	@ (800ee44 <_vfiprintf_r+0x220>)
 800eda0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eda4:	2206      	movs	r2, #6
 800eda6:	f7f1 fa23 	bl	80001f0 <memchr>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d03f      	beq.n	800ee2e <_vfiprintf_r+0x20a>
 800edae:	4b26      	ldr	r3, [pc, #152]	@ (800ee48 <_vfiprintf_r+0x224>)
 800edb0:	bb1b      	cbnz	r3, 800edfa <_vfiprintf_r+0x1d6>
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	3307      	adds	r3, #7
 800edb6:	f023 0307 	bic.w	r3, r3, #7
 800edba:	3308      	adds	r3, #8
 800edbc:	9303      	str	r3, [sp, #12]
 800edbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc0:	443b      	add	r3, r7
 800edc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc4:	e76a      	b.n	800ec9c <_vfiprintf_r+0x78>
 800edc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800edca:	460c      	mov	r4, r1
 800edcc:	2001      	movs	r0, #1
 800edce:	e7a8      	b.n	800ed22 <_vfiprintf_r+0xfe>
 800edd0:	2300      	movs	r3, #0
 800edd2:	3401      	adds	r4, #1
 800edd4:	9305      	str	r3, [sp, #20]
 800edd6:	4619      	mov	r1, r3
 800edd8:	f04f 0c0a 	mov.w	ip, #10
 800eddc:	4620      	mov	r0, r4
 800edde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ede2:	3a30      	subs	r2, #48	@ 0x30
 800ede4:	2a09      	cmp	r2, #9
 800ede6:	d903      	bls.n	800edf0 <_vfiprintf_r+0x1cc>
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d0c6      	beq.n	800ed7a <_vfiprintf_r+0x156>
 800edec:	9105      	str	r1, [sp, #20]
 800edee:	e7c4      	b.n	800ed7a <_vfiprintf_r+0x156>
 800edf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800edf4:	4604      	mov	r4, r0
 800edf6:	2301      	movs	r3, #1
 800edf8:	e7f0      	b.n	800eddc <_vfiprintf_r+0x1b8>
 800edfa:	ab03      	add	r3, sp, #12
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	462a      	mov	r2, r5
 800ee00:	4b12      	ldr	r3, [pc, #72]	@ (800ee4c <_vfiprintf_r+0x228>)
 800ee02:	a904      	add	r1, sp, #16
 800ee04:	4630      	mov	r0, r6
 800ee06:	f7fd fbc9 	bl	800c59c <_printf_float>
 800ee0a:	4607      	mov	r7, r0
 800ee0c:	1c78      	adds	r0, r7, #1
 800ee0e:	d1d6      	bne.n	800edbe <_vfiprintf_r+0x19a>
 800ee10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee12:	07d9      	lsls	r1, r3, #31
 800ee14:	d405      	bmi.n	800ee22 <_vfiprintf_r+0x1fe>
 800ee16:	89ab      	ldrh	r3, [r5, #12]
 800ee18:	059a      	lsls	r2, r3, #22
 800ee1a:	d402      	bmi.n	800ee22 <_vfiprintf_r+0x1fe>
 800ee1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee1e:	f7fe f92b 	bl	800d078 <__retarget_lock_release_recursive>
 800ee22:	89ab      	ldrh	r3, [r5, #12]
 800ee24:	065b      	lsls	r3, r3, #25
 800ee26:	f53f af1f 	bmi.w	800ec68 <_vfiprintf_r+0x44>
 800ee2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee2c:	e71e      	b.n	800ec6c <_vfiprintf_r+0x48>
 800ee2e:	ab03      	add	r3, sp, #12
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	462a      	mov	r2, r5
 800ee34:	4b05      	ldr	r3, [pc, #20]	@ (800ee4c <_vfiprintf_r+0x228>)
 800ee36:	a904      	add	r1, sp, #16
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f7fd fe47 	bl	800cacc <_printf_i>
 800ee3e:	e7e4      	b.n	800ee0a <_vfiprintf_r+0x1e6>
 800ee40:	08010040 	.word	0x08010040
 800ee44:	0801004a 	.word	0x0801004a
 800ee48:	0800c59d 	.word	0x0800c59d
 800ee4c:	0800ec01 	.word	0x0800ec01
 800ee50:	08010046 	.word	0x08010046

0800ee54 <__swbuf_r>:
 800ee54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee56:	460e      	mov	r6, r1
 800ee58:	4614      	mov	r4, r2
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	b118      	cbz	r0, 800ee66 <__swbuf_r+0x12>
 800ee5e:	6a03      	ldr	r3, [r0, #32]
 800ee60:	b90b      	cbnz	r3, 800ee66 <__swbuf_r+0x12>
 800ee62:	f7fd ffdf 	bl	800ce24 <__sinit>
 800ee66:	69a3      	ldr	r3, [r4, #24]
 800ee68:	60a3      	str	r3, [r4, #8]
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	071a      	lsls	r2, r3, #28
 800ee6e:	d501      	bpl.n	800ee74 <__swbuf_r+0x20>
 800ee70:	6923      	ldr	r3, [r4, #16]
 800ee72:	b943      	cbnz	r3, 800ee86 <__swbuf_r+0x32>
 800ee74:	4621      	mov	r1, r4
 800ee76:	4628      	mov	r0, r5
 800ee78:	f000 f82a 	bl	800eed0 <__swsetup_r>
 800ee7c:	b118      	cbz	r0, 800ee86 <__swbuf_r+0x32>
 800ee7e:	f04f 37ff 	mov.w	r7, #4294967295
 800ee82:	4638      	mov	r0, r7
 800ee84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	6922      	ldr	r2, [r4, #16]
 800ee8a:	1a98      	subs	r0, r3, r2
 800ee8c:	6963      	ldr	r3, [r4, #20]
 800ee8e:	b2f6      	uxtb	r6, r6
 800ee90:	4283      	cmp	r3, r0
 800ee92:	4637      	mov	r7, r6
 800ee94:	dc05      	bgt.n	800eea2 <__swbuf_r+0x4e>
 800ee96:	4621      	mov	r1, r4
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f7ff fda7 	bl	800e9ec <_fflush_r>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d1ed      	bne.n	800ee7e <__swbuf_r+0x2a>
 800eea2:	68a3      	ldr	r3, [r4, #8]
 800eea4:	3b01      	subs	r3, #1
 800eea6:	60a3      	str	r3, [r4, #8]
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	6022      	str	r2, [r4, #0]
 800eeae:	701e      	strb	r6, [r3, #0]
 800eeb0:	6962      	ldr	r2, [r4, #20]
 800eeb2:	1c43      	adds	r3, r0, #1
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d004      	beq.n	800eec2 <__swbuf_r+0x6e>
 800eeb8:	89a3      	ldrh	r3, [r4, #12]
 800eeba:	07db      	lsls	r3, r3, #31
 800eebc:	d5e1      	bpl.n	800ee82 <__swbuf_r+0x2e>
 800eebe:	2e0a      	cmp	r6, #10
 800eec0:	d1df      	bne.n	800ee82 <__swbuf_r+0x2e>
 800eec2:	4621      	mov	r1, r4
 800eec4:	4628      	mov	r0, r5
 800eec6:	f7ff fd91 	bl	800e9ec <_fflush_r>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d0d9      	beq.n	800ee82 <__swbuf_r+0x2e>
 800eece:	e7d6      	b.n	800ee7e <__swbuf_r+0x2a>

0800eed0 <__swsetup_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4b29      	ldr	r3, [pc, #164]	@ (800ef78 <__swsetup_r+0xa8>)
 800eed4:	4605      	mov	r5, r0
 800eed6:	6818      	ldr	r0, [r3, #0]
 800eed8:	460c      	mov	r4, r1
 800eeda:	b118      	cbz	r0, 800eee4 <__swsetup_r+0x14>
 800eedc:	6a03      	ldr	r3, [r0, #32]
 800eede:	b90b      	cbnz	r3, 800eee4 <__swsetup_r+0x14>
 800eee0:	f7fd ffa0 	bl	800ce24 <__sinit>
 800eee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee8:	0719      	lsls	r1, r3, #28
 800eeea:	d422      	bmi.n	800ef32 <__swsetup_r+0x62>
 800eeec:	06da      	lsls	r2, r3, #27
 800eeee:	d407      	bmi.n	800ef00 <__swsetup_r+0x30>
 800eef0:	2209      	movs	r2, #9
 800eef2:	602a      	str	r2, [r5, #0]
 800eef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eef8:	81a3      	strh	r3, [r4, #12]
 800eefa:	f04f 30ff 	mov.w	r0, #4294967295
 800eefe:	e033      	b.n	800ef68 <__swsetup_r+0x98>
 800ef00:	0758      	lsls	r0, r3, #29
 800ef02:	d512      	bpl.n	800ef2a <__swsetup_r+0x5a>
 800ef04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef06:	b141      	cbz	r1, 800ef1a <__swsetup_r+0x4a>
 800ef08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef0c:	4299      	cmp	r1, r3
 800ef0e:	d002      	beq.n	800ef16 <__swsetup_r+0x46>
 800ef10:	4628      	mov	r0, r5
 800ef12:	f7fe ff0d 	bl	800dd30 <_free_r>
 800ef16:	2300      	movs	r3, #0
 800ef18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef1a:	89a3      	ldrh	r3, [r4, #12]
 800ef1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef20:	81a3      	strh	r3, [r4, #12]
 800ef22:	2300      	movs	r3, #0
 800ef24:	6063      	str	r3, [r4, #4]
 800ef26:	6923      	ldr	r3, [r4, #16]
 800ef28:	6023      	str	r3, [r4, #0]
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f043 0308 	orr.w	r3, r3, #8
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	6923      	ldr	r3, [r4, #16]
 800ef34:	b94b      	cbnz	r3, 800ef4a <__swsetup_r+0x7a>
 800ef36:	89a3      	ldrh	r3, [r4, #12]
 800ef38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef40:	d003      	beq.n	800ef4a <__swsetup_r+0x7a>
 800ef42:	4621      	mov	r1, r4
 800ef44:	4628      	mov	r0, r5
 800ef46:	f000 f883 	bl	800f050 <__smakebuf_r>
 800ef4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef4e:	f013 0201 	ands.w	r2, r3, #1
 800ef52:	d00a      	beq.n	800ef6a <__swsetup_r+0x9a>
 800ef54:	2200      	movs	r2, #0
 800ef56:	60a2      	str	r2, [r4, #8]
 800ef58:	6962      	ldr	r2, [r4, #20]
 800ef5a:	4252      	negs	r2, r2
 800ef5c:	61a2      	str	r2, [r4, #24]
 800ef5e:	6922      	ldr	r2, [r4, #16]
 800ef60:	b942      	cbnz	r2, 800ef74 <__swsetup_r+0xa4>
 800ef62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef66:	d1c5      	bne.n	800eef4 <__swsetup_r+0x24>
 800ef68:	bd38      	pop	{r3, r4, r5, pc}
 800ef6a:	0799      	lsls	r1, r3, #30
 800ef6c:	bf58      	it	pl
 800ef6e:	6962      	ldrpl	r2, [r4, #20]
 800ef70:	60a2      	str	r2, [r4, #8]
 800ef72:	e7f4      	b.n	800ef5e <__swsetup_r+0x8e>
 800ef74:	2000      	movs	r0, #0
 800ef76:	e7f7      	b.n	800ef68 <__swsetup_r+0x98>
 800ef78:	20000020 	.word	0x20000020

0800ef7c <_raise_r>:
 800ef7c:	291f      	cmp	r1, #31
 800ef7e:	b538      	push	{r3, r4, r5, lr}
 800ef80:	4605      	mov	r5, r0
 800ef82:	460c      	mov	r4, r1
 800ef84:	d904      	bls.n	800ef90 <_raise_r+0x14>
 800ef86:	2316      	movs	r3, #22
 800ef88:	6003      	str	r3, [r0, #0]
 800ef8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef92:	b112      	cbz	r2, 800ef9a <_raise_r+0x1e>
 800ef94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef98:	b94b      	cbnz	r3, 800efae <_raise_r+0x32>
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	f000 f830 	bl	800f000 <_getpid_r>
 800efa0:	4622      	mov	r2, r4
 800efa2:	4601      	mov	r1, r0
 800efa4:	4628      	mov	r0, r5
 800efa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efaa:	f000 b817 	b.w	800efdc <_kill_r>
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d00a      	beq.n	800efc8 <_raise_r+0x4c>
 800efb2:	1c59      	adds	r1, r3, #1
 800efb4:	d103      	bne.n	800efbe <_raise_r+0x42>
 800efb6:	2316      	movs	r3, #22
 800efb8:	6003      	str	r3, [r0, #0]
 800efba:	2001      	movs	r0, #1
 800efbc:	e7e7      	b.n	800ef8e <_raise_r+0x12>
 800efbe:	2100      	movs	r1, #0
 800efc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efc4:	4620      	mov	r0, r4
 800efc6:	4798      	blx	r3
 800efc8:	2000      	movs	r0, #0
 800efca:	e7e0      	b.n	800ef8e <_raise_r+0x12>

0800efcc <raise>:
 800efcc:	4b02      	ldr	r3, [pc, #8]	@ (800efd8 <raise+0xc>)
 800efce:	4601      	mov	r1, r0
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	f7ff bfd3 	b.w	800ef7c <_raise_r>
 800efd6:	bf00      	nop
 800efd8:	20000020 	.word	0x20000020

0800efdc <_kill_r>:
 800efdc:	b538      	push	{r3, r4, r5, lr}
 800efde:	4d07      	ldr	r5, [pc, #28]	@ (800effc <_kill_r+0x20>)
 800efe0:	2300      	movs	r3, #0
 800efe2:	4604      	mov	r4, r0
 800efe4:	4608      	mov	r0, r1
 800efe6:	4611      	mov	r1, r2
 800efe8:	602b      	str	r3, [r5, #0]
 800efea:	f7f4 fedf 	bl	8003dac <_kill>
 800efee:	1c43      	adds	r3, r0, #1
 800eff0:	d102      	bne.n	800eff8 <_kill_r+0x1c>
 800eff2:	682b      	ldr	r3, [r5, #0]
 800eff4:	b103      	cbz	r3, 800eff8 <_kill_r+0x1c>
 800eff6:	6023      	str	r3, [r4, #0]
 800eff8:	bd38      	pop	{r3, r4, r5, pc}
 800effa:	bf00      	nop
 800effc:	200053dc 	.word	0x200053dc

0800f000 <_getpid_r>:
 800f000:	f7f4 becc 	b.w	8003d9c <_getpid>

0800f004 <__swhatbuf_r>:
 800f004:	b570      	push	{r4, r5, r6, lr}
 800f006:	460c      	mov	r4, r1
 800f008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f00c:	2900      	cmp	r1, #0
 800f00e:	b096      	sub	sp, #88	@ 0x58
 800f010:	4615      	mov	r5, r2
 800f012:	461e      	mov	r6, r3
 800f014:	da0d      	bge.n	800f032 <__swhatbuf_r+0x2e>
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f01c:	f04f 0100 	mov.w	r1, #0
 800f020:	bf14      	ite	ne
 800f022:	2340      	movne	r3, #64	@ 0x40
 800f024:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f028:	2000      	movs	r0, #0
 800f02a:	6031      	str	r1, [r6, #0]
 800f02c:	602b      	str	r3, [r5, #0]
 800f02e:	b016      	add	sp, #88	@ 0x58
 800f030:	bd70      	pop	{r4, r5, r6, pc}
 800f032:	466a      	mov	r2, sp
 800f034:	f000 f848 	bl	800f0c8 <_fstat_r>
 800f038:	2800      	cmp	r0, #0
 800f03a:	dbec      	blt.n	800f016 <__swhatbuf_r+0x12>
 800f03c:	9901      	ldr	r1, [sp, #4]
 800f03e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f042:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f046:	4259      	negs	r1, r3
 800f048:	4159      	adcs	r1, r3
 800f04a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f04e:	e7eb      	b.n	800f028 <__swhatbuf_r+0x24>

0800f050 <__smakebuf_r>:
 800f050:	898b      	ldrh	r3, [r1, #12]
 800f052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f054:	079d      	lsls	r5, r3, #30
 800f056:	4606      	mov	r6, r0
 800f058:	460c      	mov	r4, r1
 800f05a:	d507      	bpl.n	800f06c <__smakebuf_r+0x1c>
 800f05c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	2301      	movs	r3, #1
 800f066:	6163      	str	r3, [r4, #20]
 800f068:	b003      	add	sp, #12
 800f06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f06c:	ab01      	add	r3, sp, #4
 800f06e:	466a      	mov	r2, sp
 800f070:	f7ff ffc8 	bl	800f004 <__swhatbuf_r>
 800f074:	9f00      	ldr	r7, [sp, #0]
 800f076:	4605      	mov	r5, r0
 800f078:	4639      	mov	r1, r7
 800f07a:	4630      	mov	r0, r6
 800f07c:	f7fe fecc 	bl	800de18 <_malloc_r>
 800f080:	b948      	cbnz	r0, 800f096 <__smakebuf_r+0x46>
 800f082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f086:	059a      	lsls	r2, r3, #22
 800f088:	d4ee      	bmi.n	800f068 <__smakebuf_r+0x18>
 800f08a:	f023 0303 	bic.w	r3, r3, #3
 800f08e:	f043 0302 	orr.w	r3, r3, #2
 800f092:	81a3      	strh	r3, [r4, #12]
 800f094:	e7e2      	b.n	800f05c <__smakebuf_r+0xc>
 800f096:	89a3      	ldrh	r3, [r4, #12]
 800f098:	6020      	str	r0, [r4, #0]
 800f09a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	9b01      	ldr	r3, [sp, #4]
 800f0a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0a6:	b15b      	cbz	r3, 800f0c0 <__smakebuf_r+0x70>
 800f0a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f000 f81d 	bl	800f0ec <_isatty_r>
 800f0b2:	b128      	cbz	r0, 800f0c0 <__smakebuf_r+0x70>
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	f023 0303 	bic.w	r3, r3, #3
 800f0ba:	f043 0301 	orr.w	r3, r3, #1
 800f0be:	81a3      	strh	r3, [r4, #12]
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	431d      	orrs	r5, r3
 800f0c4:	81a5      	strh	r5, [r4, #12]
 800f0c6:	e7cf      	b.n	800f068 <__smakebuf_r+0x18>

0800f0c8 <_fstat_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4d07      	ldr	r5, [pc, #28]	@ (800f0e8 <_fstat_r+0x20>)
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	4608      	mov	r0, r1
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	602b      	str	r3, [r5, #0]
 800f0d6:	f7f4 fec9 	bl	8003e6c <_fstat>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	d102      	bne.n	800f0e4 <_fstat_r+0x1c>
 800f0de:	682b      	ldr	r3, [r5, #0]
 800f0e0:	b103      	cbz	r3, 800f0e4 <_fstat_r+0x1c>
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
 800f0e6:	bf00      	nop
 800f0e8:	200053dc 	.word	0x200053dc

0800f0ec <_isatty_r>:
 800f0ec:	b538      	push	{r3, r4, r5, lr}
 800f0ee:	4d06      	ldr	r5, [pc, #24]	@ (800f108 <_isatty_r+0x1c>)
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	4608      	mov	r0, r1
 800f0f6:	602b      	str	r3, [r5, #0]
 800f0f8:	f7f4 fec8 	bl	8003e8c <_isatty>
 800f0fc:	1c43      	adds	r3, r0, #1
 800f0fe:	d102      	bne.n	800f106 <_isatty_r+0x1a>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	b103      	cbz	r3, 800f106 <_isatty_r+0x1a>
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	bd38      	pop	{r3, r4, r5, pc}
 800f108:	200053dc 	.word	0x200053dc

0800f10c <_init>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	bf00      	nop
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr

0800f118 <_fini>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	bf00      	nop
 800f11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f11e:	bc08      	pop	{r3}
 800f120:	469e      	mov	lr, r3
 800f122:	4770      	bx	lr
