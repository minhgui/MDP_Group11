
MDP Task 2 v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e744  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  0800e8d8  0800e8d8  0000f8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f908  0800f908  000111dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f908  0800f908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f910  0800f910  000111dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f910  0800f910  00010910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f914  0800f914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800f918  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111dc  2**0
                  CONTENTS
 10 .bss          00005200  200001e0  200001e0  000111e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200053e0  200053e0  000111e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cdce  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ce0  00000000  00000000  0002dfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae0  00000000  00000000  00031cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001513  00000000  00000000  000337a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000568e  00000000  00000000  00034cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9c9  00000000  00000000  0003a341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e735e  00000000  00000000  00058d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140068  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083ec  00000000  00000000  001400ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00148498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e8bc 	.word	0x0800e8bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e8bc 	.word	0x0800e8bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <__NVIC_SystemReset+0x24>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eea:	4904      	ldr	r1, [pc, #16]	@ (8000efc <__NVIC_SystemReset+0x24>)
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_SystemReset+0x28>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef2:	f3bf 8f4f 	dsb	sy
}
 8000ef6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <__NVIC_SystemReset+0x20>
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	05fa0004 	.word	0x05fa0004

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f002 fc38 	bl	800377c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f89a 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 fc36 	bl	8001780 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f14:	f000 fb60 	bl	80015d8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f18:	f000 fa62 	bl	80013e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1c:	f000 f9c2 	bl	80012a4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000f20:	f000 fc04 	bl	800172c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f24:	f000 fab0 	bl	8001488 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f28:	f000 f98e 	bl	8001248 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f2c:	f000 fb00 	bl	8001530 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f30:	f000 f8e6 	bl	8001100 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f34:	f000 f936 	bl	80011a4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /*------------INIT LIBRARIES ----------------*/
 OLED_Init();
 8000f38:	f00a fdec 	bl	800bb14 <OLED_Init>

 /*------------END INIT LIBRARIES ----------------*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f3c:	f007 fec6 	bl	8008ccc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f40:	4a25      	ldr	r2, [pc, #148]	@ (8000fd8 <main+0xd4>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4825      	ldr	r0, [pc, #148]	@ (8000fdc <main+0xd8>)
 8000f46:	f007 ff0b 	bl	8008d60 <osThreadNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a24      	ldr	r2, [pc, #144]	@ (8000fe0 <main+0xdc>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* creation of rightEncoderTas */
  rightEncoderTasHandle = osThreadNew(rightEncoder, NULL, &rightEncoderTas_attributes);
 8000f50:	4a24      	ldr	r2, [pc, #144]	@ (8000fe4 <main+0xe0>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <main+0xe4>)
 8000f56:	f007 ff03 	bl	8008d60 <osThreadNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <main+0xe8>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* creation of leftEncoderTask */
  leftEncoderTaskHandle = osThreadNew(leftEncoder, NULL, &leftEncoderTask_attributes);
 8000f60:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <main+0xec>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4823      	ldr	r0, [pc, #140]	@ (8000ff4 <main+0xf0>)
 8000f66:	f007 fefb 	bl	8008d60 <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a22      	ldr	r2, [pc, #136]	@ (8000ff8 <main+0xf4>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(StartCommsTask, NULL, &CommTask_attributes);
 8000f70:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <main+0xf8>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4822      	ldr	r0, [pc, #136]	@ (8001000 <main+0xfc>)
 8000f76:	f007 fef3 	bl	8008d60 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <main+0x100>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(StartOLEDTask, NULL, &OLED_attributes);
 8000f80:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <main+0x104>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4821      	ldr	r0, [pc, #132]	@ (800100c <main+0x108>)
 8000f86:	f007 feeb 	bl	8008d60 <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a20      	ldr	r2, [pc, #128]	@ (8001010 <main+0x10c>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8000f90:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <main+0x110>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4820      	ldr	r0, [pc, #128]	@ (8001018 <main+0x114>)
 8000f96:	f007 fee3 	bl	8008d60 <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <main+0x118>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(StartGyroTask, NULL, &GyroTask_attributes);
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <main+0x11c>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	481f      	ldr	r0, [pc, #124]	@ (8001024 <main+0x120>)
 8000fa6:	f007 fedb 	bl	8008d60 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a1e      	ldr	r2, [pc, #120]	@ (8001028 <main+0x124>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* creation of UltrasoundTask */
  UltrasoundTaskHandle = osThreadNew(StartUltrasoundTask, NULL, &UltrasoundTask_attributes);
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <main+0x128>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	481e      	ldr	r0, [pc, #120]	@ (8001030 <main+0x12c>)
 8000fb6:	f007 fed3 	bl	8008d60 <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <main+0x130>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001038 <main+0x134>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	481d      	ldr	r0, [pc, #116]	@ (800103c <main+0x138>)
 8000fc6:	f007 fecb 	bl	8008d60 <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <main+0x13c>)
 8000fce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fd0:	f007 fea0 	bl	8008d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <main+0xd0>
 8000fd8:	0800e9d8 	.word	0x0800e9d8
 8000fdc:	080022b9 	.word	0x080022b9
 8000fe0:	20000490 	.word	0x20000490
 8000fe4:	0800e9fc 	.word	0x0800e9fc
 8000fe8:	080022dd 	.word	0x080022dd
 8000fec:	20000494 	.word	0x20000494
 8000ff0:	0800ea20 	.word	0x0800ea20
 8000ff4:	0800236d 	.word	0x0800236d
 8000ff8:	20000498 	.word	0x20000498
 8000ffc:	0800ea44 	.word	0x0800ea44
 8001000:	080023fd 	.word	0x080023fd
 8001004:	2000049c 	.word	0x2000049c
 8001008:	0800ea68 	.word	0x0800ea68
 800100c:	08002739 	.word	0x08002739
 8001010:	200004a0 	.word	0x200004a0
 8001014:	0800ea8c 	.word	0x0800ea8c
 8001018:	08002911 	.word	0x08002911
 800101c:	200004a4 	.word	0x200004a4
 8001020:	0800eab0 	.word	0x0800eab0
 8001024:	08002d69 	.word	0x08002d69
 8001028:	200004a8 	.word	0x200004a8
 800102c:	0800ead4 	.word	0x0800ead4
 8001030:	08002f21 	.word	0x08002f21
 8001034:	200004ac 	.word	0x200004ac
 8001038:	0800eaf8 	.word	0x0800eaf8
 800103c:	08002f45 	.word	0x08002f45
 8001040:	200004b0 	.word	0x200004b0

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f00b fb67 	bl	800c726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <SystemClock_Config+0xb4>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <SystemClock_Config+0xb4>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <SystemClock_Config+0xb4>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <SystemClock_Config+0xb8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1b      	ldr	r2, [pc, #108]	@ (80010fc <SystemClock_Config+0xb8>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <SystemClock_Config+0xb8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 fb8d 	bl	80057d4 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010c0:	f001 ff4d 	bl	8002f5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fdf0 	bl	8005cc4 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010ea:	f001 ff38 	bl	8002f5e <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	@ 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001114:	4a21      	ldr	r2, [pc, #132]	@ (800119c <MX_ADC1_Init+0x9c>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <MX_ADC1_Init+0xa0>)
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <MX_ADC1_Init+0x98>)
 800114c:	2201      	movs	r2, #1
 800114e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_ADC1_Init+0x98>)
 800115a:	2201      	movs	r2, #1
 800115c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001160:	f002 fba2 	bl	80038a8 <HAL_ADC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800116a:	f001 fef8 	bl	8002f5e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800116e:	230b      	movs	r3, #11
 8001170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	@ (8001198 <MX_ADC1_Init+0x98>)
 8001180:	f002 fd74 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800118a:	f001 fee8 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001fc 	.word	0x200001fc
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_ADC2_Init+0x98>)
 80011b8:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <MX_ADC2_Init+0x9c>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <MX_ADC2_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_ADC2_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <MX_ADC2_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_ADC2_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <MX_ADC2_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_ADC2_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_ADC2_Init+0x98>)
 80011e4:	4a17      	ldr	r2, [pc, #92]	@ (8001244 <MX_ADC2_Init+0xa0>)
 80011e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_ADC2_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MX_ADC2_Init+0x98>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_ADC2_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_ADC2_Init+0x98>)
 80011fe:	2201      	movs	r2, #1
 8001200:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001202:	480e      	ldr	r0, [pc, #56]	@ (800123c <MX_ADC2_Init+0x98>)
 8001204:	f002 fb50 	bl	80038a8 <HAL_ADC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800120e:	f001 fea6 	bl	8002f5e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001212:	230c      	movs	r3, #12
 8001214:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001216:	2301      	movs	r3, #1
 8001218:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	@ (800123c <MX_ADC2_Init+0x98>)
 8001224:	f002 fd22 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800122e:	f001 fe96 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000244 	.word	0x20000244
 8001240:	40012100 	.word	0x40012100
 8001244:	0f000001 	.word	0x0f000001

08001248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_I2C1_Init+0x50>)
 800124e:	4a13      	ldr	r2, [pc, #76]	@ (800129c <MX_I2C1_Init+0x54>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <MX_I2C1_Init+0x58>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001286:	f003 fa83 	bl	8004790 <HAL_I2C_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001290:	f001 fe65 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000028c 	.word	0x2000028c
 800129c:	40005400 	.word	0x40005400
 80012a0:	000186a0 	.word	0x000186a0

080012a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b096      	sub	sp, #88	@ 0x58
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
 80012d2:	615a      	str	r2, [r3, #20]
 80012d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2220      	movs	r2, #32
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f00b fa22 	bl	800c726 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e2:	4b3d      	ldr	r3, [pc, #244]	@ (80013d8 <MX_TIM1_Init+0x134>)
 80012e4:	4a3d      	ldr	r2, [pc, #244]	@ (80013dc <MX_TIM1_Init+0x138>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80012e8:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <MX_TIM1_Init+0x134>)
 80012ea:	22a0      	movs	r2, #160	@ 0xa0
 80012ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b3a      	ldr	r3, [pc, #232]	@ (80013d8 <MX_TIM1_Init+0x134>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80012f4:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <MX_TIM1_Init+0x134>)
 80012f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <MX_TIM1_Init+0x134>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001302:	4b35      	ldr	r3, [pc, #212]	@ (80013d8 <MX_TIM1_Init+0x134>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001308:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <MX_TIM1_Init+0x134>)
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130e:	4832      	ldr	r0, [pc, #200]	@ (80013d8 <MX_TIM1_Init+0x134>)
 8001310:	f004 feb8 	bl	8006084 <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800131a:	f001 fe20 	bl	8002f5e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001322:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001324:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001328:	4619      	mov	r1, r3
 800132a:	482b      	ldr	r0, [pc, #172]	@ (80013d8 <MX_TIM1_Init+0x134>)
 800132c:	f005 fd14 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001336:	f001 fe12 	bl	8002f5e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133a:	4827      	ldr	r0, [pc, #156]	@ (80013d8 <MX_TIM1_Init+0x134>)
 800133c:	f004 fef1 	bl	8006122 <HAL_TIM_PWM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001346:	f001 fe0a 	bl	8002f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001352:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001356:	4619      	mov	r1, r3
 8001358:	481f      	ldr	r0, [pc, #124]	@ (80013d8 <MX_TIM1_Init+0x134>)
 800135a:	f006 fa77 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001364:	f001 fdfb 	bl	8002f5e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2360      	movs	r3, #96	@ 0x60
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001384:	220c      	movs	r2, #12
 8001386:	4619      	mov	r1, r3
 8001388:	4813      	ldr	r0, [pc, #76]	@ (80013d8 <MX_TIM1_Init+0x134>)
 800138a:	f005 fc23 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001394:	f001 fde3 	bl	8002f5e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <MX_TIM1_Init+0x134>)
 80013bc:	f006 fac2 	bl	8007944 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80013c6:	f001 fdca 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ca:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <MX_TIM1_Init+0x134>)
 80013cc:	f002 f806 	bl	80033dc <HAL_TIM_MspPostInit>

}
 80013d0:	bf00      	nop
 80013d2:	3758      	adds	r7, #88	@ 0x58
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002e0 	.word	0x200002e0
 80013dc:	40010000 	.word	0x40010000

080013e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	@ 0x30
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2224      	movs	r2, #36	@ 0x24
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b f999 	bl	800c726 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013fc:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <MX_TIM2_Init+0xa4>)
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_TIM2_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <MX_TIM2_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_TIM2_Init+0xa4>)
 8001412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001416:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_TIM2_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_TIM2_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001424:	2303      	movs	r3, #3
 8001426:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800142c:	2301      	movs	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001434:	230a      	movs	r3, #10
 8001436:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800143c:	2301      	movs	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001444:	230a      	movs	r3, #10
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_TIM2_Init+0xa4>)
 8001450:	f005 f900 	bl	8006654 <HAL_TIM_Encoder_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800145a:	f001 fd80 	bl	8002f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_TIM2_Init+0xa4>)
 800146c:	f006 f9ee 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001476:	f001 fd72 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3730      	adds	r7, #48	@ 0x30
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000328 	.word	0x20000328

08001488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	@ 0x30
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2224      	movs	r2, #36	@ 0x24
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f00b f945 	bl	800c726 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a4:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <MX_TIM3_Init+0xa0>)
 80014a6:	4a21      	ldr	r2, [pc, #132]	@ (800152c <MX_TIM3_Init+0xa4>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <MX_TIM3_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <MX_TIM3_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <MX_TIM3_Init+0xa0>)
 80014b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_TIM3_Init+0xa0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_TIM3_Init+0xa0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ca:	2303      	movs	r3, #3
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d2:	2301      	movs	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014da:	230a      	movs	r3, #10
 80014dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e2:	2301      	movs	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80014ea:	230a      	movs	r3, #10
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <MX_TIM3_Init+0xa0>)
 80014f6:	f005 f8ad 	bl	8006654 <HAL_TIM_Encoder_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001500:	f001 fd2d 	bl	8002f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_TIM3_Init+0xa0>)
 8001512:	f006 f99b 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800151c:	f001 fd1f 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	@ 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000370 	.word	0x20000370
 800152c:	40000400 	.word	0x40000400

08001530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 800154e:	4a21      	ldr	r2, [pc, #132]	@ (80015d4 <MX_TIM4_Init+0xa4>)
 8001550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001552:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001554:	220f      	movs	r2, #15
 8001556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001572:	4817      	ldr	r0, [pc, #92]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001574:	f004 fef6 	bl	8006364 <HAL_TIM_IC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800157e:	f001 fcee 	bl	8002f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4619      	mov	r1, r3
 8001590:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 8001592:	f006 f95b 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800159c:	f001 fcdf 	bl	8002f5e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015a0:	2300      	movs	r3, #0
 80015a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <MX_TIM4_Init+0xa0>)
 80015b8:	f005 fa70 	bl	8006a9c <HAL_TIM_IC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80015c2:	f001 fccc 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200003b8 	.word	0x200003b8
 80015d4:	40000800 	.word	0x40000800

080015d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b096      	sub	sp, #88	@ 0x58
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2220      	movs	r2, #32
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f00b f888 	bl	800c726 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001616:	4b43      	ldr	r3, [pc, #268]	@ (8001724 <MX_TIM8_Init+0x14c>)
 8001618:	4a43      	ldr	r2, [pc, #268]	@ (8001728 <MX_TIM8_Init+0x150>)
 800161a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <MX_TIM8_Init+0x14c>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b40      	ldr	r3, [pc, #256]	@ (8001724 <MX_TIM8_Init+0x14c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001628:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <MX_TIM8_Init+0x14c>)
 800162a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800162e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <MX_TIM8_Init+0x14c>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <MX_TIM8_Init+0x14c>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <MX_TIM8_Init+0x14c>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001642:	4838      	ldr	r0, [pc, #224]	@ (8001724 <MX_TIM8_Init+0x14c>)
 8001644:	f004 fd1e 	bl	8006084 <HAL_TIM_Base_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800164e:	f001 fc86 	bl	8002f5e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001656:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001658:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800165c:	4619      	mov	r1, r3
 800165e:	4831      	ldr	r0, [pc, #196]	@ (8001724 <MX_TIM8_Init+0x14c>)
 8001660:	f005 fb7a 	bl	8006d58 <HAL_TIM_ConfigClockSource>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800166a:	f001 fc78 	bl	8002f5e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800166e:	482d      	ldr	r0, [pc, #180]	@ (8001724 <MX_TIM8_Init+0x14c>)
 8001670:	f004 fd57 	bl	8006122 <HAL_TIM_PWM_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800167a:	f001 fc70 	bl	8002f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001686:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800168a:	4619      	mov	r1, r3
 800168c:	4825      	ldr	r0, [pc, #148]	@ (8001724 <MX_TIM8_Init+0x14c>)
 800168e:	f006 f8dd 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001698:	f001 fc61 	bl	8002f5e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169c:	2360      	movs	r3, #96	@ 0x60
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	4818      	ldr	r0, [pc, #96]	@ (8001724 <MX_TIM8_Init+0x14c>)
 80016c2:	f005 fa87 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80016cc:	f001 fc47 	bl	8002f5e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d4:	2204      	movs	r2, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	@ (8001724 <MX_TIM8_Init+0x14c>)
 80016da:	f005 fa7b 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80016e4:	f001 fc3b 	bl	8002f5e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001700:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <MX_TIM8_Init+0x14c>)
 800170c:	f006 f91a 	bl	8007944 <HAL_TIMEx_ConfigBreakDeadTime>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001716:	f001 fc22 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3758      	adds	r7, #88	@ 0x58
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000400 	.word	0x20000400
 8001728:	40010400 	.word	0x40010400

0800172c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	@ (800177c <MX_USART3_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_USART3_UART_Init+0x4c>)
 8001764:	f006 f954 	bl	8007a10 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f001 fbf6 	bl	8002f5e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000448 	.word	0x20000448
 800177c:	40004800 	.word	0x40004800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	@ 0x30
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	4b49      	ldr	r3, [pc, #292]	@ (80018c0 <MX_GPIO_Init+0x140>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a48      	ldr	r2, [pc, #288]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017a0:	f043 0310 	orr.w	r3, r3, #16
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b46      	ldr	r3, [pc, #280]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	4b42      	ldr	r3, [pc, #264]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b3b      	ldr	r3, [pc, #236]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a3a      	ldr	r2, [pc, #232]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a33      	ldr	r2, [pc, #204]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b31      	ldr	r3, [pc, #196]	@ (80018c0 <MX_GPIO_Init+0x140>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <MX_GPIO_Init+0x140>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <MX_GPIO_Init+0x140>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <MX_GPIO_Init+0x140>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <MX_GPIO_Init+0x140>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <MX_GPIO_Init+0x140>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <MX_GPIO_Init+0x140>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001844:	481f      	ldr	r0, [pc, #124]	@ (80018c4 <MX_GPIO_Init+0x144>)
 8001846:	f002 ff6f 	bl	8004728 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	213c      	movs	r1, #60	@ 0x3c
 800184e:	481e      	ldr	r0, [pc, #120]	@ (80018c8 <MX_GPIO_Init+0x148>)
 8001850:	f002 ff6a 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185a:	481c      	ldr	r0, [pc, #112]	@ (80018cc <MX_GPIO_Init+0x14c>)
 800185c:	f002 ff64 	bl	8004728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001860:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001864:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4812      	ldr	r0, [pc, #72]	@ (80018c4 <MX_GPIO_Init+0x144>)
 800187a:	f002 fdb9 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800187e:	233c      	movs	r3, #60	@ 0x3c
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2302      	movs	r3, #2
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <MX_GPIO_Init+0x148>)
 8001896:	f002 fdab 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 800189a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	@ (80018cc <MX_GPIO_Init+0x14c>)
 80018b4:	f002 fd9c 	bl	80043f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	@ 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning*/
	 UNUSED(huart);
	 receivedInstruction =1;
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <HAL_UART_RxCpltCallback+0x1c>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200004b4 	.word	0x200004b4

080018f0 <moveCarStraight>:


// movement
void moveCarStraight(double distance) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	ed87 0b00 	vstr	d0, [r7]

	distance = distance * 75;
 80018fa:	a331      	add	r3, pc, #196	@ (adr r3, 80019c0 <moveCarStraight+0xd0>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001904:	f7fe fe78 	bl	80005f8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2300 	strd	r2, r3, [r7]
	  pwmVal_servo = SERVOCENTER;
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <moveCarStraight+0xb0>)
 8001912:	2292      	movs	r2, #146	@ 0x92
 8001914:	801a      	strh	r2, [r3, #0]
	  osDelay(450);
 8001916:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800191a:	f007 fab3 	bl	8008e84 <osDelay>
	  e_brake = 0;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <moveCarStraight+0xb4>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
	  times_acceptable = 0;
 8001924:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <moveCarStraight+0xb8>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
	  rightEncoderVal = 75000;
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <moveCarStraight+0xbc>)
 800192c:	4a20      	ldr	r2, [pc, #128]	@ (80019b0 <moveCarStraight+0xc0>)
 800192e:	601a      	str	r2, [r3, #0]
	  leftEncoderVal = 75000;
 8001930:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <moveCarStraight+0xc4>)
 8001932:	4a1f      	ldr	r2, [pc, #124]	@ (80019b0 <moveCarStraight+0xc0>)
 8001934:	601a      	str	r2, [r3, #0]
	  rightTarget = 75000;
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <moveCarStraight+0xc8>)
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <moveCarStraight+0xc0>)
 800193a:	601a      	str	r2, [r3, #0]
	  leftTarget = 75000;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <moveCarStraight+0xcc>)
 800193e:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <moveCarStraight+0xc0>)
 8001940:	601a      	str	r2, [r3, #0]
	  rightTarget += distance;
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <moveCarStraight+0xc8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdec 	bl	8000524 <__aeabi_i2d>
 800194c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001950:	f7fe fc9c 	bl	800028c <__adddf3>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8fc 	bl	8000b58 <__aeabi_d2iz>
 8001960:	4603      	mov	r3, r0
 8001962:	4a15      	ldr	r2, [pc, #84]	@ (80019b8 <moveCarStraight+0xc8>)
 8001964:	6013      	str	r3, [r2, #0]
	  leftTarget += distance;
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <moveCarStraight+0xcc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdda 	bl	8000524 <__aeabi_i2d>
 8001970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001974:	f7fe fc8a 	bl	800028c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f8ea 	bl	8000b58 <__aeabi_d2iz>
 8001984:	4603      	mov	r3, r0
 8001986:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <moveCarStraight+0xcc>)
 8001988:	6013      	str	r3, [r2, #0]

	  while (finishCheck());
 800198a:	bf00      	nop
 800198c:	f000 f984 	bl	8001c98 <finishCheck>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1fa      	bne.n	800198c <moveCarStraight+0x9c>
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	200004d0 	.word	0x200004d0
 80019a8:	200004cc 	.word	0x200004cc
 80019ac:	200004d8 	.word	0x200004d8
 80019b0:	000124f8 	.word	0x000124f8
 80019b4:	200004dc 	.word	0x200004dc
 80019b8:	200004e0 	.word	0x200004e0
 80019bc:	200004e4 	.word	0x200004e4
 80019c0:	00000000 	.word	0x00000000
 80019c4:	4052c000 	.word	0x4052c000

080019c8 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(200);
}

void moveCarRight(double angle) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <moveCarRight+0x54>)
 80019d4:	22fa      	movs	r2, #250	@ 0xfa
 80019d6:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 80019d8:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80019dc:	f007 fa52 	bl	8008e84 <osDelay>
	e_brake = 0;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <moveCarRight+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <moveCarRight+0x5c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <moveCarRight+0x60>)
 80019ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f6:	f7fe fc47 	bl	8000288 <__aeabi_dsub>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	490a      	ldr	r1, [pc, #40]	@ (8001a28 <moveCarRight+0x60>)
 8001a00:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001a04:	bf00      	nop
 8001a06:	f000 f947 	bl	8001c98 <finishCheck>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1fa      	bne.n	8001a06 <moveCarRight+0x3e>
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	200004d0 	.word	0x200004d0
 8001a24:	200004cc 	.word	0x200004cc
 8001a28:	200004e8 	.word	0x200004e8

08001a2c <moveCarLeft>:

void moveCarLeft(double angle) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001a36:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <moveCarLeft+0x54>)
 8001a38:	2254      	movs	r2, #84	@ 0x54
 8001a3a:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 8001a3c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001a40:	f007 fa20 	bl	8008e84 <osDelay>
	e_brake = 0;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <moveCarLeft+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <moveCarLeft+0x5c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <moveCarLeft+0x60>)
 8001a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a5a:	f7fe fc17 	bl	800028c <__adddf3>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	490a      	ldr	r1, [pc, #40]	@ (8001a8c <moveCarLeft+0x60>)
 8001a64:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001a68:	bf00      	nop
 8001a6a:	f000 f915 	bl	8001c98 <finishCheck>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1fa      	bne.n	8001a6a <moveCarLeft+0x3e>
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000
 8001a84:	200004d0 	.word	0x200004d0
 8001a88:	200004cc 	.word	0x200004cc
 8001a8c:	200004e8 	.word	0x200004e8

08001a90 <PID_Control>:



// error correction
int PID_Control(int error, int right) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d018      	beq.n	8001ad2 <PID_Control+0x42>
		if (error > 0) { //go forward
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dd0a      	ble.n	8001abc <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B (RIGHT)- FORWARD
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	4835      	ldr	r0, [pc, #212]	@ (8001b80 <PID_Control+0xf0>)
 8001aac:	f002 fe3c 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	4832      	ldr	r0, [pc, #200]	@ (8001b80 <PID_Control+0xf0>)
 8001ab6:	f002 fe37 	bl	8004728 <HAL_GPIO_WritePin>
 8001aba:	e022      	b.n	8001b02 <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B (RIGHT)- BACKWARDS
 8001abc:	2200      	movs	r2, #0
 8001abe:	2110      	movs	r1, #16
 8001ac0:	482f      	ldr	r0, [pc, #188]	@ (8001b80 <PID_Control+0xf0>)
 8001ac2:	f002 fe31 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2120      	movs	r1, #32
 8001aca:	482d      	ldr	r0, [pc, #180]	@ (8001b80 <PID_Control+0xf0>)
 8001acc:	f002 fe2c 	bl	8004728 <HAL_GPIO_WritePin>
 8001ad0:	e017      	b.n	8001b02 <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	dd0a      	ble.n	8001aee <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A(LEFT) - FORWARD
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2108      	movs	r1, #8
 8001adc:	4828      	ldr	r0, [pc, #160]	@ (8001b80 <PID_Control+0xf0>)
 8001ade:	f002 fe23 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	4826      	ldr	r0, [pc, #152]	@ (8001b80 <PID_Control+0xf0>)
 8001ae8:	f002 fe1e 	bl	8004728 <HAL_GPIO_WritePin>
 8001aec:	e009      	b.n	8001b02 <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A(LEFT) - BACKWARDS
 8001aee:	2200      	movs	r2, #0
 8001af0:	2108      	movs	r1, #8
 8001af2:	4823      	ldr	r0, [pc, #140]	@ (8001b80 <PID_Control+0xf0>)
 8001af4:	f002 fe18 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2104      	movs	r1, #4
 8001afc:	4820      	ldr	r0, [pc, #128]	@ (8001b80 <PID_Control+0xf0>)
 8001afe:	f002 fe13 	bl	8004728 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bfb8      	it	lt
 8001b08:	425b      	neglt	r3, r3
 8001b0a:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b12:	dd02      	ble.n	8001b1a <PID_Control+0x8a>
		return 3000;
 8001b14:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b18:	e02d      	b.n	8001b76 <PID_Control+0xe6>
	} else if (error > 500)     {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b20:	dd02      	ble.n	8001b28 <PID_Control+0x98>
		return 2000;
 8001b22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b26:	e026      	b.n	8001b76 <PID_Control+0xe6>
	 } else if (error > 200)  {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b2c:	dd02      	ble.n	8001b34 <PID_Control+0xa4>
		return 1400;
 8001b2e:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001b32:	e020      	b.n	8001b76 <PID_Control+0xe6>
	  } else if (error > 100)    {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	dd02      	ble.n	8001b40 <PID_Control+0xb0>
		return 1000;
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	e01a      	b.n	8001b76 <PID_Control+0xe6>
	   } else if (error > 2)  {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	dd07      	ble.n	8001b56 <PID_Control+0xc6>
			times_acceptable++;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <PID_Control+0xf4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <PID_Control+0xf4>)
 8001b4e:	6013      	str	r3, [r2, #0]
			return 500;
 8001b50:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b54:	e00f      	b.n	8001b76 <PID_Control+0xe6>
			} else if (error >= 1) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	dd06      	ble.n	8001b6a <PID_Control+0xda>
		times_acceptable++;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <PID_Control+0xf4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <PID_Control+0xf4>)
 8001b64:	6013      	str	r3, [r2, #0]
		return 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e005      	b.n	8001b76 <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <PID_Control+0xf4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <PID_Control+0xf4>)
 8001b72:	6013      	str	r3, [r2, #0]
		return 0;
 8001b74:	2300      	movs	r3, #0
	}
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020000 	.word	0x40020000
 8001b84:	200004cc 	.word	0x200004cc

08001b88 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b92:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <PID_Angle+0x104>)
 8001b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b9e:	f7fe fd2b 	bl	80005f8 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7fe ffd5 	bl	8000b58 <__aeabi_d2iz>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor = WHEEL B
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d018      	beq.n	8001bea <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dd0a      	ble.n	8001bd4 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4833      	ldr	r0, [pc, #204]	@ (8001c90 <PID_Angle+0x108>)
 8001bc4:	f002 fdb0 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2120      	movs	r1, #32
 8001bcc:	4830      	ldr	r0, [pc, #192]	@ (8001c90 <PID_Angle+0x108>)
 8001bce:	f002 fdab 	bl	8004728 <HAL_GPIO_WritePin>
 8001bd2:	e022      	b.n	8001c1a <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	482d      	ldr	r0, [pc, #180]	@ (8001c90 <PID_Angle+0x108>)
 8001bda:	f002 fda5 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2120      	movs	r1, #32
 8001be2:	482b      	ldr	r0, [pc, #172]	@ (8001c90 <PID_Angle+0x108>)
 8001be4:	f002 fda0 	bl	8004728 <HAL_GPIO_WritePin>
 8001be8:	e017      	b.n	8001c1a <PID_Angle+0x92>
		}
	} else { //leftMotor = WHEEL A
		if (error < 0) { //go forward
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da0a      	bge.n	8001c06 <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	4826      	ldr	r0, [pc, #152]	@ (8001c90 <PID_Angle+0x108>)
 8001bf6:	f002 fd97 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4824      	ldr	r0, [pc, #144]	@ (8001c90 <PID_Angle+0x108>)
 8001c00:	f002 fd92 	bl	8004728 <HAL_GPIO_WritePin>
 8001c04:	e009      	b.n	8001c1a <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001c06:	2200      	movs	r2, #0
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4821      	ldr	r0, [pc, #132]	@ (8001c90 <PID_Angle+0x108>)
 8001c0c:	f002 fd8c 	bl	8004728 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	2104      	movs	r1, #4
 8001c14:	481e      	ldr	r0, [pc, #120]	@ (8001c90 <PID_Angle+0x108>)
 8001c16:	f002 fd87 	bl	8004728 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfb8      	it	lt
 8001c20:	425b      	neglt	r3, r3
 8001c22:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c2a:	dd02      	ble.n	8001c32 <PID_Angle+0xaa>
		return 3000;
 8001c2c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c30:	e028      	b.n	8001c84 <PID_Angle+0xfc>
	} else if (error > 200) {
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c36:	dd02      	ble.n	8001c3e <PID_Angle+0xb6>
		return 2000;
 8001c38:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c3c:	e022      	b.n	8001c84 <PID_Angle+0xfc>
	} else if (error > 150) {
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b96      	cmp	r3, #150	@ 0x96
 8001c42:	dd02      	ble.n	8001c4a <PID_Angle+0xc2>
		return 1600;
 8001c44:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001c48:	e01c      	b.n	8001c84 <PID_Angle+0xfc>
	} else if (error > 100) {
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b64      	cmp	r3, #100	@ 0x64
 8001c4e:	dd02      	ble.n	8001c56 <PID_Angle+0xce>
		return 1400;
 8001c50:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001c54:	e016      	b.n	8001c84 <PID_Angle+0xfc>
	} else if (error > 10) {
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	dd02      	ble.n	8001c62 <PID_Angle+0xda>
		return 1000;
 8001c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c60:	e010      	b.n	8001c84 <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	dd07      	ble.n	8001c78 <PID_Angle+0xf0>
		times_acceptable++;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <PID_Angle+0x10c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <PID_Angle+0x10c>)
 8001c70:	6013      	str	r3, [r2, #0]
		return 600;
 8001c72:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001c76:	e005      	b.n	8001c84 <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <PID_Angle+0x10c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <PID_Angle+0x10c>)
 8001c80:	6013      	str	r3, [r2, #0]
		return 0;
 8001c82:	2300      	movs	r3, #0
	}
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40240000 	.word	0x40240000
 8001c90:	40020000 	.word	0x40020000
 8001c94:	200004cc 	.word	0x200004cc

08001c98 <finishCheck>:

int finishCheck() {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {		//break if deviating from path
 8001c9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <finishCheck+0x48>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b14      	cmp	r3, #20
 8001ca2:	dd1a      	ble.n	8001cda <finishCheck+0x42>
		e_brake = 1;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <finishCheck+0x4c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
		pwmVal_Left = pwmVal_Right = 0;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <finishCheck+0x50>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	801a      	strh	r2, [r3, #0]
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <finishCheck+0x50>)
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <finishCheck+0x54>)
 8001cb6:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <finishCheck+0x58>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <finishCheck+0x5c>)
 8001cbe:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <finishCheck+0x60>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <finishCheck+0x64>)
 8001cc6:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <finishCheck+0x48>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001cce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001cd2:	f007 f8d7 	bl	8008e84 <osDelay>
		return 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <finishCheck+0x44>
	}
	return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200004cc 	.word	0x200004cc
 8001ce4:	200004d0 	.word	0x200004d0
 8001ce8:	200004c8 	.word	0x200004c8
 8001cec:	200004ca 	.word	0x200004ca
 8001cf0:	200004dc 	.word	0x200004dc
 8001cf4:	200004e4 	.word	0x200004e4
 8001cf8:	200004d8 	.word	0x200004d8
 8001cfc:	200004e0 	.word	0x200004e0

08001d00 <readByte>:


 //gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <readByte+0x48>)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <readByte+0x4c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	b299      	uxth	r1, r3
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <readByte+0x48>)
 8001d22:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <readByte+0x50>)
 8001d24:	f002 fe78 	bl	8004a18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <readByte+0x4c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	b299      	uxth	r1, r3
 8001d30:	2314      	movs	r3, #20
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2302      	movs	r3, #2
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <readByte+0x50>)
 8001d3a:	f002 ff6b 	bl	8004c14 <HAL_I2C_Master_Receive>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200004f8 	.word	0x200004f8
 8001d4c:	20000002 	.word	0x20000002
 8001d50:	2000028c 	.word	0x2000028c

08001d54 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <writeByte+0x3c>)
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001d6a:	4a09      	ldr	r2, [pc, #36]	@ (8001d90 <writeByte+0x3c>)
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <writeByte+0x40>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	b299      	uxth	r1, r3
 8001d78:	2314      	movs	r3, #20
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <writeByte+0x3c>)
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <writeByte+0x44>)
 8001d82:	f002 fe49 	bl	8004a18 <HAL_I2C_Master_Transmit>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200004f8 	.word	0x200004f8
 8001d94:	20000002 	.word	0x20000002
 8001d98:	2000028c 	.word	0x2000028c

08001d9c <gyroInit>:

void gyroInit() {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001da0:	2100      	movs	r1, #0
 8001da2:	2006      	movs	r0, #6
 8001da4:	f7ff ffd6 	bl	8001d54 <writeByte>
	osDelay(10);
 8001da8:	200a      	movs	r0, #10
 8001daa:	f007 f86b 	bl	8008e84 <osDelay>
	writeByte(0x03, 0x80);
 8001dae:	2180      	movs	r1, #128	@ 0x80
 8001db0:	2003      	movs	r0, #3
 8001db2:	f7ff ffcf 	bl	8001d54 <writeByte>
	osDelay(10);
 8001db6:	200a      	movs	r0, #10
 8001db8:	f007 f864 	bl	8008e84 <osDelay>
	writeByte(0x07, 0x07);
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	2007      	movs	r0, #7
 8001dc0:	f7ff ffc8 	bl	8001d54 <writeByte>
	osDelay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f007 f85d 	bl	8008e84 <osDelay>
	writeByte(0x06, 0x01);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2006      	movs	r0, #6
 8001dce:	f7ff ffc1 	bl	8001d54 <writeByte>
	osDelay(10);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f007 f856 	bl	8008e84 <osDelay>
	writeByte(0x7F, 0x20);
 8001dd8:	2120      	movs	r1, #32
 8001dda:	207f      	movs	r0, #127	@ 0x7f
 8001ddc:	f7ff ffba 	bl	8001d54 <writeByte>
	osDelay(10);
 8001de0:	200a      	movs	r0, #10
 8001de2:	f007 f84f 	bl	8008e84 <osDelay>
	writeByte(0x01, 0x2F);
 8001de6:	212f      	movs	r1, #47	@ 0x2f
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff ffb3 	bl	8001d54 <writeByte>
	osDelay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f007 f848 	bl	8008e84 <osDelay>
	writeByte(0x0, 0x00);
 8001df4:	2100      	movs	r1, #0
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff ffac 	bl	8001d54 <writeByte>
	osDelay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f007 f841 	bl	8008e84 <osDelay>
	writeByte(0x7F, 0x00);
 8001e02:	2100      	movs	r1, #0
 8001e04:	207f      	movs	r0, #127	@ 0x7f
 8001e06:	f7ff ffa5 	bl	8001d54 <writeByte>
	osDelay(10);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f007 f83a 	bl	8008e84 <osDelay>
	writeByte(0x07, 0x00);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2007      	movs	r0, #7
 8001e14:	f7ff ff9e 	bl	8001d54 <writeByte>
	osDelay(10);
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f007 f833 	bl	8008e84 <osDelay>
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <delay_us>:

/************************TASK 2 FUNCTIONS******************/

// ultrasonic
void delay_us(uint16_t time_us) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <delay_us+0x30>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < time_us);
 8001e36:	bf00      	nop
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <delay_us+0x30>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3f9      	bcc.n	8001e38 <delay_us+0x14>
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200003b8 	.word	0x200003b8

08001e58 <Ultrasonic_Read>:


void Ultrasonic_Read(void) //Call when u want to get reading from US
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e62:	480b      	ldr	r0, [pc, #44]	@ (8001e90 <Ultrasonic_Read+0x38>)
 8001e64:	f002 fc60 	bl	8004728 <HAL_GPIO_WritePin>
	delay_us(10);
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f7ff ffdb 	bl	8001e24 <delay_us>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e74:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <Ultrasonic_Read+0x38>)
 8001e76:	f002 fc57 	bl	8004728 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <Ultrasonic_Read+0x3c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <Ultrasonic_Read+0x3c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0202 	orr.w	r2, r2, #2
 8001e88:	60da      	str	r2, [r3, #12]
	//osDelay(50);
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	200003b8 	.word	0x200003b8

08001e98 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]


	if(htim->Channel ==HAL_TIM_ACTIVE_CHANNEL_1){
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7f1b      	ldrb	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	f040 8084 	bne.w	8001fb2 <HAL_TIM_IC_CaptureCallback+0x11a>
		if(u_CapturedTrig1 == 0){	// Ultrasonic Trigger first sent
 8001eaa:	4b47      	ldr	r3, [pc, #284]	@ (8001fc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d11b      	bne.n	8001eea <HAL_TIM_IC_CaptureCallback+0x52>
			trig1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f005 f817 	bl	8006ee8 <HAL_TIM_ReadCapturedValue>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001ec0:	601a      	str	r2, [r3, #0]
			u_CapturedTrig1 =1;
 8001ec2:	4b41      	ldr	r3, [pc, #260]	@ (8001fc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 020a 	bic.w	r2, r2, #10
 8001ed6:	621a      	str	r2, [r3, #32]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0202 	orr.w	r2, r2, #2
 8001ee6:	621a      	str	r2, [r3, #32]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001ee8:	e063      	b.n	8001fb2 <HAL_TIM_IC_CaptureCallback+0x11a>
		else if (u_CapturedTrig1 == 1){	//Ultrasonic Trigger 2nd sent
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d15f      	bne.n	8001fb2 <HAL_TIM_IC_CaptureCallback+0x11a>
				trig2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f004 fff7 	bl	8006ee8 <HAL_TIM_ReadCapturedValue>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f00:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim,0);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24
				if (trig2 > trig1){
 8001f0a:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fcc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	dd0d      	ble.n	8001f32 <HAL_TIM_IC_CaptureCallback+0x9a>
					echo_pulse = trig2-trig1;		//width of pulse
 8001f16:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe faff 	bl	8000524 <__aeabi_i2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	492a      	ldr	r1, [pc, #168]	@ (8001fd4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f2c:	e9c1 2300 	strd	r2, r3, [r1]
 8001f30:	e00f      	b.n	8001f52 <HAL_TIM_IC_CaptureCallback+0xba>
					echo_pulse = (65535-trig1)+trig2;	//if overflow, width of pulse
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001f3a:	33ff      	adds	r3, #255	@ 0xff
 8001f3c:	4a24      	ldr	r2, [pc, #144]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe faee 	bl	8000524 <__aeabi_i2d>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4921      	ldr	r1, [pc, #132]	@ (8001fd4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f4e:	e9c1 2300 	strd	r2, r3, [r1]
				echo_dist = echo_pulse * 0.0343/2; //echo_dist in cm
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f58:	a319      	add	r3, pc, #100	@ (adr r3, 8001fc0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb4b 	bl	80005f8 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f72:	f7fe fc6b 	bl	800084c <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4917      	ldr	r1, [pc, #92]	@ (8001fd8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001f7c:	e9c1 2300 	strd	r2, r3, [r1]
				u_CapturedTrig1 =0;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 020a 	bic.w	r2, r2, #10
 8001f94:	621a      	str	r2, [r3, #32]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a12      	ldr	r2, [r2, #32]
 8001fa0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0202 	bic.w	r2, r2, #2
 8001fb0:	60da      	str	r2, [r3, #12]
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	04816f00 	.word	0x04816f00
 8001fc4:	3fa18fc5 	.word	0x3fa18fc5
 8001fc8:	20000510 	.word	0x20000510
 8001fcc:	20000528 	.word	0x20000528
 8001fd0:	2000052c 	.word	0x2000052c
 8001fd4:	20000520 	.word	0x20000520
 8001fd8:	20000518 	.word	0x20000518
 8001fdc:	200003b8 	.word	0x200003b8

08001fe0 <IR_Left_Read>:


// ir sensor
void IR_Left_Read() {
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001fe4:	4838      	ldr	r0, [pc, #224]	@ (80020c8 <IR_Left_Read+0xe8>)
 8001fe6:	f001 fca3 	bl	8003930 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001fea:	2164      	movs	r1, #100	@ 0x64
 8001fec:	4836      	ldr	r0, [pc, #216]	@ (80020c8 <IR_Left_Read+0xe8>)
 8001fee:	f001 fda4 	bl	8003b3a <HAL_ADC_PollForConversion>
	RawLeftIRVal = HAL_ADC_GetValue(&hadc1);
 8001ff2:	4835      	ldr	r0, [pc, #212]	@ (80020c8 <IR_Left_Read+0xe8>)
 8001ff4:	f001 fe2c 	bl	8003c50 <HAL_ADC_GetValue>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b33      	ldr	r3, [pc, #204]	@ (80020cc <IR_Left_Read+0xec>)
 8001ffe:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8002000:	4831      	ldr	r0, [pc, #196]	@ (80020c8 <IR_Left_Read+0xe8>)
 8002002:	f001 fd67 	bl	8003ad4 <HAL_ADC_Stop>

	//LPF, Filter coefficient = 0.15
	LeftIRfiltered = (0.15 * RawLeftIRVal) + ((1 - 0.15) * LeftIRfiltered);
 8002006:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <IR_Left_Read+0xec>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa8a 	bl	8000524 <__aeabi_i2d>
 8002010:	a325      	add	r3, pc, #148	@ (adr r3, 80020a8 <IR_Left_Read+0xc8>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe faef 	bl	80005f8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4614      	mov	r4, r2
 8002020:	461d      	mov	r5, r3
 8002022:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <IR_Left_Read+0xf0>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa7c 	bl	8000524 <__aeabi_i2d>
 800202c:	a320      	add	r3, pc, #128	@ (adr r3, 80020b0 <IR_Left_Read+0xd0>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fae1 	bl	80005f8 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe f925 	bl	800028c <__adddf3>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f7fe fdad 	bl	8000ba8 <__aeabi_d2uiz>
 800204e:	4603      	mov	r3, r0
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <IR_Left_Read+0xf0>)
 8002054:	801a      	strh	r2, [r3, #0]

	if(LeftIRfiltered <450) 		//cap the IR filter range to be from 0-70cm+-, else it will go haywire
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <IR_Left_Read+0xf0>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800205e:	d203      	bcs.n	8002068 <IR_Left_Read+0x88>
		IRDistance_Left = 101;
 8002060:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <IR_Left_Read+0xf4>)
 8002062:	2265      	movs	r2, #101	@ 0x65
 8002064:	801a      	strh	r2, [r3, #0]
	else {
		//Equation from calibration and testing
		IRDistance_Left = 29076.34/(LeftIRfiltered-170.63);
	}
}
 8002066:	e01a      	b.n	800209e <IR_Left_Read+0xbe>
		IRDistance_Left = 29076.34/(LeftIRfiltered-170.63);
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <IR_Left_Read+0xf0>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa59 	bl	8000524 <__aeabi_i2d>
 8002072:	a311      	add	r3, pc, #68	@ (adr r3, 80020b8 <IR_Left_Read+0xd8>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe f906 	bl	8000288 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	a10f      	add	r1, pc, #60	@ (adr r1, 80020c0 <IR_Left_Read+0xe0>)
 8002082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002086:	f7fe fbe1 	bl	800084c <__aeabi_ddiv>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fd89 	bl	8000ba8 <__aeabi_d2uiz>
 8002096:	4603      	mov	r3, r0
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <IR_Left_Read+0xf4>)
 800209c:	801a      	strh	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	bdb0      	pop	{r4, r5, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	f3af 8000 	nop.w
 80020a8:	33333333 	.word	0x33333333
 80020ac:	3fc33333 	.word	0x3fc33333
 80020b0:	33333333 	.word	0x33333333
 80020b4:	3feb3333 	.word	0x3feb3333
 80020b8:	f5c28f5c 	.word	0xf5c28f5c
 80020bc:	40655428 	.word	0x40655428
 80020c0:	c28f5c29 	.word	0xc28f5c29
 80020c4:	40dc6515 	.word	0x40dc6515
 80020c8:	200001fc 	.word	0x200001fc
 80020cc:	20000530 	.word	0x20000530
 80020d0:	20000534 	.word	0x20000534
 80020d4:	20000538 	.word	0x20000538

080020d8 <IR_Right_Read>:

void IR_Right_Read() {
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80020dc:	4838      	ldr	r0, [pc, #224]	@ (80021c0 <IR_Right_Read+0xe8>)
 80020de:	f001 fc27 	bl	8003930 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80020e2:	2164      	movs	r1, #100	@ 0x64
 80020e4:	4836      	ldr	r0, [pc, #216]	@ (80021c0 <IR_Right_Read+0xe8>)
 80020e6:	f001 fd28 	bl	8003b3a <HAL_ADC_PollForConversion>
	RawRightIRVal = HAL_ADC_GetValue(&hadc2);
 80020ea:	4835      	ldr	r0, [pc, #212]	@ (80021c0 <IR_Right_Read+0xe8>)
 80020ec:	f001 fdb0 	bl	8003c50 <HAL_ADC_GetValue>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <IR_Right_Read+0xec>)
 80020f6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80020f8:	4831      	ldr	r0, [pc, #196]	@ (80021c0 <IR_Right_Read+0xe8>)
 80020fa:	f001 fceb 	bl	8003ad4 <HAL_ADC_Stop>

	//LPF, Filter coefficient = 0.15
	RightIRfiltered = (0.15 * RawRightIRVal) + ((1 - 0.15) * RightIRfiltered);
 80020fe:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <IR_Right_Read+0xec>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa0e 	bl	8000524 <__aeabi_i2d>
 8002108:	a325      	add	r3, pc, #148	@ (adr r3, 80021a0 <IR_Right_Read+0xc8>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe fa73 	bl	80005f8 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4614      	mov	r4, r2
 8002118:	461d      	mov	r5, r3
 800211a:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <IR_Right_Read+0xf0>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa00 	bl	8000524 <__aeabi_i2d>
 8002124:	a320      	add	r3, pc, #128	@ (adr r3, 80021a8 <IR_Right_Read+0xd0>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f7fe fa65 	bl	80005f8 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f8a9 	bl	800028c <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd31 	bl	8000ba8 <__aeabi_d2uiz>
 8002146:	4603      	mov	r3, r0
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <IR_Right_Read+0xf0>)
 800214c:	801a      	strh	r2, [r3, #0]

	if(RightIRfiltered <450) 		//cap the IR filter range to be from 0-70cm+-, else it will go haywire
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <IR_Right_Read+0xf0>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002156:	d203      	bcs.n	8002160 <IR_Right_Read+0x88>
		IRDistance_Right = 101;
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <IR_Right_Read+0xf4>)
 800215a:	2265      	movs	r2, #101	@ 0x65
 800215c:	801a      	strh	r2, [r3, #0]
	else {
		//Eqn from calibration and testing
		IRDistance_Right = 30181.23/ (RightIRfiltered-133.62);
	//IRDistance_Right = 29076.34/(RightIRfiltered-170.63);
	}
}
 800215e:	e01a      	b.n	8002196 <IR_Right_Read+0xbe>
		IRDistance_Right = 30181.23/ (RightIRfiltered-133.62);
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <IR_Right_Read+0xf0>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f9dd 	bl	8000524 <__aeabi_i2d>
 800216a:	a311      	add	r3, pc, #68	@ (adr r3, 80021b0 <IR_Right_Read+0xd8>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f88a 	bl	8000288 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	a10f      	add	r1, pc, #60	@ (adr r1, 80021b8 <IR_Right_Read+0xe0>)
 800217a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800217e:	f7fe fb65 	bl	800084c <__aeabi_ddiv>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fd0d 	bl	8000ba8 <__aeabi_d2uiz>
 800218e:	4603      	mov	r3, r0
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <IR_Right_Read+0xf4>)
 8002194:	801a      	strh	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	bdb0      	pop	{r4, r5, r7, pc}
 800219a:	bf00      	nop
 800219c:	f3af 8000 	nop.w
 80021a0:	33333333 	.word	0x33333333
 80021a4:	3fc33333 	.word	0x3fc33333
 80021a8:	33333333 	.word	0x33333333
 80021ac:	3feb3333 	.word	0x3feb3333
 80021b0:	0a3d70a4 	.word	0x0a3d70a4
 80021b4:	4060b3d7 	.word	0x4060b3d7
 80021b8:	b851eb85 	.word	0xb851eb85
 80021bc:	40dd794e 	.word	0x40dd794e
 80021c0:	20000244 	.word	0x20000244
 80021c4:	20000532 	.word	0x20000532
 80021c8:	20000536 	.word	0x20000536
 80021cc:	2000053a 	.word	0x2000053a

080021d0 <Step1>:

void Step1() {		//
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	Task2MotorFn =1 ;
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <Step1+0xc8>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
	gyroResetFlag =1;
 80021da:	4b30      	ldr	r3, [pc, #192]	@ (800229c <Step1+0xcc>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

	pwmVal_servo = SERVOCENTER;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <Step1+0xd0>)
 80021e2:	2292      	movs	r2, #146	@ 0x92
 80021e4:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);		//left wheel fwd direction
 80021e6:	2201      	movs	r2, #1
 80021e8:	2108      	movs	r1, #8
 80021ea:	482e      	ldr	r0, [pc, #184]	@ (80022a4 <Step1+0xd4>)
 80021ec:	f002 fa9c 	bl	8004728 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);	//right wheel fwd direction
 80021f0:	2200      	movs	r2, #0
 80021f2:	2104      	movs	r1, #4
 80021f4:	482b      	ldr	r0, [pc, #172]	@ (80022a4 <Step1+0xd4>)
 80021f6:	f002 fa97 	bl	8004728 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	2110      	movs	r1, #16
 80021fe:	4829      	ldr	r0, [pc, #164]	@ (80022a4 <Step1+0xd4>)
 8002200:	f002 fa92 	bl	8004728 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2120      	movs	r1, #32
 8002208:	4826      	ldr	r0, [pc, #152]	@ (80022a4 <Step1+0xd4>)
 800220a:	f002 fa8d 	bl	8004728 <HAL_GPIO_WritePin>


	  while (uintPart >21) {
 800220e:	e025      	b.n	800225c <Step1+0x8c>
		  if(uintPart >40){
 8002210:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <Step1+0xd8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b28      	cmp	r3, #40	@ 0x28
 8002216:	dd08      	ble.n	800222a <Step1+0x5a>
				pwmVal_Left = 3000;
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <Step1+0xdc>)
 800221a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800221e:	801a      	strh	r2, [r3, #0]
				pwmVal_Right = 3000;
 8002220:	4b23      	ldr	r3, [pc, #140]	@ (80022b0 <Step1+0xe0>)
 8002222:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	e018      	b.n	800225c <Step1+0x8c>
		  }
		  else if(uintPart >30)
 800222a:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <Step1+0xd8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b1e      	cmp	r3, #30
 8002230:	dd08      	ble.n	8002244 <Step1+0x74>
		  {
				pwmVal_Left = 1700;
 8002232:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <Step1+0xdc>)
 8002234:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8002238:	801a      	strh	r2, [r3, #0]
				pwmVal_Right = 1700;
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <Step1+0xe0>)
 800223c:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8002240:	801a      	strh	r2, [r3, #0]
 8002242:	e00b      	b.n	800225c <Step1+0x8c>
		  }
		  else if(uintPart >21) {
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <Step1+0xd8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b15      	cmp	r3, #21
 800224a:	dd07      	ble.n	800225c <Step1+0x8c>
			  pwmVal_Left = 500;
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <Step1+0xdc>)
 800224e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002252:	801a      	strh	r2, [r3, #0]
			  pwmVal_Right = 500;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <Step1+0xe0>)
 8002256:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800225a:	801a      	strh	r2, [r3, #0]
	  while (uintPart >21) {
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <Step1+0xd8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b15      	cmp	r3, #21
 8002262:	dcd5      	bgt.n	8002210 <Step1+0x40>
		  }
	  }
	  e_brake = 1;
 8002264:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <Step1+0xe4>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]
	 // pwmVal_Left = pwmVal_Right =0;
	  osDelay(3000);
 800226a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800226e:	f006 fe09 	bl	8008e84 <osDelay>
	  Task2MotorFn = 0;
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <Step1+0xc8>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
	  moveCarStraight(1);
 8002278:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8002290 <Step1+0xc0>
 800227c:	f7ff fb38 	bl	80018f0 <moveCarStraight>
	  osDelay(10);
 8002280:	200a      	movs	r0, #10
 8002282:	f006 fdff 	bl	8008e84 <osDelay>
		  //pwmVal_Left = pwmVal_Right =0;
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	f3af 8000 	nop.w
 8002290:	00000000 	.word	0x00000000
 8002294:	3ff00000 	.word	0x3ff00000
 8002298:	200004d4 	.word	0x200004d4
 800229c:	2000050c 	.word	0x2000050c
 80022a0:	20000000 	.word	0x20000000
 80022a4:	40020000 	.word	0x40020000
 80022a8:	20000514 	.word	0x20000514
 80022ac:	200004ca 	.word	0x200004ca
 80022b0:	200004c8 	.word	0x200004c8
 80022b4:	200004d0 	.word	0x200004d0

080022b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80022c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <StartDefaultTask+0x20>)
 80022c6:	f002 fa48 	bl	800475a <HAL_GPIO_TogglePin>
     osDelay(1000);
 80022ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ce:	f006 fdd9 	bl	8008e84 <osDelay>
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80022d2:	bf00      	nop
 80022d4:	e7f4      	b.n	80022c0 <StartDefaultTask+0x8>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <rightEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rightEncoder */
void rightEncoder(void *argument)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rightEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80022e4:	213c      	movs	r1, #60	@ 0x3c
 80022e6:	481f      	ldr	r0, [pc, #124]	@ (8002364 <rightEncoder+0x88>)
 80022e8:	f004 fa5a 	bl	80067a0 <HAL_TIM_Encoder_Start>
		int cnt1;
		int dirR = 1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
		int diff;
		uint32_t tick = HAL_GetTick();
 80022f0:	f001 faaa 	bl	8003848 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]
		/* Infinite loop */
		for (;;) {
			if (HAL_GetTick() - tick > 10L) {
 80022f6:	f001 faa7 	bl	8003848 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b0a      	cmp	r3, #10
 8002302:	d92a      	bls.n	800235a <rightEncoder+0x7e>
				cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002304:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <rightEncoder+0x88>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	60bb      	str	r3, [r7, #8]
				if (cnt1 > 32000) {
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002312:	dd06      	ble.n	8002322 <rightEncoder+0x46>
					dirR = 1;
 8002314:	2301      	movs	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
					diff = (65536 - cnt1);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e004      	b.n	800232c <rightEncoder+0x50>
				} else {
					dirR = -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	617b      	str	r3, [r7, #20]
					diff = cnt1;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	613b      	str	r3, [r7, #16]
				}
				if (dirR == 1) {
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d106      	bne.n	8002340 <rightEncoder+0x64>
					rightEncoderVal -= diff;
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <rightEncoder+0x8c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	4a0b      	ldr	r2, [pc, #44]	@ (8002368 <rightEncoder+0x8c>)
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e005      	b.n	800234c <rightEncoder+0x70>
				} else {
					rightEncoderVal += diff;
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <rightEncoder+0x8c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	4a07      	ldr	r2, [pc, #28]	@ (8002368 <rightEncoder+0x8c>)
 800234a:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SET_COUNTER(&htim3, 0);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <rightEncoder+0x88>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	625a      	str	r2, [r3, #36]	@ 0x24

				tick = HAL_GetTick();
 8002354:	f001 fa78 	bl	8003848 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]
			}
			osDelay(50);
 800235a:	2032      	movs	r0, #50	@ 0x32
 800235c:	f006 fd92 	bl	8008e84 <osDelay>
			if (HAL_GetTick() - tick > 10L) {
 8002360:	e7c9      	b.n	80022f6 <rightEncoder+0x1a>
 8002362:	bf00      	nop
 8002364:	20000370 	.word	0x20000370
 8002368:	200004d8 	.word	0x200004d8

0800236c <leftEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leftEncoder */
void leftEncoder(void *argument)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leftEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002374:	213c      	movs	r1, #60	@ 0x3c
 8002376:	481f      	ldr	r0, [pc, #124]	@ (80023f4 <leftEncoder+0x88>)
 8002378:	f004 fa12 	bl	80067a0 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 800237c:	2301      	movs	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
	int diff;

	uint32_t tick = HAL_GetTick();
 8002380:	f001 fa62 	bl	8003848 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002386:	f001 fa5f 	bl	8003848 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b0a      	cmp	r3, #10
 8002392:	d92a      	bls.n	80023ea <leftEncoder+0x7e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002394:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <leftEncoder+0x88>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80023a2:	dd06      	ble.n	80023b2 <leftEncoder+0x46>
				dirL = 1;
 80023a4:	2301      	movs	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	e004      	b.n	80023bc <leftEncoder+0x50>
			} else {
				dirL = -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d106      	bne.n	80023d0 <leftEncoder+0x64>
				leftEncoderVal += diff;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <leftEncoder+0x8c>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a0b      	ldr	r2, [pc, #44]	@ (80023f8 <leftEncoder+0x8c>)
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e005      	b.n	80023dc <leftEncoder+0x70>
			} else {
				leftEncoderVal -= diff;
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <leftEncoder+0x8c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a07      	ldr	r2, [pc, #28]	@ (80023f8 <leftEncoder+0x8c>)
 80023da:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <leftEncoder+0x88>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 80023e4:	f001 fa30 	bl	8003848 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

//		sprintf(hello, "SpeedL: %5d\0", diff);
//		  OLED_ShowString(10,30,hello);
//		  sprintf(hello, "DirL: %5d\0", dirL);
//		  OLED_ShowString(10,40,hello);
		  osDelay(50);
 80023ea:	2032      	movs	r0, #50	@ 0x32
 80023ec:	f006 fd4a 	bl	8008e84 <osDelay>
		if (HAL_GetTick() - tick > 10L) {
 80023f0:	e7c9      	b.n	8002386 <leftEncoder+0x1a>
 80023f2:	bf00      	nop
 80023f4:	20000328 	.word	0x20000328
 80023f8:	200004dc 	.word	0x200004dc

080023fc <StartCommsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommsTask */
void StartCommsTask(void *argument)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommsTask */
  /* Infinite loop */

	uint8_t ack[4] = "A\0";        // ACK
 8002404:	2341      	movs	r3, #65	@ 0x41
 8002406:	61bb      	str	r3, [r7, #24]
	  uint8_t invalid[8] = "I\0";    // "INVALID
 8002408:	2349      	movs	r3, #73	@ 0x49
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
	  uint8_t obstacle[2] = "O\0";   // Obstacle detected
 8002410:	234f      	movs	r3, #79	@ 0x4f
 8002412:	81bb      	strh	r3, [r7, #12]
	  int skipToStep =0;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]

	  strcpy((char *)aRxBuffer, "START");
 8002418:	4ba1      	ldr	r3, [pc, #644]	@ (80026a0 <StartCommsTask+0x2a4>)
 800241a:	4aa2      	ldr	r2, [pc, #648]	@ (80026a4 <StartCommsTask+0x2a8>)
 800241c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002420:	6018      	str	r0, [r3, #0]
 8002422:	3304      	adds	r3, #4
 8002424:	8019      	strh	r1, [r3, #0]

	  /* Infinite loop */
	  for(;;)
	  {
	    // Make sure UART is ready to receive
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8002426:	2205      	movs	r2, #5
 8002428:	499d      	ldr	r1, [pc, #628]	@ (80026a0 <StartCommsTask+0x2a4>)
 800242a:	489f      	ldr	r0, [pc, #636]	@ (80026a8 <StartCommsTask+0x2ac>)
 800242c:	f005 fbcb 	bl	8007bc6 <HAL_UART_Receive_IT>

	    if(receivedInstruction == 1)
 8002430:	4b9e      	ldr	r3, [pc, #632]	@ (80026ac <StartCommsTask+0x2b0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	f040 815c 	bne.w	80026f2 <StartCommsTask+0x2f6>
	    {
	      amplitude = 0;
 800243a:	4b9d      	ldr	r3, [pc, #628]	@ (80026b0 <StartCommsTask+0x2b4>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

	      // Check valid command format
	      if ((aRxBuffer[0] == 'R' && aRxBuffer[1] == 'E' && aRxBuffer[2] == 'S' && aRxBuffer[3] == 'E' && aRxBuffer[4] == 'T')
 8002440:	4b97      	ldr	r3, [pc, #604]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b52      	cmp	r3, #82	@ 0x52
 8002446:	d10f      	bne.n	8002468 <StartCommsTask+0x6c>
 8002448:	4b95      	ldr	r3, [pc, #596]	@ (80026a0 <StartCommsTask+0x2a4>)
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	2b45      	cmp	r3, #69	@ 0x45
 800244e:	d10b      	bne.n	8002468 <StartCommsTask+0x6c>
 8002450:	4b93      	ldr	r3, [pc, #588]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002452:	789b      	ldrb	r3, [r3, #2]
 8002454:	2b53      	cmp	r3, #83	@ 0x53
 8002456:	d107      	bne.n	8002468 <StartCommsTask+0x6c>
 8002458:	4b91      	ldr	r3, [pc, #580]	@ (80026a0 <StartCommsTask+0x2a4>)
 800245a:	78db      	ldrb	r3, [r3, #3]
 800245c:	2b45      	cmp	r3, #69	@ 0x45
 800245e:	d103      	bne.n	8002468 <StartCommsTask+0x6c>
 8002460:	4b8f      	ldr	r3, [pc, #572]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	2b54      	cmp	r3, #84	@ 0x54
 8002466:	d044      	beq.n	80024f2 <StartCommsTask+0xf6>
	          || ((aRxBuffer[0] == 'F' || aRxBuffer[0] == 'B')        // move Forward, Backwards
 8002468:	4b8d      	ldr	r3, [pc, #564]	@ (80026a0 <StartCommsTask+0x2a4>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b46      	cmp	r3, #70	@ 0x46
 800246e:	d003      	beq.n	8002478 <StartCommsTask+0x7c>
 8002470:	4b8b      	ldr	r3, [pc, #556]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b42      	cmp	r3, #66	@ 0x42
 8002476:	d123      	bne.n	80024c0 <StartCommsTask+0xc4>
	          && (aRxBuffer[1] == 'S' || aRxBuffer[1] == 'R' || aRxBuffer[1] == 'L'))   // move straight, right, or left
 8002478:	4b89      	ldr	r3, [pc, #548]	@ (80026a0 <StartCommsTask+0x2a4>)
 800247a:	785b      	ldrb	r3, [r3, #1]
 800247c:	2b53      	cmp	r3, #83	@ 0x53
 800247e:	d007      	beq.n	8002490 <StartCommsTask+0x94>
 8002480:	4b87      	ldr	r3, [pc, #540]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2b52      	cmp	r3, #82	@ 0x52
 8002486:	d003      	beq.n	8002490 <StartCommsTask+0x94>
 8002488:	4b85      	ldr	r3, [pc, #532]	@ (80026a0 <StartCommsTask+0x2a4>)
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	2b4c      	cmp	r3, #76	@ 0x4c
 800248e:	d117      	bne.n	80024c0 <StartCommsTask+0xc4>
	          && ((aRxBuffer[2] - '0') >= 0 && (aRxBuffer[2] - '0') <= 9)
 8002490:	4b83      	ldr	r3, [pc, #524]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002492:	789b      	ldrb	r3, [r3, #2]
 8002494:	2b2f      	cmp	r3, #47	@ 0x2f
 8002496:	d913      	bls.n	80024c0 <StartCommsTask+0xc4>
 8002498:	4b81      	ldr	r3, [pc, #516]	@ (80026a0 <StartCommsTask+0x2a4>)
 800249a:	789b      	ldrb	r3, [r3, #2]
 800249c:	2b39      	cmp	r3, #57	@ 0x39
 800249e:	d80f      	bhi.n	80024c0 <StartCommsTask+0xc4>
	          && ((aRxBuffer[3] - '0') >= 0 && (aRxBuffer[3] - '0') <= 9)
 80024a0:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024a2:	78db      	ldrb	r3, [r3, #3]
 80024a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80024a6:	d90b      	bls.n	80024c0 <StartCommsTask+0xc4>
 80024a8:	4b7d      	ldr	r3, [pc, #500]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024aa:	78db      	ldrb	r3, [r3, #3]
 80024ac:	2b39      	cmp	r3, #57	@ 0x39
 80024ae:	d807      	bhi.n	80024c0 <StartCommsTask+0xc4>
	          && ((aRxBuffer[4] - '0') >= 0 && (aRxBuffer[4] - '0') <= 9)
 80024b0:	4b7b      	ldr	r3, [pc, #492]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024b2:	791b      	ldrb	r3, [r3, #4]
 80024b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80024b6:	d903      	bls.n	80024c0 <StartCommsTask+0xc4>
 80024b8:	4b79      	ldr	r3, [pc, #484]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	2b39      	cmp	r3, #57	@ 0x39
 80024be:	d918      	bls.n	80024f2 <StartCommsTask+0xf6>
			  || (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T' && aRxBuffer[2] == 'E' && aRxBuffer[3] == 'P' && aRxBuffer[4] == '1')
 80024c0:	4b77      	ldr	r3, [pc, #476]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b53      	cmp	r3, #83	@ 0x53
 80024c6:	f040 80ff 	bne.w	80026c8 <StartCommsTask+0x2cc>
 80024ca:	4b75      	ldr	r3, [pc, #468]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	2b54      	cmp	r3, #84	@ 0x54
 80024d0:	f040 80fa 	bne.w	80026c8 <StartCommsTask+0x2cc>
 80024d4:	4b72      	ldr	r3, [pc, #456]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024d6:	789b      	ldrb	r3, [r3, #2]
 80024d8:	2b45      	cmp	r3, #69	@ 0x45
 80024da:	f040 80f5 	bne.w	80026c8 <StartCommsTask+0x2cc>
 80024de:	4b70      	ldr	r3, [pc, #448]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	2b50      	cmp	r3, #80	@ 0x50
 80024e4:	f040 80f0 	bne.w	80026c8 <StartCommsTask+0x2cc>
 80024e8:	4b6d      	ldr	r3, [pc, #436]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024ea:	791b      	ldrb	r3, [r3, #4]
 80024ec:	2b31      	cmp	r3, #49	@ 0x31
 80024ee:	f040 80eb 	bne.w	80026c8 <StartCommsTask+0x2cc>
//	          HAL_UART_Transmit(&huart3, (uint8_t*) obstacle, 2, 0xFFFF);  // Send obstacle alert
//	          receivedInstruction = 0;
//	        }
//	        else {
	          // Process the command as usual
	          HAL_UART_AbortReceive_IT(&huart3);  // pause receiving from UART
 80024f2:	486d      	ldr	r0, [pc, #436]	@ (80026a8 <StartCommsTask+0x2ac>)
 80024f4:	f005 fb8c 	bl	8007c10 <HAL_UART_AbortReceive_IT>

	          if(aRxBuffer[2]!='E'){	//if is normal commands, assign the amplitude value
 80024f8:	4b69      	ldr	r3, [pc, #420]	@ (80026a0 <StartCommsTask+0x2a4>)
 80024fa:	789b      	ldrb	r3, [r3, #2]
 80024fc:	2b45      	cmp	r3, #69	@ 0x45
 80024fe:	d01d      	beq.n	800253c <StartCommsTask+0x140>
				  amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002500:	4b67      	ldr	r3, [pc, #412]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002502:	789b      	ldrb	r3, [r3, #2]
 8002504:	3b30      	subs	r3, #48	@ 0x30
 8002506:	2264      	movs	r2, #100	@ 0x64
 8002508:	fb02 f103 	mul.w	r1, r2, r3
							+ ((int) (aRxBuffer[3]) - 48) * 10
 800250c:	4b64      	ldr	r3, [pc, #400]	@ (80026a0 <StartCommsTask+0x2a4>)
 800250e:	78db      	ldrb	r3, [r3, #3]
 8002510:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	18ca      	adds	r2, r1, r3
							+ ((int) (aRxBuffer[4]) - 48);
 800251e:	4b60      	ldr	r3, [pc, #384]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002520:	791b      	ldrb	r3, [r3, #4]
 8002522:	3b30      	subs	r3, #48	@ 0x30
 8002524:	4413      	add	r3, r2
				  amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002526:	4a62      	ldr	r2, [pc, #392]	@ (80026b0 <StartCommsTask+0x2b4>)
 8002528:	6013      	str	r3, [r2, #0]


				  if (aRxBuffer[0] == 'B') {          // check Direction first
 800252a:	4b5d      	ldr	r3, [pc, #372]	@ (80026a0 <StartCommsTask+0x2a4>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b42      	cmp	r3, #66	@ 0x42
 8002530:	d104      	bne.n	800253c <StartCommsTask+0x140>
					amplitude *= -1;
 8002532:	4b5f      	ldr	r3, [pc, #380]	@ (80026b0 <StartCommsTask+0x2b4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	425b      	negs	r3, r3
 8002538:	4a5d      	ldr	r2, [pc, #372]	@ (80026b0 <StartCommsTask+0x2b4>)
 800253a:	6013      	str	r3, [r2, #0]
				  }
	          }
	          osDelay(10);
 800253c:	200a      	movs	r0, #10
 800253e:	f006 fca1 	bl	8008e84 <osDelay>

	          if((aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T' && aRxBuffer[2] == 'E' && aRxBuffer[3] == 'P')) {
 8002542:	4b57      	ldr	r3, [pc, #348]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b53      	cmp	r3, #83	@ 0x53
 8002548:	d11d      	bne.n	8002586 <StartCommsTask+0x18a>
 800254a:	4b55      	ldr	r3, [pc, #340]	@ (80026a0 <StartCommsTask+0x2a4>)
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	2b54      	cmp	r3, #84	@ 0x54
 8002550:	d119      	bne.n	8002586 <StartCommsTask+0x18a>
 8002552:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002554:	789b      	ldrb	r3, [r3, #2]
 8002556:	2b45      	cmp	r3, #69	@ 0x45
 8002558:	d115      	bne.n	8002586 <StartCommsTask+0x18a>
 800255a:	4b51      	ldr	r3, [pc, #324]	@ (80026a0 <StartCommsTask+0x2a4>)
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	2b50      	cmp	r3, #80	@ 0x50
 8002560:	d111      	bne.n	8002586 <StartCommsTask+0x18a>
	        	  if(aRxBuffer[4] =='1'){
 8002562:	4b4f      	ldr	r3, [pc, #316]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002564:	791b      	ldrb	r3, [r3, #4]
 8002566:	2b31      	cmp	r3, #49	@ 0x31
 8002568:	d10b      	bne.n	8002582 <StartCommsTask+0x186>
	        		  Step1();
 800256a:	f7ff fe31 	bl	80021d0 <Step1>
	        		  strcpy((char *)aRxBuffer, "TASK2");
 800256e:	4b4c      	ldr	r3, [pc, #304]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002570:	4a50      	ldr	r2, [pc, #320]	@ (80026b4 <StartCommsTask+0x2b8>)
 8002572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002576:	6018      	str	r0, [r3, #0]
 8002578:	3304      	adds	r3, #4
 800257a:	8019      	strh	r1, [r3, #0]
	        		  receivedInstruction =0;
 800257c:	4b4b      	ldr	r3, [pc, #300]	@ (80026ac <StartCommsTask+0x2b0>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
	        	  }
	        	  skipToStep =1;	//makes the code skip the switch statement
 8002582:	2301      	movs	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
	          }
	          if(!skipToStep) {
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 8086 	bne.w	800269a <StartCommsTask+0x29e>


	          switch (aRxBuffer[1]) {
 800258e:	4b44      	ldr	r3, [pc, #272]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	3b45      	subs	r3, #69	@ 0x45
 8002594:	2b0e      	cmp	r3, #14
 8002596:	f200 8080 	bhi.w	800269a <StartCommsTask+0x29e>
 800259a:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <StartCommsTask+0x1a4>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	08002673 	.word	0x08002673
 80025a4:	0800269b 	.word	0x0800269b
 80025a8:	0800269b 	.word	0x0800269b
 80025ac:	0800269b 	.word	0x0800269b
 80025b0:	0800269b 	.word	0x0800269b
 80025b4:	0800269b 	.word	0x0800269b
 80025b8:	0800269b 	.word	0x0800269b
 80025bc:	08002641 	.word	0x08002641
 80025c0:	0800269b 	.word	0x0800269b
 80025c4:	0800269b 	.word	0x0800269b
 80025c8:	0800269b 	.word	0x0800269b
 80025cc:	0800269b 	.word	0x0800269b
 80025d0:	0800269b 	.word	0x0800269b
 80025d4:	0800260f 	.word	0x0800260f
 80025d8:	080025dd 	.word	0x080025dd
	          case 'S':
	            moveCarStraight(amplitude);
 80025dc:	4b34      	ldr	r3, [pc, #208]	@ (80026b0 <StartCommsTask+0x2b4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ff9f 	bl	8000524 <__aeabi_i2d>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	ec43 2b10 	vmov	d0, r2, r3
 80025ee:	f7ff f97f 	bl	80018f0 <moveCarStraight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 80025f2:	4b2b      	ldr	r3, [pc, #172]	@ (80026a0 <StartCommsTask+0x2a4>)
 80025f4:	4a30      	ldr	r2, [pc, #192]	@ (80026b8 <StartCommsTask+0x2bc>)
 80025f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fa:	6018      	str	r0, [r3, #0]
 80025fc:	3304      	adds	r3, #4
 80025fe:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 8002600:	4b2e      	ldr	r3, [pc, #184]	@ (80026bc <StartCommsTask+0x2c0>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002606:	200a      	movs	r0, #10
 8002608:	f006 fc3c 	bl	8008e84 <osDelay>
	            break;
 800260c:	e045      	b.n	800269a <StartCommsTask+0x29e>
	          case 'R':
	            moveCarRight(amplitude);
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <StartCommsTask+0x2b4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff86 	bl	8000524 <__aeabi_i2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	ec43 2b10 	vmov	d0, r2, r3
 8002620:	f7ff f9d2 	bl	80019c8 <moveCarRight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 8002624:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002626:	4a24      	ldr	r2, [pc, #144]	@ (80026b8 <StartCommsTask+0x2bc>)
 8002628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262c:	6018      	str	r0, [r3, #0]
 800262e:	3304      	adds	r3, #4
 8002630:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <StartCommsTask+0x2c0>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002638:	200a      	movs	r0, #10
 800263a:	f006 fc23 	bl	8008e84 <osDelay>
	            break;
 800263e:	e02c      	b.n	800269a <StartCommsTask+0x29e>
	          case 'L':
	            moveCarLeft(amplitude);
 8002640:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <StartCommsTask+0x2b4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff6d 	bl	8000524 <__aeabi_i2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	ec43 2b10 	vmov	d0, r2, r3
 8002652:	f7ff f9eb 	bl	8001a2c <moveCarLeft>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002658:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <StartCommsTask+0x2bc>)
 800265a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800265e:	6018      	str	r0, [r3, #0]
 8002660:	3304      	adds	r3, #4
 8002662:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <StartCommsTask+0x2c0>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 800266a:	200a      	movs	r0, #10
 800266c:	f006 fc0a 	bl	8008e84 <osDelay>
	            break;
 8002670:	e013      	b.n	800269a <StartCommsTask+0x29e>
	          case 'E':                   // reset whole system to recalibrate gyro
	            strcpy((char *)aRxBuffer, "RESET");
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <StartCommsTask+0x2a4>)
 8002674:	4a12      	ldr	r2, [pc, #72]	@ (80026c0 <StartCommsTask+0x2c4>)
 8002676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800267a:	6018      	str	r0, [r3, #0]
 800267c:	3304      	adds	r3, #4
 800267e:	8019      	strh	r1, [r3, #0]
	            HAL_UART_Transmit(&huart3, (uint8_t*) "R\0", 2, 0xFFFF);  // TRANSMITTING "RESET" TO RPI/PUTTY
 8002680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002684:	2202      	movs	r2, #2
 8002686:	490f      	ldr	r1, [pc, #60]	@ (80026c4 <StartCommsTask+0x2c8>)
 8002688:	4807      	ldr	r0, [pc, #28]	@ (80026a8 <StartCommsTask+0x2ac>)
 800268a:	f005 fa11 	bl	8007ab0 <HAL_UART_Transmit>
	            osDelay(500);
 800268e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002692:	f006 fbf7 	bl	8008e84 <osDelay>
	            NVIC_SystemReset();
 8002696:	f7fe fc1f 	bl	8000ed8 <__NVIC_SystemReset>
	            osDelay(10);
	            break;
	          }
	          }	//for skipToStep
	          skipToStep =0;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e028      	b.n	80026f2 <StartCommsTask+0x2f6>
 80026a0:	200004b8 	.word	0x200004b8
 80026a4:	0800e948 	.word	0x0800e948
 80026a8:	20000448 	.word	0x20000448
 80026ac:	200004b4 	.word	0x200004b4
 80026b0:	200004c4 	.word	0x200004c4
 80026b4:	0800e950 	.word	0x0800e950
 80026b8:	0800e958 	.word	0x0800e958
 80026bc:	200004c0 	.word	0x200004c0
 80026c0:	0800e960 	.word	0x0800e960
 80026c4:	0800e968 	.word	0x0800e968

	 // for else bracket }
	      }
	      else      // INVALID CHOICE
	      {
	        strcpy((char *)aRxBuffer, "INVAL");
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <StartCommsTask+0x328>)
 80026ca:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <StartCommsTask+0x32c>)
 80026cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026d0:	6018      	str	r0, [r3, #0]
 80026d2:	3304      	adds	r3, #4
 80026d4:	8019      	strh	r1, [r3, #0]
	        osDelay(10);
 80026d6:	200a      	movs	r0, #10
 80026d8:	f006 fbd4 	bl	8008e84 <osDelay>
	        HAL_UART_Transmit(&huart3, (uint8_t*) &invalid, 8, 0xFFFF);  // TRANSMITTING "INVAL" TO RPI/PUTTY
 80026dc:	f107 0110 	add.w	r1, r7, #16
 80026e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026e4:	2208      	movs	r2, #8
 80026e6:	4811      	ldr	r0, [pc, #68]	@ (800272c <StartCommsTask+0x330>)
 80026e8:	f005 f9e2 	bl	8007ab0 <HAL_UART_Transmit>
	        receivedInstruction = 0;
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <StartCommsTask+0x334>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
	      }
	    }

	    if (flagDone == 1) {
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <StartCommsTask+0x338>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d110      	bne.n	800271c <StartCommsTask+0x320>
	      receivedInstruction = 0;
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <StartCommsTask+0x334>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
	      osDelay(10);
 8002700:	200a      	movs	r0, #10
 8002702:	f006 fbbf 	bl	8008e84 <osDelay>
	      HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 4, 0xFFFF);   // TRANSMITTING "ACK" TO RPI/PUTTY
 8002706:	f107 0118 	add.w	r1, r7, #24
 800270a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800270e:	2204      	movs	r2, #4
 8002710:	4806      	ldr	r0, [pc, #24]	@ (800272c <StartCommsTask+0x330>)
 8002712:	f005 f9cd 	bl	8007ab0 <HAL_UART_Transmit>
	      flagDone = 0;
 8002716:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <StartCommsTask+0x338>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
	    }

	    osDelay(10);
 800271c:	200a      	movs	r0, #10
 800271e:	f006 fbb1 	bl	8008e84 <osDelay>
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8002722:	e680      	b.n	8002426 <StartCommsTask+0x2a>
 8002724:	200004b8 	.word	0x200004b8
 8002728:	0800e96c 	.word	0x0800e96c
 800272c:	20000448 	.word	0x20000448
 8002730:	200004b4 	.word	0x200004b4
 8002734:	200004c0 	.word	0x200004c0

08002738 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b0a0      	sub	sp, #128	@ 0x80
 800273c:	af04      	add	r7, sp, #16
 800273e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
  /* Infinite loop */
// aaa	uint8_t usVal[20] = { 0 };
	uint8_t gyroVal[20] = { 0 };
 8002740:	2300      	movs	r3, #0
 8002742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002744:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 8002752:	2300      	movs	r3, #0
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
 8002756:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
	uint8_t echo[20] = { 0 };
 8002764:	2300      	movs	r3, #0
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
 8002768:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
	uint8_t IR_Left[20] = { 0 };
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	f107 0320 	add.w	r3, r7, #32
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
	uint8_t IR_Right[20] = { 0 };
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]

	for (;;) {
		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 800279a:	4b4f      	ldr	r3, [pc, #316]	@ (80028d8 <StartOLEDTask+0x1a0>)
 800279c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027a0:	4b4d      	ldr	r3, [pc, #308]	@ (80028d8 <StartOLEDTask+0x1a0>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe f9d5 	bl	8000b58 <__aeabi_d2iz>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd feb7 	bl	8000524 <__aeabi_i2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4620      	mov	r0, r4
 80027bc:	4629      	mov	r1, r5
 80027be:	f7fd fd63 	bl	8000288 <__aeabi_dsub>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b43      	ldr	r3, [pc, #268]	@ (80028dc <StartOLEDTask+0x1a4>)
 80027d0:	f7fd ff12 	bl	80005f8 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe f9bc 	bl	8000b58 <__aeabi_d2iz>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bfb8      	it	lt
 80027e6:	425b      	neglt	r3, r3
 80027e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 80027ea:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <StartOLEDTask+0x1a0>)
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe f9b0 	bl	8000b58 <__aeabi_d2iz>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80027fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002800:	4937      	ldr	r1, [pc, #220]	@ (80028e0 <StartOLEDTask+0x1a8>)
 8002802:	f009 ff2d 	bl	800c660 <siprintf>
		OLED_ShowString(0, 0, gyroVal);
 8002806:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800280a:	461a      	mov	r2, r3
 800280c:	2100      	movs	r1, #0
 800280e:	2000      	movs	r0, #0
 8002810:	f009 f94e 	bl	800bab0 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002814:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <StartOLEDTask+0x1ac>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461c      	mov	r4, r3
 800281a:	4b32      	ldr	r3, [pc, #200]	@ (80028e4 <StartOLEDTask+0x1ac>)
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002820:	4b30      	ldr	r3, [pc, #192]	@ (80028e4 <StartOLEDTask+0x1ac>)
 8002822:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002824:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002826:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <StartOLEDTask+0x1ac>)
 8002828:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800282a:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800282c:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <StartOLEDTask+0x1ac>)
 800282e:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002830:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	9101      	str	r1, [sp, #4]
 8002838:	9200      	str	r2, [sp, #0]
 800283a:	462b      	mov	r3, r5
 800283c:	4622      	mov	r2, r4
 800283e:	492a      	ldr	r1, [pc, #168]	@ (80028e8 <StartOLEDTask+0x1b0>)
 8002840:	f009 ff0e 	bl	800c660 <siprintf>
		OLED_ShowString(0, 10, command);
 8002844:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002848:	461a      	mov	r2, r3
 800284a:	210a      	movs	r1, #10
 800284c:	2000      	movs	r0, #0
 800284e:	f009 f92f 	bl	800bab0 <OLED_ShowString>

		//print ultrasonic readings
		uintPart = (int)echo_dist;
 8002852:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <StartOLEDTask+0x1b4>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f7fe f97c 	bl	8000b58 <__aeabi_d2iz>
 8002860:	4603      	mov	r3, r0
 8002862:	4a23      	ldr	r2, [pc, #140]	@ (80028f0 <StartOLEDTask+0x1b8>)
 8002864:	6013      	str	r3, [r2, #0]
		sprintf(echo, "E = %dcm \0", uintPart);		//ultrasonic readings
 8002866:	4b22      	ldr	r3, [pc, #136]	@ (80028f0 <StartOLEDTask+0x1b8>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800286e:	4921      	ldr	r1, [pc, #132]	@ (80028f4 <StartOLEDTask+0x1bc>)
 8002870:	4618      	mov	r0, r3
 8002872:	f009 fef5 	bl	800c660 <siprintf>
		OLED_ShowString(0, 20, echo);
 8002876:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800287a:	461a      	mov	r2, r3
 800287c:	2114      	movs	r1, #20
 800287e:	2000      	movs	r0, #0
 8002880:	f009 f916 	bl	800bab0 <OLED_ShowString>

		//IR Readings
		sprintf(IR_Left, "Left:%d D:%d \0", LeftIRfiltered, IRDistance_Left);
 8002884:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <StartOLEDTask+0x1c0>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <StartOLEDTask+0x1c4>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	f107 001c 	add.w	r0, r7, #28
 8002892:	491b      	ldr	r1, [pc, #108]	@ (8002900 <StartOLEDTask+0x1c8>)
 8002894:	f009 fee4 	bl	800c660 <siprintf>
		OLED_ShowString(0, 30,IR_Left );
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	461a      	mov	r2, r3
 800289e:	211e      	movs	r1, #30
 80028a0:	2000      	movs	r0, #0
 80028a2:	f009 f905 	bl	800bab0 <OLED_ShowString>
		sprintf(IR_Right, "Right:%d D:%d \0", RightIRfiltered, IRDistance_Right);
 80028a6:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <StartOLEDTask+0x1cc>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <StartOLEDTask+0x1d0>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	f107 0008 	add.w	r0, r7, #8
 80028b4:	4915      	ldr	r1, [pc, #84]	@ (800290c <StartOLEDTask+0x1d4>)
 80028b6:	f009 fed3 	bl	800c660 <siprintf>
		OLED_ShowString(0, 40,IR_Right );
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	461a      	mov	r2, r3
 80028c0:	2128      	movs	r1, #40	@ 0x28
 80028c2:	2000      	movs	r0, #0
 80028c4:	f009 f8f4 	bl	800bab0 <OLED_ShowString>

		OLED_Refresh_Gram();
 80028c8:	f008 ff7e 	bl	800b7c8 <OLED_Refresh_Gram>
		osDelay(100);
 80028cc:	2064      	movs	r0, #100	@ 0x64
 80028ce:	f006 fad9 	bl	8008e84 <osDelay>
	for (;;) {
 80028d2:	bf00      	nop
 80028d4:	e761      	b.n	800279a <StartOLEDTask+0x62>
 80028d6:	bf00      	nop
 80028d8:	200004f0 	.word	0x200004f0
 80028dc:	408f4000 	.word	0x408f4000
 80028e0:	0800e974 	.word	0x0800e974
 80028e4:	200004b8 	.word	0x200004b8
 80028e8:	0800e984 	.word	0x0800e984
 80028ec:	20000518 	.word	0x20000518
 80028f0:	20000514 	.word	0x20000514
 80028f4:	0800e994 	.word	0x0800e994
 80028f8:	20000534 	.word	0x20000534
 80028fc:	20000538 	.word	0x20000538
 8002900:	0800e9a0 	.word	0x0800e9a0
 8002904:	20000536 	.word	0x20000536
 8002908:	2000053a 	.word	0x2000053a
 800290c:	0800e9b0 	.word	0x0800e9b0

08002910 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	pwmVal_Right = 0;
 8002918:	4baf      	ldr	r3, [pc, #700]	@ (8002bd8 <StartMotorTask+0x2c8>)
 800291a:	2200      	movs	r2, #0
 800291c:	801a      	strh	r2, [r3, #0]
	  pwmVal_Left = 0;
 800291e:	4baf      	ldr	r3, [pc, #700]	@ (8002bdc <StartMotorTask+0x2cc>)
 8002920:	2200      	movs	r2, #0
 8002922:	801a      	strh	r2, [r3, #0]
	  int straightCorrection = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002928:	2100      	movs	r1, #0
 800292a:	48ad      	ldr	r0, [pc, #692]	@ (8002be0 <StartMotorTask+0x2d0>)
 800292c:	f003 fc52 	bl	80061d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002930:	2104      	movs	r1, #4
 8002932:	48ab      	ldr	r0, [pc, #684]	@ (8002be0 <StartMotorTask+0x2d0>)
 8002934:	f003 fc4e 	bl	80061d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002938:	210c      	movs	r1, #12
 800293a:	48aa      	ldr	r0, [pc, #680]	@ (8002be4 <StartMotorTask+0x2d4>)
 800293c:	f003 fc4a 	bl	80061d4 <HAL_TIM_PWM_Start>
	  htim1.Instance->CCR4 = SERVOCENTER; 	//Centre
 8002940:	4ba8      	ldr	r3, [pc, #672]	@ (8002be4 <StartMotorTask+0x2d4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2292      	movs	r2, #146	@ 0x92
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40

	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // RIGHT WHEEL FORWARD
 8002948:	2201      	movs	r2, #1
 800294a:	2110      	movs	r1, #16
 800294c:	48a6      	ldr	r0, [pc, #664]	@ (8002be8 <StartMotorTask+0x2d8>)
 800294e:	f001 feeb 	bl	8004728 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	2120      	movs	r1, #32
 8002956:	48a4      	ldr	r0, [pc, #656]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002958:	f001 fee6 	bl	8004728 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // LEFT WHEEL FORWARD
 800295c:	2201      	movs	r2, #1
 800295e:	2108      	movs	r1, #8
 8002960:	48a1      	ldr	r0, [pc, #644]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002962:	f001 fee1 	bl	8004728 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002966:	2200      	movs	r2, #0
 8002968:	2104      	movs	r1, #4
 800296a:	489f      	ldr	r0, [pc, #636]	@ (8002be8 <StartMotorTask+0x2d8>)
 800296c:	f001 fedc 	bl	8004728 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8002970:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002974:	f006 fa86 	bl	8008e84 <osDelay>

	  /* Infinite loop */
	  for (;;) {
	    htim1.Instance->CCR4 = pwmVal_servo;
 8002978:	4b9c      	ldr	r3, [pc, #624]	@ (8002bec <StartMotorTask+0x2dc>)
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	4b99      	ldr	r3, [pc, #612]	@ (8002be4 <StartMotorTask+0x2d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	641a      	str	r2, [r3, #64]	@ 0x40

	    if(Task2MotorFn ==1){
 8002982:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf0 <StartMotorTask+0x2e0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	f000 81a5 	beq.w	8002cd6 <StartMotorTask+0x3c6>

	    }

	    else {	//task 1 functions
	    		double error_angle = target_angle - total_angle;	//100 - gyro (with drift) angle
 800298c:	4b99      	ldr	r3, [pc, #612]	@ (8002bf4 <StartMotorTask+0x2e4>)
 800298e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002992:	4b99      	ldr	r3, [pc, #612]	@ (8002bf8 <StartMotorTask+0x2e8>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fc76 	bl	8000288 <__aeabi_dsub>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	e9c7 2302 	strd	r2, r3, [r7, #8]


				  // Normal operation - no obstacle or not moving forward
				  if (pwmVal_servo < 127) { //TURN LEFT
 80029a4:	4b91      	ldr	r3, [pc, #580]	@ (8002bec <StartMotorTask+0x2dc>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80029aa:	d84c      	bhi.n	8002a46 <StartMotorTask+0x136>
					pwmVal_Right = PID_Angle(error_angle, 1) * 1.072;  //RIGHT = MASTER
 80029ac:	2001      	movs	r0, #1
 80029ae:	ed97 0b02 	vldr	d0, [r7, #8]
 80029b2:	f7ff f8e9 	bl	8001b88 <PID_Angle>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdb3 	bl	8000524 <__aeabi_i2d>
 80029be:	a382      	add	r3, pc, #520	@ (adr r3, 8002bc8 <StartMotorTask+0x2b8>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fe18 	bl	80005f8 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe f8ea 	bl	8000ba8 <__aeabi_d2uiz>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd8 <StartMotorTask+0x2c8>)
 80029da:	801a      	strh	r2, [r3, #0]
					pwmVal_Left = pwmVal_Right * (0.59); //LEFT = SLAVE
 80029dc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd8 <StartMotorTask+0x2c8>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd9f 	bl	8000524 <__aeabi_i2d>
 80029e6:	a37a      	add	r3, pc, #488	@ (adr r3, 8002bd0 <StartMotorTask+0x2c0>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fe04 	bl	80005f8 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe f8d6 	bl	8000ba8 <__aeabi_d2uiz>
 80029fc:	4603      	mov	r3, r0
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <StartMotorTask+0x2cc>)
 8002a02:	801a      	strh	r2, [r3, #0]

					if (error_angle > 0) {
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a10:	f7fe f882 	bl	8000b18 <__aeabi_dcmpgt>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <StartMotorTask+0x120>
					  // LEFT WHEEL GO FORWARD
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2108      	movs	r1, #8
 8002a1e:	4872      	ldr	r0, [pc, #456]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002a20:	f001 fe82 	bl	8004728 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2104      	movs	r1, #4
 8002a28:	486f      	ldr	r0, [pc, #444]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002a2a:	f001 fe7d 	bl	8004728 <HAL_GPIO_WritePin>
 8002a2e:	e152      	b.n	8002cd6 <StartMotorTask+0x3c6>
					} else {
					  //// LEFT WHEEL GO BACKWARD
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2108      	movs	r1, #8
 8002a34:	486c      	ldr	r0, [pc, #432]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002a36:	f001 fe77 	bl	8004728 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	486a      	ldr	r0, [pc, #424]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002a40:	f001 fe72 	bl	8004728 <HAL_GPIO_WritePin>
 8002a44:	e147      	b.n	8002cd6 <StartMotorTask+0x3c6>
					}
				  }

				  else if (pwmVal_servo > 189) { //TURN RIGHT
 8002a46:	4b69      	ldr	r3, [pc, #420]	@ (8002bec <StartMotorTask+0x2dc>)
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	2bbd      	cmp	r3, #189	@ 0xbd
 8002a4c:	d93d      	bls.n	8002aca <StartMotorTask+0x1ba>
					pwmVal_Left = PID_Angle(error_angle, 0);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	ed97 0b02 	vldr	d0, [r7, #8]
 8002a54:	f7ff f898 	bl	8001b88 <PID_Angle>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bdc <StartMotorTask+0x2cc>)
 8002a5e:	801a      	strh	r2, [r3, #0]
					pwmVal_Right = pwmVal_Left * (0.59); //RIGHT = SLAVE
 8002a60:	4b5e      	ldr	r3, [pc, #376]	@ (8002bdc <StartMotorTask+0x2cc>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd5d 	bl	8000524 <__aeabi_i2d>
 8002a6a:	a359      	add	r3, pc, #356	@ (adr r3, 8002bd0 <StartMotorTask+0x2c0>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fdc2 	bl	80005f8 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fe f894 	bl	8000ba8 <__aeabi_d2uiz>
 8002a80:	4603      	mov	r3, r0
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b54      	ldr	r3, [pc, #336]	@ (8002bd8 <StartMotorTask+0x2c8>)
 8002a86:	801a      	strh	r2, [r3, #0]

					if (error_angle < 0) {
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a94:	f7fe f822 	bl	8000adc <__aeabi_dcmplt>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <StartMotorTask+0x1a4>
					  //RIGHT (WHEEL B) FORWARD
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	4851      	ldr	r0, [pc, #324]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002aa4:	f001 fe40 	bl	8004728 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2120      	movs	r1, #32
 8002aac:	484e      	ldr	r0, [pc, #312]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002aae:	f001 fe3b 	bl	8004728 <HAL_GPIO_WritePin>
 8002ab2:	e110      	b.n	8002cd6 <StartMotorTask+0x3c6>
					} else {
					  //RIGHT (WHEEL B) BACKWARD
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	484b      	ldr	r0, [pc, #300]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002aba:	f001 fe35 	bl	8004728 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2120      	movs	r1, #32
 8002ac2:	4849      	ldr	r0, [pc, #292]	@ (8002be8 <StartMotorTask+0x2d8>)
 8002ac4:	f001 fe30 	bl	8004728 <HAL_GPIO_WritePin>
 8002ac8:	e105      	b.n	8002cd6 <StartMotorTask+0x3c6>
					}
				  }

				  else {		//mainly for task 1, used in task 2 for accurate turns
					pwmVal_Right = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 8002aca:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <StartMotorTask+0x2ec>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <StartMotorTask+0x2f0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ffda 	bl	8001a90 <PID_Control>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd20 	bl	8000524 <__aeabi_i2d>
 8002ae4:	a338      	add	r3, pc, #224	@ (adr r3, 8002bc8 <StartMotorTask+0x2b8>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd85 	bl	80005f8 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f857 	bl	8000ba8 <__aeabi_d2uiz>
 8002afa:	4603      	mov	r3, r0
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b36      	ldr	r3, [pc, #216]	@ (8002bd8 <StartMotorTask+0x2c8>)
 8002b00:	801a      	strh	r2, [r3, #0]
					if (labs(leftTarget - leftEncoderVal)> labs(rightTarget - rightEncoderVal)) {
 8002b02:	4b3e      	ldr	r3, [pc, #248]	@ (8002bfc <StartMotorTask+0x2ec>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b3e      	ldr	r3, [pc, #248]	@ (8002c00 <StartMotorTask+0x2f0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002b10:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002b14:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <StartMotorTask+0x2f4>)
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <StartMotorTask+0x2f8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1acb      	subs	r3, r1, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bfb8      	it	lt
 8002b22:	425b      	neglt	r3, r3
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dd03      	ble.n	8002b30 <StartMotorTask+0x220>
					  straightCorrection++;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e002      	b.n	8002b36 <StartMotorTask+0x226>
					} else {
					  straightCorrection--;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
					}
					if (labs(leftTarget - leftEncoderVal) < 100) {
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <StartMotorTask+0x2ec>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <StartMotorTask+0x2f0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002b44:	db08      	blt.n	8002b58 <StartMotorTask+0x248>
 8002b46:	4b2d      	ldr	r3, [pc, #180]	@ (8002bfc <StartMotorTask+0x2ec>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <StartMotorTask+0x2f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b63      	cmp	r3, #99	@ 0x63
 8002b52:	dc01      	bgt.n	8002b58 <StartMotorTask+0x248>
					  straightCorrection = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
					}
					pwmVal_Left = PID_Control(rightTarget - rightEncoderVal, 1)
 8002b58:	4b2a      	ldr	r3, [pc, #168]	@ (8002c04 <StartMotorTask+0x2f4>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <StartMotorTask+0x2f8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe ff93 	bl	8001a90 <PID_Control>
 8002b6a:	4603      	mov	r3, r0
							+ straightCorrection;
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	b29a      	uxth	r2, r3
					pwmVal_Left = PID_Control(rightTarget - rightEncoderVal, 1)
 8002b76:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <StartMotorTask+0x2cc>)
 8002b78:	801a      	strh	r2, [r3, #0]

					if ((leftTarget - leftEncoderVal) < 0) {
 8002b7a:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <StartMotorTask+0x2ec>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <StartMotorTask+0x2f0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da65      	bge.n	8002c54 <StartMotorTask+0x344>
					  if (error_angle > 2) { // left +. right -.
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b94:	f7fd ffc0 	bl	8000b18 <__aeabi_dcmpgt>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <StartMotorTask+0x296>
						pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <StartMotorTask+0x2dc>)
 8002ba0:	22a5      	movs	r2, #165	@ 0xa5
 8002ba2:	801a      	strh	r2, [r3, #0]
 8002ba4:	e097      	b.n	8002cd6 <StartMotorTask+0x3c6>
					  } else if (error_angle < -2) {
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bb2:	f7fd ff93 	bl	8000adc <__aeabi_dcmplt>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d027      	beq.n	8002c0c <StartMotorTask+0x2fc>
						pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <StartMotorTask+0x2dc>)
 8002bbe:	227f      	movs	r2, #127	@ 0x7f
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	e088      	b.n	8002cd6 <StartMotorTask+0x3c6>
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	78d4fdf4 	.word	0x78d4fdf4
 8002bcc:	3ff126e9 	.word	0x3ff126e9
 8002bd0:	ae147ae1 	.word	0xae147ae1
 8002bd4:	3fe2e147 	.word	0x3fe2e147
 8002bd8:	200004c8 	.word	0x200004c8
 8002bdc:	200004ca 	.word	0x200004ca
 8002be0:	20000400 	.word	0x20000400
 8002be4:	200002e0 	.word	0x200002e0
 8002be8:	40020000 	.word	0x40020000
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	200004d4 	.word	0x200004d4
 8002bf4:	200004e8 	.word	0x200004e8
 8002bf8:	200004f0 	.word	0x200004f0
 8002bfc:	200004e4 	.word	0x200004e4
 8002c00:	200004dc 	.word	0x200004dc
 8002c04:	200004e0 	.word	0x200004e0
 8002c08:	200004d8 	.word	0x200004d8
					  } else {
						pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	4b46      	ldr	r3, [pc, #280]	@ (8002d2c <StartMotorTask+0x41c>)
 8002c12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c16:	f7fd fcef 	bl	80005f8 <__aeabi_dmul>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	4b42      	ldr	r3, [pc, #264]	@ (8002d30 <StartMotorTask+0x420>)
 8002c28:	f7fd fe10 	bl	800084c <__aeabi_ddiv>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	4b3e      	ldr	r3, [pc, #248]	@ (8002d34 <StartMotorTask+0x424>)
 8002c3a:	f7fd fb27 	bl	800028c <__adddf3>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fd ffaf 	bl	8000ba8 <__aeabi_d2uiz>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d38 <StartMotorTask+0x428>)
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	e040      	b.n	8002cd6 <StartMotorTask+0x3c6>
					  }
					} else {
					  if (error_angle > 2) { // left +. right -.
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c60:	f7fd ff5a 	bl	8000b18 <__aeabi_dcmpgt>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <StartMotorTask+0x362>
						pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002c6a:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <StartMotorTask+0x428>)
 8002c6c:	227f      	movs	r2, #127	@ 0x7f
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	e031      	b.n	8002cd6 <StartMotorTask+0x3c6>
					  } else if (error_angle < -2) {
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002c7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c7e:	f7fd ff2d 	bl	8000adc <__aeabi_dcmplt>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <StartMotorTask+0x380>
						pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002c88:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <StartMotorTask+0x428>)
 8002c8a:	22a5      	movs	r2, #165	@ 0xa5
 8002c8c:	801a      	strh	r2, [r3, #0]
 8002c8e:	e022      	b.n	8002cd6 <StartMotorTask+0x3c6>
					  } else {
						pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <StartMotorTask+0x42c>)
 8002c96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c9a:	f7fd fcad 	bl	80005f8 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <StartMotorTask+0x420>)
 8002cac:	f7fd fdce 	bl	800084c <__aeabi_ddiv>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <StartMotorTask+0x424>)
 8002cbe:	f7fd fae5 	bl	800028c <__adddf3>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd ff6d 	bl	8000ba8 <__aeabi_d2uiz>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <StartMotorTask+0x428>)
 8002cd4:	801a      	strh	r2, [r3, #0]
					//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
				  }
	    }//task 1 functions end


	    if (e_brake) {
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <StartMotorTask+0x430>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00e      	beq.n	8002cfc <StartMotorTask+0x3ec>
	      pwmVal_Left = pwmVal_Right = 0;
 8002cde:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <StartMotorTask+0x434>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	801a      	strh	r2, [r3, #0]
 8002ce4:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <StartMotorTask+0x434>)
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	4b17      	ldr	r3, [pc, #92]	@ (8002d48 <StartMotorTask+0x438>)
 8002cea:	801a      	strh	r2, [r3, #0]
	      leftTarget = leftEncoderVal;
 8002cec:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <StartMotorTask+0x43c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a17      	ldr	r2, [pc, #92]	@ (8002d50 <StartMotorTask+0x440>)
 8002cf2:	6013      	str	r3, [r2, #0]
	      rightTarget = rightEncoderVal;
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <StartMotorTask+0x444>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a17      	ldr	r2, [pc, #92]	@ (8002d58 <StartMotorTask+0x448>)
 8002cfa:	6013      	str	r3, [r2, #0]
	    }

	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_Left);
 8002cfc:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <StartMotorTask+0x438>)
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <StartMotorTask+0x44c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_Right);
 8002d06:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <StartMotorTask+0x434>)
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <StartMotorTask+0x44c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
	    osDelay(10);
 8002d10:	200a      	movs	r0, #10
 8002d12:	f006 f8b7 	bl	8008e84 <osDelay>

	    if (times_acceptable > 1000) {
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <StartMotorTask+0x450>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d1e:	f77f ae2b 	ble.w	8002978 <StartMotorTask+0x68>
	      times_acceptable = 1001;
 8002d22:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <StartMotorTask+0x450>)
 8002d24:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8002d28:	601a      	str	r2, [r3, #0]
	    htim1.Instance->CCR4 = pwmVal_servo;
 8002d2a:	e625      	b.n	8002978 <StartMotorTask+0x68>
 8002d2c:	40330000 	.word	0x40330000
 8002d30:	40140000 	.word	0x40140000
 8002d34:	40624000 	.word	0x40624000
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	c0330000 	.word	0xc0330000
 8002d40:	200004d0 	.word	0x200004d0
 8002d44:	200004c8 	.word	0x200004c8
 8002d48:	200004ca 	.word	0x200004ca
 8002d4c:	200004dc 	.word	0x200004dc
 8002d50:	200004e4 	.word	0x200004e4
 8002d54:	200004d8 	.word	0x200004d8
 8002d58:	200004e0 	.word	0x200004e0
 8002d5c:	20000400 	.word	0x20000400
 8002d60:	200004cc 	.word	0x200004cc
 8002d64:	00000000 	.word	0x00000000

08002d68 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */

	//loop for reset
	for(;;) {

			gyroInit();
 8002d70:	f7ff f814 	bl	8001d9c <gyroInit>
			uint8_t val[2] = { 0, 0 };
 8002d74:	2300      	movs	r3, #0
 8002d76:	813b      	strh	r3, [r7, #8]

			int16_t angularSpeed = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	817b      	strh	r3, [r7, #10]

			uint32_t tick = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
			double offset = 0;
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double garbage = 0;
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
			int i = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
			total_angle = 0;
 8002d9c:	495e      	ldr	r1, [pc, #376]	@ (8002f18 <StartGyroTask+0x1b0>)
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9c1 2300 	strd	r2, r3, [r1]

			osDelay(50);
 8002daa:	2032      	movs	r0, #50	@ 0x32
 8002dac:	f006 f86a 	bl	8008e84 <osDelay>
			while (i < 1000) {					//sample 1000 for calibration
 8002db0:	e048      	b.n	8002e44 <StartGyroTask+0xdc>
				osDelay(1);
 8002db2:	2001      	movs	r0, #1
 8002db4:	f006 f866 	bl	8008e84 <osDelay>
				readByte(0x37, val);
 8002db8:	f107 0308 	add.w	r3, r7, #8
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	2037      	movs	r0, #55	@ 0x37
 8002dc0:	f7fe ff9e 	bl	8001d00 <readByte>
				angularSpeed =  val[1] | (val[0] << 8);
 8002dc4:	7a7b      	ldrb	r3, [r7, #9]
 8002dc6:	b21a      	sxth	r2, r3
 8002dc8:	7a3b      	ldrb	r3, [r7, #8]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	817b      	strh	r3, [r7, #10]

				garbage = garbage + (double) ((double) angularSpeed)
 8002dd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fba4 	bl	8000524 <__aeabi_i2d>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	460d      	mov	r5, r1
						* ((HAL_GetTick() - tick) / 16400.0);
 8002de0:	f000 fd32 	bl	8003848 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb8a 	bl	8000504 <__aeabi_ui2d>
 8002df0:	a347      	add	r3, pc, #284	@ (adr r3, 8002f10 <StartGyroTask+0x1a8>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fd29 	bl	800084c <__aeabi_ddiv>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4620      	mov	r0, r4
 8002e00:	4629      	mov	r1, r5
 8002e02:	f7fd fbf9 	bl	80005f8 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
				garbage = garbage + (double) ((double) angularSpeed)
 8002e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e0e:	f7fd fa3d 	bl	800028c <__adddf3>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	e9c7 2304 	strd	r2, r3, [r7, #16]
				offset = offset + angularSpeed;		//CALIBRATION OFFSET
 8002e1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb80 	bl	8000524 <__aeabi_i2d>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e2c:	f7fd fa2e 	bl	800028c <__adddf3>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	e9c7 2306 	strd	r2, r3, [r7, #24]
				tick = HAL_GetTick();
 8002e38:	f000 fd06 	bl	8003848 <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	@ 0x24
				i++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
			while (i < 1000) {					//sample 1000 for calibration
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e4a:	dbb2      	blt.n	8002db2 <StartGyroTask+0x4a>
			}
			offset = offset / i;
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7fd fb69 	bl	8000524 <__aeabi_i2d>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e5a:	f7fd fcf7 	bl	800084c <__aeabi_ddiv>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	e9c7 2306 	strd	r2, r3, [r7, #24]

			tick = HAL_GetTick();
 8002e66:	f000 fcef 	bl	8003848 <HAL_GetTick>
 8002e6a:	6278      	str	r0, [r7, #36]	@ 0x24
			/* Infinite loop */
			for (;;) {
				osDelay(100);
 8002e6c:	2064      	movs	r0, #100	@ 0x64
 8002e6e:	f006 f809 	bl	8008e84 <osDelay>
				readByte(0x37, val);
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	4619      	mov	r1, r3
 8002e78:	2037      	movs	r0, #55	@ 0x37
 8002e7a:	f7fe ff41 	bl	8001d00 <readByte>
				angularSpeed = val[1] | (val[0] << 8);
 8002e7e:	7a7b      	ldrb	r3, [r7, #9]
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	7a3b      	ldrb	r3, [r7, #8]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	817b      	strh	r3, [r7, #10]
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 8002e8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fb47 	bl	8000524 <__aeabi_i2d>
 8002e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9a:	f7fd f9f5 	bl	8000288 <__aeabi_dsub>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0);	//calculate angle change by time diff
 8002ea6:	f000 fccf 	bl	8003848 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb27 	bl	8000504 <__aeabi_ui2d>
 8002eb6:	a316      	add	r3, pc, #88	@ (adr r3, 8002f10 <StartGyroTask+0x1a8>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fcc6 	bl	800084c <__aeabi_ddiv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd fb96 	bl	80005f8 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 8002ed4:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <StartGyroTask+0x1b0>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f7fd f9d7 	bl	800028c <__adddf3>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	490d      	ldr	r1, [pc, #52]	@ (8002f18 <StartGyroTask+0x1b0>)
 8002ee4:	e9c1 2300 	strd	r2, r3, [r1]
				i = i- angularSpeed;
 8002ee8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
				i++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
				tick = HAL_GetTick();
 8002ef8:	f000 fca6 	bl	8003848 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	@ 0x24

				if(gyroResetFlag ==1) {	//to reset without whole system reset
 8002efe:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <StartGyroTask+0x1b4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d1b2      	bne.n	8002e6c <StartGyroTask+0x104>
					gyroResetFlag =0;
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <StartGyroTask+0x1b4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
					break;
 8002f0c:	bf00      	nop
	for(;;) {
 8002f0e:	e72f      	b.n	8002d70 <StartGyroTask+0x8>
 8002f10:	00000000 	.word	0x00000000
 8002f14:	40d00400 	.word	0x40d00400
 8002f18:	200004f0 	.word	0x200004f0
 8002f1c:	2000050c 	.word	0x2000050c

08002f20 <StartUltrasoundTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUltrasoundTask */
void StartUltrasoundTask(void *argument)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltrasoundTask */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4805      	ldr	r0, [pc, #20]	@ (8002f40 <StartUltrasoundTask+0x20>)
 8002f2c:	f003 fa6a 	bl	8006404 <HAL_TIM_IC_Start_IT>

	/* Infinite loop */
//osDelay(4000);
  for(;;)
  {
	  Ultrasonic_Read();
 8002f30:	f7fe ff92 	bl	8001e58 <Ultrasonic_Read>
//	      } else {
//	        obstacle_detected = 0;
//	        //OLED_ShowString(0, 50, "                 "); // Clear message
//	      }
//
	      osDelay(10); // Adjust delay as needed
 8002f34:	200a      	movs	r0, #10
 8002f36:	f005 ffa5 	bl	8008e84 <osDelay>
	  Ultrasonic_Read();
 8002f3a:	bf00      	nop
 8002f3c:	e7f8      	b.n	8002f30 <StartUltrasoundTask+0x10>
 8002f3e:	bf00      	nop
 8002f40:	200003b8 	.word	0x200003b8

08002f44 <StartIRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIRTask */
  /* Infinite loop */
  for(;;)
  {
	  IR_Left_Read();
 8002f4c:	f7ff f848 	bl	8001fe0 <IR_Left_Read>
	  IR_Right_Read();
 8002f50:	f7ff f8c2 	bl	80020d8 <IR_Right_Read>
    osDelay(10);
 8002f54:	200a      	movs	r0, #10
 8002f56:	f005 ff95 	bl	8008e84 <osDelay>
	  IR_Left_Read();
 8002f5a:	bf00      	nop
 8002f5c:	e7f6      	b.n	8002f4c <StartIRTask+0x8>

08002f5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f62:	b672      	cpsid	i
}
 8002f64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f66:	bf00      	nop
 8002f68:	e7fd      	b.n	8002f66 <Error_Handler+0x8>
	...

08002f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <HAL_MspInit+0x64>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <HAL_MspInit+0x64>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f82:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <HAL_MspInit+0x64>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd0 <HAL_MspInit+0x64>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4a0e      	ldr	r2, [pc, #56]	@ (8002fd0 <HAL_MspInit+0x64>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <HAL_MspInit+0x64>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	210f      	movs	r1, #15
 8002fae:	f06f 0001 	mvn.w	r0, #1
 8002fb2:	f001 f954 	bl	800425e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2105      	movs	r1, #5
 8002fba:	2005      	movs	r0, #5
 8002fbc:	f001 f94f 	bl	800425e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002fc0:	2005      	movs	r0, #5
 8002fc2:	f001 f968 	bl	8004296 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	@ 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80030ac <HAL_ADC_MspInit+0xd8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d128      	bne.n	8003048 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003004:	6453      	str	r3, [r2, #68]	@ 0x44
 8003006:	4b2a      	ldr	r3, [pc, #168]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	4a25      	ldr	r2, [pc, #148]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6313      	str	r3, [r2, #48]	@ 0x30
 8003022:	4b23      	ldr	r3, [pc, #140]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800302e:	2302      	movs	r3, #2
 8003030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003032:	2303      	movs	r3, #3
 8003034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4619      	mov	r1, r3
 8003040:	481c      	ldr	r0, [pc, #112]	@ (80030b4 <HAL_ADC_MspInit+0xe0>)
 8003042:	f001 f9d5 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003046:	e02c      	b.n	80030a2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1a      	ldr	r2, [pc, #104]	@ (80030b8 <HAL_ADC_MspInit+0xe4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d127      	bne.n	80030a2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	4a15      	ldr	r2, [pc, #84]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 800305c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003060:	6453      	str	r3, [r2, #68]	@ 0x44
 8003062:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a0e      	ldr	r2, [pc, #56]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <HAL_ADC_MspInit+0xdc>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800308a:	2304      	movs	r3, #4
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800308e:	2303      	movs	r3, #3
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	4805      	ldr	r0, [pc, #20]	@ (80030b4 <HAL_ADC_MspInit+0xe0>)
 800309e:	f001 f9a7 	bl	80043f0 <HAL_GPIO_Init>
}
 80030a2:	bf00      	nop
 80030a4:	3730      	adds	r7, #48	@ 0x30
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40012000 	.word	0x40012000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020800 	.word	0x40020800
 80030b8:	40012100 	.word	0x40012100

080030bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <HAL_I2C_MspInit+0x84>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d12c      	bne.n	8003138 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <HAL_I2C_MspInit+0x88>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <HAL_I2C_MspInit+0x88>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <HAL_I2C_MspInit+0x88>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003100:	2312      	movs	r3, #18
 8003102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800310c:	2304      	movs	r3, #4
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	4619      	mov	r1, r3
 8003116:	480c      	ldr	r0, [pc, #48]	@ (8003148 <HAL_I2C_MspInit+0x8c>)
 8003118:	f001 f96a 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <HAL_I2C_MspInit+0x88>)
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <HAL_I2C_MspInit+0x88>)
 8003126:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800312a:	6413      	str	r3, [r2, #64]	@ 0x40
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_I2C_MspInit+0x88>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003138:	bf00      	nop
 800313a:	3728      	adds	r7, #40	@ 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40005400 	.word	0x40005400
 8003144:	40023800 	.word	0x40023800
 8003148:	40020400 	.word	0x40020400

0800314c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	@ 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a23      	ldr	r2, [pc, #140]	@ (80031f8 <HAL_TIM_Base_MspInit+0xac>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10e      	bne.n	800318c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	4a21      	ldr	r2, [pc, #132]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6453      	str	r3, [r2, #68]	@ 0x44
 800317e:	4b1f      	ldr	r3, [pc, #124]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800318a:	e030      	b.n	80031ee <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1b      	ldr	r2, [pc, #108]	@ (8003200 <HAL_TIM_Base_MspInit+0xb4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d12b      	bne.n	80031ee <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b18      	ldr	r3, [pc, #96]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	4a10      	ldr	r2, [pc, #64]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <HAL_TIM_Base_MspInit+0xb0>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80031ce:	23c0      	movs	r3, #192	@ 0xc0
 80031d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031da:	2300      	movs	r3, #0
 80031dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031de:	2303      	movs	r3, #3
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	4619      	mov	r1, r3
 80031e8:	4806      	ldr	r0, [pc, #24]	@ (8003204 <HAL_TIM_Base_MspInit+0xb8>)
 80031ea:	f001 f901 	bl	80043f0 <HAL_GPIO_Init>
}
 80031ee:	bf00      	nop
 80031f0:	3728      	adds	r7, #40	@ 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40023800 	.word	0x40023800
 8003200:	40010400 	.word	0x40010400
 8003204:	40020800 	.word	0x40020800

08003208 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	@ 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003228:	d14b      	bne.n	80032c2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	4b3f      	ldr	r3, [pc, #252]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a3e      	ldr	r2, [pc, #248]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
 800323a:	4b3c      	ldr	r3, [pc, #240]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	4b38      	ldr	r3, [pc, #224]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4a37      	ldr	r2, [pc, #220]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	@ 0x30
 8003256:	4b35      	ldr	r3, [pc, #212]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	4b31      	ldr	r3, [pc, #196]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	4a30      	ldr	r2, [pc, #192]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	@ 0x30
 8003272:	4b2e      	ldr	r3, [pc, #184]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800327e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	2300      	movs	r3, #0
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003290:	2301      	movs	r3, #1
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003294:	f107 031c 	add.w	r3, r7, #28
 8003298:	4619      	mov	r1, r3
 800329a:	4825      	ldr	r0, [pc, #148]	@ (8003330 <HAL_TIM_Encoder_MspInit+0x128>)
 800329c:	f001 f8a8 	bl	80043f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032a0:	2308      	movs	r3, #8
 80032a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032b0:	2301      	movs	r3, #1
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	481e      	ldr	r0, [pc, #120]	@ (8003334 <HAL_TIM_Encoder_MspInit+0x12c>)
 80032bc:	f001 f898 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032c0:	e030      	b.n	8003324 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003338 <HAL_TIM_Encoder_MspInit+0x130>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d12b      	bne.n	8003324 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	4b16      	ldr	r3, [pc, #88]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	4a15      	ldr	r2, [pc, #84]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	6413      	str	r3, [r2, #64]	@ 0x40
 80032dc:	4b13      	ldr	r3, [pc, #76]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a0e      	ldr	r2, [pc, #56]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <HAL_TIM_Encoder_MspInit+0x124>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003304:	23c0      	movs	r3, #192	@ 0xc0
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003314:	2302      	movs	r3, #2
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	4619      	mov	r1, r3
 800331e:	4804      	ldr	r0, [pc, #16]	@ (8003330 <HAL_TIM_Encoder_MspInit+0x128>)
 8003320:	f001 f866 	bl	80043f0 <HAL_GPIO_Init>
}
 8003324:	bf00      	nop
 8003326:	3730      	adds	r7, #48	@ 0x30
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	40020000 	.word	0x40020000
 8003334:	40020400 	.word	0x40020400
 8003338:	40000400 	.word	0x40000400

0800333c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	@ 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1d      	ldr	r2, [pc, #116]	@ (80033d0 <HAL_TIM_IC_MspInit+0x94>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d134      	bne.n	80033c8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <HAL_TIM_IC_MspInit+0x98>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <HAL_TIM_IC_MspInit+0x98>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6413      	str	r3, [r2, #64]	@ 0x40
 800336e:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <HAL_TIM_IC_MspInit+0x98>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <HAL_TIM_IC_MspInit+0x98>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <HAL_TIM_IC_MspInit+0x98>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <HAL_TIM_IC_MspInit+0x98>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800339a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033a8:	2302      	movs	r3, #2
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	4809      	ldr	r0, [pc, #36]	@ (80033d8 <HAL_TIM_IC_MspInit+0x9c>)
 80033b4:	f001 f81c 	bl	80043f0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2105      	movs	r1, #5
 80033bc:	201e      	movs	r0, #30
 80033be:	f000 ff4e 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033c2:	201e      	movs	r0, #30
 80033c4:	f000 ff67 	bl	8004296 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80033c8:	bf00      	nop
 80033ca:	3728      	adds	r7, #40	@ 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020c00 	.word	0x40020c00

080033dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <HAL_TIM_MspPostInit+0x68>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d11e      	bne.n	800343c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_TIM_MspPostInit+0x6c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	4a10      	ldr	r2, [pc, #64]	@ (8003448 <HAL_TIM_MspPostInit+0x6c>)
 8003408:	f043 0310 	orr.w	r3, r3, #16
 800340c:	6313      	str	r3, [r2, #48]	@ 0x30
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_TIM_MspPostInit+0x6c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800341a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800341e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800342c:	2301      	movs	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	4619      	mov	r1, r3
 8003436:	4805      	ldr	r0, [pc, #20]	@ (800344c <HAL_TIM_MspPostInit+0x70>)
 8003438:	f000 ffda 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800343c:	bf00      	nop
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40010000 	.word	0x40010000
 8003448:	40023800 	.word	0x40023800
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <HAL_UART_MspInit+0x94>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d134      	bne.n	80034dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b1c      	ldr	r3, [pc, #112]	@ (80034e8 <HAL_UART_MspInit+0x98>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	4a1b      	ldr	r2, [pc, #108]	@ (80034e8 <HAL_UART_MspInit+0x98>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003480:	6413      	str	r3, [r2, #64]	@ 0x40
 8003482:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <HAL_UART_MspInit+0x98>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b15      	ldr	r3, [pc, #84]	@ (80034e8 <HAL_UART_MspInit+0x98>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4a14      	ldr	r2, [pc, #80]	@ (80034e8 <HAL_UART_MspInit+0x98>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6313      	str	r3, [r2, #48]	@ 0x30
 800349e:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <HAL_UART_MspInit+0x98>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b8:	2303      	movs	r3, #3
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034bc:	2307      	movs	r3, #7
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	4809      	ldr	r0, [pc, #36]	@ (80034ec <HAL_UART_MspInit+0x9c>)
 80034c8:	f000 ff92 	bl	80043f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2105      	movs	r1, #5
 80034d0:	2027      	movs	r0, #39	@ 0x27
 80034d2:	f000 fec4 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034d6:	2027      	movs	r0, #39	@ 0x27
 80034d8:	f000 fedd 	bl	8004296 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80034dc:	bf00      	nop
 80034de:	3728      	adds	r7, #40	@ 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40004800 	.word	0x40004800
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020800 	.word	0x40020800

080034f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <NMI_Handler+0x4>

080034f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//int count =0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <HardFault_Handler+0x4>

08003500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <MemManage_Handler+0x4>

08003508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <BusFault_Handler+0x4>

08003510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <UsageFault_Handler+0x4>

08003518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800352a:	f000 f979 	bl	8003820 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800352e:	f007 f8d1 	bl	800a6d4 <xTaskGetSchedulerState>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d001      	beq.n	800353c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003538:	f007 fec6 	bl	800b2c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}

08003540 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003554:	4802      	ldr	r0, [pc, #8]	@ (8003560 <TIM4_IRQHandler+0x10>)
 8003556:	f003 f9b1 	bl	80068bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200003b8 	.word	0x200003b8

08003564 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003568:	4802      	ldr	r0, [pc, #8]	@ (8003574 <USART3_IRQHandler+0x10>)
 800356a:	f004 fc03 	bl	8007d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000448 	.word	0x20000448

08003578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return 1;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_kill>:

int _kill(int pid, int sig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003592:	f009 f91b 	bl	800c7cc <__errno>
 8003596:	4603      	mov	r3, r0
 8003598:	2216      	movs	r2, #22
 800359a:	601a      	str	r2, [r3, #0]
  return -1;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_exit>:

void _exit (int status)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ffe7 	bl	8003588 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ba:	bf00      	nop
 80035bc:	e7fd      	b.n	80035ba <_exit+0x12>

080035be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e00a      	b.n	80035e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035d0:	f3af 8000 	nop.w
 80035d4:	4601      	mov	r1, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	60ba      	str	r2, [r7, #8]
 80035dc:	b2ca      	uxtb	r2, r1
 80035de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3301      	adds	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	dbf0      	blt.n	80035d0 <_read+0x12>
  }

  return len;
 80035ee:	687b      	ldr	r3, [r7, #4]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e009      	b.n	800361e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	60ba      	str	r2, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	dbf1      	blt.n	800360a <_write+0x12>
  }
  return len;
 8003626:	687b      	ldr	r3, [r7, #4]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_close>:

int _close(int file)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003658:	605a      	str	r2, [r3, #4]
  return 0;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_isatty>:

int _isatty(int file)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003670:	2301      	movs	r3, #1
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a0:	4a14      	ldr	r2, [pc, #80]	@ (80036f4 <_sbrk+0x5c>)
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <_sbrk+0x60>)
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ac:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <_sbrk+0x64>)
 80036b6:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <_sbrk+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d207      	bcs.n	80036d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c8:	f009 f880 	bl	800c7cc <__errno>
 80036cc:	4603      	mov	r3, r0
 80036ce:	220c      	movs	r2, #12
 80036d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e009      	b.n	80036ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <_sbrk+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036de:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <_sbrk+0x64>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	4a05      	ldr	r2, [pc, #20]	@ (80036fc <_sbrk+0x64>)
 80036e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20020000 	.word	0x20020000
 80036f8:	00000400 	.word	0x00000400
 80036fc:	2000053c 	.word	0x2000053c
 8003700:	200053e0 	.word	0x200053e0

08003704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <SystemInit+0x20>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370e:	4a05      	ldr	r2, [pc, #20]	@ (8003724 <SystemInit+0x20>)
 8003710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <Reset_Handler>:
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003760 <LoopFillZerobss+0xe>
 800372c:	f7ff ffea 	bl	8003704 <SystemInit>
 8003730:	480c      	ldr	r0, [pc, #48]	@ (8003764 <LoopFillZerobss+0x12>)
 8003732:	490d      	ldr	r1, [pc, #52]	@ (8003768 <LoopFillZerobss+0x16>)
 8003734:	4a0d      	ldr	r2, [pc, #52]	@ (800376c <LoopFillZerobss+0x1a>)
 8003736:	2300      	movs	r3, #0
 8003738:	e002      	b.n	8003740 <LoopCopyDataInit>

0800373a <CopyDataInit>:
 800373a:	58d4      	ldr	r4, [r2, r3]
 800373c:	50c4      	str	r4, [r0, r3]
 800373e:	3304      	adds	r3, #4

08003740 <LoopCopyDataInit>:
 8003740:	18c4      	adds	r4, r0, r3
 8003742:	428c      	cmp	r4, r1
 8003744:	d3f9      	bcc.n	800373a <CopyDataInit>
 8003746:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <LoopFillZerobss+0x1e>)
 8003748:	4c0a      	ldr	r4, [pc, #40]	@ (8003774 <LoopFillZerobss+0x22>)
 800374a:	2300      	movs	r3, #0
 800374c:	e001      	b.n	8003752 <LoopFillZerobss>

0800374e <FillZerobss>:
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	3204      	adds	r2, #4

08003752 <LoopFillZerobss>:
 8003752:	42a2      	cmp	r2, r4
 8003754:	d3fb      	bcc.n	800374e <FillZerobss>
 8003756:	f009 f83f 	bl	800c7d8 <__libc_init_array>
 800375a:	f7fd fbd3 	bl	8000f04 <main>
 800375e:	4770      	bx	lr
 8003760:	20020000 	.word	0x20020000
 8003764:	20000000 	.word	0x20000000
 8003768:	200001dc 	.word	0x200001dc
 800376c:	0800f918 	.word	0x0800f918
 8003770:	200001e0 	.word	0x200001e0
 8003774:	200053e0 	.word	0x200053e0

08003778 <ADC_IRQHandler>:
 8003778:	e7fe      	b.n	8003778 <ADC_IRQHandler>
	...

0800377c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003780:	4b0e      	ldr	r3, [pc, #56]	@ (80037bc <HAL_Init+0x40>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	@ (80037bc <HAL_Init+0x40>)
 8003786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800378a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800378c:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <HAL_Init+0x40>)
 8003792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003798:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	@ (80037bc <HAL_Init+0x40>)
 800379e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a4:	2003      	movs	r0, #3
 80037a6:	f000 fd4f 	bl	8004248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037aa:	200f      	movs	r0, #15
 80037ac:	f000 f808 	bl	80037c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b0:	f7ff fbdc 	bl	8002f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c8:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <HAL_InitTick+0x54>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b12      	ldr	r3, [pc, #72]	@ (8003818 <HAL_InitTick+0x58>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4619      	mov	r1, r3
 80037d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd67 	bl	80042b2 <HAL_SYSTICK_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00e      	b.n	800380c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b0f      	cmp	r3, #15
 80037f2:	d80a      	bhi.n	800380a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037f4:	2200      	movs	r2, #0
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f000 fd2f 	bl	800425e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003800:	4a06      	ldr	r2, [pc, #24]	@ (800381c <HAL_InitTick+0x5c>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000004 	.word	0x20000004
 8003818:	2000000c 	.word	0x2000000c
 800381c:	20000008 	.word	0x20000008

08003820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003824:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_IncTick+0x20>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <HAL_IncTick+0x24>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4413      	add	r3, r2
 8003830:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <HAL_IncTick+0x24>)
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	2000000c 	.word	0x2000000c
 8003844:	20000540 	.word	0x20000540

08003848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return uwTick;
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <HAL_GetTick+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000540 	.word	0x20000540

08003860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7ff ffee 	bl	8003848 <HAL_GetTick>
 800386c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d005      	beq.n	8003886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800387a:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <HAL_Delay+0x44>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003886:	bf00      	nop
 8003888:	f7ff ffde 	bl	8003848 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d8f7      	bhi.n	8003888 <HAL_Delay+0x28>
  {
  }
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	2000000c 	.word	0x2000000c

080038a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e033      	b.n	8003926 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fb84 	bl	8002fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038ee:	f023 0302 	bic.w	r3, r3, #2
 80038f2:	f043 0202 	orr.w	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fad8 	bl	8003eb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	@ 0x40
 8003916:	e001      	b.n	800391c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_ADC_Start+0x1a>
 8003946:	2302      	movs	r3, #2
 8003948:	e0b2      	b.n	8003ab0 <HAL_ADC_Start+0x180>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d018      	beq.n	8003992 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003970:	4b52      	ldr	r3, [pc, #328]	@ (8003abc <HAL_ADC_Start+0x18c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a52      	ldr	r2, [pc, #328]	@ (8003ac0 <HAL_ADC_Start+0x190>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0c9a      	lsrs	r2, r3, #18
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003984:	e002      	b.n	800398c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3b01      	subs	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d17a      	bne.n	8003a96 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039de:	d106      	bne.n	80039ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e4:	f023 0206 	bic.w	r2, r3, #6
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80039ec:	e002      	b.n	80039f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039fc:	4b31      	ldr	r3, [pc, #196]	@ (8003ac4 <HAL_ADC_Start+0x194>)
 80039fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003a08:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d12a      	bne.n	8003a6c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac8 <HAL_ADC_Start+0x198>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d015      	beq.n	8003a4c <HAL_ADC_Start+0x11c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <HAL_ADC_Start+0x19c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d105      	bne.n	8003a36 <HAL_ADC_Start+0x106>
 8003a2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <HAL_ADC_Start+0x194>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a25      	ldr	r2, [pc, #148]	@ (8003ad0 <HAL_ADC_Start+0x1a0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d136      	bne.n	8003aae <HAL_ADC_Start+0x17e>
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <HAL_ADC_Start+0x194>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d130      	bne.n	8003aae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d129      	bne.n	8003aae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	e020      	b.n	8003aae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a15      	ldr	r2, [pc, #84]	@ (8003ac8 <HAL_ADC_Start+0x198>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d11b      	bne.n	8003aae <HAL_ADC_Start+0x17e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d114      	bne.n	8003aae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	e00b      	b.n	8003aae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f043 0210 	orr.w	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	20000004 	.word	0x20000004
 8003ac0:	431bde83 	.word	0x431bde83
 8003ac4:	40012300 	.word	0x40012300
 8003ac8:	40012000 	.word	0x40012000
 8003acc:	40012100 	.word	0x40012100
 8003ad0:	40012200 	.word	0x40012200

08003ad4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_Stop+0x16>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e021      	b.n	8003b2e <HAL_ADC_Stop+0x5a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	f043 0201 	orr.w	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b56:	d113      	bne.n	8003b80 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b66:	d10b      	bne.n	8003b80 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e063      	b.n	8003c48 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b80:	f7ff fe62 	bl	8003848 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b86:	e021      	b.n	8003bcc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d01d      	beq.n	8003bcc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_ADC_PollForConversion+0x6c>
 8003b96:	f7ff fe57 	bl	8003848 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d212      	bcs.n	8003bcc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d00b      	beq.n	8003bcc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	f043 0204 	orr.w	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e03d      	b.n	8003c48 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d1d6      	bne.n	8003b88 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0212 	mvn.w	r2, #18
 8003be2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d123      	bne.n	8003c46 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11f      	bne.n	8003c46 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d111      	bne.n	8003c46 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d105      	bne.n	8003c46 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e105      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x228>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	d925      	bls.n	8003ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68d9      	ldr	r1, [r3, #12]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	3b1e      	subs	r3, #30
 8003cae:	2207      	movs	r2, #7
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4403      	add	r3, r0
 8003cd6:	3b1e      	subs	r3, #30
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e022      	b.n	8003d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	400a      	ands	r2, r1
 8003d06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4403      	add	r3, r0
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d824      	bhi.n	8003d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3b05      	subs	r3, #5
 8003d44:	221f      	movs	r2, #31
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	400a      	ands	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3b05      	subs	r3, #5
 8003d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d7a:	e04c      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d824      	bhi.n	8003dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	3b23      	subs	r3, #35	@ 0x23
 8003d96:	221f      	movs	r2, #31
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	400a      	ands	r2, r1
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b23      	subs	r3, #35	@ 0x23
 8003dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dcc:	e023      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b41      	subs	r3, #65	@ 0x41
 8003de0:	221f      	movs	r2, #31
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	400a      	ands	r2, r1
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	3b41      	subs	r3, #65	@ 0x41
 8003e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x234>)
 8003e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d105      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d123      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d003      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x1e6>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b11      	cmp	r3, #17
 8003e50:	d11b      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d111      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	@ (8003eac <HAL_ADC_ConfigChannel+0x240>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	0c9a      	lsrs	r2, r3, #18
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e7c:	e002      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f9      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40012300 	.word	0x40012300
 8003ea4:	40012000 	.word	0x40012000
 8003ea8:	20000004 	.word	0x20000004
 8003eac:	431bde83 	.word	0x431bde83

08003eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb8:	4b79      	ldr	r3, [pc, #484]	@ (80040a0 <ADC_Init+0x1f0>)
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	4a58      	ldr	r2, [pc, #352]	@ (80040a4 <ADC_Init+0x1f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e00f      	b.n	8003fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7e1b      	ldrb	r3, [r3, #24]
 8003fc8:	005a      	lsls	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	035a      	lsls	r2, r3, #13
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e007      	b.n	8004024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	3b01      	subs	r3, #1
 8004040:	051a      	lsls	r2, r3, #20
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6899      	ldr	r1, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004066:	025a      	lsls	r2, r3, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	029a      	lsls	r2, r3, #10
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012300 	.word	0x40012300
 80040a4:	0f000001 	.word	0x0f000001

080040a8 <__NVIC_SetPriorityGrouping>:
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b8:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040da:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	60d3      	str	r3, [r2, #12]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <__NVIC_GetPriorityGrouping>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f4:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <__NVIC_GetPriorityGrouping+0x18>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 0307 	and.w	r3, r3, #7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_EnableIRQ>:
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	2b00      	cmp	r3, #0
 800411c:	db0b      	blt.n	8004136 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	4907      	ldr	r1, [pc, #28]	@ (8004144 <__NVIC_EnableIRQ+0x38>)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2001      	movs	r0, #1
 800412e:	fa00 f202 	lsl.w	r2, r0, r2
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000e100 	.word	0xe000e100

08004148 <__NVIC_SetPriority>:
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	@ (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	@ (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <NVIC_EncodePriority>:
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	@ 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf28      	it	cs
 80041ba:	2304      	movcs	r3, #4
 80041bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d902      	bls.n	80041cc <NVIC_EncodePriority+0x30>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3b03      	subs	r3, #3
 80041ca:	e000      	b.n	80041ce <NVIC_EncodePriority+0x32>
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	4313      	orrs	r3, r2
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	@ 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004214:	d301      	bcc.n	800421a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004216:	2301      	movs	r3, #1
 8004218:	e00f      	b.n	800423a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421a:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <SysTick_Config+0x40>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004222:	210f      	movs	r1, #15
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	f7ff ff8e 	bl	8004148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <SysTick_Config+0x40>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <SysTick_Config+0x40>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000e010 	.word	0xe000e010

08004248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff29 	bl	80040a8 <__NVIC_SetPriorityGrouping>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004270:	f7ff ff3e 	bl	80040f0 <__NVIC_GetPriorityGrouping>
 8004274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7ff ff8e 	bl	800419c <NVIC_EncodePriority>
 8004280:	4602      	mov	r2, r0
 8004282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff5d 	bl	8004148 <__NVIC_SetPriority>
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff31 	bl	800410c <__NVIC_EnableIRQ>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ffa2 	bl	8004204 <SysTick_Config>
 80042c0:	4603      	mov	r3, r0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042d8:	f7ff fab6 	bl	8003848 <HAL_GetTick>
 80042dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d008      	beq.n	80042fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2280      	movs	r2, #128	@ 0x80
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e052      	b.n	80043a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0216 	bic.w	r2, r2, #22
 800430a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800431a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d103      	bne.n	800432c <HAL_DMA_Abort+0x62>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0208 	bic.w	r2, r2, #8
 800433a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800434c:	e013      	b.n	8004376 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800434e:	f7ff fa7b 	bl	8003848 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b05      	cmp	r3, #5
 800435a:	d90c      	bls.n	8004376 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2203      	movs	r2, #3
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e015      	b.n	80043a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e4      	bne.n	800434e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	223f      	movs	r2, #63	@ 0x3f
 800438a:	409a      	lsls	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2280      	movs	r2, #128	@ 0x80
 80043c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e00c      	b.n	80043e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2205      	movs	r2, #5
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	@ 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e16b      	b.n	80046e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800440c:	2201      	movs	r2, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	f040 815a 	bne.w	80046de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d005      	beq.n	8004442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443e:	2b02      	cmp	r3, #2
 8004440:	d130      	bne.n	80044a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	2203      	movs	r2, #3
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004478:	2201      	movs	r2, #1
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 0201 	and.w	r2, r3, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d017      	beq.n	80044e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d123      	bne.n	8004534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	08da      	lsrs	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	220f      	movs	r2, #15
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3208      	adds	r2, #8
 800452e:	69b9      	ldr	r1, [r7, #24]
 8004530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80b4 	beq.w	80046de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	4b60      	ldr	r3, [pc, #384]	@ (80046fc <HAL_GPIO_Init+0x30c>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	4a5f      	ldr	r2, [pc, #380]	@ (80046fc <HAL_GPIO_Init+0x30c>)
 8004580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004584:	6453      	str	r3, [r2, #68]	@ 0x44
 8004586:	4b5d      	ldr	r3, [pc, #372]	@ (80046fc <HAL_GPIO_Init+0x30c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004592:	4a5b      	ldr	r2, [pc, #364]	@ (8004700 <HAL_GPIO_Init+0x310>)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	3302      	adds	r3, #2
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	220f      	movs	r2, #15
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a52      	ldr	r2, [pc, #328]	@ (8004704 <HAL_GPIO_Init+0x314>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d02b      	beq.n	8004616 <HAL_GPIO_Init+0x226>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a51      	ldr	r2, [pc, #324]	@ (8004708 <HAL_GPIO_Init+0x318>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d025      	beq.n	8004612 <HAL_GPIO_Init+0x222>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a50      	ldr	r2, [pc, #320]	@ (800470c <HAL_GPIO_Init+0x31c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01f      	beq.n	800460e <HAL_GPIO_Init+0x21e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004710 <HAL_GPIO_Init+0x320>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d019      	beq.n	800460a <HAL_GPIO_Init+0x21a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004714 <HAL_GPIO_Init+0x324>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_GPIO_Init+0x216>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004718 <HAL_GPIO_Init+0x328>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00d      	beq.n	8004602 <HAL_GPIO_Init+0x212>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4c      	ldr	r2, [pc, #304]	@ (800471c <HAL_GPIO_Init+0x32c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <HAL_GPIO_Init+0x20e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004720 <HAL_GPIO_Init+0x330>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_GPIO_Init+0x20a>
 80045f6:	2307      	movs	r3, #7
 80045f8:	e00e      	b.n	8004618 <HAL_GPIO_Init+0x228>
 80045fa:	2308      	movs	r3, #8
 80045fc:	e00c      	b.n	8004618 <HAL_GPIO_Init+0x228>
 80045fe:	2306      	movs	r3, #6
 8004600:	e00a      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004602:	2305      	movs	r3, #5
 8004604:	e008      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004606:	2304      	movs	r3, #4
 8004608:	e006      	b.n	8004618 <HAL_GPIO_Init+0x228>
 800460a:	2303      	movs	r3, #3
 800460c:	e004      	b.n	8004618 <HAL_GPIO_Init+0x228>
 800460e:	2302      	movs	r3, #2
 8004610:	e002      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <HAL_GPIO_Init+0x228>
 8004616:	2300      	movs	r3, #0
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	f002 0203 	and.w	r2, r2, #3
 800461e:	0092      	lsls	r2, r2, #2
 8004620:	4093      	lsls	r3, r2
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004628:	4935      	ldr	r1, [pc, #212]	@ (8004700 <HAL_GPIO_Init+0x310>)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	3302      	adds	r3, #2
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004636:	4b3b      	ldr	r3, [pc, #236]	@ (8004724 <HAL_GPIO_Init+0x334>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800465a:	4a32      	ldr	r2, [pc, #200]	@ (8004724 <HAL_GPIO_Init+0x334>)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004660:	4b30      	ldr	r3, [pc, #192]	@ (8004724 <HAL_GPIO_Init+0x334>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004684:	4a27      	ldr	r2, [pc, #156]	@ (8004724 <HAL_GPIO_Init+0x334>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800468a:	4b26      	ldr	r3, [pc, #152]	@ (8004724 <HAL_GPIO_Init+0x334>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <HAL_GPIO_Init+0x334>)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004724 <HAL_GPIO_Init+0x334>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046d8:	4a12      	ldr	r2, [pc, #72]	@ (8004724 <HAL_GPIO_Init+0x334>)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	f67f ae90 	bls.w	800440c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3724      	adds	r7, #36	@ 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	40013800 	.word	0x40013800
 8004704:	40020000 	.word	0x40020000
 8004708:	40020400 	.word	0x40020400
 800470c:	40020800 	.word	0x40020800
 8004710:	40020c00 	.word	0x40020c00
 8004714:	40021000 	.word	0x40021000
 8004718:	40021400 	.word	0x40021400
 800471c:	40021800 	.word	0x40021800
 8004720:	40021c00 	.word	0x40021c00
 8004724:	40013c00 	.word	0x40013c00

08004728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
 8004734:	4613      	mov	r3, r2
 8004736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004738:	787b      	ldrb	r3, [r7, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004744:	e003      	b.n	800474e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004746:	887b      	ldrh	r3, [r7, #2]
 8004748:	041a      	lsls	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	619a      	str	r2, [r3, #24]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800476c:	887a      	ldrh	r2, [r7, #2]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	041a      	lsls	r2, r3, #16
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43d9      	mvns	r1, r3
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	400b      	ands	r3, r1
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e12b      	b.n	80049fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fe fc80 	bl	80030bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	@ 0x24
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047f4:	f001 fc1e 	bl	8006034 <HAL_RCC_GetPCLK1Freq>
 80047f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a81      	ldr	r2, [pc, #516]	@ (8004a04 <HAL_I2C_Init+0x274>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d807      	bhi.n	8004814 <HAL_I2C_Init+0x84>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a80      	ldr	r2, [pc, #512]	@ (8004a08 <HAL_I2C_Init+0x278>)
 8004808:	4293      	cmp	r3, r2
 800480a:	bf94      	ite	ls
 800480c:	2301      	movls	r3, #1
 800480e:	2300      	movhi	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e006      	b.n	8004822 <HAL_I2C_Init+0x92>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a7d      	ldr	r2, [pc, #500]	@ (8004a0c <HAL_I2C_Init+0x27c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	bf94      	ite	ls
 800481c:	2301      	movls	r3, #1
 800481e:	2300      	movhi	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0e7      	b.n	80049fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a78      	ldr	r2, [pc, #480]	@ (8004a10 <HAL_I2C_Init+0x280>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	0c9b      	lsrs	r3, r3, #18
 8004834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a6a      	ldr	r2, [pc, #424]	@ (8004a04 <HAL_I2C_Init+0x274>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d802      	bhi.n	8004864 <HAL_I2C_Init+0xd4>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3301      	adds	r3, #1
 8004862:	e009      	b.n	8004878 <HAL_I2C_Init+0xe8>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	4a69      	ldr	r2, [pc, #420]	@ (8004a14 <HAL_I2C_Init+0x284>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	099b      	lsrs	r3, r3, #6
 8004876:	3301      	adds	r3, #1
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	430b      	orrs	r3, r1
 800487e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800488a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	495c      	ldr	r1, [pc, #368]	@ (8004a04 <HAL_I2C_Init+0x274>)
 8004894:	428b      	cmp	r3, r1
 8004896:	d819      	bhi.n	80048cc <HAL_I2C_Init+0x13c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e59      	subs	r1, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048a6:	1c59      	adds	r1, r3, #1
 80048a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048ac:	400b      	ands	r3, r1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_I2C_Init+0x138>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1e59      	subs	r1, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c6:	e051      	b.n	800496c <HAL_I2C_Init+0x1dc>
 80048c8:	2304      	movs	r3, #4
 80048ca:	e04f      	b.n	800496c <HAL_I2C_Init+0x1dc>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d111      	bne.n	80048f8 <HAL_I2C_Init+0x168>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e58      	subs	r0, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	440b      	add	r3, r1
 80048e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e012      	b.n	800491e <HAL_I2C_Init+0x18e>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e58      	subs	r0, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	0099      	lsls	r1, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Init+0x196>
 8004922:	2301      	movs	r3, #1
 8004924:	e022      	b.n	800496c <HAL_I2C_Init+0x1dc>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10e      	bne.n	800494c <HAL_I2C_Init+0x1bc>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1e58      	subs	r0, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	440b      	add	r3, r1
 800493c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494a:	e00f      	b.n	800496c <HAL_I2C_Init+0x1dc>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1e58      	subs	r0, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	0099      	lsls	r1, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004962:	3301      	adds	r3, #1
 8004964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	6809      	ldr	r1, [r1, #0]
 8004970:	4313      	orrs	r3, r2
 8004972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800499a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6911      	ldr	r1, [r2, #16]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68d2      	ldr	r2, [r2, #12]
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695a      	ldr	r2, [r3, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	000186a0 	.word	0x000186a0
 8004a08:	001e847f 	.word	0x001e847f
 8004a0c:	003d08ff 	.word	0x003d08ff
 8004a10:	431bde83 	.word	0x431bde83
 8004a14:	10624dd3 	.word	0x10624dd3

08004a18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	461a      	mov	r2, r3
 8004a24:	460b      	mov	r3, r1
 8004a26:	817b      	strh	r3, [r7, #10]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a2c:	f7fe ff0c 	bl	8003848 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	f040 80e0 	bne.w	8004c00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2319      	movs	r3, #25
 8004a46:	2201      	movs	r2, #1
 8004a48:	4970      	ldr	r1, [pc, #448]	@ (8004c0c <HAL_I2C_Master_Transmit+0x1f4>)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fc64 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0d3      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_I2C_Master_Transmit+0x50>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0cc      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d007      	beq.n	8004a8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2221      	movs	r2, #33	@ 0x21
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	893a      	ldrh	r2, [r7, #8]
 8004abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a50      	ldr	r2, [pc, #320]	@ (8004c10 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 face 	bl	8005078 <I2C_MasterRequestWrite>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e08d      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004afc:	e066      	b.n	8004bcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	6a39      	ldr	r1, [r7, #32]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fd22 	bl	800554c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00d      	beq.n	8004b2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d107      	bne.n	8004b26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e06b      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d11b      	bne.n	8004ba0 <HAL_I2C_Master_Transmit+0x188>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d017      	beq.n	8004ba0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	6a39      	ldr	r1, [r7, #32]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fd19 	bl	80055dc <I2C_WaitOnBTFFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d107      	bne.n	8004bc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e01a      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d194      	bne.n	8004afe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	00100002 	.word	0x00100002
 8004c10:	ffff0000 	.word	0xffff0000

08004c14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08c      	sub	sp, #48	@ 0x30
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	460b      	mov	r3, r1
 8004c22:	817b      	strh	r3, [r7, #10]
 8004c24:	4613      	mov	r3, r2
 8004c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c28:	f7fe fe0e 	bl	8003848 <HAL_GetTick>
 8004c2c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	f040 8217 	bne.w	800506a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2319      	movs	r3, #25
 8004c42:	2201      	movs	r2, #1
 8004c44:	497c      	ldr	r1, [pc, #496]	@ (8004e38 <HAL_I2C_Master_Receive+0x224>)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fb66 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
 8004c54:	e20a      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_I2C_Master_Receive+0x50>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e203      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d007      	beq.n	8004c8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2222      	movs	r2, #34	@ 0x22
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	893a      	ldrh	r2, [r7, #8]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e3c <HAL_I2C_Master_Receive+0x228>)
 8004cca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ccc:	8979      	ldrh	r1, [r7, #10]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fa52 	bl	800517c <I2C_MasterRequestRead>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e1c4      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d113      	bne.n	8004d12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e198      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d11b      	bne.n	8004d52 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e178      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d11b      	bne.n	8004d92 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	e158      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004db8:	e144      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	f200 80f1 	bhi.w	8004fa6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d123      	bne.n	8004e14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fc4b 	bl	800566c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e145      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e12:	e117      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d14e      	bne.n	8004eba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	2200      	movs	r2, #0
 8004e24:	4906      	ldr	r1, [pc, #24]	@ (8004e40 <HAL_I2C_Master_Receive+0x22c>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fa76 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e11a      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
 8004e36:	bf00      	nop
 8004e38:	00100002 	.word	0x00100002
 8004e3c:	ffff0000 	.word	0xffff0000
 8004e40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004eb8:	e0c4      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	496c      	ldr	r1, [pc, #432]	@ (8005074 <HAL_I2C_Master_Receive+0x460>)
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fa27 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0cb      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4955      	ldr	r1, [pc, #340]	@ (8005074 <HAL_I2C_Master_Receive+0x460>)
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9f9 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e09d      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fa4:	e04e      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fb5e 	bl	800566c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e058      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d124      	bne.n	8005044 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d107      	bne.n	8005012 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005010:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f aeb6 	bne.w	8004dba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e000      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	@ 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	00010004 	.word	0x00010004

08005078 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	460b      	mov	r3, r1
 8005086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d006      	beq.n	80050a2 <I2C_MasterRequestWrite+0x2a>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d003      	beq.n	80050a2 <I2C_MasterRequestWrite+0x2a>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050a0:	d108      	bne.n	80050b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e00b      	b.n	80050cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	2b12      	cmp	r3, #18
 80050ba:	d107      	bne.n	80050cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f91d 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050f2:	d103      	bne.n	80050fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e035      	b.n	800516c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005108:	d108      	bne.n	800511c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005118:	611a      	str	r2, [r3, #16]
 800511a:	e01b      	b.n	8005154 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800511c:	897b      	ldrh	r3, [r7, #10]
 800511e:	11db      	asrs	r3, r3, #7
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0306 	and.w	r3, r3, #6
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f063 030f 	orn	r3, r3, #15
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	490e      	ldr	r1, [pc, #56]	@ (8005174 <I2C_MasterRequestWrite+0xfc>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f966 	bl	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e010      	b.n	800516c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800514a:	897b      	ldrh	r3, [r7, #10]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4907      	ldr	r1, [pc, #28]	@ (8005178 <I2C_MasterRequestWrite+0x100>)
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f956 	bl	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	00010008 	.word	0x00010008
 8005178:	00010002 	.word	0x00010002

0800517c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	460b      	mov	r3, r1
 800518a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d006      	beq.n	80051b6 <I2C_MasterRequestRead+0x3a>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d003      	beq.n	80051b6 <I2C_MasterRequestRead+0x3a>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051b4:	d108      	bne.n	80051c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e00b      	b.n	80051e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051cc:	2b11      	cmp	r3, #17
 80051ce:	d107      	bne.n	80051e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f893 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005206:	d103      	bne.n	8005210 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800520e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e079      	b.n	8005308 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800521c:	d108      	bne.n	8005230 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	611a      	str	r2, [r3, #16]
 800522e:	e05f      	b.n	80052f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005230:	897b      	ldrh	r3, [r7, #10]
 8005232:	11db      	asrs	r3, r3, #7
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 0306 	and.w	r3, r3, #6
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f063 030f 	orn	r3, r3, #15
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4930      	ldr	r1, [pc, #192]	@ (8005310 <I2C_MasterRequestRead+0x194>)
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f8dc 	bl	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e054      	b.n	8005308 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800525e:	897b      	ldrh	r3, [r7, #10]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4929      	ldr	r1, [pc, #164]	@ (8005314 <I2C_MasterRequestRead+0x198>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f8cc 	bl	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e044      	b.n	8005308 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f831 	bl	8005318 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ca:	d103      	bne.n	80052d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e017      	b.n	8005308 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052d8:	897b      	ldrh	r3, [r7, #10]
 80052da:	11db      	asrs	r3, r3, #7
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0306 	and.w	r3, r3, #6
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f063 030e 	orn	r3, r3, #14
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4907      	ldr	r1, [pc, #28]	@ (8005314 <I2C_MasterRequestRead+0x198>)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f888 	bl	800540c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	00010008 	.word	0x00010008
 8005314:	00010002 	.word	0x00010002

08005318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005328:	e048      	b.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d044      	beq.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005332:	f7fe fa89 	bl	8003848 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d139      	bne.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10d      	bne.n	800536e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	43da      	mvns	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4013      	ands	r3, r2
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	e00c      	b.n	8005388 <I2C_WaitOnFlagUntilTimeout+0x70>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	43da      	mvns	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	429a      	cmp	r2, r3
 800538c:	d116      	bne.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e023      	b.n	8005404 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	0c1b      	lsrs	r3, r3, #16
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d10d      	bne.n	80053e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	43da      	mvns	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4013      	ands	r3, r2
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	e00c      	b.n	80053fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	43da      	mvns	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d093      	beq.n	800532a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800541a:	e071      	b.n	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542a:	d123      	bne.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800543a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	f043 0204 	orr.w	r2, r3, #4
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e067      	b.n	8005544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d041      	beq.n	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fe f9e4 	bl	8003848 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d136      	bne.n	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d10c      	bne.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	43da      	mvns	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	e00b      	b.n	80054ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	43da      	mvns	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d016      	beq.n	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e021      	b.n	8005544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	0c1b      	lsrs	r3, r3, #16
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b01      	cmp	r3, #1
 8005508:	d10c      	bne.n	8005524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	43da      	mvns	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4013      	ands	r3, r2
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e00b      	b.n	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	43da      	mvns	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4013      	ands	r3, r2
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	f47f af6d 	bne.w	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005558:	e034      	b.n	80055c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f8e3 	bl	8005726 <I2C_IsAcknowledgeFailed>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e034      	b.n	80055d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d028      	beq.n	80055c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005572:	f7fe f969 	bl	8003848 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	d302      	bcc.n	8005588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11d      	bne.n	80055c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005592:	2b80      	cmp	r3, #128	@ 0x80
 8005594:	d016      	beq.n	80055c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e007      	b.n	80055d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ce:	2b80      	cmp	r3, #128	@ 0x80
 80055d0:	d1c3      	bne.n	800555a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e8:	e034      	b.n	8005654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f89b 	bl	8005726 <I2C_IsAcknowledgeFailed>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e034      	b.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d028      	beq.n	8005654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fe f921 	bl	8003848 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d11d      	bne.n	8005654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d016      	beq.n	8005654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e007      	b.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d1c3      	bne.n	80055ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005678:	e049      	b.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b10      	cmp	r3, #16
 8005686:	d119      	bne.n	80056bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0210 	mvn.w	r2, #16
 8005690:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e030      	b.n	800571e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056bc:	f7fe f8c4 	bl	8003848 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d302      	bcc.n	80056d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11d      	bne.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056dc:	2b40      	cmp	r3, #64	@ 0x40
 80056de:	d016      	beq.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e007      	b.n	800571e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005718:	2b40      	cmp	r3, #64	@ 0x40
 800571a:	d1ae      	bne.n	800567a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800573c:	d11b      	bne.n	8005776 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005746:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	f043 0204 	orr.w	r2, r3, #4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800578a:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <HAL_PWR_EnableBkUpAccess+0x20>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005796:	687b      	ldr	r3, [r7, #4]
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	420e0020 	.word	0x420e0020
 80057a8:	40007000 	.word	0x40007000

080057ac <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80057b2:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_PWR_DisableBkUpAccess+0x20>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80057be:	687b      	ldr	r3, [r7, #4]
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	420e0020 	.word	0x420e0020
 80057d0:	40007000 	.word	0x40007000

080057d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e267      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d075      	beq.n	80058de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057f2:	4b88      	ldr	r3, [pc, #544]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 030c 	and.w	r3, r3, #12
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d00c      	beq.n	8005818 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057fe:	4b85      	ldr	r3, [pc, #532]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005806:	2b08      	cmp	r3, #8
 8005808:	d112      	bne.n	8005830 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800580a:	4b82      	ldr	r3, [pc, #520]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005816:	d10b      	bne.n	8005830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005818:	4b7e      	ldr	r3, [pc, #504]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05b      	beq.n	80058dc <HAL_RCC_OscConfig+0x108>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d157      	bne.n	80058dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e242      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005838:	d106      	bne.n	8005848 <HAL_RCC_OscConfig+0x74>
 800583a:	4b76      	ldr	r3, [pc, #472]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a75      	ldr	r2, [pc, #468]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e01d      	b.n	8005884 <HAL_RCC_OscConfig+0xb0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005850:	d10c      	bne.n	800586c <HAL_RCC_OscConfig+0x98>
 8005852:	4b70      	ldr	r3, [pc, #448]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a6f      	ldr	r2, [pc, #444]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6c      	ldr	r2, [pc, #432]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e00b      	b.n	8005884 <HAL_RCC_OscConfig+0xb0>
 800586c:	4b69      	ldr	r3, [pc, #420]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a68      	ldr	r2, [pc, #416]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	4b66      	ldr	r3, [pc, #408]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a65      	ldr	r2, [pc, #404]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 800587e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d013      	beq.n	80058b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588c:	f7fd ffdc 	bl	8003848 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005894:	f7fd ffd8 	bl	8003848 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b64      	cmp	r3, #100	@ 0x64
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e207      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0xc0>
 80058b2:	e014      	b.n	80058de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b4:	f7fd ffc8 	bl	8003848 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058bc:	f7fd ffc4 	bl	8003848 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b64      	cmp	r3, #100	@ 0x64
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e1f3      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ce:	4b51      	ldr	r3, [pc, #324]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f0      	bne.n	80058bc <HAL_RCC_OscConfig+0xe8>
 80058da:	e000      	b.n	80058de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d063      	beq.n	80059b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058f6:	4b47      	ldr	r3, [pc, #284]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d11c      	bne.n	800593c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005902:	4b44      	ldr	r3, [pc, #272]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d116      	bne.n	800593c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800590e:	4b41      	ldr	r3, [pc, #260]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_RCC_OscConfig+0x152>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e1c7      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005926:	4b3b      	ldr	r3, [pc, #236]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4937      	ldr	r1, [pc, #220]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005936:	4313      	orrs	r3, r2
 8005938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	e03a      	b.n	80059b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d020      	beq.n	8005986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005944:	4b34      	ldr	r3, [pc, #208]	@ (8005a18 <HAL_RCC_OscConfig+0x244>)
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fd ff7d 	bl	8003848 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005952:	f7fd ff79 	bl	8003848 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e1a8      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005964:	4b2b      	ldr	r3, [pc, #172]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005970:	4b28      	ldr	r3, [pc, #160]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4925      	ldr	r1, [pc, #148]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 8005980:	4313      	orrs	r3, r2
 8005982:	600b      	str	r3, [r1, #0]
 8005984:	e015      	b.n	80059b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005986:	4b24      	ldr	r3, [pc, #144]	@ (8005a18 <HAL_RCC_OscConfig+0x244>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fd ff5c 	bl	8003848 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005994:	f7fd ff58 	bl	8003848 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e187      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d036      	beq.n	8005a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c6:	4b15      	ldr	r3, [pc, #84]	@ (8005a1c <HAL_RCC_OscConfig+0x248>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059cc:	f7fd ff3c 	bl	8003848 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d4:	f7fd ff38 	bl	8003848 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e167      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <HAL_RCC_OscConfig+0x240>)
 80059e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x200>
 80059f2:	e01b      	b.n	8005a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f4:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <HAL_RCC_OscConfig+0x248>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059fa:	f7fd ff25 	bl	8003848 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a00:	e00e      	b.n	8005a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a02:	f7fd ff21 	bl	8003848 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d907      	bls.n	8005a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e150      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
 8005a14:	40023800 	.word	0x40023800
 8005a18:	42470000 	.word	0x42470000
 8005a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a20:	4b88      	ldr	r3, [pc, #544]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ea      	bne.n	8005a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8097 	beq.w	8005b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3e:	4b81      	ldr	r3, [pc, #516]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	4a7c      	ldr	r2, [pc, #496]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	60bb      	str	r3, [r7, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6a:	4b77      	ldr	r3, [pc, #476]	@ (8005c48 <HAL_RCC_OscConfig+0x474>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d118      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a76:	4b74      	ldr	r3, [pc, #464]	@ (8005c48 <HAL_RCC_OscConfig+0x474>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a73      	ldr	r2, [pc, #460]	@ (8005c48 <HAL_RCC_OscConfig+0x474>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a82:	f7fd fee1 	bl	8003848 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8a:	f7fd fedd 	bl	8003848 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e10c      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005c48 <HAL_RCC_OscConfig+0x474>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d106      	bne.n	8005abe <HAL_RCC_OscConfig+0x2ea>
 8005ab0:	4b64      	ldr	r3, [pc, #400]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab4:	4a63      	ldr	r2, [pc, #396]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8005abc:	e01c      	b.n	8005af8 <HAL_RCC_OscConfig+0x324>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x30c>
 8005ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aca:	4a5e      	ldr	r2, [pc, #376]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005acc:	f043 0304 	orr.w	r3, r3, #4
 8005ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ade:	e00b      	b.n	8005af8 <HAL_RCC_OscConfig+0x324>
 8005ae0:	4b58      	ldr	r3, [pc, #352]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae4:	4a57      	ldr	r2, [pc, #348]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aec:	4b55      	ldr	r3, [pc, #340]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af0:	4a54      	ldr	r2, [pc, #336]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005af2:	f023 0304 	bic.w	r3, r3, #4
 8005af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d015      	beq.n	8005b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fd fea2 	bl	8003848 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b08:	f7fd fe9e 	bl	8003848 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e0cb      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1e:	4b49      	ldr	r3, [pc, #292]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0ee      	beq.n	8005b08 <HAL_RCC_OscConfig+0x334>
 8005b2a:	e014      	b.n	8005b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2c:	f7fd fe8c 	bl	8003848 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b34:	f7fd fe88 	bl	8003848 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e0b5      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1ee      	bne.n	8005b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b5c:	4b39      	ldr	r3, [pc, #228]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	4a38      	ldr	r2, [pc, #224]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80a1 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b72:	4b34      	ldr	r3, [pc, #208]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d05c      	beq.n	8005c38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d141      	bne.n	8005c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b86:	4b31      	ldr	r3, [pc, #196]	@ (8005c4c <HAL_RCC_OscConfig+0x478>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8c:	f7fd fe5c 	bl	8003848 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fd fe58 	bl	8003848 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e087      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba6:	4b27      	ldr	r3, [pc, #156]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	019b      	lsls	r3, r3, #6
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	041b      	lsls	r3, r3, #16
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	061b      	lsls	r3, r3, #24
 8005bd6:	491b      	ldr	r1, [pc, #108]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c4c <HAL_RCC_OscConfig+0x478>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be2:	f7fd fe31 	bl	8003848 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bea:	f7fd fe2d 	bl	8003848 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e05c      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfc:	4b11      	ldr	r3, [pc, #68]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_RCC_OscConfig+0x416>
 8005c08:	e054      	b.n	8005cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0a:	4b10      	ldr	r3, [pc, #64]	@ (8005c4c <HAL_RCC_OscConfig+0x478>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fd fe1a 	bl	8003848 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fd fe16 	bl	8003848 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e045      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x444>
 8005c36:	e03d      	b.n	8005cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e038      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
 8005c44:	40023800 	.word	0x40023800
 8005c48:	40007000 	.word	0x40007000
 8005c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c50:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc0 <HAL_RCC_OscConfig+0x4ec>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d028      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d121      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d11a      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c80:	4013      	ands	r3, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d111      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d107      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800

08005cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0cc      	b.n	8005e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b68      	ldr	r3, [pc, #416]	@ (8005e7c <HAL_RCC_ClockConfig+0x1b8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d90c      	bls.n	8005d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b65      	ldr	r3, [pc, #404]	@ (8005e7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b63      	ldr	r3, [pc, #396]	@ (8005e7c <HAL_RCC_ClockConfig+0x1b8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0b8      	b.n	8005e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d18:	4b59      	ldr	r3, [pc, #356]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a58      	ldr	r2, [pc, #352]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d30:	4b53      	ldr	r3, [pc, #332]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a52      	ldr	r2, [pc, #328]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d3c:	4b50      	ldr	r3, [pc, #320]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	494d      	ldr	r1, [pc, #308]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d044      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d107      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	4b47      	ldr	r3, [pc, #284]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d119      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e07f      	b.n	8005e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d003      	beq.n	8005d82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d82:	4b3f      	ldr	r3, [pc, #252]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e06f      	b.n	8005e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d92:	4b3b      	ldr	r3, [pc, #236]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e067      	b.n	8005e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005da2:	4b37      	ldr	r3, [pc, #220]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f023 0203 	bic.w	r2, r3, #3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4934      	ldr	r1, [pc, #208]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005db4:	f7fd fd48 	bl	8003848 <HAL_GetTick>
 8005db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dbc:	f7fd fd44 	bl	8003848 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e04f      	b.n	8005e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 020c 	and.w	r2, r3, #12
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d1eb      	bne.n	8005dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005de4:	4b25      	ldr	r3, [pc, #148]	@ (8005e7c <HAL_RCC_ClockConfig+0x1b8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d20c      	bcs.n	8005e0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df2:	4b22      	ldr	r3, [pc, #136]	@ (8005e7c <HAL_RCC_ClockConfig+0x1b8>)
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfa:	4b20      	ldr	r3, [pc, #128]	@ (8005e7c <HAL_RCC_ClockConfig+0x1b8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e032      	b.n	8005e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e18:	4b19      	ldr	r3, [pc, #100]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4916      	ldr	r1, [pc, #88]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e36:	4b12      	ldr	r3, [pc, #72]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	490e      	ldr	r1, [pc, #56]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e4a:	f000 f821 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	490a      	ldr	r1, [pc, #40]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005e5c:	5ccb      	ldrb	r3, [r1, r3]
 8005e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e62:	4a09      	ldr	r2, [pc, #36]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e66:	4b09      	ldr	r3, [pc, #36]	@ (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd fca8 	bl	80037c0 <HAL_InitTick>

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40023c00 	.word	0x40023c00
 8005e80:	40023800 	.word	0x40023800
 8005e84:	0800eb1c 	.word	0x0800eb1c
 8005e88:	20000004 	.word	0x20000004
 8005e8c:	20000008 	.word	0x20000008

08005e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e94:	b090      	sub	sp, #64	@ 0x40
 8005e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea8:	4b59      	ldr	r3, [pc, #356]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 030c 	and.w	r3, r3, #12
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d00d      	beq.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	f200 80a1 	bhi.w	8005ffc <HAL_RCC_GetSysClockFreq+0x16c>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d003      	beq.n	8005eca <HAL_RCC_GetSysClockFreq+0x3a>
 8005ec2:	e09b      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ec4:	4b53      	ldr	r3, [pc, #332]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ec8:	e09b      	b.n	8006002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eca:	4b53      	ldr	r3, [pc, #332]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ece:	e098      	b.n	8006002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eda:	4b4d      	ldr	r3, [pc, #308]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x180>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d028      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	099b      	lsrs	r3, r3, #6
 8005eec:	2200      	movs	r2, #0
 8005eee:	623b      	str	r3, [r7, #32]
 8005ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4b47      	ldr	r3, [pc, #284]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x188>)
 8005efc:	fb03 f201 	mul.w	r2, r3, r1
 8005f00:	2300      	movs	r3, #0
 8005f02:	fb00 f303 	mul.w	r3, r0, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	4a43      	ldr	r2, [pc, #268]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f0a:	fba0 1202 	umull	r1, r2, r0, r2
 8005f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f10:	460a      	mov	r2, r1
 8005f12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f16:	4413      	add	r3, r2
 8005f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	61fa      	str	r2, [r7, #28]
 8005f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005f2a:	f7fa fe5d 	bl	8000be8 <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4613      	mov	r3, r2
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f36:	e053      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f38:	4b35      	ldr	r3, [pc, #212]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	099b      	lsrs	r3, r3, #6
 8005f3e:	2200      	movs	r2, #0
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	617a      	str	r2, [r7, #20]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f4a:	f04f 0b00 	mov.w	fp, #0
 8005f4e:	4652      	mov	r2, sl
 8005f50:	465b      	mov	r3, fp
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f04f 0100 	mov.w	r1, #0
 8005f5a:	0159      	lsls	r1, r3, #5
 8005f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f60:	0150      	lsls	r0, r2, #5
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	ebb2 080a 	subs.w	r8, r2, sl
 8005f6a:	eb63 090b 	sbc.w	r9, r3, fp
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f82:	ebb2 0408 	subs.w	r4, r2, r8
 8005f86:	eb63 0509 	sbc.w	r5, r3, r9
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	00eb      	lsls	r3, r5, #3
 8005f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f98:	00e2      	lsls	r2, r4, #3
 8005f9a:	4614      	mov	r4, r2
 8005f9c:	461d      	mov	r5, r3
 8005f9e:	eb14 030a 	adds.w	r3, r4, sl
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	eb45 030b 	adc.w	r3, r5, fp
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	028b      	lsls	r3, r1, #10
 8005fba:	4621      	mov	r1, r4
 8005fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	028a      	lsls	r2, r1, #10
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fca:	2200      	movs	r2, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	60fa      	str	r2, [r7, #12]
 8005fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fd4:	f7fa fe08 	bl	8000be8 <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4613      	mov	r3, r2
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	3301      	adds	r3, #1
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005ff0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ffa:	e002      	b.n	8006002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ffc:	4b05      	ldr	r3, [pc, #20]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006004:	4618      	mov	r0, r3
 8006006:	3740      	adds	r7, #64	@ 0x40
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600e:	bf00      	nop
 8006010:	40023800 	.word	0x40023800
 8006014:	00f42400 	.word	0x00f42400
 8006018:	017d7840 	.word	0x017d7840

0800601c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006020:	4b03      	ldr	r3, [pc, #12]	@ (8006030 <HAL_RCC_GetHCLKFreq+0x14>)
 8006022:	681b      	ldr	r3, [r3, #0]
}
 8006024:	4618      	mov	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20000004 	.word	0x20000004

08006034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006038:	f7ff fff0 	bl	800601c <HAL_RCC_GetHCLKFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b05      	ldr	r3, [pc, #20]	@ (8006054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	0a9b      	lsrs	r3, r3, #10
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	4903      	ldr	r1, [pc, #12]	@ (8006058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006050:	4618      	mov	r0, r3
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40023800 	.word	0x40023800
 8006058:	0800eb2c 	.word	0x0800eb2c

0800605c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006060:	f7ff ffdc 	bl	800601c <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b05      	ldr	r3, [pc, #20]	@ (800607c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	0b5b      	lsrs	r3, r3, #13
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4903      	ldr	r1, [pc, #12]	@ (8006080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40023800 	.word	0x40023800
 8006080:	0800eb2c 	.word	0x0800eb2c

08006084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e041      	b.n	800611a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fd f84e 	bl	800314c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f000 ff7c 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e041      	b.n	80061b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f839 	bl	80061c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f000 ff2d 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_PWM_Start+0x24>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e022      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d109      	bne.n	8006212 <HAL_TIM_PWM_Start+0x3e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e015      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d109      	bne.n	800622c <HAL_TIM_PWM_Start+0x58>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e008      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e07c      	b.n	8006340 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <HAL_TIM_PWM_Start+0x82>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006254:	e013      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d104      	bne.n	8006266 <HAL_TIM_PWM_Start+0x92>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006264:	e00b      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006274:	e003      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2201      	movs	r2, #1
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f001 faba 	bl	8007800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2d      	ldr	r2, [pc, #180]	@ (8006348 <HAL_TIM_PWM_Start+0x174>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_TIM_PWM_Start+0xcc>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2c      	ldr	r2, [pc, #176]	@ (800634c <HAL_TIM_PWM_Start+0x178>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d101      	bne.n	80062a4 <HAL_TIM_PWM_Start+0xd0>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_TIM_PWM_Start+0xd2>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a22      	ldr	r2, [pc, #136]	@ (8006348 <HAL_TIM_PWM_Start+0x174>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062cc:	d01d      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006350 <HAL_TIM_PWM_Start+0x17c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006354 <HAL_TIM_PWM_Start+0x180>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <HAL_TIM_PWM_Start+0x184>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a16      	ldr	r2, [pc, #88]	@ (800634c <HAL_TIM_PWM_Start+0x178>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a18      	ldr	r2, [pc, #96]	@ (800635c <HAL_TIM_PWM_Start+0x188>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <HAL_TIM_PWM_Start+0x18c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d111      	bne.n	800632e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b06      	cmp	r3, #6
 800631a:	d010      	beq.n	800633e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	e007      	b.n	800633e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40010000 	.word	0x40010000
 800634c:	40010400 	.word	0x40010400
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40014000 	.word	0x40014000
 8006360:	40001800 	.word	0x40001800

08006364 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e041      	b.n	80063fa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fc ffd6 	bl	800333c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f000 fe0c 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_TIM_IC_Start_IT+0x1e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800641e:	b2db      	uxtb	r3, r3
 8006420:	e013      	b.n	800644a <HAL_TIM_IC_Start_IT+0x46>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b04      	cmp	r3, #4
 8006426:	d104      	bne.n	8006432 <HAL_TIM_IC_Start_IT+0x2e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e00b      	b.n	800644a <HAL_TIM_IC_Start_IT+0x46>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d104      	bne.n	8006442 <HAL_TIM_IC_Start_IT+0x3e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800643e:	b2db      	uxtb	r3, r3
 8006440:	e003      	b.n	800644a <HAL_TIM_IC_Start_IT+0x46>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006448:	b2db      	uxtb	r3, r3
 800644a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <HAL_TIM_IC_Start_IT+0x58>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006458:	b2db      	uxtb	r3, r3
 800645a:	e013      	b.n	8006484 <HAL_TIM_IC_Start_IT+0x80>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b04      	cmp	r3, #4
 8006460:	d104      	bne.n	800646c <HAL_TIM_IC_Start_IT+0x68>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e00b      	b.n	8006484 <HAL_TIM_IC_Start_IT+0x80>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b08      	cmp	r3, #8
 8006470:	d104      	bne.n	800647c <HAL_TIM_IC_Start_IT+0x78>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e003      	b.n	8006484 <HAL_TIM_IC_Start_IT+0x80>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006482:	b2db      	uxtb	r3, r3
 8006484:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d102      	bne.n	8006492 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800648c:	7b7b      	ldrb	r3, [r7, #13]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d001      	beq.n	8006496 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0cc      	b.n	8006630 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_IC_Start_IT+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064a4:	e013      	b.n	80064ce <HAL_TIM_IC_Start_IT+0xca>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_IC_Start_IT+0xb2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064b4:	e00b      	b.n	80064ce <HAL_TIM_IC_Start_IT+0xca>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_IC_Start_IT+0xc2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064c4:	e003      	b.n	80064ce <HAL_TIM_IC_Start_IT+0xca>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_TIM_IC_Start_IT+0xda>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064dc:	e013      	b.n	8006506 <HAL_TIM_IC_Start_IT+0x102>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_IC_Start_IT+0xea>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064ec:	e00b      	b.n	8006506 <HAL_TIM_IC_Start_IT+0x102>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_IC_Start_IT+0xfa>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064fc:	e003      	b.n	8006506 <HAL_TIM_IC_Start_IT+0x102>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b0c      	cmp	r3, #12
 800650a:	d841      	bhi.n	8006590 <HAL_TIM_IC_Start_IT+0x18c>
 800650c:	a201      	add	r2, pc, #4	@ (adr r2, 8006514 <HAL_TIM_IC_Start_IT+0x110>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006549 	.word	0x08006549
 8006518:	08006591 	.word	0x08006591
 800651c:	08006591 	.word	0x08006591
 8006520:	08006591 	.word	0x08006591
 8006524:	0800655b 	.word	0x0800655b
 8006528:	08006591 	.word	0x08006591
 800652c:	08006591 	.word	0x08006591
 8006530:	08006591 	.word	0x08006591
 8006534:	0800656d 	.word	0x0800656d
 8006538:	08006591 	.word	0x08006591
 800653c:	08006591 	.word	0x08006591
 8006540:	08006591 	.word	0x08006591
 8006544:	0800657f 	.word	0x0800657f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0202 	orr.w	r2, r2, #2
 8006556:	60da      	str	r2, [r3, #12]
      break;
 8006558:	e01d      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0204 	orr.w	r2, r2, #4
 8006568:	60da      	str	r2, [r3, #12]
      break;
 800656a:	e014      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0208 	orr.w	r2, r2, #8
 800657a:	60da      	str	r2, [r3, #12]
      break;
 800657c:	e00b      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0210 	orr.w	r2, r2, #16
 800658c:	60da      	str	r2, [r3, #12]
      break;
 800658e:	e002      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
      break;
 8006594:	bf00      	nop
  }

  if (status == HAL_OK)
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d148      	bne.n	800662e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2201      	movs	r2, #1
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 f92b 	bl	8007800 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <HAL_TIM_IC_Start_IT+0x234>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d022      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x1f6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065bc:	d01d      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x1f6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1e      	ldr	r2, [pc, #120]	@ (800663c <HAL_TIM_IC_Start_IT+0x238>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x1f6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006640 <HAL_TIM_IC_Start_IT+0x23c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x1f6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_TIM_IC_Start_IT+0x240>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x1f6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a19      	ldr	r2, [pc, #100]	@ (8006648 <HAL_TIM_IC_Start_IT+0x244>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x1f6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_TIM_IC_Start_IT+0x248>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIM_IC_Start_IT+0x1f6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a16      	ldr	r2, [pc, #88]	@ (8006650 <HAL_TIM_IC_Start_IT+0x24c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d111      	bne.n	800661e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b06      	cmp	r3, #6
 800660a:	d010      	beq.n	800662e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661c:	e007      	b.n	800662e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40010400 	.word	0x40010400
 800664c:	40014000 	.word	0x40014000
 8006650:	40001800 	.word	0x40001800

08006654 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e097      	b.n	8006798 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7fc fdc3 	bl	8003208 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006698:	f023 0307 	bic.w	r3, r3, #7
 800669c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f000 fc89 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	4313      	orrs	r3, r2
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80066f4:	f023 030c 	bic.w	r3, r3, #12
 80066f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006700:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	4313      	orrs	r3, r2
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	011a      	lsls	r2, r3, #4
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	031b      	lsls	r3, r3, #12
 8006724:	4313      	orrs	r3, r2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	4313      	orrs	r3, r2
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d110      	bne.n	80067f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067d6:	7b7b      	ldrb	r3, [r7, #13]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e069      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067f0:	e031      	b.n	8006856 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d110      	bne.n	800681a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067fe:	7b3b      	ldrb	r3, [r7, #12]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e055      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006818:	e01d      	b.n	8006856 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d108      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d105      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006826:	7b7b      	ldrb	r3, [r7, #13]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d102      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800682c:	7b3b      	ldrb	r3, [r7, #12]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d001      	beq.n	8006836 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e03e      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_TIM_Encoder_Start+0xc4>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b04      	cmp	r3, #4
 8006860:	d008      	beq.n	8006874 <HAL_TIM_Encoder_Start+0xd4>
 8006862:	e00f      	b.n	8006884 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2201      	movs	r2, #1
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f000 ffc7 	bl	8007800 <TIM_CCxChannelCmd>
      break;
 8006872:	e016      	b.n	80068a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	2104      	movs	r1, #4
 800687c:	4618      	mov	r0, r3
 800687e:	f000 ffbf 	bl	8007800 <TIM_CCxChannelCmd>
      break;
 8006882:	e00e      	b.n	80068a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f000 ffb7 	bl	8007800 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	2104      	movs	r1, #4
 800689a:	4618      	mov	r0, r3
 800689c:	f000 ffb0 	bl	8007800 <TIM_CCxChannelCmd>
      break;
 80068a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0201 	orr.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d020      	beq.n	8006920 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01b      	beq.n	8006920 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0202 	mvn.w	r2, #2
 80068f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fb fac6 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 800690c:	e005      	b.n	800691a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb38 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb3f 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d020      	beq.n	800696c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01b      	beq.n	800696c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0204 	mvn.w	r2, #4
 800693c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fb faa0 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 8006958:	e005      	b.n	8006966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb12 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fb19 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d020      	beq.n	80069b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01b      	beq.n	80069b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0208 	mvn.w	r2, #8
 8006988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2204      	movs	r2, #4
 800698e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fb fa7a 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 80069a4:	e005      	b.n	80069b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 faec 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 faf3 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d020      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0210 	mvn.w	r2, #16
 80069d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2208      	movs	r2, #8
 80069da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fb fa54 	bl	8001e98 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fac6 	bl	8006f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 facd 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0201 	mvn.w	r2, #1
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 faa4 	bl	8006f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 ffd8 	bl	80079fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00c      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa9e 	bl	8006fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0220 	mvn.w	r2, #32
 8006a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ffaa 	bl	80079e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e088      	b.n	8006bcc <HAL_TIM_IC_ConfigChannel+0x130>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11b      	bne.n	8006b00 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006ad8:	f000 fcce 	bl	8007478 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 020c 	bic.w	r2, r2, #12
 8006aea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6999      	ldr	r1, [r3, #24]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	619a      	str	r2, [r3, #24]
 8006afe:	e060      	b.n	8006bc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d11c      	bne.n	8006b40 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006b16:	f000 fd52 	bl	80075be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006b28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6999      	ldr	r1, [r3, #24]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	021a      	lsls	r2, r3, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	619a      	str	r2, [r3, #24]
 8006b3e:	e040      	b.n	8006bc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d11b      	bne.n	8006b7e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006b56:	f000 fd9f 	bl	8007698 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 020c 	bic.w	r2, r2, #12
 8006b68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69d9      	ldr	r1, [r3, #28]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	61da      	str	r2, [r3, #28]
 8006b7c:	e021      	b.n	8006bc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b0c      	cmp	r3, #12
 8006b82:	d11c      	bne.n	8006bbe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006b94:	f000 fdbc 	bl	8007710 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ba6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69d9      	ldr	r1, [r3, #28]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	021a      	lsls	r2, r3, #8
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	61da      	str	r2, [r3, #28]
 8006bbc:	e001      	b.n	8006bc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e0ae      	b.n	8006d50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	f200 809f 	bhi.w	8006d40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c02:	a201      	add	r2, pc, #4	@ (adr r2, 8006c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c3d 	.word	0x08006c3d
 8006c0c:	08006d41 	.word	0x08006d41
 8006c10:	08006d41 	.word	0x08006d41
 8006c14:	08006d41 	.word	0x08006d41
 8006c18:	08006c7d 	.word	0x08006c7d
 8006c1c:	08006d41 	.word	0x08006d41
 8006c20:	08006d41 	.word	0x08006d41
 8006c24:	08006d41 	.word	0x08006d41
 8006c28:	08006cbf 	.word	0x08006cbf
 8006c2c:	08006d41 	.word	0x08006d41
 8006c30:	08006d41 	.word	0x08006d41
 8006c34:	08006d41 	.word	0x08006d41
 8006c38:	08006cff 	.word	0x08006cff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fa68 	bl	8007118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0208 	orr.w	r2, r2, #8
 8006c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0204 	bic.w	r2, r2, #4
 8006c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6999      	ldr	r1, [r3, #24]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	619a      	str	r2, [r3, #24]
      break;
 8006c7a:	e064      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fab8 	bl	80071f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6999      	ldr	r1, [r3, #24]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	619a      	str	r2, [r3, #24]
      break;
 8006cbc:	e043      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fb0d 	bl	80072e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0208 	orr.w	r2, r2, #8
 8006cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0204 	bic.w	r2, r2, #4
 8006ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69d9      	ldr	r1, [r3, #28]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	61da      	str	r2, [r3, #28]
      break;
 8006cfc:	e023      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fb61 	bl	80073cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69d9      	ldr	r1, [r3, #28]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	021a      	lsls	r2, r3, #8
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	61da      	str	r2, [r3, #28]
      break;
 8006d3e:	e002      	b.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	75fb      	strb	r3, [r7, #23]
      break;
 8006d44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_ConfigClockSource+0x1c>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e0b4      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x186>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dac:	d03e      	beq.n	8006e2c <HAL_TIM_ConfigClockSource+0xd4>
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db2:	f200 8087 	bhi.w	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dba:	f000 8086 	beq.w	8006eca <HAL_TIM_ConfigClockSource+0x172>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc2:	d87f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc4:	2b70      	cmp	r3, #112	@ 0x70
 8006dc6:	d01a      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0xa6>
 8006dc8:	2b70      	cmp	r3, #112	@ 0x70
 8006dca:	d87b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b60      	cmp	r3, #96	@ 0x60
 8006dce:	d050      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0x11a>
 8006dd0:	2b60      	cmp	r3, #96	@ 0x60
 8006dd2:	d877      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b50      	cmp	r3, #80	@ 0x50
 8006dd6:	d03c      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xfa>
 8006dd8:	2b50      	cmp	r3, #80	@ 0x50
 8006dda:	d873      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b40      	cmp	r3, #64	@ 0x40
 8006dde:	d058      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x13a>
 8006de0:	2b40      	cmp	r3, #64	@ 0x40
 8006de2:	d86f      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b30      	cmp	r3, #48	@ 0x30
 8006de6:	d064      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006de8:	2b30      	cmp	r3, #48	@ 0x30
 8006dea:	d86b      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d060      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d867      	bhi.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d05c      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d05a      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006dfc:	e062      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e0e:	f000 fcd7 	bl	80077c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	609a      	str	r2, [r3, #8]
      break;
 8006e2a:	e04f      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e3c:	f000 fcc0 	bl	80077c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e4e:	609a      	str	r2, [r3, #8]
      break;
 8006e50:	e03c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f000 fb7e 	bl	8007560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2150      	movs	r1, #80	@ 0x50
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fc8d 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 8006e70:	e02c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 fbda 	bl	8007638 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2160      	movs	r1, #96	@ 0x60
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fc7d 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 8006e90:	e01c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fb5e 	bl	8007560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2140      	movs	r1, #64	@ 0x40
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fc6d 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e00c      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f000 fc64 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 8006ec2:	e003      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec8:	e000      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d831      	bhi.n	8006f60 <HAL_TIM_ReadCapturedValue+0x78>
 8006efc:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f39 	.word	0x08006f39
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f61 	.word	0x08006f61
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006f43 	.word	0x08006f43
 8006f18:	08006f61 	.word	0x08006f61
 8006f1c:	08006f61 	.word	0x08006f61
 8006f20:	08006f61 	.word	0x08006f61
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f61 	.word	0x08006f61
 8006f2c:	08006f61 	.word	0x08006f61
 8006f30:	08006f61 	.word	0x08006f61
 8006f34:	08006f57 	.word	0x08006f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3e:	60fb      	str	r3, [r7, #12]

      break;
 8006f40:	e00f      	b.n	8006f62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	60fb      	str	r3, [r7, #12]

      break;
 8006f4a:	e00a      	b.n	8006f62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f52:	60fb      	str	r3, [r7, #12]

      break;
 8006f54:	e005      	b.n	8006f62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5c:	60fb      	str	r3, [r7, #12]

      break;
 8006f5e:	e000      	b.n	8006f62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f60:	bf00      	nop
  }

  return tmpreg;
 8006f62:	68fb      	ldr	r3, [r7, #12]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a46      	ldr	r2, [pc, #280]	@ (80070ec <TIM_Base_SetConfig+0x12c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fde:	d00f      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a43      	ldr	r2, [pc, #268]	@ (80070f0 <TIM_Base_SetConfig+0x130>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00b      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a42      	ldr	r2, [pc, #264]	@ (80070f4 <TIM_Base_SetConfig+0x134>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d007      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a41      	ldr	r2, [pc, #260]	@ (80070f8 <TIM_Base_SetConfig+0x138>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a40      	ldr	r2, [pc, #256]	@ (80070fc <TIM_Base_SetConfig+0x13c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d108      	bne.n	8007012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a35      	ldr	r2, [pc, #212]	@ (80070ec <TIM_Base_SetConfig+0x12c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d02b      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007020:	d027      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a32      	ldr	r2, [pc, #200]	@ (80070f0 <TIM_Base_SetConfig+0x130>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d023      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a31      	ldr	r2, [pc, #196]	@ (80070f4 <TIM_Base_SetConfig+0x134>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d01f      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a30      	ldr	r2, [pc, #192]	@ (80070f8 <TIM_Base_SetConfig+0x138>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01b      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2f      	ldr	r2, [pc, #188]	@ (80070fc <TIM_Base_SetConfig+0x13c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d017      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2e      	ldr	r2, [pc, #184]	@ (8007100 <TIM_Base_SetConfig+0x140>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2d      	ldr	r2, [pc, #180]	@ (8007104 <TIM_Base_SetConfig+0x144>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00f      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2c      	ldr	r2, [pc, #176]	@ (8007108 <TIM_Base_SetConfig+0x148>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00b      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2b      	ldr	r2, [pc, #172]	@ (800710c <TIM_Base_SetConfig+0x14c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d007      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2a      	ldr	r2, [pc, #168]	@ (8007110 <TIM_Base_SetConfig+0x150>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d003      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a29      	ldr	r2, [pc, #164]	@ (8007114 <TIM_Base_SetConfig+0x154>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d108      	bne.n	8007084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a10      	ldr	r2, [pc, #64]	@ (80070ec <TIM_Base_SetConfig+0x12c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_Base_SetConfig+0xf8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a12      	ldr	r2, [pc, #72]	@ (80070fc <TIM_Base_SetConfig+0x13c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d103      	bne.n	80070c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d105      	bne.n	80070de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f023 0201 	bic.w	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	611a      	str	r2, [r3, #16]
  }
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40010400 	.word	0x40010400
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400
 8007108:	40014800 	.word	0x40014800
 800710c:	40001800 	.word	0x40001800
 8007110:	40001c00 	.word	0x40001c00
 8007114:	40002000 	.word	0x40002000

08007118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	f023 0201 	bic.w	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0303 	bic.w	r3, r3, #3
 800714e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f023 0302 	bic.w	r3, r3, #2
 8007160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a20      	ldr	r2, [pc, #128]	@ (80071f0 <TIM_OC1_SetConfig+0xd8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC1_SetConfig+0x64>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a1f      	ldr	r2, [pc, #124]	@ (80071f4 <TIM_OC1_SetConfig+0xdc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d10c      	bne.n	8007196 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f023 0308 	bic.w	r3, r3, #8
 8007182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f023 0304 	bic.w	r3, r3, #4
 8007194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a15      	ldr	r2, [pc, #84]	@ (80071f0 <TIM_OC1_SetConfig+0xd8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_OC1_SetConfig+0x8e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a14      	ldr	r2, [pc, #80]	@ (80071f4 <TIM_OC1_SetConfig+0xdc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d111      	bne.n	80071ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40010400 	.word	0x40010400

080071f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f023 0210 	bic.w	r2, r3, #16
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800722e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f023 0320 	bic.w	r3, r3, #32
 8007242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a22      	ldr	r2, [pc, #136]	@ (80072dc <TIM_OC2_SetConfig+0xe4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC2_SetConfig+0x68>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a21      	ldr	r2, [pc, #132]	@ (80072e0 <TIM_OC2_SetConfig+0xe8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10d      	bne.n	800727c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a17      	ldr	r2, [pc, #92]	@ (80072dc <TIM_OC2_SetConfig+0xe4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC2_SetConfig+0x94>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a16      	ldr	r2, [pc, #88]	@ (80072e0 <TIM_OC2_SetConfig+0xe8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d113      	bne.n	80072b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800729a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40010400 	.word	0x40010400

080072e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0303 	bic.w	r3, r3, #3
 800731a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800732c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a21      	ldr	r2, [pc, #132]	@ (80073c4 <TIM_OC3_SetConfig+0xe0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_OC3_SetConfig+0x66>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a20      	ldr	r2, [pc, #128]	@ (80073c8 <TIM_OC3_SetConfig+0xe4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d10d      	bne.n	8007366 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a16      	ldr	r2, [pc, #88]	@ (80073c4 <TIM_OC3_SetConfig+0xe0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_OC3_SetConfig+0x92>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a15      	ldr	r2, [pc, #84]	@ (80073c8 <TIM_OC3_SetConfig+0xe4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d113      	bne.n	800739e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800737c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	621a      	str	r2, [r3, #32]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40010400 	.word	0x40010400

080073cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	031b      	lsls	r3, r3, #12
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a12      	ldr	r2, [pc, #72]	@ (8007470 <TIM_OC4_SetConfig+0xa4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_OC4_SetConfig+0x68>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a11      	ldr	r2, [pc, #68]	@ (8007474 <TIM_OC4_SetConfig+0xa8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d109      	bne.n	8007448 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800743a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	019b      	lsls	r3, r3, #6
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40010000 	.word	0x40010000
 8007474:	40010400 	.word	0x40010400

08007478 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	f023 0201 	bic.w	r2, r3, #1
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a28      	ldr	r2, [pc, #160]	@ (8007544 <TIM_TI1_SetConfig+0xcc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01b      	beq.n	80074de <TIM_TI1_SetConfig+0x66>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ac:	d017      	beq.n	80074de <TIM_TI1_SetConfig+0x66>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4a25      	ldr	r2, [pc, #148]	@ (8007548 <TIM_TI1_SetConfig+0xd0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <TIM_TI1_SetConfig+0x66>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4a24      	ldr	r2, [pc, #144]	@ (800754c <TIM_TI1_SetConfig+0xd4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00f      	beq.n	80074de <TIM_TI1_SetConfig+0x66>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a23      	ldr	r2, [pc, #140]	@ (8007550 <TIM_TI1_SetConfig+0xd8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00b      	beq.n	80074de <TIM_TI1_SetConfig+0x66>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a22      	ldr	r2, [pc, #136]	@ (8007554 <TIM_TI1_SetConfig+0xdc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d007      	beq.n	80074de <TIM_TI1_SetConfig+0x66>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4a21      	ldr	r2, [pc, #132]	@ (8007558 <TIM_TI1_SetConfig+0xe0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_TI1_SetConfig+0x66>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4a20      	ldr	r2, [pc, #128]	@ (800755c <TIM_TI1_SetConfig+0xe4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d101      	bne.n	80074e2 <TIM_TI1_SetConfig+0x6a>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <TIM_TI1_SetConfig+0x6c>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	e003      	b.n	8007502 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f043 0301 	orr.w	r3, r3, #1
 8007500:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	b2db      	uxtb	r3, r3
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f023 030a 	bic.w	r3, r3, #10
 800751c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f003 030a 	and.w	r3, r3, #10
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40010000 	.word	0x40010000
 8007548:	40000400 	.word	0x40000400
 800754c:	40000800 	.word	0x40000800
 8007550:	40000c00 	.word	0x40000c00
 8007554:	40010400 	.word	0x40010400
 8007558:	40014000 	.word	0x40014000
 800755c:	40001800 	.word	0x40001800

08007560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800758a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f023 030a 	bic.w	r3, r3, #10
 800759c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f023 0210 	bic.w	r2, r3, #16
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	031b      	lsls	r3, r3, #12
 8007602:	b29b      	uxth	r3, r3
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007610:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4313      	orrs	r3, r2
 800761e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	621a      	str	r2, [r3, #32]
}
 800762c:	bf00      	nop
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0210 	bic.w	r2, r3, #16
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	031b      	lsls	r3, r3, #12
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007674:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	621a      	str	r2, [r3, #32]
}
 800768c:	bf00      	nop
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f023 0303 	bic.w	r3, r3, #3
 80076c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80076e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	621a      	str	r2, [r3, #32]
}
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800773c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800774e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	031b      	lsls	r3, r3, #12
 8007754:	b29b      	uxth	r3, r3
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007762:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	031b      	lsls	r3, r3, #12
 8007768:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f043 0307 	orr.w	r3, r3, #7
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	021a      	lsls	r2, r3, #8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	609a      	str	r2, [r3, #8]
}
 80077f4:	bf00      	nop
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	2201      	movs	r2, #1
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a1a      	ldr	r2, [r3, #32]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	43db      	mvns	r3, r3
 8007822:	401a      	ands	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1a      	ldr	r2, [r3, #32]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f003 031f 	and.w	r3, r3, #31
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007860:	2302      	movs	r3, #2
 8007862:	e05a      	b.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a21      	ldr	r2, [pc, #132]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d022      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b0:	d01d      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d018      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d013      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00e      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a18      	ldr	r2, [pc, #96]	@ (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d009      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a17      	ldr	r2, [pc, #92]	@ (800793c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d004      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a15      	ldr	r2, [pc, #84]	@ (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d10c      	bne.n	8007908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40010000 	.word	0x40010000
 800792c:	40000400 	.word	0x40000400
 8007930:	40000800 	.word	0x40000800
 8007934:	40000c00 	.word	0x40000c00
 8007938:	40010400 	.word	0x40010400
 800793c:	40014000 	.word	0x40014000
 8007940:	40001800 	.word	0x40001800

08007944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800795c:	2302      	movs	r3, #2
 800795e:	e03d      	b.n	80079dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e042      	b.n	8007aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fb fd0a 	bl	8003450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2224      	movs	r2, #36	@ 0x24
 8007a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fe91 	bl	800877c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695a      	ldr	r2, [r3, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	@ 0x28
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	4613      	mov	r3, r2
 8007abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d175      	bne.n	8007bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_UART_Transmit+0x2c>
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e06e      	b.n	8007bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2221      	movs	r2, #33	@ 0x21
 8007aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aee:	f7fb feab 	bl	8003848 <HAL_GetTick>
 8007af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b08:	d108      	bne.n	8007b1c <HAL_UART_Transmit+0x6c>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d104      	bne.n	8007b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	e003      	b.n	8007b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b24:	e02e      	b.n	8007b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2180      	movs	r1, #128	@ 0x80
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fbdb 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e03a      	b.n	8007bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	3302      	adds	r3, #2
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	e007      	b.n	8007b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	781a      	ldrb	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1cb      	bne.n	8007b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2200      	movs	r2, #0
 8007b96:	2140      	movs	r1, #64	@ 0x40
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fba7 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e006      	b.n	8007bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e000      	b.n	8007bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007bbc:	2302      	movs	r3, #2
  }
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d112      	bne.n	8007c06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <HAL_UART_Receive_IT+0x26>
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e00b      	b.n	8007c08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fbce 	bl	800839e <UART_Start_Receive_IT>
 8007c02:	4603      	mov	r3, r0
 8007c04:	e000      	b.n	8007c08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c06:	2302      	movs	r3, #2
  }
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b09a      	sub	sp, #104	@ 0x68
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	330c      	adds	r3, #12
 8007c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	330c      	adds	r3, #12
 8007c36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c38:	657a      	str	r2, [r7, #84]	@ 0x54
 8007c3a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e5      	bne.n	8007c18 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3314      	adds	r3, #20
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	f023 0301 	bic.w	r3, r3, #1
 8007c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3314      	adds	r3, #20
 8007c6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e5      	bne.n	8007c4c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d119      	bne.n	8007cbc <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f023 0310 	bic.w	r3, r3, #16
 8007c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc6:	2b40      	cmp	r3, #64	@ 0x40
 8007cc8:	d13f      	bne.n	8007d4a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3314      	adds	r3, #20
 8007cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cea:	61ba      	str	r2, [r7, #24]
 8007cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6979      	ldr	r1, [r7, #20]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e5      	bne.n	8007cca <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0a:	4a19      	ldr	r2, [pc, #100]	@ (8007d70 <HAL_UART_AbortReceive_IT+0x160>)
 8007d0c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fc fb49 	bl	80043aa <HAL_DMA_Abort_IT>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d022      	beq.n	8007d64 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
 8007d2c:	e01a      	b.n	8007d64 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fabc 	bl	80082c0 <HAL_UART_AbortReceiveCpltCallback>
 8007d48:	e00c      	b.n	8007d64 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 faae 	bl	80082c0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3768      	adds	r7, #104	@ 0x68
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	08008501 	.word	0x08008501

08007d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b0ba      	sub	sp, #232	@ 0xe8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10f      	bne.n	8007dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <HAL_UART_IRQHandler+0x66>
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fc14 	bl	8008600 <UART_Receive_IT>
      return;
 8007dd8:	e25b      	b.n	8008292 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 80de 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x22c>
 8007de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d106      	bne.n	8007dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80d1 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00b      	beq.n	8007e22 <HAL_UART_IRQHandler+0xae>
 8007e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1a:	f043 0201 	orr.w	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <HAL_UART_IRQHandler+0xd2>
 8007e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e3e:	f043 0202 	orr.w	r2, r3, #2
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <HAL_UART_IRQHandler+0xf6>
 8007e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e62:	f043 0204 	orr.w	r2, r3, #4
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6e:	f003 0308 	and.w	r3, r3, #8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d011      	beq.n	8007e9a <HAL_UART_IRQHandler+0x126>
 8007e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d105      	bne.n	8007e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e92:	f043 0208 	orr.w	r2, r3, #8
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 81f2 	beq.w	8008288 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d008      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x14e>
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fb9f 	bl	8008600 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ecc:	2b40      	cmp	r3, #64	@ 0x40
 8007ece:	bf0c      	ite	eq
 8007ed0:	2301      	moveq	r3, #1
 8007ed2:	2300      	movne	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <HAL_UART_IRQHandler+0x17a>
 8007ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d04f      	beq.n	8007f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa8f 	bl	8008412 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efe:	2b40      	cmp	r3, #64	@ 0x40
 8007f00:	d141      	bne.n	8007f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3314      	adds	r3, #20
 8007f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3314      	adds	r3, #20
 8007f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1d9      	bne.n	8007f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d013      	beq.n	8007f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8008154 <HAL_UART_IRQHandler+0x3e0>)
 8007f5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fc fa21 	bl	80043aa <HAL_DMA_Abort_IT>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d016      	beq.n	8007f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7c:	e00e      	b.n	8007f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f994 	bl	80082ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f84:	e00a      	b.n	8007f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f990 	bl	80082ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8c:	e006      	b.n	8007f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f98c 	bl	80082ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007f9a:	e175      	b.n	8008288 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9c:	bf00      	nop
    return;
 8007f9e:	e173      	b.n	8008288 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	f040 814f 	bne.w	8008248 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fae:	f003 0310 	and.w	r3, r3, #16
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 8148 	beq.w	8008248 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fbc:	f003 0310 	and.w	r3, r3, #16
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8141 	beq.w	8008248 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	60bb      	str	r3, [r7, #8]
 8007fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe6:	2b40      	cmp	r3, #64	@ 0x40
 8007fe8:	f040 80b6 	bne.w	8008158 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8145 	beq.w	800828c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800800a:	429a      	cmp	r2, r3
 800800c:	f080 813e 	bcs.w	800828c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008016:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008022:	f000 8088 	beq.w	8008136 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	330c      	adds	r3, #12
 800802c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800803c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	330c      	adds	r3, #12
 800804e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008052:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800805e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800806a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1d9      	bne.n	8008026 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3314      	adds	r3, #20
 8008078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3314      	adds	r3, #20
 8008092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008096:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800809a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800809e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e1      	bne.n	8008072 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3314      	adds	r3, #20
 80080ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80080d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80080d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e3      	bne.n	80080ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	330c      	adds	r3, #12
 80080fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008106:	f023 0310 	bic.w	r3, r3, #16
 800810a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	330c      	adds	r3, #12
 8008114:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008118:	65ba      	str	r2, [r7, #88]	@ 0x58
 800811a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800811e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e3      	bne.n	80080f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008130:	4618      	mov	r0, r3
 8008132:	f7fc f8ca 	bl	80042ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008144:	b29b      	uxth	r3, r3
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	b29b      	uxth	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8c1 	bl	80082d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008152:	e09b      	b.n	800828c <HAL_UART_IRQHandler+0x518>
 8008154:	080084d9 	.word	0x080084d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008160:	b29b      	uxth	r3, r3
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 808e 	beq.w	8008290 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8089 	beq.w	8008290 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800818e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008194:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	330c      	adds	r3, #12
 800819e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80081a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80081a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e3      	bne.n	800817e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3314      	adds	r3, #20
 80081bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	623b      	str	r3, [r7, #32]
   return(result);
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	f023 0301 	bic.w	r3, r3, #1
 80081cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3314      	adds	r3, #20
 80081d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80081da:	633a      	str	r2, [r7, #48]	@ 0x30
 80081dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e3      	bne.n	80081b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	60fb      	str	r3, [r7, #12]
   return(result);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0310 	bic.w	r3, r3, #16
 8008212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	330c      	adds	r3, #12
 800821c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008220:	61fa      	str	r2, [r7, #28]
 8008222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	69b9      	ldr	r1, [r7, #24]
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	617b      	str	r3, [r7, #20]
   return(result);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e3      	bne.n	80081fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800823a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f847 	bl	80082d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008246:	e023      	b.n	8008290 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800824c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008250:	2b00      	cmp	r3, #0
 8008252:	d009      	beq.n	8008268 <HAL_UART_IRQHandler+0x4f4>
 8008254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f965 	bl	8008530 <UART_Transmit_IT>
    return;
 8008266:	e014      	b.n	8008292 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00e      	beq.n	8008292 <HAL_UART_IRQHandler+0x51e>
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f9a5 	bl	80085d0 <UART_EndTransmit_IT>
    return;
 8008286:	e004      	b.n	8008292 <HAL_UART_IRQHandler+0x51e>
    return;
 8008288:	bf00      	nop
 800828a:	e002      	b.n	8008292 <HAL_UART_IRQHandler+0x51e>
      return;
 800828c:	bf00      	nop
 800828e:	e000      	b.n	8008292 <HAL_UART_IRQHandler+0x51e>
      return;
 8008290:	bf00      	nop
  }
}
 8008292:	37e8      	adds	r7, #232	@ 0xe8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082fc:	e03b      	b.n	8008376 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008304:	d037      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008306:	f7fb fa9f 	bl	8003848 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	6a3a      	ldr	r2, [r7, #32]
 8008312:	429a      	cmp	r2, r3
 8008314:	d302      	bcc.n	800831c <UART_WaitOnFlagUntilTimeout+0x30>
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e03a      	b.n	8008396 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d023      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x8a>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b80      	cmp	r3, #128	@ 0x80
 8008332:	d020      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b40      	cmp	r3, #64	@ 0x40
 8008338:	d01d      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b08      	cmp	r3, #8
 8008346:	d116      	bne.n	8008376 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008348:	2300      	movs	r3, #0
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f857 	bl	8008412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2208      	movs	r2, #8
 8008368:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e00f      	b.n	8008396 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4013      	ands	r3, r2
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	429a      	cmp	r2, r3
 8008384:	bf0c      	ite	eq
 8008386:	2301      	moveq	r3, #1
 8008388:	2300      	movne	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	429a      	cmp	r2, r3
 8008392:	d0b4      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	4613      	mov	r3, r2
 80083aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	88fa      	ldrh	r2, [r7, #6]
 80083b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2222      	movs	r2, #34	@ 0x22
 80083c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695a      	ldr	r2, [r3, #20]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0201 	orr.w	r2, r2, #1
 80083f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0220 	orr.w	r2, r2, #32
 8008402:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008412:	b480      	push	{r7}
 8008414:	b095      	sub	sp, #84	@ 0x54
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	330c      	adds	r3, #12
 8008420:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800842a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	330c      	adds	r3, #12
 8008438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800843a:	643a      	str	r2, [r7, #64]	@ 0x40
 800843c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008440:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e5      	bne.n	800841a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3314      	adds	r3, #20
 8008454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	61fb      	str	r3, [r7, #28]
   return(result);
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3314      	adds	r3, #20
 800846c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800846e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008470:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e5      	bne.n	800844e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008486:	2b01      	cmp	r3, #1
 8008488:	d119      	bne.n	80084be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	330c      	adds	r3, #12
 8008490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	60bb      	str	r3, [r7, #8]
   return(result);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f023 0310 	bic.w	r3, r3, #16
 80084a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	330c      	adds	r3, #12
 80084a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084aa:	61ba      	str	r2, [r7, #24]
 80084ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6979      	ldr	r1, [r7, #20]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	613b      	str	r3, [r7, #16]
   return(result);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80084cc:	bf00      	nop
 80084ce:	3754      	adds	r7, #84	@ 0x54
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff feda 	bl	80082ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff fecc 	bl	80082c0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b21      	cmp	r3, #33	@ 0x21
 8008542:	d13e      	bne.n	80085c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854c:	d114      	bne.n	8008578 <UART_Transmit_IT+0x48>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d110      	bne.n	8008578 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800856a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	1c9a      	adds	r2, r3, #2
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	621a      	str	r2, [r3, #32]
 8008576:	e008      	b.n	800858a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a1b      	ldr	r3, [r3, #32]
 800857c:	1c59      	adds	r1, r3, #1
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6211      	str	r1, [r2, #32]
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29b      	uxth	r3, r3
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4619      	mov	r1, r3
 8008598:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10f      	bne.n	80085be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e000      	b.n	80085c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff fe51 	bl	8008298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08c      	sub	sp, #48	@ 0x30
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b22      	cmp	r3, #34	@ 0x22
 8008612:	f040 80ae 	bne.w	8008772 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800861e:	d117      	bne.n	8008650 <UART_Receive_IT+0x50>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d113      	bne.n	8008650 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008630:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863e:	b29a      	uxth	r2, r3
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008648:	1c9a      	adds	r2, r3, #2
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	629a      	str	r2, [r3, #40]	@ 0x28
 800864e:	e026      	b.n	800869e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008662:	d007      	beq.n	8008674 <UART_Receive_IT+0x74>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <UART_Receive_IT+0x82>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	e008      	b.n	8008694 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800868e:	b2da      	uxtb	r2, r3
 8008690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008692:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4619      	mov	r1, r3
 80086ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d15d      	bne.n	800876e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0220 	bic.w	r2, r2, #32
 80086c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695a      	ldr	r2, [r3, #20]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0201 	bic.w	r2, r2, #1
 80086e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d135      	bne.n	8008764 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	330c      	adds	r3, #12
 8008704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	613b      	str	r3, [r7, #16]
   return(result);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f023 0310 	bic.w	r3, r3, #16
 8008714:	627b      	str	r3, [r7, #36]	@ 0x24
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	330c      	adds	r3, #12
 800871c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800871e:	623a      	str	r2, [r7, #32]
 8008720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	69f9      	ldr	r1, [r7, #28]
 8008724:	6a3a      	ldr	r2, [r7, #32]
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	61bb      	str	r3, [r7, #24]
   return(result);
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e5      	bne.n	80086fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0310 	and.w	r3, r3, #16
 800873c:	2b10      	cmp	r3, #16
 800873e:	d10a      	bne.n	8008756 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff fdb9 	bl	80082d4 <HAL_UARTEx_RxEventCallback>
 8008762:	e002      	b.n	800876a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7f9 f8b3 	bl	80018d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e002      	b.n	8008774 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e000      	b.n	8008774 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008772:	2302      	movs	r3, #2
  }
}
 8008774:	4618      	mov	r0, r3
 8008776:	3730      	adds	r7, #48	@ 0x30
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800877c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008780:	b0c0      	sub	sp, #256	@ 0x100
 8008782:	af00      	add	r7, sp, #0
 8008784:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008798:	68d9      	ldr	r1, [r3, #12]
 800879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	ea40 0301 	orr.w	r3, r0, r1
 80087a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80087d4:	f021 010c 	bic.w	r1, r1, #12
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087e2:	430b      	orrs	r3, r1
 80087e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80087f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f6:	6999      	ldr	r1, [r3, #24]
 80087f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	ea40 0301 	orr.w	r3, r0, r1
 8008802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	4b8f      	ldr	r3, [pc, #572]	@ (8008a48 <UART_SetConfig+0x2cc>)
 800880c:	429a      	cmp	r2, r3
 800880e:	d005      	beq.n	800881c <UART_SetConfig+0xa0>
 8008810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	4b8d      	ldr	r3, [pc, #564]	@ (8008a4c <UART_SetConfig+0x2d0>)
 8008818:	429a      	cmp	r2, r3
 800881a:	d104      	bne.n	8008826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800881c:	f7fd fc1e 	bl	800605c <HAL_RCC_GetPCLK2Freq>
 8008820:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008824:	e003      	b.n	800882e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008826:	f7fd fc05 	bl	8006034 <HAL_RCC_GetPCLK1Freq>
 800882a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800882e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008838:	f040 810c 	bne.w	8008a54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800883c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008840:	2200      	movs	r2, #0
 8008842:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008846:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800884a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800884e:	4622      	mov	r2, r4
 8008850:	462b      	mov	r3, r5
 8008852:	1891      	adds	r1, r2, r2
 8008854:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008856:	415b      	adcs	r3, r3
 8008858:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800885a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800885e:	4621      	mov	r1, r4
 8008860:	eb12 0801 	adds.w	r8, r2, r1
 8008864:	4629      	mov	r1, r5
 8008866:	eb43 0901 	adc.w	r9, r3, r1
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800887a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800887e:	4690      	mov	r8, r2
 8008880:	4699      	mov	r9, r3
 8008882:	4623      	mov	r3, r4
 8008884:	eb18 0303 	adds.w	r3, r8, r3
 8008888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800888c:	462b      	mov	r3, r5
 800888e:	eb49 0303 	adc.w	r3, r9, r3
 8008892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80088a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80088aa:	460b      	mov	r3, r1
 80088ac:	18db      	adds	r3, r3, r3
 80088ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80088b0:	4613      	mov	r3, r2
 80088b2:	eb42 0303 	adc.w	r3, r2, r3
 80088b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80088b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80088bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80088c0:	f7f8 f992 	bl	8000be8 <__aeabi_uldivmod>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4b61      	ldr	r3, [pc, #388]	@ (8008a50 <UART_SetConfig+0x2d4>)
 80088ca:	fba3 2302 	umull	r2, r3, r3, r2
 80088ce:	095b      	lsrs	r3, r3, #5
 80088d0:	011c      	lsls	r4, r3, #4
 80088d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80088e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80088e4:	4642      	mov	r2, r8
 80088e6:	464b      	mov	r3, r9
 80088e8:	1891      	adds	r1, r2, r2
 80088ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80088ec:	415b      	adcs	r3, r3
 80088ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80088f4:	4641      	mov	r1, r8
 80088f6:	eb12 0a01 	adds.w	sl, r2, r1
 80088fa:	4649      	mov	r1, r9
 80088fc:	eb43 0b01 	adc.w	fp, r3, r1
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800890c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008914:	4692      	mov	sl, r2
 8008916:	469b      	mov	fp, r3
 8008918:	4643      	mov	r3, r8
 800891a:	eb1a 0303 	adds.w	r3, sl, r3
 800891e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008922:	464b      	mov	r3, r9
 8008924:	eb4b 0303 	adc.w	r3, fp, r3
 8008928:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008938:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800893c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008940:	460b      	mov	r3, r1
 8008942:	18db      	adds	r3, r3, r3
 8008944:	643b      	str	r3, [r7, #64]	@ 0x40
 8008946:	4613      	mov	r3, r2
 8008948:	eb42 0303 	adc.w	r3, r2, r3
 800894c:	647b      	str	r3, [r7, #68]	@ 0x44
 800894e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008956:	f7f8 f947 	bl	8000be8 <__aeabi_uldivmod>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4611      	mov	r1, r2
 8008960:	4b3b      	ldr	r3, [pc, #236]	@ (8008a50 <UART_SetConfig+0x2d4>)
 8008962:	fba3 2301 	umull	r2, r3, r3, r1
 8008966:	095b      	lsrs	r3, r3, #5
 8008968:	2264      	movs	r2, #100	@ 0x64
 800896a:	fb02 f303 	mul.w	r3, r2, r3
 800896e:	1acb      	subs	r3, r1, r3
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008976:	4b36      	ldr	r3, [pc, #216]	@ (8008a50 <UART_SetConfig+0x2d4>)
 8008978:	fba3 2302 	umull	r2, r3, r3, r2
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008984:	441c      	add	r4, r3
 8008986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800898a:	2200      	movs	r2, #0
 800898c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008990:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	1891      	adds	r1, r2, r2
 800899e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80089a0:	415b      	adcs	r3, r3
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80089a8:	4641      	mov	r1, r8
 80089aa:	1851      	adds	r1, r2, r1
 80089ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80089ae:	4649      	mov	r1, r9
 80089b0:	414b      	adcs	r3, r1
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	f04f 0300 	mov.w	r3, #0
 80089bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80089c0:	4659      	mov	r1, fp
 80089c2:	00cb      	lsls	r3, r1, #3
 80089c4:	4651      	mov	r1, sl
 80089c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ca:	4651      	mov	r1, sl
 80089cc:	00ca      	lsls	r2, r1, #3
 80089ce:	4610      	mov	r0, r2
 80089d0:	4619      	mov	r1, r3
 80089d2:	4603      	mov	r3, r0
 80089d4:	4642      	mov	r2, r8
 80089d6:	189b      	adds	r3, r3, r2
 80089d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089dc:	464b      	mov	r3, r9
 80089de:	460a      	mov	r2, r1
 80089e0:	eb42 0303 	adc.w	r3, r2, r3
 80089e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80089f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089fc:	460b      	mov	r3, r1
 80089fe:	18db      	adds	r3, r3, r3
 8008a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a02:	4613      	mov	r3, r2
 8008a04:	eb42 0303 	adc.w	r3, r2, r3
 8008a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008a12:	f7f8 f8e9 	bl	8000be8 <__aeabi_uldivmod>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a50 <UART_SetConfig+0x2d4>)
 8008a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a20:	095b      	lsrs	r3, r3, #5
 8008a22:	2164      	movs	r1, #100	@ 0x64
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	3332      	adds	r3, #50	@ 0x32
 8008a2e:	4a08      	ldr	r2, [pc, #32]	@ (8008a50 <UART_SetConfig+0x2d4>)
 8008a30:	fba2 2303 	umull	r2, r3, r2, r3
 8008a34:	095b      	lsrs	r3, r3, #5
 8008a36:	f003 0207 	and.w	r2, r3, #7
 8008a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4422      	add	r2, r4
 8008a42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a44:	e106      	b.n	8008c54 <UART_SetConfig+0x4d8>
 8008a46:	bf00      	nop
 8008a48:	40011000 	.word	0x40011000
 8008a4c:	40011400 	.word	0x40011400
 8008a50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008a66:	4642      	mov	r2, r8
 8008a68:	464b      	mov	r3, r9
 8008a6a:	1891      	adds	r1, r2, r2
 8008a6c:	6239      	str	r1, [r7, #32]
 8008a6e:	415b      	adcs	r3, r3
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a76:	4641      	mov	r1, r8
 8008a78:	1854      	adds	r4, r2, r1
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	eb43 0501 	adc.w	r5, r3, r1
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	00eb      	lsls	r3, r5, #3
 8008a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a8e:	00e2      	lsls	r2, r4, #3
 8008a90:	4614      	mov	r4, r2
 8008a92:	461d      	mov	r5, r3
 8008a94:	4643      	mov	r3, r8
 8008a96:	18e3      	adds	r3, r4, r3
 8008a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a9c:	464b      	mov	r3, r9
 8008a9e:	eb45 0303 	adc.w	r3, r5, r3
 8008aa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ab2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ab6:	f04f 0200 	mov.w	r2, #0
 8008aba:	f04f 0300 	mov.w	r3, #0
 8008abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	008b      	lsls	r3, r1, #2
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008acc:	4621      	mov	r1, r4
 8008ace:	008a      	lsls	r2, r1, #2
 8008ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ad4:	f7f8 f888 	bl	8000be8 <__aeabi_uldivmod>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4b60      	ldr	r3, [pc, #384]	@ (8008c60 <UART_SetConfig+0x4e4>)
 8008ade:	fba3 2302 	umull	r2, r3, r3, r2
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	011c      	lsls	r4, r3, #4
 8008ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008af0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008af4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008af8:	4642      	mov	r2, r8
 8008afa:	464b      	mov	r3, r9
 8008afc:	1891      	adds	r1, r2, r2
 8008afe:	61b9      	str	r1, [r7, #24]
 8008b00:	415b      	adcs	r3, r3
 8008b02:	61fb      	str	r3, [r7, #28]
 8008b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b08:	4641      	mov	r1, r8
 8008b0a:	1851      	adds	r1, r2, r1
 8008b0c:	6139      	str	r1, [r7, #16]
 8008b0e:	4649      	mov	r1, r9
 8008b10:	414b      	adcs	r3, r1
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b20:	4659      	mov	r1, fp
 8008b22:	00cb      	lsls	r3, r1, #3
 8008b24:	4651      	mov	r1, sl
 8008b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b2a:	4651      	mov	r1, sl
 8008b2c:	00ca      	lsls	r2, r1, #3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4619      	mov	r1, r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	4642      	mov	r2, r8
 8008b36:	189b      	adds	r3, r3, r2
 8008b38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b3c:	464b      	mov	r3, r9
 8008b3e:	460a      	mov	r2, r1
 8008b40:	eb42 0303 	adc.w	r3, r2, r3
 8008b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	f04f 0300 	mov.w	r3, #0
 8008b5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008b60:	4649      	mov	r1, r9
 8008b62:	008b      	lsls	r3, r1, #2
 8008b64:	4641      	mov	r1, r8
 8008b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	008a      	lsls	r2, r1, #2
 8008b6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008b72:	f7f8 f839 	bl	8000be8 <__aeabi_uldivmod>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4b38      	ldr	r3, [pc, #224]	@ (8008c60 <UART_SetConfig+0x4e4>)
 8008b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	2264      	movs	r2, #100	@ 0x64
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	1acb      	subs	r3, r1, r3
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	3332      	adds	r3, #50	@ 0x32
 8008b90:	4a33      	ldr	r2, [pc, #204]	@ (8008c60 <UART_SetConfig+0x4e4>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b9c:	441c      	add	r4, r3
 8008b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ba6:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ba8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008bac:	4642      	mov	r2, r8
 8008bae:	464b      	mov	r3, r9
 8008bb0:	1891      	adds	r1, r2, r2
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	415b      	adcs	r3, r3
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bbc:	4641      	mov	r1, r8
 8008bbe:	1851      	adds	r1, r2, r1
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	414b      	adcs	r3, r1
 8008bc6:	607b      	str	r3, [r7, #4]
 8008bc8:	f04f 0200 	mov.w	r2, #0
 8008bcc:	f04f 0300 	mov.w	r3, #0
 8008bd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bd4:	4659      	mov	r1, fp
 8008bd6:	00cb      	lsls	r3, r1, #3
 8008bd8:	4651      	mov	r1, sl
 8008bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bde:	4651      	mov	r1, sl
 8008be0:	00ca      	lsls	r2, r1, #3
 8008be2:	4610      	mov	r0, r2
 8008be4:	4619      	mov	r1, r3
 8008be6:	4603      	mov	r3, r0
 8008be8:	4642      	mov	r2, r8
 8008bea:	189b      	adds	r3, r3, r2
 8008bec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bee:	464b      	mov	r3, r9
 8008bf0:	460a      	mov	r2, r1
 8008bf2:	eb42 0303 	adc.w	r3, r2, r3
 8008bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c02:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008c10:	4649      	mov	r1, r9
 8008c12:	008b      	lsls	r3, r1, #2
 8008c14:	4641      	mov	r1, r8
 8008c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	008a      	lsls	r2, r1, #2
 8008c1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c22:	f7f7 ffe1 	bl	8000be8 <__aeabi_uldivmod>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c60 <UART_SetConfig+0x4e4>)
 8008c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c30:	095b      	lsrs	r3, r3, #5
 8008c32:	2164      	movs	r1, #100	@ 0x64
 8008c34:	fb01 f303 	mul.w	r3, r1, r3
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	3332      	adds	r3, #50	@ 0x32
 8008c3e:	4a08      	ldr	r2, [pc, #32]	@ (8008c60 <UART_SetConfig+0x4e4>)
 8008c40:	fba2 2303 	umull	r2, r3, r2, r3
 8008c44:	095b      	lsrs	r3, r3, #5
 8008c46:	f003 020f 	and.w	r2, r3, #15
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4422      	add	r2, r4
 8008c52:	609a      	str	r2, [r3, #8]
}
 8008c54:	bf00      	nop
 8008c56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c60:	51eb851f 	.word	0x51eb851f

08008c64 <__NVIC_SetPriority>:
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	db0a      	blt.n	8008c8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	490c      	ldr	r1, [pc, #48]	@ (8008cb0 <__NVIC_SetPriority+0x4c>)
 8008c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c82:	0112      	lsls	r2, r2, #4
 8008c84:	b2d2      	uxtb	r2, r2
 8008c86:	440b      	add	r3, r1
 8008c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008c8c:	e00a      	b.n	8008ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	4908      	ldr	r1, [pc, #32]	@ (8008cb4 <__NVIC_SetPriority+0x50>)
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	f003 030f 	and.w	r3, r3, #15
 8008c9a:	3b04      	subs	r3, #4
 8008c9c:	0112      	lsls	r2, r2, #4
 8008c9e:	b2d2      	uxtb	r2, r2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	761a      	strb	r2, [r3, #24]
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	e000e100 	.word	0xe000e100
 8008cb4:	e000ed00 	.word	0xe000ed00

08008cb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	f06f 0004 	mvn.w	r0, #4
 8008cc2:	f7ff ffcf 	bl	8008c64 <__NVIC_SetPriority>
#endif
}
 8008cc6:	bf00      	nop
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cd2:	f3ef 8305 	mrs	r3, IPSR
 8008cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8008cd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008cde:	f06f 0305 	mvn.w	r3, #5
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	e00c      	b.n	8008d00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8008d10 <osKernelInitialize+0x44>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cee:	4b08      	ldr	r3, [pc, #32]	@ (8008d10 <osKernelInitialize+0x44>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	607b      	str	r3, [r7, #4]
 8008cf8:	e002      	b.n	8008d00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d00:	687b      	ldr	r3, [r7, #4]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	20000544 	.word	0x20000544

08008d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d1a:	f3ef 8305 	mrs	r3, IPSR
 8008d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d26:	f06f 0305 	mvn.w	r3, #5
 8008d2a:	607b      	str	r3, [r7, #4]
 8008d2c:	e010      	b.n	8008d50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d5c <osKernelStart+0x48>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d109      	bne.n	8008d4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d36:	f7ff ffbf 	bl	8008cb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d3a:	4b08      	ldr	r3, [pc, #32]	@ (8008d5c <osKernelStart+0x48>)
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d40:	f001 f87a 	bl	8009e38 <vTaskStartScheduler>
      stat = osOK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	607b      	str	r3, [r7, #4]
 8008d48:	e002      	b.n	8008d50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d50:	687b      	ldr	r3, [r7, #4]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000544 	.word	0x20000544

08008d60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08e      	sub	sp, #56	@ 0x38
 8008d64:	af04      	add	r7, sp, #16
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d70:	f3ef 8305 	mrs	r3, IPSR
 8008d74:	617b      	str	r3, [r7, #20]
  return(result);
 8008d76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d17e      	bne.n	8008e7a <osThreadNew+0x11a>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d07b      	beq.n	8008e7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d82:	2380      	movs	r3, #128	@ 0x80
 8008d84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d86:	2318      	movs	r3, #24
 8008d88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d045      	beq.n	8008e26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <osThreadNew+0x48>
        name = attr->name;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d008      	beq.n	8008dce <osThreadNew+0x6e>
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	2b38      	cmp	r3, #56	@ 0x38
 8008dc0:	d805      	bhi.n	8008dce <osThreadNew+0x6e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <osThreadNew+0x72>
        return (NULL);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e054      	b.n	8008e7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	089b      	lsrs	r3, r3, #2
 8008de0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00e      	beq.n	8008e08 <osThreadNew+0xa8>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b5b      	cmp	r3, #91	@ 0x5b
 8008df0:	d90a      	bls.n	8008e08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d006      	beq.n	8008e08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <osThreadNew+0xa8>
        mem = 1;
 8008e02:	2301      	movs	r3, #1
 8008e04:	61bb      	str	r3, [r7, #24]
 8008e06:	e010      	b.n	8008e2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10c      	bne.n	8008e2a <osThreadNew+0xca>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d108      	bne.n	8008e2a <osThreadNew+0xca>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <osThreadNew+0xca>
          mem = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61bb      	str	r3, [r7, #24]
 8008e24:	e001      	b.n	8008e2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d110      	bne.n	8008e52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e38:	9202      	str	r2, [sp, #8]
 8008e3a:	9301      	str	r3, [sp, #4]
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	6a3a      	ldr	r2, [r7, #32]
 8008e44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fe1a 	bl	8009a80 <xTaskCreateStatic>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	613b      	str	r3, [r7, #16]
 8008e50:	e013      	b.n	8008e7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d110      	bne.n	8008e7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	f107 0310 	add.w	r3, r7, #16
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 fe68 	bl	8009b40 <xTaskCreate>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d001      	beq.n	8008e7a <osThreadNew+0x11a>
            hTask = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e7a:	693b      	ldr	r3, [r7, #16]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3728      	adds	r7, #40	@ 0x28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8c:	f3ef 8305 	mrs	r3, IPSR
 8008e90:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <osDelay+0x1c>
    stat = osErrorISR;
 8008e98:	f06f 0305 	mvn.w	r3, #5
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	e007      	b.n	8008eb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 ff8e 	bl	8009dcc <vTaskDelay>
    }
  }

  return (stat);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4a07      	ldr	r2, [pc, #28]	@ (8008ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4a06      	ldr	r2, [pc, #24]	@ (8008eec <vApplicationGetIdleTaskMemory+0x30>)
 8008ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2280      	movs	r2, #128	@ 0x80
 8008ed8:	601a      	str	r2, [r3, #0]
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000548 	.word	0x20000548
 8008eec:	200005a4 	.word	0x200005a4

08008ef0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4a07      	ldr	r2, [pc, #28]	@ (8008f1c <vApplicationGetTimerTaskMemory+0x2c>)
 8008f00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	4a06      	ldr	r2, [pc, #24]	@ (8008f20 <vApplicationGetTimerTaskMemory+0x30>)
 8008f06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f0e:	601a      	str	r2, [r3, #0]
}
 8008f10:	bf00      	nop
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	200007a4 	.word	0x200007a4
 8008f20:	20000800 	.word	0x20000800

08008f24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f103 0208 	add.w	r2, r3, #8
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f103 0208 	add.w	r2, r3, #8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f103 0208 	add.w	r2, r3, #8
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	601a      	str	r2, [r3, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b085      	sub	sp, #20
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fdc:	d103      	bne.n	8008fe6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	e00c      	b.n	8009000 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	e002      	b.n	8008ff4 <vListInsert+0x2e>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d2f6      	bcs.n	8008fee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	601a      	str	r2, [r3, #0]
}
 800902c:	bf00      	nop
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	6892      	ldr	r2, [r2, #8]
 800904e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6852      	ldr	r2, [r2, #4]
 8009058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d103      	bne.n	800906c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	1e5a      	subs	r2, r3, #1
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10b      	bne.n	80090b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090b2:	bf00      	nop
 80090b4:	bf00      	nop
 80090b6:	e7fd      	b.n	80090b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090b8:	f002 f876 	bl	800b1a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c4:	68f9      	ldr	r1, [r7, #12]
 80090c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80090c8:	fb01 f303 	mul.w	r3, r1, r3
 80090cc:	441a      	add	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e8:	3b01      	subs	r3, #1
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80090ee:	fb01 f303 	mul.w	r3, r1, r3
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	22ff      	movs	r2, #255	@ 0xff
 80090fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	22ff      	movs	r2, #255	@ 0xff
 8009104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d114      	bne.n	8009138 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01a      	beq.n	800914c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3310      	adds	r3, #16
 800911a:	4618      	mov	r0, r3
 800911c:	f001 f91a 	bl	800a354 <xTaskRemoveFromEventList>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d012      	beq.n	800914c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009126:	4b0d      	ldr	r3, [pc, #52]	@ (800915c <xQueueGenericReset+0xd0>)
 8009128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	e009      	b.n	800914c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3310      	adds	r3, #16
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fef1 	bl	8008f24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3324      	adds	r3, #36	@ 0x24
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff feec 	bl	8008f24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800914c:	f002 f85e 	bl	800b20c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009150:	2301      	movs	r3, #1
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08e      	sub	sp, #56	@ 0x38
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10b      	bne.n	800918c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009186:	bf00      	nop
 8009188:	bf00      	nop
 800918a:	e7fd      	b.n	8009188 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <xQueueGenericCreateStatic+0x56>
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <xQueueGenericCreateStatic+0x5a>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e000      	b.n	80091bc <xQueueGenericCreateStatic+0x5c>
 80091ba:	2300      	movs	r3, #0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10b      	bne.n	80091d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	623b      	str	r3, [r7, #32]
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	e7fd      	b.n	80091d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <xQueueGenericCreateStatic+0x84>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <xQueueGenericCreateStatic+0x88>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e000      	b.n	80091ea <xQueueGenericCreateStatic+0x8a>
 80091e8:	2300      	movs	r3, #0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	61fb      	str	r3, [r7, #28]
}
 8009200:	bf00      	nop
 8009202:	bf00      	nop
 8009204:	e7fd      	b.n	8009202 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009206:	2350      	movs	r3, #80	@ 0x50
 8009208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b50      	cmp	r3, #80	@ 0x50
 800920e:	d00b      	beq.n	8009228 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	61bb      	str	r3, [r7, #24]
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009228:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800922e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00d      	beq.n	8009250 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800923c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	68b9      	ldr	r1, [r7, #8]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 f805 	bl	800925a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009252:	4618      	mov	r0, r3
 8009254:	3730      	adds	r7, #48	@ 0x30
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d103      	bne.n	8009276 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e002      	b.n	800927c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009288:	2101      	movs	r1, #1
 800928a:	69b8      	ldr	r0, [r7, #24]
 800928c:	f7ff fefe 	bl	800908c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	78fa      	ldrb	r2, [r7, #3]
 8009294:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08e      	sub	sp, #56	@ 0x38
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80092b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <xQueueGenericSend+0x34>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <xQueueGenericSend+0x42>
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <xQueueGenericSend+0x46>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <xQueueGenericSend+0x48>
 80092e6:	2300      	movs	r3, #0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10b      	bne.n	8009304 <xQueueGenericSend+0x64>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	e7fd      	b.n	8009300 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d103      	bne.n	8009312 <xQueueGenericSend+0x72>
 800930a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <xQueueGenericSend+0x76>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <xQueueGenericSend+0x78>
 8009316:	2300      	movs	r3, #0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10b      	bne.n	8009334 <xQueueGenericSend+0x94>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	623b      	str	r3, [r7, #32]
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	e7fd      	b.n	8009330 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009334:	f001 f9ce 	bl	800a6d4 <xTaskGetSchedulerState>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <xQueueGenericSend+0xa4>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <xQueueGenericSend+0xa8>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <xQueueGenericSend+0xaa>
 8009348:	2300      	movs	r3, #0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10b      	bne.n	8009366 <xQueueGenericSend+0xc6>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	61fb      	str	r3, [r7, #28]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009366:	f001 ff1f 	bl	800b1a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009372:	429a      	cmp	r2, r3
 8009374:	d302      	bcc.n	800937c <xQueueGenericSend+0xdc>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d129      	bne.n	80093d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009382:	f000 fa0f 	bl	80097a4 <prvCopyDataToQueue>
 8009386:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	2b00      	cmp	r3, #0
 800938e:	d010      	beq.n	80093b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	3324      	adds	r3, #36	@ 0x24
 8009394:	4618      	mov	r0, r3
 8009396:	f000 ffdd 	bl	800a354 <xTaskRemoveFromEventList>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d013      	beq.n	80093c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093a0:	4b3f      	ldr	r3, [pc, #252]	@ (80094a0 <xQueueGenericSend+0x200>)
 80093a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	e00a      	b.n	80093c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093b8:	4b39      	ldr	r3, [pc, #228]	@ (80094a0 <xQueueGenericSend+0x200>)
 80093ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80093c8:	f001 ff20 	bl	800b20c <vPortExitCritical>
				return pdPASS;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e063      	b.n	8009498 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093d6:	f001 ff19 	bl	800b20c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	e05c      	b.n	8009498 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d106      	bne.n	80093f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 f817 	bl	800a41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093ee:	2301      	movs	r3, #1
 80093f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093f2:	f001 ff0b 	bl	800b20c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093f6:	f000 fd87 	bl	8009f08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093fa:	f001 fed5 	bl	800b1a8 <vPortEnterCritical>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009404:	b25b      	sxtb	r3, r3
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d103      	bne.n	8009414 <xQueueGenericSend+0x174>
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800941a:	b25b      	sxtb	r3, r3
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d103      	bne.n	800942a <xQueueGenericSend+0x18a>
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800942a:	f001 feef 	bl	800b20c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800942e:	1d3a      	adds	r2, r7, #4
 8009430:	f107 0314 	add.w	r3, r7, #20
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f001 f806 	bl	800a448 <xTaskCheckForTimeOut>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d124      	bne.n	800948c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009442:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009444:	f000 faa6 	bl	8009994 <prvIsQueueFull>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d018      	beq.n	8009480 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	3310      	adds	r3, #16
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f000 ff2a 	bl	800a2b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800945c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800945e:	f000 fa31 	bl	80098c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009462:	f000 fd5f 	bl	8009f24 <xTaskResumeAll>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	f47f af7c 	bne.w	8009366 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800946e:	4b0c      	ldr	r3, [pc, #48]	@ (80094a0 <xQueueGenericSend+0x200>)
 8009470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	e772      	b.n	8009366 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009482:	f000 fa1f 	bl	80098c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009486:	f000 fd4d 	bl	8009f24 <xTaskResumeAll>
 800948a:	e76c      	b.n	8009366 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800948c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800948e:	f000 fa19 	bl	80098c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009492:	f000 fd47 	bl	8009f24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009498:	4618      	mov	r0, r3
 800949a:	3738      	adds	r7, #56	@ 0x38
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b090      	sub	sp, #64	@ 0x40
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80094b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10b      	bne.n	80094d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d103      	bne.n	80094e2 <xQueueGenericSendFromISR+0x3e>
 80094da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <xQueueGenericSendFromISR+0x42>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <xQueueGenericSendFromISR+0x44>
 80094e6:	2300      	movs	r3, #0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10b      	bne.n	8009504 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094fe:	bf00      	nop
 8009500:	bf00      	nop
 8009502:	e7fd      	b.n	8009500 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d103      	bne.n	8009512 <xQueueGenericSendFromISR+0x6e>
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <xQueueGenericSendFromISR+0x72>
 8009512:	2301      	movs	r3, #1
 8009514:	e000      	b.n	8009518 <xQueueGenericSendFromISR+0x74>
 8009516:	2300      	movs	r3, #0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10b      	bne.n	8009534 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	623b      	str	r3, [r7, #32]
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009534:	f001 ff18 	bl	800b368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009538:	f3ef 8211 	mrs	r2, BASEPRI
 800953c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	61fa      	str	r2, [r7, #28]
 800954e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009550:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009552:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955c:	429a      	cmp	r2, r3
 800955e:	d302      	bcc.n	8009566 <xQueueGenericSendFromISR+0xc2>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d12f      	bne.n	80095c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800956c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009574:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800957c:	f000 f912 	bl	80097a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009580:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d112      	bne.n	80095b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d016      	beq.n	80095c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	3324      	adds	r3, #36	@ 0x24
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fedc 	bl	800a354 <xTaskRemoveFromEventList>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	e007      	b.n	80095c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80095b4:	3301      	adds	r3, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	b25a      	sxtb	r2, r3
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80095c0:	2301      	movs	r3, #1
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80095c4:	e001      	b.n	80095ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3740      	adds	r7, #64	@ 0x40
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08c      	sub	sp, #48	@ 0x30
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10b      	bne.n	8009612 <xQueueReceive+0x32>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	623b      	str	r3, [r7, #32]
}
 800960c:	bf00      	nop
 800960e:	bf00      	nop
 8009610:	e7fd      	b.n	800960e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <xQueueReceive+0x40>
 8009618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <xQueueReceive+0x44>
 8009620:	2301      	movs	r3, #1
 8009622:	e000      	b.n	8009626 <xQueueReceive+0x46>
 8009624:	2300      	movs	r3, #0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10b      	bne.n	8009642 <xQueueReceive+0x62>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	61fb      	str	r3, [r7, #28]
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	e7fd      	b.n	800963e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009642:	f001 f847 	bl	800a6d4 <xTaskGetSchedulerState>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d102      	bne.n	8009652 <xQueueReceive+0x72>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <xQueueReceive+0x76>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <xQueueReceive+0x78>
 8009656:	2300      	movs	r3, #0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <xQueueReceive+0x94>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	61bb      	str	r3, [r7, #24]
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009674:	f001 fd98 	bl	800b1a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01f      	beq.n	80096c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009688:	f000 f8f6 	bl	8009878 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	1e5a      	subs	r2, r3, #1
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00f      	beq.n	80096bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	3310      	adds	r3, #16
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fe57 	bl	800a354 <xTaskRemoveFromEventList>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096ac:	4b3c      	ldr	r3, [pc, #240]	@ (80097a0 <xQueueReceive+0x1c0>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096bc:	f001 fda6 	bl	800b20c <vPortExitCritical>
				return pdPASS;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e069      	b.n	8009798 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096ca:	f001 fd9f 	bl	800b20c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e062      	b.n	8009798 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fe9d 	bl	800a41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096e2:	2301      	movs	r3, #1
 80096e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096e6:	f001 fd91 	bl	800b20c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ea:	f000 fc0d 	bl	8009f08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ee:	f001 fd5b 	bl	800b1a8 <vPortEnterCritical>
 80096f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096f8:	b25b      	sxtb	r3, r3
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d103      	bne.n	8009708 <xQueueReceive+0x128>
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800970e:	b25b      	sxtb	r3, r3
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009714:	d103      	bne.n	800971e <xQueueReceive+0x13e>
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800971e:	f001 fd75 	bl	800b20c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009722:	1d3a      	adds	r2, r7, #4
 8009724:	f107 0310 	add.w	r3, r7, #16
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fe8c 	bl	800a448 <xTaskCheckForTimeOut>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d123      	bne.n	800977e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009738:	f000 f916 	bl	8009968 <prvIsQueueEmpty>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d017      	beq.n	8009772 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009744:	3324      	adds	r3, #36	@ 0x24
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fdb0 	bl	800a2b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009752:	f000 f8b7 	bl	80098c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009756:	f000 fbe5 	bl	8009f24 <xTaskResumeAll>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d189      	bne.n	8009674 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009760:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <xQueueReceive+0x1c0>)
 8009762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	e780      	b.n	8009674 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009774:	f000 f8a6 	bl	80098c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009778:	f000 fbd4 	bl	8009f24 <xTaskResumeAll>
 800977c:	e77a      	b.n	8009674 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800977e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009780:	f000 f8a0 	bl	80098c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009784:	f000 fbce 	bl	8009f24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800978a:	f000 f8ed 	bl	8009968 <prvIsQueueEmpty>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f43f af6f 	beq.w	8009674 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009798:	4618      	mov	r0, r3
 800979a:	3730      	adds	r7, #48	@ 0x30
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10d      	bne.n	80097de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d14d      	bne.n	8009866 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 ff9e 	bl	800a710 <xTaskPriorityDisinherit>
 80097d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	609a      	str	r2, [r3, #8]
 80097dc:	e043      	b.n	8009866 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d119      	bne.n	8009818 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6858      	ldr	r0, [r3, #4]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ec:	461a      	mov	r2, r3
 80097ee:	68b9      	ldr	r1, [r7, #8]
 80097f0:	f003 f819 	bl	800c826 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097fc:	441a      	add	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	429a      	cmp	r2, r3
 800980c:	d32b      	bcc.n	8009866 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	605a      	str	r2, [r3, #4]
 8009816:	e026      	b.n	8009866 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68d8      	ldr	r0, [r3, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009820:	461a      	mov	r2, r3
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	f002 ffff 	bl	800c826 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009830:	425b      	negs	r3, r3
 8009832:	441a      	add	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d207      	bcs.n	8009854 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984c:	425b      	negs	r3, r3
 800984e:	441a      	add	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b02      	cmp	r3, #2
 8009858:	d105      	bne.n	8009866 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	3b01      	subs	r3, #1
 8009864:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800986e:	697b      	ldr	r3, [r7, #20]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d018      	beq.n	80098bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009892:	441a      	add	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d303      	bcc.n	80098ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	68d9      	ldr	r1, [r3, #12]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b4:	461a      	mov	r2, r3
 80098b6:	6838      	ldr	r0, [r7, #0]
 80098b8:	f002 ffb5 	bl	800c826 <memcpy>
	}
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80098cc:	f001 fc6c 	bl	800b1a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098d8:	e011      	b.n	80098fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d012      	beq.n	8009908 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3324      	adds	r3, #36	@ 0x24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fd34 	bl	800a354 <xTaskRemoveFromEventList>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098f2:	f000 fe0d 	bl	800a510 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dce9      	bgt.n	80098da <prvUnlockQueue+0x16>
 8009906:	e000      	b.n	800990a <prvUnlockQueue+0x46>
					break;
 8009908:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	22ff      	movs	r2, #255	@ 0xff
 800990e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009912:	f001 fc7b 	bl	800b20c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009916:	f001 fc47 	bl	800b1a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009920:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009922:	e011      	b.n	8009948 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d012      	beq.n	8009952 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3310      	adds	r3, #16
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fd0f 	bl	800a354 <xTaskRemoveFromEventList>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800993c:	f000 fde8 	bl	800a510 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	3b01      	subs	r3, #1
 8009944:	b2db      	uxtb	r3, r3
 8009946:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800994c:	2b00      	cmp	r3, #0
 800994e:	dce9      	bgt.n	8009924 <prvUnlockQueue+0x60>
 8009950:	e000      	b.n	8009954 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009952:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	22ff      	movs	r2, #255	@ 0xff
 8009958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800995c:	f001 fc56 	bl	800b20c <vPortExitCritical>
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009970:	f001 fc1a 	bl	800b1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800997c:	2301      	movs	r3, #1
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	e001      	b.n	8009986 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009986:	f001 fc41 	bl	800b20c <vPortExitCritical>

	return xReturn;
 800998a:	68fb      	ldr	r3, [r7, #12]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800999c:	f001 fc04 	bl	800b1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d102      	bne.n	80099b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e001      	b.n	80099b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099b6:	f001 fc29 	bl	800b20c <vPortExitCritical>

	return xReturn;
 80099ba:	68fb      	ldr	r3, [r7, #12]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	e014      	b.n	80099fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099d4:	4a0f      	ldr	r2, [pc, #60]	@ (8009a14 <vQueueAddToRegistry+0x50>)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099e0:	490c      	ldr	r1, [pc, #48]	@ (8009a14 <vQueueAddToRegistry+0x50>)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009a14 <vQueueAddToRegistry+0x50>)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	4413      	add	r3, r2
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099f6:	e006      	b.n	8009a06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b07      	cmp	r3, #7
 8009a02:	d9e7      	bls.n	80099d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	20000c00 	.word	0x20000c00

08009a18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a28:	f001 fbbe 	bl	800b1a8 <vPortEnterCritical>
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a32:	b25b      	sxtb	r3, r3
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d103      	bne.n	8009a42 <vQueueWaitForMessageRestricted+0x2a>
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a48:	b25b      	sxtb	r3, r3
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d103      	bne.n	8009a58 <vQueueWaitForMessageRestricted+0x40>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a58:	f001 fbd8 	bl	800b20c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d106      	bne.n	8009a72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	3324      	adds	r3, #36	@ 0x24
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fc45 	bl	800a2fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a72:	6978      	ldr	r0, [r7, #20]
 8009a74:	f7ff ff26 	bl	80098c4 <prvUnlockQueue>
	}
 8009a78:	bf00      	nop
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08e      	sub	sp, #56	@ 0x38
 8009a84:	af04      	add	r7, sp, #16
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10b      	bne.n	8009aac <xTaskCreateStatic+0x2c>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	623b      	str	r3, [r7, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	bf00      	nop
 8009aaa:	e7fd      	b.n	8009aa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10b      	bne.n	8009aca <xTaskCreateStatic+0x4a>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	61fb      	str	r3, [r7, #28]
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009aca:	235c      	movs	r3, #92	@ 0x5c
 8009acc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ad2:	d00b      	beq.n	8009aec <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	61bb      	str	r3, [r7, #24]
}
 8009ae6:	bf00      	nop
 8009ae8:	bf00      	nop
 8009aea:	e7fd      	b.n	8009ae8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009aec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01e      	beq.n	8009b32 <xTaskCreateStatic+0xb2>
 8009af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01b      	beq.n	8009b32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9303      	str	r3, [sp, #12]
 8009b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b12:	9302      	str	r3, [sp, #8]
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f850 	bl	8009bca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b2c:	f000 f8de 	bl	8009cec <prvAddNewTaskToReadyList>
 8009b30:	e001      	b.n	8009b36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b36:	697b      	ldr	r3, [r7, #20]
	}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3728      	adds	r7, #40	@ 0x28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08c      	sub	sp, #48	@ 0x30
 8009b44:	af04      	add	r7, sp, #16
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b50:	88fb      	ldrh	r3, [r7, #6]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 fc49 	bl	800b3ec <pvPortMalloc>
 8009b5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00e      	beq.n	8009b80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b62:	205c      	movs	r0, #92	@ 0x5c
 8009b64:	f001 fc42 	bl	800b3ec <pvPortMalloc>
 8009b68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b76:	e005      	b.n	8009b84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b78:	6978      	ldr	r0, [r7, #20]
 8009b7a:	f001 fd05 	bl	800b588 <vPortFree>
 8009b7e:	e001      	b.n	8009b84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d017      	beq.n	8009bba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b92:	88fa      	ldrh	r2, [r7, #6]
 8009b94:	2300      	movs	r3, #0
 8009b96:	9303      	str	r3, [sp, #12]
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	9302      	str	r3, [sp, #8]
 8009b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f80e 	bl	8009bca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bae:	69f8      	ldr	r0, [r7, #28]
 8009bb0:	f000 f89c 	bl	8009cec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	e002      	b.n	8009bc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bba:	f04f 33ff 	mov.w	r3, #4294967295
 8009bbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
	}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b088      	sub	sp, #32
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bda:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	461a      	mov	r2, r3
 8009be2:	21a5      	movs	r1, #165	@ 0xa5
 8009be4:	f002 fd9f 	bl	800c726 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	f023 0307 	bic.w	r3, r3, #7
 8009c00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	617b      	str	r3, [r7, #20]
}
 8009c1e:	bf00      	nop
 8009c20:	bf00      	nop
 8009c22:	e7fd      	b.n	8009c20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d01f      	beq.n	8009c6a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	e012      	b.n	8009c56 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	7819      	ldrb	r1, [r3, #0]
 8009c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3334      	adds	r3, #52	@ 0x34
 8009c40:	460a      	mov	r2, r1
 8009c42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	4413      	add	r3, r2
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d006      	beq.n	8009c5e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	3301      	adds	r3, #1
 8009c54:	61fb      	str	r3, [r7, #28]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	2b0f      	cmp	r3, #15
 8009c5a:	d9e9      	bls.n	8009c30 <prvInitialiseNewTask+0x66>
 8009c5c:	e000      	b.n	8009c60 <prvInitialiseNewTask+0x96>
			{
				break;
 8009c5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c68:	e003      	b.n	8009c72 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	2b37      	cmp	r3, #55	@ 0x37
 8009c76:	d901      	bls.n	8009c7c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c78:	2337      	movs	r3, #55	@ 0x37
 8009c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c80:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c86:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	3304      	adds	r3, #4
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff f966 	bl	8008f64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9a:	3318      	adds	r3, #24
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff f961 	bl	8008f64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ca6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009caa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cb6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cba:	2200      	movs	r2, #0
 8009cbc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	69b8      	ldr	r0, [r7, #24]
 8009ccc:	f001 f93e 	bl	800af4c <pxPortInitialiseStack>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce2:	bf00      	nop
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cf4:	f001 fa58 	bl	800b1a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8009db0 <prvAddNewTaskToReadyList+0xc4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8009db0 <prvAddNewTaskToReadyList+0xc4>)
 8009d00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d02:	4b2c      	ldr	r3, [pc, #176]	@ (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d109      	bne.n	8009d1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d10:	4b27      	ldr	r3, [pc, #156]	@ (8009db0 <prvAddNewTaskToReadyList+0xc4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d110      	bne.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d18:	f000 fc1e 	bl	800a558 <prvInitialiseTaskLists>
 8009d1c:	e00d      	b.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d1e:	4b26      	ldr	r3, [pc, #152]	@ (8009db8 <prvAddNewTaskToReadyList+0xcc>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d26:	4b23      	ldr	r3, [pc, #140]	@ (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d802      	bhi.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d34:	4a1f      	ldr	r2, [pc, #124]	@ (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d3a:	4b20      	ldr	r3, [pc, #128]	@ (8009dbc <prvAddNewTaskToReadyList+0xd0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	4a1e      	ldr	r2, [pc, #120]	@ (8009dbc <prvAddNewTaskToReadyList+0xd0>)
 8009d42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d44:	4b1d      	ldr	r3, [pc, #116]	@ (8009dbc <prvAddNewTaskToReadyList+0xd0>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d50:	4b1b      	ldr	r3, [pc, #108]	@ (8009dc0 <prvAddNewTaskToReadyList+0xd4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d903      	bls.n	8009d60 <prvAddNewTaskToReadyList+0x74>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	4a18      	ldr	r2, [pc, #96]	@ (8009dc0 <prvAddNewTaskToReadyList+0xd4>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4a15      	ldr	r2, [pc, #84]	@ (8009dc4 <prvAddNewTaskToReadyList+0xd8>)
 8009d6e:	441a      	add	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f7ff f901 	bl	8008f7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d7c:	f001 fa46 	bl	800b20c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d80:	4b0d      	ldr	r3, [pc, #52]	@ (8009db8 <prvAddNewTaskToReadyList+0xcc>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00e      	beq.n	8009da6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d88:	4b0a      	ldr	r3, [pc, #40]	@ (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d207      	bcs.n	8009da6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d96:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc8 <prvAddNewTaskToReadyList+0xdc>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20001114 	.word	0x20001114
 8009db4:	20000c40 	.word	0x20000c40
 8009db8:	20001120 	.word	0x20001120
 8009dbc:	20001130 	.word	0x20001130
 8009dc0:	2000111c 	.word	0x2000111c
 8009dc4:	20000c44 	.word	0x20000c44
 8009dc8:	e000ed04 	.word	0xe000ed04

08009dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d018      	beq.n	8009e10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009dde:	4b14      	ldr	r3, [pc, #80]	@ (8009e30 <vTaskDelay+0x64>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00b      	beq.n	8009dfe <vTaskDelay+0x32>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	60bb      	str	r3, [r7, #8]
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	e7fd      	b.n	8009dfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009dfe:	f000 f883 	bl	8009f08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e02:	2100      	movs	r1, #0
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fcf3 	bl	800a7f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e0a:	f000 f88b 	bl	8009f24 <xTaskResumeAll>
 8009e0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d107      	bne.n	8009e26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009e16:	4b07      	ldr	r3, [pc, #28]	@ (8009e34 <vTaskDelay+0x68>)
 8009e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e26:	bf00      	nop
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	2000113c 	.word	0x2000113c
 8009e34:	e000ed04 	.word	0xe000ed04

08009e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	@ 0x28
 8009e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e46:	463a      	mov	r2, r7
 8009e48:	1d39      	adds	r1, r7, #4
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff f834 	bl	8008ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	9202      	str	r2, [sp, #8]
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	2300      	movs	r3, #0
 8009e64:	460a      	mov	r2, r1
 8009e66:	4922      	ldr	r1, [pc, #136]	@ (8009ef0 <vTaskStartScheduler+0xb8>)
 8009e68:	4822      	ldr	r0, [pc, #136]	@ (8009ef4 <vTaskStartScheduler+0xbc>)
 8009e6a:	f7ff fe09 	bl	8009a80 <xTaskCreateStatic>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4a21      	ldr	r2, [pc, #132]	@ (8009ef8 <vTaskStartScheduler+0xc0>)
 8009e72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e74:	4b20      	ldr	r3, [pc, #128]	@ (8009ef8 <vTaskStartScheduler+0xc0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	e001      	b.n	8009e86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d102      	bne.n	8009e92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e8c:	f000 fd04 	bl	800a898 <xTimerCreateTimerTask>
 8009e90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d116      	bne.n	8009ec6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	613b      	str	r3, [r7, #16]
}
 8009eaa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009eac:	4b13      	ldr	r3, [pc, #76]	@ (8009efc <vTaskStartScheduler+0xc4>)
 8009eae:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009eb4:	4b12      	ldr	r3, [pc, #72]	@ (8009f00 <vTaskStartScheduler+0xc8>)
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009eba:	4b12      	ldr	r3, [pc, #72]	@ (8009f04 <vTaskStartScheduler+0xcc>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ec0:	f001 f8ce 	bl	800b060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ec4:	e00f      	b.n	8009ee6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d10b      	bne.n	8009ee6 <vTaskStartScheduler+0xae>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	60fb      	str	r3, [r7, #12]
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	e7fd      	b.n	8009ee2 <vTaskStartScheduler+0xaa>
}
 8009ee6:	bf00      	nop
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800e9c0 	.word	0x0800e9c0
 8009ef4:	0800a529 	.word	0x0800a529
 8009ef8:	20001138 	.word	0x20001138
 8009efc:	20001134 	.word	0x20001134
 8009f00:	20001120 	.word	0x20001120
 8009f04:	20001118 	.word	0x20001118

08009f08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f0c:	4b04      	ldr	r3, [pc, #16]	@ (8009f20 <vTaskSuspendAll+0x18>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3301      	adds	r3, #1
 8009f12:	4a03      	ldr	r2, [pc, #12]	@ (8009f20 <vTaskSuspendAll+0x18>)
 8009f14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f16:	bf00      	nop
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	2000113c 	.word	0x2000113c

08009f24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f32:	4b42      	ldr	r3, [pc, #264]	@ (800a03c <xTaskResumeAll+0x118>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10b      	bne.n	8009f52 <xTaskResumeAll+0x2e>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	603b      	str	r3, [r7, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	e7fd      	b.n	8009f4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f52:	f001 f929 	bl	800b1a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f56:	4b39      	ldr	r3, [pc, #228]	@ (800a03c <xTaskResumeAll+0x118>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	4a37      	ldr	r2, [pc, #220]	@ (800a03c <xTaskResumeAll+0x118>)
 8009f5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f60:	4b36      	ldr	r3, [pc, #216]	@ (800a03c <xTaskResumeAll+0x118>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d162      	bne.n	800a02e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f68:	4b35      	ldr	r3, [pc, #212]	@ (800a040 <xTaskResumeAll+0x11c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d05e      	beq.n	800a02e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f70:	e02f      	b.n	8009fd2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f72:	4b34      	ldr	r3, [pc, #208]	@ (800a044 <xTaskResumeAll+0x120>)
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3318      	adds	r3, #24
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff f85a 	bl	8009038 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7ff f855 	bl	8009038 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f92:	4b2d      	ldr	r3, [pc, #180]	@ (800a048 <xTaskResumeAll+0x124>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d903      	bls.n	8009fa2 <xTaskResumeAll+0x7e>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9e:	4a2a      	ldr	r2, [pc, #168]	@ (800a048 <xTaskResumeAll+0x124>)
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4a27      	ldr	r2, [pc, #156]	@ (800a04c <xTaskResumeAll+0x128>)
 8009fb0:	441a      	add	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fe ffe0 	bl	8008f7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc2:	4b23      	ldr	r3, [pc, #140]	@ (800a050 <xTaskResumeAll+0x12c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d302      	bcc.n	8009fd2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009fcc:	4b21      	ldr	r3, [pc, #132]	@ (800a054 <xTaskResumeAll+0x130>)
 8009fce:	2201      	movs	r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	@ (800a044 <xTaskResumeAll+0x120>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1cb      	bne.n	8009f72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009fe0:	f000 fb58 	bl	800a694 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	@ (800a058 <xTaskResumeAll+0x134>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d010      	beq.n	800a012 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ff0:	f000 f846 	bl	800a080 <xTaskIncrementTick>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009ffa:	4b16      	ldr	r3, [pc, #88]	@ (800a054 <xTaskResumeAll+0x130>)
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3b01      	subs	r3, #1
 800a004:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1f1      	bne.n	8009ff0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a00c:	4b12      	ldr	r3, [pc, #72]	@ (800a058 <xTaskResumeAll+0x134>)
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a012:	4b10      	ldr	r3, [pc, #64]	@ (800a054 <xTaskResumeAll+0x130>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d009      	beq.n	800a02e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a01a:	2301      	movs	r3, #1
 800a01c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a01e:	4b0f      	ldr	r3, [pc, #60]	@ (800a05c <xTaskResumeAll+0x138>)
 800a020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a02e:	f001 f8ed 	bl	800b20c <vPortExitCritical>

	return xAlreadyYielded;
 800a032:	68bb      	ldr	r3, [r7, #8]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	2000113c 	.word	0x2000113c
 800a040:	20001114 	.word	0x20001114
 800a044:	200010d4 	.word	0x200010d4
 800a048:	2000111c 	.word	0x2000111c
 800a04c:	20000c44 	.word	0x20000c44
 800a050:	20000c40 	.word	0x20000c40
 800a054:	20001128 	.word	0x20001128
 800a058:	20001124 	.word	0x20001124
 800a05c:	e000ed04 	.word	0xe000ed04

0800a060 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a066:	4b05      	ldr	r3, [pc, #20]	@ (800a07c <xTaskGetTickCount+0x1c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a06c:	687b      	ldr	r3, [r7, #4]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20001118 	.word	0x20001118

0800a080 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a08a:	4b4f      	ldr	r3, [pc, #316]	@ (800a1c8 <xTaskIncrementTick+0x148>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f040 8090 	bne.w	800a1b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a094:	4b4d      	ldr	r3, [pc, #308]	@ (800a1cc <xTaskIncrementTick+0x14c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3301      	adds	r3, #1
 800a09a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a09c:	4a4b      	ldr	r2, [pc, #300]	@ (800a1cc <xTaskIncrementTick+0x14c>)
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d121      	bne.n	800a0ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0a8:	4b49      	ldr	r3, [pc, #292]	@ (800a1d0 <xTaskIncrementTick+0x150>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00b      	beq.n	800a0ca <xTaskIncrementTick+0x4a>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	603b      	str	r3, [r7, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <xTaskIncrementTick+0x46>
 800a0ca:	4b41      	ldr	r3, [pc, #260]	@ (800a1d0 <xTaskIncrementTick+0x150>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	4b40      	ldr	r3, [pc, #256]	@ (800a1d4 <xTaskIncrementTick+0x154>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a3e      	ldr	r2, [pc, #248]	@ (800a1d0 <xTaskIncrementTick+0x150>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	4a3e      	ldr	r2, [pc, #248]	@ (800a1d4 <xTaskIncrementTick+0x154>)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	4b3e      	ldr	r3, [pc, #248]	@ (800a1d8 <xTaskIncrementTick+0x158>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	4a3c      	ldr	r2, [pc, #240]	@ (800a1d8 <xTaskIncrementTick+0x158>)
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	f000 fad4 	bl	800a694 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0ec:	4b3b      	ldr	r3, [pc, #236]	@ (800a1dc <xTaskIncrementTick+0x15c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d349      	bcc.n	800a18a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0f6:	4b36      	ldr	r3, [pc, #216]	@ (800a1d0 <xTaskIncrementTick+0x150>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a100:	4b36      	ldr	r3, [pc, #216]	@ (800a1dc <xTaskIncrementTick+0x15c>)
 800a102:	f04f 32ff 	mov.w	r2, #4294967295
 800a106:	601a      	str	r2, [r3, #0]
					break;
 800a108:	e03f      	b.n	800a18a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10a:	4b31      	ldr	r3, [pc, #196]	@ (800a1d0 <xTaskIncrementTick+0x150>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d203      	bcs.n	800a12a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a122:	4a2e      	ldr	r2, [pc, #184]	@ (800a1dc <xTaskIncrementTick+0x15c>)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a128:	e02f      	b.n	800a18a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe ff82 	bl	8009038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	3318      	adds	r3, #24
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe ff79 	bl	8009038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a14a:	4b25      	ldr	r3, [pc, #148]	@ (800a1e0 <xTaskIncrementTick+0x160>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d903      	bls.n	800a15a <xTaskIncrementTick+0xda>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a156:	4a22      	ldr	r2, [pc, #136]	@ (800a1e0 <xTaskIncrementTick+0x160>)
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4a1f      	ldr	r2, [pc, #124]	@ (800a1e4 <xTaskIncrementTick+0x164>)
 800a168:	441a      	add	r2, r3
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	3304      	adds	r3, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fe ff04 	bl	8008f7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a17a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e8 <xTaskIncrementTick+0x168>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a180:	429a      	cmp	r2, r3
 800a182:	d3b8      	bcc.n	800a0f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a184:	2301      	movs	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a188:	e7b5      	b.n	800a0f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a18a:	4b17      	ldr	r3, [pc, #92]	@ (800a1e8 <xTaskIncrementTick+0x168>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a190:	4914      	ldr	r1, [pc, #80]	@ (800a1e4 <xTaskIncrementTick+0x164>)
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d901      	bls.n	800a1a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1a6:	4b11      	ldr	r3, [pc, #68]	@ (800a1ec <xTaskIncrementTick+0x16c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e004      	b.n	800a1be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f0 <xTaskIncrementTick+0x170>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	4a0d      	ldr	r2, [pc, #52]	@ (800a1f0 <xTaskIncrementTick+0x170>)
 800a1bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a1be:	697b      	ldr	r3, [r7, #20]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	2000113c 	.word	0x2000113c
 800a1cc:	20001118 	.word	0x20001118
 800a1d0:	200010cc 	.word	0x200010cc
 800a1d4:	200010d0 	.word	0x200010d0
 800a1d8:	2000112c 	.word	0x2000112c
 800a1dc:	20001134 	.word	0x20001134
 800a1e0:	2000111c 	.word	0x2000111c
 800a1e4:	20000c44 	.word	0x20000c44
 800a1e8:	20000c40 	.word	0x20000c40
 800a1ec:	20001128 	.word	0x20001128
 800a1f0:	20001124 	.word	0x20001124

0800a1f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1fa:	4b28      	ldr	r3, [pc, #160]	@ (800a29c <vTaskSwitchContext+0xa8>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a202:	4b27      	ldr	r3, [pc, #156]	@ (800a2a0 <vTaskSwitchContext+0xac>)
 800a204:	2201      	movs	r2, #1
 800a206:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a208:	e042      	b.n	800a290 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a20a:	4b25      	ldr	r3, [pc, #148]	@ (800a2a0 <vTaskSwitchContext+0xac>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a210:	4b24      	ldr	r3, [pc, #144]	@ (800a2a4 <vTaskSwitchContext+0xb0>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	e011      	b.n	800a23c <vTaskSwitchContext+0x48>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10b      	bne.n	800a236 <vTaskSwitchContext+0x42>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	607b      	str	r3, [r7, #4]
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	e7fd      	b.n	800a232 <vTaskSwitchContext+0x3e>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3b01      	subs	r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	491a      	ldr	r1, [pc, #104]	@ (800a2a8 <vTaskSwitchContext+0xb4>)
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0e3      	beq.n	800a218 <vTaskSwitchContext+0x24>
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	4613      	mov	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4a13      	ldr	r2, [pc, #76]	@ (800a2a8 <vTaskSwitchContext+0xb4>)
 800a25c:	4413      	add	r3, r2
 800a25e:	60bb      	str	r3, [r7, #8]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	605a      	str	r2, [r3, #4]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	3308      	adds	r3, #8
 800a272:	429a      	cmp	r2, r3
 800a274:	d104      	bne.n	800a280 <vTaskSwitchContext+0x8c>
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	605a      	str	r2, [r3, #4]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4a09      	ldr	r2, [pc, #36]	@ (800a2ac <vTaskSwitchContext+0xb8>)
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	4a06      	ldr	r2, [pc, #24]	@ (800a2a4 <vTaskSwitchContext+0xb0>)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6013      	str	r3, [r2, #0]
}
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	2000113c 	.word	0x2000113c
 800a2a0:	20001128 	.word	0x20001128
 800a2a4:	2000111c 	.word	0x2000111c
 800a2a8:	20000c44 	.word	0x20000c44
 800a2ac:	20000c40 	.word	0x20000c40

0800a2b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10b      	bne.n	800a2d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	60fb      	str	r3, [r7, #12]
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2d8:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <vTaskPlaceOnEventList+0x48>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3318      	adds	r3, #24
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7fe fe70 	bl	8008fc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	6838      	ldr	r0, [r7, #0]
 800a2ea:	f000 fa81 	bl	800a7f0 <prvAddCurrentTaskToDelayedList>
}
 800a2ee:	bf00      	nop
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000c40 	.word	0x20000c40

0800a2fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10b      	bne.n	800a326 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	617b      	str	r3, [r7, #20]
}
 800a320:	bf00      	nop
 800a322:	bf00      	nop
 800a324:	e7fd      	b.n	800a322 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a326:	4b0a      	ldr	r3, [pc, #40]	@ (800a350 <vTaskPlaceOnEventListRestricted+0x54>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3318      	adds	r3, #24
 800a32c:	4619      	mov	r1, r3
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fe fe25 	bl	8008f7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a33a:	f04f 33ff 	mov.w	r3, #4294967295
 800a33e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	68b8      	ldr	r0, [r7, #8]
 800a344:	f000 fa54 	bl	800a7f0 <prvAddCurrentTaskToDelayedList>
	}
 800a348:	bf00      	nop
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000c40 	.word	0x20000c40

0800a354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10b      	bne.n	800a382 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	60fb      	str	r3, [r7, #12]
}
 800a37c:	bf00      	nop
 800a37e:	bf00      	nop
 800a380:	e7fd      	b.n	800a37e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	3318      	adds	r3, #24
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fe56 	bl	8009038 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a38c:	4b1d      	ldr	r3, [pc, #116]	@ (800a404 <xTaskRemoveFromEventList+0xb0>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d11d      	bne.n	800a3d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	3304      	adds	r3, #4
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fe4d 	bl	8009038 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a2:	4b19      	ldr	r3, [pc, #100]	@ (800a408 <xTaskRemoveFromEventList+0xb4>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d903      	bls.n	800a3b2 <xTaskRemoveFromEventList+0x5e>
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ae:	4a16      	ldr	r2, [pc, #88]	@ (800a408 <xTaskRemoveFromEventList+0xb4>)
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4a13      	ldr	r2, [pc, #76]	@ (800a40c <xTaskRemoveFromEventList+0xb8>)
 800a3c0:	441a      	add	r2, r3
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f7fe fdd8 	bl	8008f7e <vListInsertEnd>
 800a3ce:	e005      	b.n	800a3dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	3318      	adds	r3, #24
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	480e      	ldr	r0, [pc, #56]	@ (800a410 <xTaskRemoveFromEventList+0xbc>)
 800a3d8:	f7fe fdd1 	bl	8008f7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a414 <xTaskRemoveFromEventList+0xc0>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d905      	bls.n	800a3f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a418 <xTaskRemoveFromEventList+0xc4>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e001      	b.n	800a3fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3fa:	697b      	ldr	r3, [r7, #20]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	2000113c 	.word	0x2000113c
 800a408:	2000111c 	.word	0x2000111c
 800a40c:	20000c44 	.word	0x20000c44
 800a410:	200010d4 	.word	0x200010d4
 800a414:	20000c40 	.word	0x20000c40
 800a418:	20001128 	.word	0x20001128

0800a41c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a424:	4b06      	ldr	r3, [pc, #24]	@ (800a440 <vTaskInternalSetTimeOutState+0x24>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <vTaskInternalSetTimeOutState+0x28>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	605a      	str	r2, [r3, #4]
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	2000112c 	.word	0x2000112c
 800a444:	20001118 	.word	0x20001118

0800a448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10b      	bne.n	800a470 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	613b      	str	r3, [r7, #16]
}
 800a46a:	bf00      	nop
 800a46c:	bf00      	nop
 800a46e:	e7fd      	b.n	800a46c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10b      	bne.n	800a48e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	60fb      	str	r3, [r7, #12]
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	e7fd      	b.n	800a48a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a48e:	f000 fe8b 	bl	800b1a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a492:	4b1d      	ldr	r3, [pc, #116]	@ (800a508 <xTaskCheckForTimeOut+0xc0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4aa:	d102      	bne.n	800a4b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61fb      	str	r3, [r7, #28]
 800a4b0:	e023      	b.n	800a4fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b15      	ldr	r3, [pc, #84]	@ (800a50c <xTaskCheckForTimeOut+0xc4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d007      	beq.n	800a4ce <xTaskCheckForTimeOut+0x86>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d302      	bcc.n	800a4ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	61fb      	str	r3, [r7, #28]
 800a4cc:	e015      	b.n	800a4fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d20b      	bcs.n	800a4f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ff99 	bl	800a41c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	61fb      	str	r3, [r7, #28]
 800a4ee:	e004      	b.n	800a4fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4fa:	f000 fe87 	bl	800b20c <vPortExitCritical>

	return xReturn;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3720      	adds	r7, #32
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20001118 	.word	0x20001118
 800a50c:	2000112c 	.word	0x2000112c

0800a510 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a510:	b480      	push	{r7}
 800a512:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a514:	4b03      	ldr	r3, [pc, #12]	@ (800a524 <vTaskMissedYield+0x14>)
 800a516:	2201      	movs	r2, #1
 800a518:	601a      	str	r2, [r3, #0]
}
 800a51a:	bf00      	nop
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	20001128 	.word	0x20001128

0800a528 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a530:	f000 f852 	bl	800a5d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a534:	4b06      	ldr	r3, [pc, #24]	@ (800a550 <prvIdleTask+0x28>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d9f9      	bls.n	800a530 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a53c:	4b05      	ldr	r3, [pc, #20]	@ (800a554 <prvIdleTask+0x2c>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a54c:	e7f0      	b.n	800a530 <prvIdleTask+0x8>
 800a54e:	bf00      	nop
 800a550:	20000c44 	.word	0x20000c44
 800a554:	e000ed04 	.word	0xe000ed04

0800a558 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a55e:	2300      	movs	r3, #0
 800a560:	607b      	str	r3, [r7, #4]
 800a562:	e00c      	b.n	800a57e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4a12      	ldr	r2, [pc, #72]	@ (800a5b8 <prvInitialiseTaskLists+0x60>)
 800a570:	4413      	add	r3, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fcd6 	bl	8008f24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3301      	adds	r3, #1
 800a57c:	607b      	str	r3, [r7, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b37      	cmp	r3, #55	@ 0x37
 800a582:	d9ef      	bls.n	800a564 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a584:	480d      	ldr	r0, [pc, #52]	@ (800a5bc <prvInitialiseTaskLists+0x64>)
 800a586:	f7fe fccd 	bl	8008f24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a58a:	480d      	ldr	r0, [pc, #52]	@ (800a5c0 <prvInitialiseTaskLists+0x68>)
 800a58c:	f7fe fcca 	bl	8008f24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a590:	480c      	ldr	r0, [pc, #48]	@ (800a5c4 <prvInitialiseTaskLists+0x6c>)
 800a592:	f7fe fcc7 	bl	8008f24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a596:	480c      	ldr	r0, [pc, #48]	@ (800a5c8 <prvInitialiseTaskLists+0x70>)
 800a598:	f7fe fcc4 	bl	8008f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a59c:	480b      	ldr	r0, [pc, #44]	@ (800a5cc <prvInitialiseTaskLists+0x74>)
 800a59e:	f7fe fcc1 	bl	8008f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d0 <prvInitialiseTaskLists+0x78>)
 800a5a4:	4a05      	ldr	r2, [pc, #20]	@ (800a5bc <prvInitialiseTaskLists+0x64>)
 800a5a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d4 <prvInitialiseTaskLists+0x7c>)
 800a5aa:	4a05      	ldr	r2, [pc, #20]	@ (800a5c0 <prvInitialiseTaskLists+0x68>)
 800a5ac:	601a      	str	r2, [r3, #0]
}
 800a5ae:	bf00      	nop
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20000c44 	.word	0x20000c44
 800a5bc:	200010a4 	.word	0x200010a4
 800a5c0:	200010b8 	.word	0x200010b8
 800a5c4:	200010d4 	.word	0x200010d4
 800a5c8:	200010e8 	.word	0x200010e8
 800a5cc:	20001100 	.word	0x20001100
 800a5d0:	200010cc 	.word	0x200010cc
 800a5d4:	200010d0 	.word	0x200010d0

0800a5d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5de:	e019      	b.n	800a614 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5e0:	f000 fde2 	bl	800b1a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e4:	4b10      	ldr	r3, [pc, #64]	@ (800a628 <prvCheckTasksWaitingTermination+0x50>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fd21 	bl	8009038 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a62c <prvCheckTasksWaitingTermination+0x54>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	4a0b      	ldr	r2, [pc, #44]	@ (800a62c <prvCheckTasksWaitingTermination+0x54>)
 800a5fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a600:	4b0b      	ldr	r3, [pc, #44]	@ (800a630 <prvCheckTasksWaitingTermination+0x58>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3b01      	subs	r3, #1
 800a606:	4a0a      	ldr	r2, [pc, #40]	@ (800a630 <prvCheckTasksWaitingTermination+0x58>)
 800a608:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a60a:	f000 fdff 	bl	800b20c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f810 	bl	800a634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a614:	4b06      	ldr	r3, [pc, #24]	@ (800a630 <prvCheckTasksWaitingTermination+0x58>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e1      	bne.n	800a5e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a61c:	bf00      	nop
 800a61e:	bf00      	nop
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	200010e8 	.word	0x200010e8
 800a62c:	20001114 	.word	0x20001114
 800a630:	200010fc 	.word	0x200010fc

0800a634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a642:	2b00      	cmp	r3, #0
 800a644:	d108      	bne.n	800a658 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 ff9c 	bl	800b588 <vPortFree>
				vPortFree( pxTCB );
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 ff99 	bl	800b588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a656:	e019      	b.n	800a68c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d103      	bne.n	800a66a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 ff90 	bl	800b588 <vPortFree>
	}
 800a668:	e010      	b.n	800a68c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a670:	2b02      	cmp	r3, #2
 800a672:	d00b      	beq.n	800a68c <prvDeleteTCB+0x58>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	60fb      	str	r3, [r7, #12]
}
 800a686:	bf00      	nop
 800a688:	bf00      	nop
 800a68a:	e7fd      	b.n	800a688 <prvDeleteTCB+0x54>
	}
 800a68c:	bf00      	nop
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a69a:	4b0c      	ldr	r3, [pc, #48]	@ (800a6cc <prvResetNextTaskUnblockTime+0x38>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d104      	bne.n	800a6ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d0 <prvResetNextTaskUnblockTime+0x3c>)
 800a6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6ac:	e008      	b.n	800a6c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ae:	4b07      	ldr	r3, [pc, #28]	@ (800a6cc <prvResetNextTaskUnblockTime+0x38>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	4a04      	ldr	r2, [pc, #16]	@ (800a6d0 <prvResetNextTaskUnblockTime+0x3c>)
 800a6be:	6013      	str	r3, [r2, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	200010cc 	.word	0x200010cc
 800a6d0:	20001134 	.word	0x20001134

0800a6d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6da:	4b0b      	ldr	r3, [pc, #44]	@ (800a708 <xTaskGetSchedulerState+0x34>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d102      	bne.n	800a6e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	607b      	str	r3, [r7, #4]
 800a6e6:	e008      	b.n	800a6fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6e8:	4b08      	ldr	r3, [pc, #32]	@ (800a70c <xTaskGetSchedulerState+0x38>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	607b      	str	r3, [r7, #4]
 800a6f4:	e001      	b.n	800a6fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6fa:	687b      	ldr	r3, [r7, #4]
	}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	20001120 	.word	0x20001120
 800a70c:	2000113c 	.word	0x2000113c

0800a710 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a71c:	2300      	movs	r3, #0
 800a71e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d058      	beq.n	800a7d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a726:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e4 <xTaskPriorityDisinherit+0xd4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d00b      	beq.n	800a748 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	60fb      	str	r3, [r7, #12]
}
 800a742:	bf00      	nop
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10b      	bne.n	800a768 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	60bb      	str	r3, [r7, #8]
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	e7fd      	b.n	800a764 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a76c:	1e5a      	subs	r2, r3, #1
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d02c      	beq.n	800a7d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a782:	2b00      	cmp	r3, #0
 800a784:	d128      	bne.n	800a7d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	3304      	adds	r3, #4
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fc54 	bl	8009038 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800a7e8 <xTaskPriorityDisinherit+0xd8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d903      	bls.n	800a7b8 <xTaskPriorityDisinherit+0xa8>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b4:	4a0c      	ldr	r2, [pc, #48]	@ (800a7e8 <xTaskPriorityDisinherit+0xd8>)
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4a09      	ldr	r2, [pc, #36]	@ (800a7ec <xTaskPriorityDisinherit+0xdc>)
 800a7c6:	441a      	add	r2, r3
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4610      	mov	r0, r2
 800a7d0:	f7fe fbd5 	bl	8008f7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7d8:	697b      	ldr	r3, [r7, #20]
	}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000c40 	.word	0x20000c40
 800a7e8:	2000111c 	.word	0x2000111c
 800a7ec:	20000c44 	.word	0x20000c44

0800a7f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7fa:	4b21      	ldr	r3, [pc, #132]	@ (800a880 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a800:	4b20      	ldr	r3, [pc, #128]	@ (800a884 <prvAddCurrentTaskToDelayedList+0x94>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3304      	adds	r3, #4
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fc16 	bl	8009038 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d10a      	bne.n	800a82a <prvAddCurrentTaskToDelayedList+0x3a>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a81a:	4b1a      	ldr	r3, [pc, #104]	@ (800a884 <prvAddCurrentTaskToDelayedList+0x94>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3304      	adds	r3, #4
 800a820:	4619      	mov	r1, r3
 800a822:	4819      	ldr	r0, [pc, #100]	@ (800a888 <prvAddCurrentTaskToDelayedList+0x98>)
 800a824:	f7fe fbab 	bl	8008f7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a828:	e026      	b.n	800a878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4413      	add	r3, r2
 800a830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a832:	4b14      	ldr	r3, [pc, #80]	@ (800a884 <prvAddCurrentTaskToDelayedList+0x94>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d209      	bcs.n	800a856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a842:	4b12      	ldr	r3, [pc, #72]	@ (800a88c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	4b0f      	ldr	r3, [pc, #60]	@ (800a884 <prvAddCurrentTaskToDelayedList+0x94>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4619      	mov	r1, r3
 800a84e:	4610      	mov	r0, r2
 800a850:	f7fe fbb9 	bl	8008fc6 <vListInsert>
}
 800a854:	e010      	b.n	800a878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a856:	4b0e      	ldr	r3, [pc, #56]	@ (800a890 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	4b0a      	ldr	r3, [pc, #40]	@ (800a884 <prvAddCurrentTaskToDelayedList+0x94>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3304      	adds	r3, #4
 800a860:	4619      	mov	r1, r3
 800a862:	4610      	mov	r0, r2
 800a864:	f7fe fbaf 	bl	8008fc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a868:	4b0a      	ldr	r3, [pc, #40]	@ (800a894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d202      	bcs.n	800a878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a872:	4a08      	ldr	r2, [pc, #32]	@ (800a894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	6013      	str	r3, [r2, #0]
}
 800a878:	bf00      	nop
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20001118 	.word	0x20001118
 800a884:	20000c40 	.word	0x20000c40
 800a888:	20001100 	.word	0x20001100
 800a88c:	200010d0 	.word	0x200010d0
 800a890:	200010cc 	.word	0x200010cc
 800a894:	20001134 	.word	0x20001134

0800a898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08a      	sub	sp, #40	@ 0x28
 800a89c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8a2:	f000 fb13 	bl	800aecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a91c <xTimerCreateTimerTask+0x84>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d021      	beq.n	800a8f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8b6:	1d3a      	adds	r2, r7, #4
 800a8b8:	f107 0108 	add.w	r1, r7, #8
 800a8bc:	f107 030c 	add.w	r3, r7, #12
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fb15 	bl	8008ef0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	9202      	str	r2, [sp, #8]
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	460a      	mov	r2, r1
 800a8d8:	4911      	ldr	r1, [pc, #68]	@ (800a920 <xTimerCreateTimerTask+0x88>)
 800a8da:	4812      	ldr	r0, [pc, #72]	@ (800a924 <xTimerCreateTimerTask+0x8c>)
 800a8dc:	f7ff f8d0 	bl	8009a80 <xTaskCreateStatic>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	4a11      	ldr	r2, [pc, #68]	@ (800a928 <xTimerCreateTimerTask+0x90>)
 800a8e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8e6:	4b10      	ldr	r3, [pc, #64]	@ (800a928 <xTimerCreateTimerTask+0x90>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	613b      	str	r3, [r7, #16]
}
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
 800a90e:	e7fd      	b.n	800a90c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a910:	697b      	ldr	r3, [r7, #20]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20001170 	.word	0x20001170
 800a920:	0800e9c8 	.word	0x0800e9c8
 800a924:	0800aa65 	.word	0x0800aa65
 800a928:	20001174 	.word	0x20001174

0800a92c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08a      	sub	sp, #40	@ 0x28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
 800a938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10b      	bne.n	800a95c <xTimerGenericCommand+0x30>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	623b      	str	r3, [r7, #32]
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	e7fd      	b.n	800a958 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a95c:	4b19      	ldr	r3, [pc, #100]	@ (800a9c4 <xTimerGenericCommand+0x98>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d02a      	beq.n	800a9ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b05      	cmp	r3, #5
 800a974:	dc18      	bgt.n	800a9a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a976:	f7ff fead 	bl	800a6d4 <xTaskGetSchedulerState>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d109      	bne.n	800a994 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a980:	4b10      	ldr	r3, [pc, #64]	@ (800a9c4 <xTimerGenericCommand+0x98>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	f107 0110 	add.w	r1, r7, #16
 800a988:	2300      	movs	r3, #0
 800a98a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a98c:	f7fe fc88 	bl	80092a0 <xQueueGenericSend>
 800a990:	6278      	str	r0, [r7, #36]	@ 0x24
 800a992:	e012      	b.n	800a9ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a994:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c4 <xTimerGenericCommand+0x98>)
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	f107 0110 	add.w	r1, r7, #16
 800a99c:	2300      	movs	r3, #0
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f7fe fc7e 	bl	80092a0 <xQueueGenericSend>
 800a9a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9a6:	e008      	b.n	800a9ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9a8:	4b06      	ldr	r3, [pc, #24]	@ (800a9c4 <xTimerGenericCommand+0x98>)
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	f107 0110 	add.w	r1, r7, #16
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	f7fe fd76 	bl	80094a4 <xQueueGenericSendFromISR>
 800a9b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3728      	adds	r7, #40	@ 0x28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20001170 	.word	0x20001170

0800a9c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af02      	add	r7, sp, #8
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d2:	4b23      	ldr	r3, [pc, #140]	@ (800aa60 <prvProcessExpiredTimer+0x98>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe fb29 	bl	8009038 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9ec:	f003 0304 	and.w	r3, r3, #4
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d023      	beq.n	800aa3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	699a      	ldr	r2, [r3, #24]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	18d1      	adds	r1, r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	6978      	ldr	r0, [r7, #20]
 800aa02:	f000 f8d5 	bl	800abb0 <prvInsertTimerInActiveList>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d020      	beq.n	800aa4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	2300      	movs	r3, #0
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	2100      	movs	r1, #0
 800aa16:	6978      	ldr	r0, [r7, #20]
 800aa18:	f7ff ff88 	bl	800a92c <xTimerGenericCommand>
 800aa1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d114      	bne.n	800aa4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	60fb      	str	r3, [r7, #12]
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa42:	f023 0301 	bic.w	r3, r3, #1
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	6978      	ldr	r0, [r7, #20]
 800aa54:	4798      	blx	r3
}
 800aa56:	bf00      	nop
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20001168 	.word	0x20001168

0800aa64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa6c:	f107 0308 	add.w	r3, r7, #8
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f859 	bl	800ab28 <prvGetNextExpireTime>
 800aa76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 f805 	bl	800aa8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa82:	f000 f8d7 	bl	800ac34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa86:	bf00      	nop
 800aa88:	e7f0      	b.n	800aa6c <prvTimerTask+0x8>
	...

0800aa8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa96:	f7ff fa37 	bl	8009f08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa9a:	f107 0308 	add.w	r3, r7, #8
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 f866 	bl	800ab70 <prvSampleTimeNow>
 800aaa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d130      	bne.n	800ab0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10a      	bne.n	800aac8 <prvProcessTimerOrBlockTask+0x3c>
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d806      	bhi.n	800aac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aaba:	f7ff fa33 	bl	8009f24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aabe:	68f9      	ldr	r1, [r7, #12]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff ff81 	bl	800a9c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aac6:	e024      	b.n	800ab12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d008      	beq.n	800aae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aace:	4b13      	ldr	r3, [pc, #76]	@ (800ab1c <prvProcessTimerOrBlockTask+0x90>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <prvProcessTimerOrBlockTask+0x50>
 800aad8:	2301      	movs	r3, #1
 800aada:	e000      	b.n	800aade <prvProcessTimerOrBlockTask+0x52>
 800aadc:	2300      	movs	r3, #0
 800aade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aae0:	4b0f      	ldr	r3, [pc, #60]	@ (800ab20 <prvProcessTimerOrBlockTask+0x94>)
 800aae2:	6818      	ldr	r0, [r3, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7fe ff93 	bl	8009a18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aaf2:	f7ff fa17 	bl	8009f24 <xTaskResumeAll>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aafc:	4b09      	ldr	r3, [pc, #36]	@ (800ab24 <prvProcessTimerOrBlockTask+0x98>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	f3bf 8f6f 	isb	sy
}
 800ab0c:	e001      	b.n	800ab12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab0e:	f7ff fa09 	bl	8009f24 <xTaskResumeAll>
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	2000116c 	.word	0x2000116c
 800ab20:	20001170 	.word	0x20001170
 800ab24:	e000ed04 	.word	0xe000ed04

0800ab28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab30:	4b0e      	ldr	r3, [pc, #56]	@ (800ab6c <prvGetNextExpireTime+0x44>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <prvGetNextExpireTime+0x16>
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	e000      	b.n	800ab40 <prvGetNextExpireTime+0x18>
 800ab3e:	2200      	movs	r2, #0
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d105      	bne.n	800ab58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <prvGetNextExpireTime+0x44>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	e001      	b.n	800ab5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	20001168 	.word	0x20001168

0800ab70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab78:	f7ff fa72 	bl	800a060 <xTaskGetTickCount>
 800ab7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab7e:	4b0b      	ldr	r3, [pc, #44]	@ (800abac <prvSampleTimeNow+0x3c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d205      	bcs.n	800ab94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab88:	f000 f93a 	bl	800ae00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e002      	b.n	800ab9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab9a:	4a04      	ldr	r2, [pc, #16]	@ (800abac <prvSampleTimeNow+0x3c>)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aba0:	68fb      	ldr	r3, [r7, #12]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20001178 	.word	0x20001178

0800abb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d812      	bhi.n	800abfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	1ad2      	subs	r2, r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d302      	bcc.n	800abea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800abe4:	2301      	movs	r3, #1
 800abe6:	617b      	str	r3, [r7, #20]
 800abe8:	e01b      	b.n	800ac22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800abea:	4b10      	ldr	r3, [pc, #64]	@ (800ac2c <prvInsertTimerInActiveList+0x7c>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	4610      	mov	r0, r2
 800abf6:	f7fe f9e6 	bl	8008fc6 <vListInsert>
 800abfa:	e012      	b.n	800ac22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d206      	bcs.n	800ac12 <prvInsertTimerInActiveList+0x62>
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d302      	bcc.n	800ac12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]
 800ac10:	e007      	b.n	800ac22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac12:	4b07      	ldr	r3, [pc, #28]	@ (800ac30 <prvInsertTimerInActiveList+0x80>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f7fe f9d2 	bl	8008fc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac22:	697b      	ldr	r3, [r7, #20]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	2000116c 	.word	0x2000116c
 800ac30:	20001168 	.word	0x20001168

0800ac34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08e      	sub	sp, #56	@ 0x38
 800ac38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac3a:	e0ce      	b.n	800adda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	da19      	bge.n	800ac76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac42:	1d3b      	adds	r3, r7, #4
 800ac44:	3304      	adds	r3, #4
 800ac46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10b      	bne.n	800ac66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	61fb      	str	r3, [r7, #28]
}
 800ac60:	bf00      	nop
 800ac62:	bf00      	nop
 800ac64:	e7fd      	b.n	800ac62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac6c:	6850      	ldr	r0, [r2, #4]
 800ac6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac70:	6892      	ldr	r2, [r2, #8]
 800ac72:	4611      	mov	r1, r2
 800ac74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f2c0 80ae 	blt.w	800adda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe f9d2 	bl	8009038 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac94:	463b      	mov	r3, r7
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff ff6a 	bl	800ab70 <prvSampleTimeNow>
 800ac9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b09      	cmp	r3, #9
 800aca2:	f200 8097 	bhi.w	800add4 <prvProcessReceivedCommands+0x1a0>
 800aca6:	a201      	add	r2, pc, #4	@ (adr r2, 800acac <prvProcessReceivedCommands+0x78>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800acd5 	.word	0x0800acd5
 800acb0:	0800acd5 	.word	0x0800acd5
 800acb4:	0800acd5 	.word	0x0800acd5
 800acb8:	0800ad4b 	.word	0x0800ad4b
 800acbc:	0800ad5f 	.word	0x0800ad5f
 800acc0:	0800adab 	.word	0x0800adab
 800acc4:	0800acd5 	.word	0x0800acd5
 800acc8:	0800acd5 	.word	0x0800acd5
 800accc:	0800ad4b 	.word	0x0800ad4b
 800acd0:	0800ad5f 	.word	0x0800ad5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acda:	f043 0301 	orr.w	r3, r3, #1
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	18d1      	adds	r1, r2, r3
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acf4:	f7ff ff5c 	bl	800abb0 <prvInsertTimerInActiveList>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d06c      	beq.n	800add8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d061      	beq.n	800add8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	441a      	add	r2, r3
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	2300      	movs	r3, #0
 800ad22:	2100      	movs	r1, #0
 800ad24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad26:	f7ff fe01 	bl	800a92c <xTimerGenericCommand>
 800ad2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d152      	bne.n	800add8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	61bb      	str	r3, [r7, #24]
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	e7fd      	b.n	800ad46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad50:	f023 0301 	bic.w	r3, r3, #1
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ad5c:	e03d      	b.n	800adda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad64:	f043 0301 	orr.w	r3, r3, #1
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10b      	bne.n	800ad96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	617b      	str	r3, [r7, #20]
}
 800ad90:	bf00      	nop
 800ad92:	bf00      	nop
 800ad94:	e7fd      	b.n	800ad92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad98:	699a      	ldr	r2, [r3, #24]
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	18d1      	adds	r1, r2, r3
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ada2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ada4:	f7ff ff04 	bl	800abb0 <prvInsertTimerInActiveList>
					break;
 800ada8:	e017      	b.n	800adda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adb0:	f003 0302 	and.w	r3, r3, #2
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d103      	bne.n	800adc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800adb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adba:	f000 fbe5 	bl	800b588 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adbe:	e00c      	b.n	800adda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adc6:	f023 0301 	bic.w	r3, r3, #1
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800add2:	e002      	b.n	800adda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800add4:	bf00      	nop
 800add6:	e000      	b.n	800adda <prvProcessReceivedCommands+0x1a6>
					break;
 800add8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adda:	4b08      	ldr	r3, [pc, #32]	@ (800adfc <prvProcessReceivedCommands+0x1c8>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	1d39      	adds	r1, r7, #4
 800ade0:	2200      	movs	r2, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fbfc 	bl	80095e0 <xQueueReceive>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	f47f af26 	bne.w	800ac3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800adf0:	bf00      	nop
 800adf2:	bf00      	nop
 800adf4:	3730      	adds	r7, #48	@ 0x30
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20001170 	.word	0x20001170

0800ae00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b088      	sub	sp, #32
 800ae04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae06:	e049      	b.n	800ae9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae08:	4b2e      	ldr	r3, [pc, #184]	@ (800aec4 <prvSwitchTimerLists+0xc4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae12:	4b2c      	ldr	r3, [pc, #176]	@ (800aec4 <prvSwitchTimerLists+0xc4>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3304      	adds	r3, #4
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fe f909 	bl	8009038 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d02f      	beq.n	800ae9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d90e      	bls.n	800ae6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae5a:	4b1a      	ldr	r3, [pc, #104]	@ (800aec4 <prvSwitchTimerLists+0xc4>)
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3304      	adds	r3, #4
 800ae62:	4619      	mov	r1, r3
 800ae64:	4610      	mov	r0, r2
 800ae66:	f7fe f8ae 	bl	8008fc6 <vListInsert>
 800ae6a:	e017      	b.n	800ae9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	2300      	movs	r3, #0
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	2100      	movs	r1, #0
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff fd58 	bl	800a92c <xTimerGenericCommand>
 800ae7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10b      	bne.n	800ae9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ae84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	603b      	str	r3, [r7, #0]
}
 800ae96:	bf00      	nop
 800ae98:	bf00      	nop
 800ae9a:	e7fd      	b.n	800ae98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae9c:	4b09      	ldr	r3, [pc, #36]	@ (800aec4 <prvSwitchTimerLists+0xc4>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1b0      	bne.n	800ae08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aea6:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <prvSwitchTimerLists+0xc4>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aeac:	4b06      	ldr	r3, [pc, #24]	@ (800aec8 <prvSwitchTimerLists+0xc8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a04      	ldr	r2, [pc, #16]	@ (800aec4 <prvSwitchTimerLists+0xc4>)
 800aeb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aeb4:	4a04      	ldr	r2, [pc, #16]	@ (800aec8 <prvSwitchTimerLists+0xc8>)
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6013      	str	r3, [r2, #0]
}
 800aeba:	bf00      	nop
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	20001168 	.word	0x20001168
 800aec8:	2000116c 	.word	0x2000116c

0800aecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aed2:	f000 f969 	bl	800b1a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aed6:	4b15      	ldr	r3, [pc, #84]	@ (800af2c <prvCheckForValidListAndQueue+0x60>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d120      	bne.n	800af20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aede:	4814      	ldr	r0, [pc, #80]	@ (800af30 <prvCheckForValidListAndQueue+0x64>)
 800aee0:	f7fe f820 	bl	8008f24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aee4:	4813      	ldr	r0, [pc, #76]	@ (800af34 <prvCheckForValidListAndQueue+0x68>)
 800aee6:	f7fe f81d 	bl	8008f24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aeea:	4b13      	ldr	r3, [pc, #76]	@ (800af38 <prvCheckForValidListAndQueue+0x6c>)
 800aeec:	4a10      	ldr	r2, [pc, #64]	@ (800af30 <prvCheckForValidListAndQueue+0x64>)
 800aeee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aef0:	4b12      	ldr	r3, [pc, #72]	@ (800af3c <prvCheckForValidListAndQueue+0x70>)
 800aef2:	4a10      	ldr	r2, [pc, #64]	@ (800af34 <prvCheckForValidListAndQueue+0x68>)
 800aef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aef6:	2300      	movs	r3, #0
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	4b11      	ldr	r3, [pc, #68]	@ (800af40 <prvCheckForValidListAndQueue+0x74>)
 800aefc:	4a11      	ldr	r2, [pc, #68]	@ (800af44 <prvCheckForValidListAndQueue+0x78>)
 800aefe:	2110      	movs	r1, #16
 800af00:	200a      	movs	r0, #10
 800af02:	f7fe f92d 	bl	8009160 <xQueueGenericCreateStatic>
 800af06:	4603      	mov	r3, r0
 800af08:	4a08      	ldr	r2, [pc, #32]	@ (800af2c <prvCheckForValidListAndQueue+0x60>)
 800af0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af0c:	4b07      	ldr	r3, [pc, #28]	@ (800af2c <prvCheckForValidListAndQueue+0x60>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d005      	beq.n	800af20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af14:	4b05      	ldr	r3, [pc, #20]	@ (800af2c <prvCheckForValidListAndQueue+0x60>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	490b      	ldr	r1, [pc, #44]	@ (800af48 <prvCheckForValidListAndQueue+0x7c>)
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe fd52 	bl	80099c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af20:	f000 f974 	bl	800b20c <vPortExitCritical>
}
 800af24:	bf00      	nop
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20001170 	.word	0x20001170
 800af30:	20001140 	.word	0x20001140
 800af34:	20001154 	.word	0x20001154
 800af38:	20001168 	.word	0x20001168
 800af3c:	2000116c 	.word	0x2000116c
 800af40:	2000121c 	.word	0x2000121c
 800af44:	2000117c 	.word	0x2000117c
 800af48:	0800e9d0 	.word	0x0800e9d0

0800af4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	3b04      	subs	r3, #4
 800af5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800af64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3b04      	subs	r3, #4
 800af6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f023 0201 	bic.w	r2, r3, #1
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3b04      	subs	r3, #4
 800af7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af7c:	4a0c      	ldr	r2, [pc, #48]	@ (800afb0 <pxPortInitialiseStack+0x64>)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3b14      	subs	r3, #20
 800af86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3b04      	subs	r3, #4
 800af92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f06f 0202 	mvn.w	r2, #2
 800af9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3b20      	subs	r3, #32
 800afa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afa2:	68fb      	ldr	r3, [r7, #12]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	0800afb5 	.word	0x0800afb5

0800afb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afbe:	4b13      	ldr	r3, [pc, #76]	@ (800b00c <prvTaskExitError+0x58>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc6:	d00b      	beq.n	800afe0 <prvTaskExitError+0x2c>
	__asm volatile
 800afc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afcc:	f383 8811 	msr	BASEPRI, r3
 800afd0:	f3bf 8f6f 	isb	sy
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	60fb      	str	r3, [r7, #12]
}
 800afda:	bf00      	nop
 800afdc:	bf00      	nop
 800afde:	e7fd      	b.n	800afdc <prvTaskExitError+0x28>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	60bb      	str	r3, [r7, #8]
}
 800aff2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aff4:	bf00      	nop
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0fc      	beq.n	800aff6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	20000010 	.word	0x20000010

0800b010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b010:	4b07      	ldr	r3, [pc, #28]	@ (800b030 <pxCurrentTCBConst2>)
 800b012:	6819      	ldr	r1, [r3, #0]
 800b014:	6808      	ldr	r0, [r1, #0]
 800b016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01a:	f380 8809 	msr	PSP, r0
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f380 8811 	msr	BASEPRI, r0
 800b02a:	4770      	bx	lr
 800b02c:	f3af 8000 	nop.w

0800b030 <pxCurrentTCBConst2>:
 800b030:	20000c40 	.word	0x20000c40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop

0800b038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b038:	4808      	ldr	r0, [pc, #32]	@ (800b05c <prvPortStartFirstTask+0x24>)
 800b03a:	6800      	ldr	r0, [r0, #0]
 800b03c:	6800      	ldr	r0, [r0, #0]
 800b03e:	f380 8808 	msr	MSP, r0
 800b042:	f04f 0000 	mov.w	r0, #0
 800b046:	f380 8814 	msr	CONTROL, r0
 800b04a:	b662      	cpsie	i
 800b04c:	b661      	cpsie	f
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	df00      	svc	0
 800b058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b05a:	bf00      	nop
 800b05c:	e000ed08 	.word	0xe000ed08

0800b060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b066:	4b47      	ldr	r3, [pc, #284]	@ (800b184 <xPortStartScheduler+0x124>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a47      	ldr	r2, [pc, #284]	@ (800b188 <xPortStartScheduler+0x128>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d10b      	bne.n	800b088 <xPortStartScheduler+0x28>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	613b      	str	r3, [r7, #16]
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b088:	4b3e      	ldr	r3, [pc, #248]	@ (800b184 <xPortStartScheduler+0x124>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a3f      	ldr	r2, [pc, #252]	@ (800b18c <xPortStartScheduler+0x12c>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d10b      	bne.n	800b0aa <xPortStartScheduler+0x4a>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60fb      	str	r3, [r7, #12]
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	e7fd      	b.n	800b0a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0aa:	4b39      	ldr	r3, [pc, #228]	@ (800b190 <xPortStartScheduler+0x130>)
 800b0ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	22ff      	movs	r2, #255	@ 0xff
 800b0ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	4b31      	ldr	r3, [pc, #196]	@ (800b194 <xPortStartScheduler+0x134>)
 800b0d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0d2:	4b31      	ldr	r3, [pc, #196]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0d8:	e009      	b.n	800b0ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b0da:	4b2f      	ldr	r3, [pc, #188]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0f6:	2b80      	cmp	r3, #128	@ 0x80
 800b0f8:	d0ef      	beq.n	800b0da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0fa:	4b27      	ldr	r3, [pc, #156]	@ (800b198 <xPortStartScheduler+0x138>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f1c3 0307 	rsb	r3, r3, #7
 800b102:	2b04      	cmp	r3, #4
 800b104:	d00b      	beq.n	800b11e <xPortStartScheduler+0xbe>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	60bb      	str	r3, [r7, #8]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b11e:	4b1e      	ldr	r3, [pc, #120]	@ (800b198 <xPortStartScheduler+0x138>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	4a1c      	ldr	r2, [pc, #112]	@ (800b198 <xPortStartScheduler+0x138>)
 800b126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b128:	4b1b      	ldr	r3, [pc, #108]	@ (800b198 <xPortStartScheduler+0x138>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b130:	4a19      	ldr	r2, [pc, #100]	@ (800b198 <xPortStartScheduler+0x138>)
 800b132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	b2da      	uxtb	r2, r3
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b13c:	4b17      	ldr	r3, [pc, #92]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a16      	ldr	r2, [pc, #88]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b148:	4b14      	ldr	r3, [pc, #80]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a13      	ldr	r2, [pc, #76]	@ (800b19c <xPortStartScheduler+0x13c>)
 800b14e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b154:	f000 f8da 	bl	800b30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b158:	4b11      	ldr	r3, [pc, #68]	@ (800b1a0 <xPortStartScheduler+0x140>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b15e:	f000 f8f9 	bl	800b354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b162:	4b10      	ldr	r3, [pc, #64]	@ (800b1a4 <xPortStartScheduler+0x144>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a0f      	ldr	r2, [pc, #60]	@ (800b1a4 <xPortStartScheduler+0x144>)
 800b168:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b16c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b16e:	f7ff ff63 	bl	800b038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b172:	f7ff f83f 	bl	800a1f4 <vTaskSwitchContext>
	prvTaskExitError();
 800b176:	f7ff ff1d 	bl	800afb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	e000ed00 	.word	0xe000ed00
 800b188:	410fc271 	.word	0x410fc271
 800b18c:	410fc270 	.word	0x410fc270
 800b190:	e000e400 	.word	0xe000e400
 800b194:	2000126c 	.word	0x2000126c
 800b198:	20001270 	.word	0x20001270
 800b19c:	e000ed20 	.word	0xe000ed20
 800b1a0:	20000010 	.word	0x20000010
 800b1a4:	e000ef34 	.word	0xe000ef34

0800b1a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	607b      	str	r3, [r7, #4]
}
 800b1c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1c2:	4b10      	ldr	r3, [pc, #64]	@ (800b204 <vPortEnterCritical+0x5c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b204 <vPortEnterCritical+0x5c>)
 800b1ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b204 <vPortEnterCritical+0x5c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d110      	bne.n	800b1f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b208 <vPortEnterCritical+0x60>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	603b      	str	r3, [r7, #0]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <vPortEnterCritical+0x4a>
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	20000010 	.word	0x20000010
 800b208:	e000ed04 	.word	0xe000ed04

0800b20c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b212:	4b12      	ldr	r3, [pc, #72]	@ (800b25c <vPortExitCritical+0x50>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10b      	bne.n	800b232 <vPortExitCritical+0x26>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	607b      	str	r3, [r7, #4]
}
 800b22c:	bf00      	nop
 800b22e:	bf00      	nop
 800b230:	e7fd      	b.n	800b22e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b232:	4b0a      	ldr	r3, [pc, #40]	@ (800b25c <vPortExitCritical+0x50>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3b01      	subs	r3, #1
 800b238:	4a08      	ldr	r2, [pc, #32]	@ (800b25c <vPortExitCritical+0x50>)
 800b23a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b23c:	4b07      	ldr	r3, [pc, #28]	@ (800b25c <vPortExitCritical+0x50>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d105      	bne.n	800b250 <vPortExitCritical+0x44>
 800b244:	2300      	movs	r3, #0
 800b246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	f383 8811 	msr	BASEPRI, r3
}
 800b24e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	20000010 	.word	0x20000010

0800b260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b260:	f3ef 8009 	mrs	r0, PSP
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	4b15      	ldr	r3, [pc, #84]	@ (800b2c0 <pxCurrentTCBConst>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	f01e 0f10 	tst.w	lr, #16
 800b270:	bf08      	it	eq
 800b272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27a:	6010      	str	r0, [r2, #0]
 800b27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b280:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b284:	f380 8811 	msr	BASEPRI, r0
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f7fe ffb0 	bl	800a1f4 <vTaskSwitchContext>
 800b294:	f04f 0000 	mov.w	r0, #0
 800b298:	f380 8811 	msr	BASEPRI, r0
 800b29c:	bc09      	pop	{r0, r3}
 800b29e:	6819      	ldr	r1, [r3, #0]
 800b2a0:	6808      	ldr	r0, [r1, #0]
 800b2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a6:	f01e 0f10 	tst.w	lr, #16
 800b2aa:	bf08      	it	eq
 800b2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2b0:	f380 8809 	msr	PSP, r0
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	f3af 8000 	nop.w

0800b2c0 <pxCurrentTCBConst>:
 800b2c0:	20000c40 	.word	0x20000c40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop

0800b2c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2e2:	f7fe fecd 	bl	800a080 <xTaskIncrementTick>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2ec:	4b06      	ldr	r3, [pc, #24]	@ (800b308 <xPortSysTickHandler+0x40>)
 800b2ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f383 8811 	msr	BASEPRI, r3
}
 800b2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b30c:	b480      	push	{r7}
 800b30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b310:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <vPortSetupTimerInterrupt+0x34>)
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b316:	4b0b      	ldr	r3, [pc, #44]	@ (800b344 <vPortSetupTimerInterrupt+0x38>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b31c:	4b0a      	ldr	r3, [pc, #40]	@ (800b348 <vPortSetupTimerInterrupt+0x3c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a0a      	ldr	r2, [pc, #40]	@ (800b34c <vPortSetupTimerInterrupt+0x40>)
 800b322:	fba2 2303 	umull	r2, r3, r2, r3
 800b326:	099b      	lsrs	r3, r3, #6
 800b328:	4a09      	ldr	r2, [pc, #36]	@ (800b350 <vPortSetupTimerInterrupt+0x44>)
 800b32a:	3b01      	subs	r3, #1
 800b32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b32e:	4b04      	ldr	r3, [pc, #16]	@ (800b340 <vPortSetupTimerInterrupt+0x34>)
 800b330:	2207      	movs	r2, #7
 800b332:	601a      	str	r2, [r3, #0]
}
 800b334:	bf00      	nop
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	e000e010 	.word	0xe000e010
 800b344:	e000e018 	.word	0xe000e018
 800b348:	20000004 	.word	0x20000004
 800b34c:	10624dd3 	.word	0x10624dd3
 800b350:	e000e014 	.word	0xe000e014

0800b354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b364 <vPortEnableVFP+0x10>
 800b358:	6801      	ldr	r1, [r0, #0]
 800b35a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b35e:	6001      	str	r1, [r0, #0]
 800b360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b362:	bf00      	nop
 800b364:	e000ed88 	.word	0xe000ed88

0800b368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b36e:	f3ef 8305 	mrs	r3, IPSR
 800b372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b0f      	cmp	r3, #15
 800b378:	d915      	bls.n	800b3a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b37a:	4a18      	ldr	r2, [pc, #96]	@ (800b3dc <vPortValidateInterruptPriority+0x74>)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b384:	4b16      	ldr	r3, [pc, #88]	@ (800b3e0 <vPortValidateInterruptPriority+0x78>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	7afa      	ldrb	r2, [r7, #11]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d20b      	bcs.n	800b3a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	607b      	str	r3, [r7, #4]
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop
 800b3a4:	e7fd      	b.n	800b3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e4 <vPortValidateInterruptPriority+0x7c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e8 <vPortValidateInterruptPriority+0x80>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d90b      	bls.n	800b3ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	603b      	str	r3, [r7, #0]
}
 800b3c8:	bf00      	nop
 800b3ca:	bf00      	nop
 800b3cc:	e7fd      	b.n	800b3ca <vPortValidateInterruptPriority+0x62>
	}
 800b3ce:	bf00      	nop
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	e000e3f0 	.word	0xe000e3f0
 800b3e0:	2000126c 	.word	0x2000126c
 800b3e4:	e000ed0c 	.word	0xe000ed0c
 800b3e8:	20001270 	.word	0x20001270

0800b3ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08a      	sub	sp, #40	@ 0x28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3f8:	f7fe fd86 	bl	8009f08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3fc:	4b5c      	ldr	r3, [pc, #368]	@ (800b570 <pvPortMalloc+0x184>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b404:	f000 f924 	bl	800b650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b408:	4b5a      	ldr	r3, [pc, #360]	@ (800b574 <pvPortMalloc+0x188>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4013      	ands	r3, r2
 800b410:	2b00      	cmp	r3, #0
 800b412:	f040 8095 	bne.w	800b540 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d01e      	beq.n	800b45a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b41c:	2208      	movs	r2, #8
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4413      	add	r3, r2
 800b422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d015      	beq.n	800b45a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f023 0307 	bic.w	r3, r3, #7
 800b434:	3308      	adds	r3, #8
 800b436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <pvPortMalloc+0x6e>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	617b      	str	r3, [r7, #20]
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	e7fd      	b.n	800b456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d06f      	beq.n	800b540 <pvPortMalloc+0x154>
 800b460:	4b45      	ldr	r3, [pc, #276]	@ (800b578 <pvPortMalloc+0x18c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d86a      	bhi.n	800b540 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b46a:	4b44      	ldr	r3, [pc, #272]	@ (800b57c <pvPortMalloc+0x190>)
 800b46c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b46e:	4b43      	ldr	r3, [pc, #268]	@ (800b57c <pvPortMalloc+0x190>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b474:	e004      	b.n	800b480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	429a      	cmp	r2, r3
 800b488:	d903      	bls.n	800b492 <pvPortMalloc+0xa6>
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1f1      	bne.n	800b476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b492:	4b37      	ldr	r3, [pc, #220]	@ (800b570 <pvPortMalloc+0x184>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b498:	429a      	cmp	r2, r3
 800b49a:	d051      	beq.n	800b540 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b49c:	6a3b      	ldr	r3, [r7, #32]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2208      	movs	r2, #8
 800b4a2:	4413      	add	r3, r2
 800b4a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	1ad2      	subs	r2, r2, r3
 800b4b6:	2308      	movs	r3, #8
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d920      	bls.n	800b500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	f003 0307 	and.w	r3, r3, #7
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00b      	beq.n	800b4e8 <pvPortMalloc+0xfc>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	613b      	str	r3, [r7, #16]
}
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	e7fd      	b.n	800b4e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	1ad2      	subs	r2, r2, r3
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4fa:	69b8      	ldr	r0, [r7, #24]
 800b4fc:	f000 f90a 	bl	800b714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b500:	4b1d      	ldr	r3, [pc, #116]	@ (800b578 <pvPortMalloc+0x18c>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	4a1b      	ldr	r2, [pc, #108]	@ (800b578 <pvPortMalloc+0x18c>)
 800b50c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b50e:	4b1a      	ldr	r3, [pc, #104]	@ (800b578 <pvPortMalloc+0x18c>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b1b      	ldr	r3, [pc, #108]	@ (800b580 <pvPortMalloc+0x194>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d203      	bcs.n	800b522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b51a:	4b17      	ldr	r3, [pc, #92]	@ (800b578 <pvPortMalloc+0x18c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a18      	ldr	r2, [pc, #96]	@ (800b580 <pvPortMalloc+0x194>)
 800b520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	4b13      	ldr	r3, [pc, #76]	@ (800b574 <pvPortMalloc+0x188>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	431a      	orrs	r2, r3
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b536:	4b13      	ldr	r3, [pc, #76]	@ (800b584 <pvPortMalloc+0x198>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3301      	adds	r3, #1
 800b53c:	4a11      	ldr	r2, [pc, #68]	@ (800b584 <pvPortMalloc+0x198>)
 800b53e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b540:	f7fe fcf0 	bl	8009f24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f003 0307 	and.w	r3, r3, #7
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00b      	beq.n	800b566 <pvPortMalloc+0x17a>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	60fb      	str	r3, [r7, #12]
}
 800b560:	bf00      	nop
 800b562:	bf00      	nop
 800b564:	e7fd      	b.n	800b562 <pvPortMalloc+0x176>
	return pvReturn;
 800b566:	69fb      	ldr	r3, [r7, #28]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3728      	adds	r7, #40	@ 0x28
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20004e7c 	.word	0x20004e7c
 800b574:	20004e90 	.word	0x20004e90
 800b578:	20004e80 	.word	0x20004e80
 800b57c:	20004e74 	.word	0x20004e74
 800b580:	20004e84 	.word	0x20004e84
 800b584:	20004e88 	.word	0x20004e88

0800b588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d04f      	beq.n	800b63a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b59a:	2308      	movs	r3, #8
 800b59c:	425b      	negs	r3, r3
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	4b25      	ldr	r3, [pc, #148]	@ (800b644 <vPortFree+0xbc>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10b      	bne.n	800b5ce <vPortFree+0x46>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	60fb      	str	r3, [r7, #12]
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	e7fd      	b.n	800b5ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00b      	beq.n	800b5ee <vPortFree+0x66>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	60bb      	str	r3, [r7, #8]
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	4b14      	ldr	r3, [pc, #80]	@ (800b644 <vPortFree+0xbc>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01e      	beq.n	800b63a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d11a      	bne.n	800b63a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	4b0e      	ldr	r3, [pc, #56]	@ (800b644 <vPortFree+0xbc>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	43db      	mvns	r3, r3
 800b60e:	401a      	ands	r2, r3
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b614:	f7fe fc78 	bl	8009f08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	4b0a      	ldr	r3, [pc, #40]	@ (800b648 <vPortFree+0xc0>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4413      	add	r3, r2
 800b622:	4a09      	ldr	r2, [pc, #36]	@ (800b648 <vPortFree+0xc0>)
 800b624:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b626:	6938      	ldr	r0, [r7, #16]
 800b628:	f000 f874 	bl	800b714 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b62c:	4b07      	ldr	r3, [pc, #28]	@ (800b64c <vPortFree+0xc4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	4a06      	ldr	r2, [pc, #24]	@ (800b64c <vPortFree+0xc4>)
 800b634:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b636:	f7fe fc75 	bl	8009f24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b63a:	bf00      	nop
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20004e90 	.word	0x20004e90
 800b648:	20004e80 	.word	0x20004e80
 800b64c:	20004e8c 	.word	0x20004e8c

0800b650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b656:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b65a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b65c:	4b27      	ldr	r3, [pc, #156]	@ (800b6fc <prvHeapInit+0xac>)
 800b65e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f003 0307 	and.w	r3, r3, #7
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00c      	beq.n	800b684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3307      	adds	r3, #7
 800b66e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0307 	bic.w	r3, r3, #7
 800b676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6fc <prvHeapInit+0xac>)
 800b680:	4413      	add	r3, r2
 800b682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b688:	4a1d      	ldr	r2, [pc, #116]	@ (800b700 <prvHeapInit+0xb0>)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b68e:	4b1c      	ldr	r3, [pc, #112]	@ (800b700 <prvHeapInit+0xb0>)
 800b690:	2200      	movs	r2, #0
 800b692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	4413      	add	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b69c:	2208      	movs	r2, #8
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	1a9b      	subs	r3, r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0307 	bic.w	r3, r3, #7
 800b6aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4a15      	ldr	r2, [pc, #84]	@ (800b704 <prvHeapInit+0xb4>)
 800b6b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6b2:	4b14      	ldr	r3, [pc, #80]	@ (800b704 <prvHeapInit+0xb4>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6ba:	4b12      	ldr	r3, [pc, #72]	@ (800b704 <prvHeapInit+0xb4>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	1ad2      	subs	r2, r2, r3
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b704 <prvHeapInit+0xb4>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b708 <prvHeapInit+0xb8>)
 800b6de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4a09      	ldr	r2, [pc, #36]	@ (800b70c <prvHeapInit+0xbc>)
 800b6e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6e8:	4b09      	ldr	r3, [pc, #36]	@ (800b710 <prvHeapInit+0xc0>)
 800b6ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b6ee:	601a      	str	r2, [r3, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	20001274 	.word	0x20001274
 800b700:	20004e74 	.word	0x20004e74
 800b704:	20004e7c 	.word	0x20004e7c
 800b708:	20004e84 	.word	0x20004e84
 800b70c:	20004e80 	.word	0x20004e80
 800b710:	20004e90 	.word	0x20004e90

0800b714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b71c:	4b28      	ldr	r3, [pc, #160]	@ (800b7c0 <prvInsertBlockIntoFreeList+0xac>)
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	e002      	b.n	800b728 <prvInsertBlockIntoFreeList+0x14>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d8f7      	bhi.n	800b722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	4413      	add	r3, r2
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d108      	bne.n	800b756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	441a      	add	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	441a      	add	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d118      	bne.n	800b79c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4b15      	ldr	r3, [pc, #84]	@ (800b7c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d00d      	beq.n	800b792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	441a      	add	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	e008      	b.n	800b7a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b792:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	e003      	b.n	800b7a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d002      	beq.n	800b7b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b2:	bf00      	nop
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20004e74 	.word	0x20004e74
 800b7c4:	20004e7c 	.word	0x20004e7c

0800b7c8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	71fb      	strb	r3, [r7, #7]
 800b7d2:	e026      	b.n	800b822 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	3b50      	subs	r3, #80	@ 0x50
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2100      	movs	r1, #0
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 f82b 	bl	800b838 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	f000 f827 	bl	800b838 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	2010      	movs	r0, #16
 800b7ee:	f000 f823 	bl	800b838 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	71bb      	strb	r3, [r7, #6]
 800b7f6:	e00d      	b.n	800b814 <OLED_Refresh_Gram+0x4c>
 800b7f8:	79ba      	ldrb	r2, [r7, #6]
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	490d      	ldr	r1, [pc, #52]	@ (800b834 <OLED_Refresh_Gram+0x6c>)
 800b7fe:	00d2      	lsls	r2, r2, #3
 800b800:	440a      	add	r2, r1
 800b802:	4413      	add	r3, r2
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2101      	movs	r1, #1
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 f815 	bl	800b838 <OLED_WR_Byte>
 800b80e:	79bb      	ldrb	r3, [r7, #6]
 800b810:	3301      	adds	r3, #1
 800b812:	71bb      	strb	r3, [r7, #6]
 800b814:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	daed      	bge.n	800b7f8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	3301      	adds	r3, #1
 800b820:	71fb      	strb	r3, [r7, #7]
 800b822:	79fb      	ldrb	r3, [r7, #7]
 800b824:	2b07      	cmp	r3, #7
 800b826:	d9d5      	bls.n	800b7d4 <OLED_Refresh_Gram+0xc>
	}   
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20004e94 	.word	0x20004e94

0800b838 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	460a      	mov	r2, r1
 800b842:	71fb      	strb	r3, [r7, #7]
 800b844:	4613      	mov	r3, r2
 800b846:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800b848:	79bb      	ldrb	r3, [r7, #6]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d006      	beq.n	800b85c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800b84e:	2201      	movs	r2, #1
 800b850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b854:	481c      	ldr	r0, [pc, #112]	@ (800b8c8 <OLED_WR_Byte+0x90>)
 800b856:	f7f8 ff67 	bl	8004728 <HAL_GPIO_WritePin>
 800b85a:	e005      	b.n	800b868 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800b85c:	2200      	movs	r2, #0
 800b85e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b862:	4819      	ldr	r0, [pc, #100]	@ (800b8c8 <OLED_WR_Byte+0x90>)
 800b864:	f7f8 ff60 	bl	8004728 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800b868:	2300      	movs	r3, #0
 800b86a:	73fb      	strb	r3, [r7, #15]
 800b86c:	e01e      	b.n	800b8ac <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800b86e:	2200      	movs	r2, #0
 800b870:	2120      	movs	r1, #32
 800b872:	4815      	ldr	r0, [pc, #84]	@ (800b8c8 <OLED_WR_Byte+0x90>)
 800b874:	f7f8 ff58 	bl	8004728 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800b878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	da05      	bge.n	800b88c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800b880:	2201      	movs	r2, #1
 800b882:	2140      	movs	r1, #64	@ 0x40
 800b884:	4810      	ldr	r0, [pc, #64]	@ (800b8c8 <OLED_WR_Byte+0x90>)
 800b886:	f7f8 ff4f 	bl	8004728 <HAL_GPIO_WritePin>
 800b88a:	e004      	b.n	800b896 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800b88c:	2200      	movs	r2, #0
 800b88e:	2140      	movs	r1, #64	@ 0x40
 800b890:	480d      	ldr	r0, [pc, #52]	@ (800b8c8 <OLED_WR_Byte+0x90>)
 800b892:	f7f8 ff49 	bl	8004728 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800b896:	2201      	movs	r2, #1
 800b898:	2120      	movs	r1, #32
 800b89a:	480b      	ldr	r0, [pc, #44]	@ (800b8c8 <OLED_WR_Byte+0x90>)
 800b89c:	f7f8 ff44 	bl	8004728 <HAL_GPIO_WritePin>
		dat<<=1;   
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	73fb      	strb	r3, [r7, #15]
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	2b07      	cmp	r3, #7
 800b8b0:	d9dd      	bls.n	800b86e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b8b8:	4803      	ldr	r0, [pc, #12]	@ (800b8c8 <OLED_WR_Byte+0x90>)
 800b8ba:	f7f8 ff35 	bl	8004728 <HAL_GPIO_WritePin>
} 
 800b8be:	bf00      	nop
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	40021000 	.word	0x40021000

0800b8cc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	71fb      	strb	r3, [r7, #7]
 800b8d6:	e014      	b.n	800b902 <OLED_Clear+0x36>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	71bb      	strb	r3, [r7, #6]
 800b8dc:	e00a      	b.n	800b8f4 <OLED_Clear+0x28>
 800b8de:	79ba      	ldrb	r2, [r7, #6]
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	490c      	ldr	r1, [pc, #48]	@ (800b914 <OLED_Clear+0x48>)
 800b8e4:	00d2      	lsls	r2, r2, #3
 800b8e6:	440a      	add	r2, r1
 800b8e8:	4413      	add	r3, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	79bb      	ldrb	r3, [r7, #6]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	71bb      	strb	r3, [r7, #6]
 800b8f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	daf0      	bge.n	800b8de <OLED_Clear+0x12>
 800b8fc:	79fb      	ldrb	r3, [r7, #7]
 800b8fe:	3301      	adds	r3, #1
 800b900:	71fb      	strb	r3, [r7, #7]
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	2b07      	cmp	r3, #7
 800b906:	d9e7      	bls.n	800b8d8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800b908:	f7ff ff5e 	bl	800b7c8 <OLED_Refresh_Gram>
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	20004e94 	.word	0x20004e94

0800b918 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
 800b922:	460b      	mov	r3, r1
 800b924:	71bb      	strb	r3, [r7, #6]
 800b926:	4613      	mov	r3, r2
 800b928:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800b92e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b932:	2b00      	cmp	r3, #0
 800b934:	db41      	blt.n	800b9ba <OLED_DrawPoint+0xa2>
 800b936:	79bb      	ldrb	r3, [r7, #6]
 800b938:	2b3f      	cmp	r3, #63	@ 0x3f
 800b93a:	d83e      	bhi.n	800b9ba <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800b93c:	79bb      	ldrb	r3, [r7, #6]
 800b93e:	08db      	lsrs	r3, r3, #3
 800b940:	b2db      	uxtb	r3, r3
 800b942:	f1c3 0307 	rsb	r3, r3, #7
 800b946:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800b948:	79bb      	ldrb	r3, [r7, #6]
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800b950:	7b7b      	ldrb	r3, [r7, #13]
 800b952:	f1c3 0307 	rsb	r3, r3, #7
 800b956:	2201      	movs	r2, #1
 800b958:	fa02 f303 	lsl.w	r3, r2, r3
 800b95c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800b95e:	797b      	ldrb	r3, [r7, #5]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d012      	beq.n	800b98a <OLED_DrawPoint+0x72>
 800b964:	79fa      	ldrb	r2, [r7, #7]
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	4917      	ldr	r1, [pc, #92]	@ (800b9c8 <OLED_DrawPoint+0xb0>)
 800b96a:	00d2      	lsls	r2, r2, #3
 800b96c:	440a      	add	r2, r1
 800b96e:	4413      	add	r3, r2
 800b970:	7818      	ldrb	r0, [r3, #0]
 800b972:	79fa      	ldrb	r2, [r7, #7]
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	7bf9      	ldrb	r1, [r7, #15]
 800b978:	4301      	orrs	r1, r0
 800b97a:	b2c8      	uxtb	r0, r1
 800b97c:	4912      	ldr	r1, [pc, #72]	@ (800b9c8 <OLED_DrawPoint+0xb0>)
 800b97e:	00d2      	lsls	r2, r2, #3
 800b980:	440a      	add	r2, r1
 800b982:	4413      	add	r3, r2
 800b984:	4602      	mov	r2, r0
 800b986:	701a      	strb	r2, [r3, #0]
 800b988:	e018      	b.n	800b9bc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800b98a:	79fa      	ldrb	r2, [r7, #7]
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	490e      	ldr	r1, [pc, #56]	@ (800b9c8 <OLED_DrawPoint+0xb0>)
 800b990:	00d2      	lsls	r2, r2, #3
 800b992:	440a      	add	r2, r1
 800b994:	4413      	add	r3, r2
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	b25a      	sxtb	r2, r3
 800b99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b99e:	43db      	mvns	r3, r3
 800b9a0:	b25b      	sxtb	r3, r3
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	b259      	sxtb	r1, r3
 800b9a6:	79fa      	ldrb	r2, [r7, #7]
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	b2c8      	uxtb	r0, r1
 800b9ac:	4906      	ldr	r1, [pc, #24]	@ (800b9c8 <OLED_DrawPoint+0xb0>)
 800b9ae:	00d2      	lsls	r2, r2, #3
 800b9b0:	440a      	add	r2, r1
 800b9b2:	4413      	add	r3, r2
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	701a      	strb	r2, [r3, #0]
 800b9b8:	e000      	b.n	800b9bc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800b9ba:	bf00      	nop
}
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	20004e94 	.word	0x20004e94

0800b9cc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	461a      	mov	r2, r3
 800b9da:	4623      	mov	r3, r4
 800b9dc:	71fb      	strb	r3, [r7, #7]
 800b9de:	4603      	mov	r3, r0
 800b9e0:	71bb      	strb	r3, [r7, #6]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	717b      	strb	r3, [r7, #5]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b9ea:	79bb      	ldrb	r3, [r7, #6]
 800b9ec:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b9ee:	797b      	ldrb	r3, [r7, #5]
 800b9f0:	3b20      	subs	r3, #32
 800b9f2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73bb      	strb	r3, [r7, #14]
 800b9f8:	e04d      	b.n	800ba96 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b9fa:	793b      	ldrb	r3, [r7, #4]
 800b9fc:	2b0c      	cmp	r3, #12
 800b9fe:	d10b      	bne.n	800ba18 <OLED_ShowChar+0x4c>
 800ba00:	797a      	ldrb	r2, [r7, #5]
 800ba02:	7bb9      	ldrb	r1, [r7, #14]
 800ba04:	4828      	ldr	r0, [pc, #160]	@ (800baa8 <OLED_ShowChar+0xdc>)
 800ba06:	4613      	mov	r3, r2
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4403      	add	r3, r0
 800ba10:	440b      	add	r3, r1
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	73fb      	strb	r3, [r7, #15]
 800ba16:	e007      	b.n	800ba28 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800ba18:	797a      	ldrb	r2, [r7, #5]
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
 800ba1c:	4923      	ldr	r1, [pc, #140]	@ (800baac <OLED_ShowChar+0xe0>)
 800ba1e:	0112      	lsls	r2, r2, #4
 800ba20:	440a      	add	r2, r1
 800ba22:	4413      	add	r3, r2
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800ba28:	2300      	movs	r3, #0
 800ba2a:	737b      	strb	r3, [r7, #13]
 800ba2c:	e02d      	b.n	800ba8a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800ba2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da07      	bge.n	800ba46 <OLED_ShowChar+0x7a>
 800ba36:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ba3a:	79b9      	ldrb	r1, [r7, #6]
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff ff6a 	bl	800b918 <OLED_DrawPoint>
 800ba44:	e00c      	b.n	800ba60 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800ba46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	bf0c      	ite	eq
 800ba4e:	2301      	moveq	r3, #1
 800ba50:	2300      	movne	r3, #0
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	461a      	mov	r2, r3
 800ba56:	79b9      	ldrb	r1, [r7, #6]
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff ff5c 	bl	800b918 <OLED_DrawPoint>
			temp<<=1;
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	73fb      	strb	r3, [r7, #15]
			y++;
 800ba66:	79bb      	ldrb	r3, [r7, #6]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800ba6c:	79ba      	ldrb	r2, [r7, #6]
 800ba6e:	7b3b      	ldrb	r3, [r7, #12]
 800ba70:	1ad2      	subs	r2, r2, r3
 800ba72:	793b      	ldrb	r3, [r7, #4]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d105      	bne.n	800ba84 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800ba78:	7b3b      	ldrb	r3, [r7, #12]
 800ba7a:	71bb      	strb	r3, [r7, #6]
				x++;
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	71fb      	strb	r3, [r7, #7]
				break;
 800ba82:	e005      	b.n	800ba90 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800ba84:	7b7b      	ldrb	r3, [r7, #13]
 800ba86:	3301      	adds	r3, #1
 800ba88:	737b      	strb	r3, [r7, #13]
 800ba8a:	7b7b      	ldrb	r3, [r7, #13]
 800ba8c:	2b07      	cmp	r3, #7
 800ba8e:	d9ce      	bls.n	800ba2e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	3301      	adds	r3, #1
 800ba94:	73bb      	strb	r3, [r7, #14]
 800ba96:	7bba      	ldrb	r2, [r7, #14]
 800ba98:	793b      	ldrb	r3, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d3ad      	bcc.n	800b9fa <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800ba9e:	bf00      	nop
 800baa0:	bf00      	nop
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd90      	pop	{r4, r7, pc}
 800baa8:	0800eb34 	.word	0x0800eb34
 800baac:	0800efa8 	.word	0x0800efa8

0800bab0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	4603      	mov	r3, r0
 800bab8:	603a      	str	r2, [r7, #0]
 800baba:	71fb      	strb	r3, [r7, #7]
 800babc:	460b      	mov	r3, r1
 800babe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800bac0:	e01f      	b.n	800bb02 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	2b7a      	cmp	r3, #122	@ 0x7a
 800bac6:	d904      	bls.n	800bad2 <OLED_ShowString+0x22>
 800bac8:	2300      	movs	r3, #0
 800baca:	71fb      	strb	r3, [r7, #7]
 800bacc:	79bb      	ldrb	r3, [r7, #6]
 800bace:	3310      	adds	r3, #16
 800bad0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800bad2:	79bb      	ldrb	r3, [r7, #6]
 800bad4:	2b3a      	cmp	r3, #58	@ 0x3a
 800bad6:	d905      	bls.n	800bae4 <OLED_ShowString+0x34>
 800bad8:	2300      	movs	r3, #0
 800bada:	71fb      	strb	r3, [r7, #7]
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	71bb      	strb	r3, [r7, #6]
 800bae0:	f7ff fef4 	bl	800b8cc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781a      	ldrb	r2, [r3, #0]
 800bae8:	79b9      	ldrb	r1, [r7, #6]
 800baea:	79f8      	ldrb	r0, [r7, #7]
 800baec:	2301      	movs	r3, #1
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	230c      	movs	r3, #12
 800baf2:	f7ff ff6b 	bl	800b9cc <OLED_ShowChar>
        x+=8;
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	3308      	adds	r3, #8
 800bafa:	71fb      	strb	r3, [r7, #7]
        p++;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	3301      	adds	r3, #1
 800bb00:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1db      	bne.n	800bac2 <OLED_ShowString+0x12>
    }  
}	 
 800bb0a:	bf00      	nop
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <OLED_Init>:

void OLED_Init(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800bb18:	f7f9 fe34 	bl	8005784 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800bb1c:	4b41      	ldr	r3, [pc, #260]	@ (800bc24 <OLED_Init+0x110>)
 800bb1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb20:	4a40      	ldr	r2, [pc, #256]	@ (800bc24 <OLED_Init+0x110>)
 800bb22:	f023 0301 	bic.w	r3, r3, #1
 800bb26:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb28:	4b3e      	ldr	r3, [pc, #248]	@ (800bc24 <OLED_Init+0x110>)
 800bb2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb2c:	4a3d      	ldr	r2, [pc, #244]	@ (800bc24 <OLED_Init+0x110>)
 800bb2e:	f023 0304 	bic.w	r3, r3, #4
 800bb32:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800bb34:	f7f9 fe3a 	bl	80057ac <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2180      	movs	r1, #128	@ 0x80
 800bb3c:	483a      	ldr	r0, [pc, #232]	@ (800bc28 <OLED_Init+0x114>)
 800bb3e:	f7f8 fdf3 	bl	8004728 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800bb42:	2064      	movs	r0, #100	@ 0x64
 800bb44:	f7f7 fe8c 	bl	8003860 <HAL_Delay>
	OLED_RST_Set();
 800bb48:	2201      	movs	r2, #1
 800bb4a:	2180      	movs	r1, #128	@ 0x80
 800bb4c:	4836      	ldr	r0, [pc, #216]	@ (800bc28 <OLED_Init+0x114>)
 800bb4e:	f7f8 fdeb 	bl	8004728 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800bb52:	2100      	movs	r1, #0
 800bb54:	20ae      	movs	r0, #174	@ 0xae
 800bb56:	f7ff fe6f 	bl	800b838 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	20d5      	movs	r0, #213	@ 0xd5
 800bb5e:	f7ff fe6b 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800bb62:	2100      	movs	r1, #0
 800bb64:	2050      	movs	r0, #80	@ 0x50
 800bb66:	f7ff fe67 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	20a8      	movs	r0, #168	@ 0xa8
 800bb6e:	f7ff fe63 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800bb72:	2100      	movs	r1, #0
 800bb74:	203f      	movs	r0, #63	@ 0x3f
 800bb76:	f7ff fe5f 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	20d3      	movs	r0, #211	@ 0xd3
 800bb7e:	f7ff fe5b 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800bb82:	2100      	movs	r1, #0
 800bb84:	2000      	movs	r0, #0
 800bb86:	f7ff fe57 	bl	800b838 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	2040      	movs	r0, #64	@ 0x40
 800bb8e:	f7ff fe53 	bl	800b838 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800bb92:	2100      	movs	r1, #0
 800bb94:	208d      	movs	r0, #141	@ 0x8d
 800bb96:	f7ff fe4f 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	2014      	movs	r0, #20
 800bb9e:	f7ff fe4b 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800bba2:	2100      	movs	r1, #0
 800bba4:	2020      	movs	r0, #32
 800bba6:	f7ff fe47 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800bbaa:	2100      	movs	r1, #0
 800bbac:	2002      	movs	r0, #2
 800bbae:	f7ff fe43 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	20a1      	movs	r0, #161	@ 0xa1
 800bbb6:	f7ff fe3f 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800bbba:	2100      	movs	r1, #0
 800bbbc:	20c0      	movs	r0, #192	@ 0xc0
 800bbbe:	f7ff fe3b 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	20da      	movs	r0, #218	@ 0xda
 800bbc6:	f7ff fe37 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800bbca:	2100      	movs	r1, #0
 800bbcc:	2012      	movs	r0, #18
 800bbce:	f7ff fe33 	bl	800b838 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	2081      	movs	r0, #129	@ 0x81
 800bbd6:	f7ff fe2f 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800bbda:	2100      	movs	r1, #0
 800bbdc:	20ef      	movs	r0, #239	@ 0xef
 800bbde:	f7ff fe2b 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	20d9      	movs	r0, #217	@ 0xd9
 800bbe6:	f7ff fe27 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800bbea:	2100      	movs	r1, #0
 800bbec:	20f1      	movs	r0, #241	@ 0xf1
 800bbee:	f7ff fe23 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	20db      	movs	r0, #219	@ 0xdb
 800bbf6:	f7ff fe1f 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	2030      	movs	r0, #48	@ 0x30
 800bbfe:	f7ff fe1b 	bl	800b838 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800bc02:	2100      	movs	r1, #0
 800bc04:	20a4      	movs	r0, #164	@ 0xa4
 800bc06:	f7ff fe17 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	20a6      	movs	r0, #166	@ 0xa6
 800bc0e:	f7ff fe13 	bl	800b838 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800bc12:	2100      	movs	r1, #0
 800bc14:	20af      	movs	r0, #175	@ 0xaf
 800bc16:	f7ff fe0f 	bl	800b838 <OLED_WR_Byte>
	OLED_Clear(); 
 800bc1a:	f7ff fe57 	bl	800b8cc <OLED_Clear>
 800bc1e:	bf00      	nop
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	40023800 	.word	0x40023800
 800bc28:	40021000 	.word	0x40021000

0800bc2c <__cvt>:
 800bc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	ec57 6b10 	vmov	r6, r7, d0
 800bc34:	2f00      	cmp	r7, #0
 800bc36:	460c      	mov	r4, r1
 800bc38:	4619      	mov	r1, r3
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	bfbb      	ittet	lt
 800bc3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bc42:	461f      	movlt	r7, r3
 800bc44:	2300      	movge	r3, #0
 800bc46:	232d      	movlt	r3, #45	@ 0x2d
 800bc48:	700b      	strb	r3, [r1, #0]
 800bc4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bc50:	4691      	mov	r9, r2
 800bc52:	f023 0820 	bic.w	r8, r3, #32
 800bc56:	bfbc      	itt	lt
 800bc58:	4632      	movlt	r2, r6
 800bc5a:	4616      	movlt	r6, r2
 800bc5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc60:	d005      	beq.n	800bc6e <__cvt+0x42>
 800bc62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bc66:	d100      	bne.n	800bc6a <__cvt+0x3e>
 800bc68:	3401      	adds	r4, #1
 800bc6a:	2102      	movs	r1, #2
 800bc6c:	e000      	b.n	800bc70 <__cvt+0x44>
 800bc6e:	2103      	movs	r1, #3
 800bc70:	ab03      	add	r3, sp, #12
 800bc72:	9301      	str	r3, [sp, #4]
 800bc74:	ab02      	add	r3, sp, #8
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	ec47 6b10 	vmov	d0, r6, r7
 800bc7c:	4653      	mov	r3, sl
 800bc7e:	4622      	mov	r2, r4
 800bc80:	f000 fe6a 	bl	800c958 <_dtoa_r>
 800bc84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bc88:	4605      	mov	r5, r0
 800bc8a:	d119      	bne.n	800bcc0 <__cvt+0x94>
 800bc8c:	f019 0f01 	tst.w	r9, #1
 800bc90:	d00e      	beq.n	800bcb0 <__cvt+0x84>
 800bc92:	eb00 0904 	add.w	r9, r0, r4
 800bc96:	2200      	movs	r2, #0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	f7f4 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 800bca2:	b108      	cbz	r0, 800bca8 <__cvt+0x7c>
 800bca4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bca8:	2230      	movs	r2, #48	@ 0x30
 800bcaa:	9b03      	ldr	r3, [sp, #12]
 800bcac:	454b      	cmp	r3, r9
 800bcae:	d31e      	bcc.n	800bcee <__cvt+0xc2>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcb4:	1b5b      	subs	r3, r3, r5
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	b004      	add	sp, #16
 800bcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bcc4:	eb00 0904 	add.w	r9, r0, r4
 800bcc8:	d1e5      	bne.n	800bc96 <__cvt+0x6a>
 800bcca:	7803      	ldrb	r3, [r0, #0]
 800bccc:	2b30      	cmp	r3, #48	@ 0x30
 800bcce:	d10a      	bne.n	800bce6 <__cvt+0xba>
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcdc:	b918      	cbnz	r0, 800bce6 <__cvt+0xba>
 800bcde:	f1c4 0401 	rsb	r4, r4, #1
 800bce2:	f8ca 4000 	str.w	r4, [sl]
 800bce6:	f8da 3000 	ldr.w	r3, [sl]
 800bcea:	4499      	add	r9, r3
 800bcec:	e7d3      	b.n	800bc96 <__cvt+0x6a>
 800bcee:	1c59      	adds	r1, r3, #1
 800bcf0:	9103      	str	r1, [sp, #12]
 800bcf2:	701a      	strb	r2, [r3, #0]
 800bcf4:	e7d9      	b.n	800bcaa <__cvt+0x7e>

0800bcf6 <__exponent>:
 800bcf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcf8:	2900      	cmp	r1, #0
 800bcfa:	bfba      	itte	lt
 800bcfc:	4249      	neglt	r1, r1
 800bcfe:	232d      	movlt	r3, #45	@ 0x2d
 800bd00:	232b      	movge	r3, #43	@ 0x2b
 800bd02:	2909      	cmp	r1, #9
 800bd04:	7002      	strb	r2, [r0, #0]
 800bd06:	7043      	strb	r3, [r0, #1]
 800bd08:	dd29      	ble.n	800bd5e <__exponent+0x68>
 800bd0a:	f10d 0307 	add.w	r3, sp, #7
 800bd0e:	461d      	mov	r5, r3
 800bd10:	270a      	movs	r7, #10
 800bd12:	461a      	mov	r2, r3
 800bd14:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd18:	fb07 1416 	mls	r4, r7, r6, r1
 800bd1c:	3430      	adds	r4, #48	@ 0x30
 800bd1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bd22:	460c      	mov	r4, r1
 800bd24:	2c63      	cmp	r4, #99	@ 0x63
 800bd26:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	dcf1      	bgt.n	800bd12 <__exponent+0x1c>
 800bd2e:	3130      	adds	r1, #48	@ 0x30
 800bd30:	1e94      	subs	r4, r2, #2
 800bd32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd36:	1c41      	adds	r1, r0, #1
 800bd38:	4623      	mov	r3, r4
 800bd3a:	42ab      	cmp	r3, r5
 800bd3c:	d30a      	bcc.n	800bd54 <__exponent+0x5e>
 800bd3e:	f10d 0309 	add.w	r3, sp, #9
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	42ac      	cmp	r4, r5
 800bd46:	bf88      	it	hi
 800bd48:	2300      	movhi	r3, #0
 800bd4a:	3302      	adds	r3, #2
 800bd4c:	4403      	add	r3, r0
 800bd4e:	1a18      	subs	r0, r3, r0
 800bd50:	b003      	add	sp, #12
 800bd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd54:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd58:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd5c:	e7ed      	b.n	800bd3a <__exponent+0x44>
 800bd5e:	2330      	movs	r3, #48	@ 0x30
 800bd60:	3130      	adds	r1, #48	@ 0x30
 800bd62:	7083      	strb	r3, [r0, #2]
 800bd64:	70c1      	strb	r1, [r0, #3]
 800bd66:	1d03      	adds	r3, r0, #4
 800bd68:	e7f1      	b.n	800bd4e <__exponent+0x58>
	...

0800bd6c <_printf_float>:
 800bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd70:	b08d      	sub	sp, #52	@ 0x34
 800bd72:	460c      	mov	r4, r1
 800bd74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bd78:	4616      	mov	r6, r2
 800bd7a:	461f      	mov	r7, r3
 800bd7c:	4605      	mov	r5, r0
 800bd7e:	f000 fcdb 	bl	800c738 <_localeconv_r>
 800bd82:	6803      	ldr	r3, [r0, #0]
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7f4 fa72 	bl	8000270 <strlen>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd90:	f8d8 3000 	ldr.w	r3, [r8]
 800bd94:	9005      	str	r0, [sp, #20]
 800bd96:	3307      	adds	r3, #7
 800bd98:	f023 0307 	bic.w	r3, r3, #7
 800bd9c:	f103 0208 	add.w	r2, r3, #8
 800bda0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bda4:	f8d4 b000 	ldr.w	fp, [r4]
 800bda8:	f8c8 2000 	str.w	r2, [r8]
 800bdac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bdb4:	9307      	str	r3, [sp, #28]
 800bdb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bdbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdc2:	4b9c      	ldr	r3, [pc, #624]	@ (800c034 <_printf_float+0x2c8>)
 800bdc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc8:	f7f4 feb0 	bl	8000b2c <__aeabi_dcmpun>
 800bdcc:	bb70      	cbnz	r0, 800be2c <_printf_float+0xc0>
 800bdce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdd2:	4b98      	ldr	r3, [pc, #608]	@ (800c034 <_printf_float+0x2c8>)
 800bdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd8:	f7f4 fe8a 	bl	8000af0 <__aeabi_dcmple>
 800bddc:	bb30      	cbnz	r0, 800be2c <_printf_float+0xc0>
 800bdde:	2200      	movs	r2, #0
 800bde0:	2300      	movs	r3, #0
 800bde2:	4640      	mov	r0, r8
 800bde4:	4649      	mov	r1, r9
 800bde6:	f7f4 fe79 	bl	8000adc <__aeabi_dcmplt>
 800bdea:	b110      	cbz	r0, 800bdf2 <_printf_float+0x86>
 800bdec:	232d      	movs	r3, #45	@ 0x2d
 800bdee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdf2:	4a91      	ldr	r2, [pc, #580]	@ (800c038 <_printf_float+0x2cc>)
 800bdf4:	4b91      	ldr	r3, [pc, #580]	@ (800c03c <_printf_float+0x2d0>)
 800bdf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bdfa:	bf94      	ite	ls
 800bdfc:	4690      	movls	r8, r2
 800bdfe:	4698      	movhi	r8, r3
 800be00:	2303      	movs	r3, #3
 800be02:	6123      	str	r3, [r4, #16]
 800be04:	f02b 0304 	bic.w	r3, fp, #4
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	f04f 0900 	mov.w	r9, #0
 800be0e:	9700      	str	r7, [sp, #0]
 800be10:	4633      	mov	r3, r6
 800be12:	aa0b      	add	r2, sp, #44	@ 0x2c
 800be14:	4621      	mov	r1, r4
 800be16:	4628      	mov	r0, r5
 800be18:	f000 f9d2 	bl	800c1c0 <_printf_common>
 800be1c:	3001      	adds	r0, #1
 800be1e:	f040 808d 	bne.w	800bf3c <_printf_float+0x1d0>
 800be22:	f04f 30ff 	mov.w	r0, #4294967295
 800be26:	b00d      	add	sp, #52	@ 0x34
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	4642      	mov	r2, r8
 800be2e:	464b      	mov	r3, r9
 800be30:	4640      	mov	r0, r8
 800be32:	4649      	mov	r1, r9
 800be34:	f7f4 fe7a 	bl	8000b2c <__aeabi_dcmpun>
 800be38:	b140      	cbz	r0, 800be4c <_printf_float+0xe0>
 800be3a:	464b      	mov	r3, r9
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bfbc      	itt	lt
 800be40:	232d      	movlt	r3, #45	@ 0x2d
 800be42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800be46:	4a7e      	ldr	r2, [pc, #504]	@ (800c040 <_printf_float+0x2d4>)
 800be48:	4b7e      	ldr	r3, [pc, #504]	@ (800c044 <_printf_float+0x2d8>)
 800be4a:	e7d4      	b.n	800bdf6 <_printf_float+0x8a>
 800be4c:	6863      	ldr	r3, [r4, #4]
 800be4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800be52:	9206      	str	r2, [sp, #24]
 800be54:	1c5a      	adds	r2, r3, #1
 800be56:	d13b      	bne.n	800bed0 <_printf_float+0x164>
 800be58:	2306      	movs	r3, #6
 800be5a:	6063      	str	r3, [r4, #4]
 800be5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800be60:	2300      	movs	r3, #0
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	9303      	str	r3, [sp, #12]
 800be66:	ab0a      	add	r3, sp, #40	@ 0x28
 800be68:	e9cd a301 	strd	sl, r3, [sp, #4]
 800be6c:	ab09      	add	r3, sp, #36	@ 0x24
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	6861      	ldr	r1, [r4, #4]
 800be72:	ec49 8b10 	vmov	d0, r8, r9
 800be76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800be7a:	4628      	mov	r0, r5
 800be7c:	f7ff fed6 	bl	800bc2c <__cvt>
 800be80:	9b06      	ldr	r3, [sp, #24]
 800be82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be84:	2b47      	cmp	r3, #71	@ 0x47
 800be86:	4680      	mov	r8, r0
 800be88:	d129      	bne.n	800bede <_printf_float+0x172>
 800be8a:	1cc8      	adds	r0, r1, #3
 800be8c:	db02      	blt.n	800be94 <_printf_float+0x128>
 800be8e:	6863      	ldr	r3, [r4, #4]
 800be90:	4299      	cmp	r1, r3
 800be92:	dd41      	ble.n	800bf18 <_printf_float+0x1ac>
 800be94:	f1aa 0a02 	sub.w	sl, sl, #2
 800be98:	fa5f fa8a 	uxtb.w	sl, sl
 800be9c:	3901      	subs	r1, #1
 800be9e:	4652      	mov	r2, sl
 800bea0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bea4:	9109      	str	r1, [sp, #36]	@ 0x24
 800bea6:	f7ff ff26 	bl	800bcf6 <__exponent>
 800beaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800beac:	1813      	adds	r3, r2, r0
 800beae:	2a01      	cmp	r2, #1
 800beb0:	4681      	mov	r9, r0
 800beb2:	6123      	str	r3, [r4, #16]
 800beb4:	dc02      	bgt.n	800bebc <_printf_float+0x150>
 800beb6:	6822      	ldr	r2, [r4, #0]
 800beb8:	07d2      	lsls	r2, r2, #31
 800beba:	d501      	bpl.n	800bec0 <_printf_float+0x154>
 800bebc:	3301      	adds	r3, #1
 800bebe:	6123      	str	r3, [r4, #16]
 800bec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d0a2      	beq.n	800be0e <_printf_float+0xa2>
 800bec8:	232d      	movs	r3, #45	@ 0x2d
 800beca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bece:	e79e      	b.n	800be0e <_printf_float+0xa2>
 800bed0:	9a06      	ldr	r2, [sp, #24]
 800bed2:	2a47      	cmp	r2, #71	@ 0x47
 800bed4:	d1c2      	bne.n	800be5c <_printf_float+0xf0>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1c0      	bne.n	800be5c <_printf_float+0xf0>
 800beda:	2301      	movs	r3, #1
 800bedc:	e7bd      	b.n	800be5a <_printf_float+0xee>
 800bede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bee2:	d9db      	bls.n	800be9c <_printf_float+0x130>
 800bee4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bee8:	d118      	bne.n	800bf1c <_printf_float+0x1b0>
 800beea:	2900      	cmp	r1, #0
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	dd0b      	ble.n	800bf08 <_printf_float+0x19c>
 800bef0:	6121      	str	r1, [r4, #16]
 800bef2:	b913      	cbnz	r3, 800befa <_printf_float+0x18e>
 800bef4:	6822      	ldr	r2, [r4, #0]
 800bef6:	07d0      	lsls	r0, r2, #31
 800bef8:	d502      	bpl.n	800bf00 <_printf_float+0x194>
 800befa:	3301      	adds	r3, #1
 800befc:	440b      	add	r3, r1
 800befe:	6123      	str	r3, [r4, #16]
 800bf00:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bf02:	f04f 0900 	mov.w	r9, #0
 800bf06:	e7db      	b.n	800bec0 <_printf_float+0x154>
 800bf08:	b913      	cbnz	r3, 800bf10 <_printf_float+0x1a4>
 800bf0a:	6822      	ldr	r2, [r4, #0]
 800bf0c:	07d2      	lsls	r2, r2, #31
 800bf0e:	d501      	bpl.n	800bf14 <_printf_float+0x1a8>
 800bf10:	3302      	adds	r3, #2
 800bf12:	e7f4      	b.n	800befe <_printf_float+0x192>
 800bf14:	2301      	movs	r3, #1
 800bf16:	e7f2      	b.n	800befe <_printf_float+0x192>
 800bf18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bf1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf1e:	4299      	cmp	r1, r3
 800bf20:	db05      	blt.n	800bf2e <_printf_float+0x1c2>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	6121      	str	r1, [r4, #16]
 800bf26:	07d8      	lsls	r0, r3, #31
 800bf28:	d5ea      	bpl.n	800bf00 <_printf_float+0x194>
 800bf2a:	1c4b      	adds	r3, r1, #1
 800bf2c:	e7e7      	b.n	800befe <_printf_float+0x192>
 800bf2e:	2900      	cmp	r1, #0
 800bf30:	bfd4      	ite	le
 800bf32:	f1c1 0202 	rsble	r2, r1, #2
 800bf36:	2201      	movgt	r2, #1
 800bf38:	4413      	add	r3, r2
 800bf3a:	e7e0      	b.n	800befe <_printf_float+0x192>
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	055a      	lsls	r2, r3, #21
 800bf40:	d407      	bmi.n	800bf52 <_printf_float+0x1e6>
 800bf42:	6923      	ldr	r3, [r4, #16]
 800bf44:	4642      	mov	r2, r8
 800bf46:	4631      	mov	r1, r6
 800bf48:	4628      	mov	r0, r5
 800bf4a:	47b8      	blx	r7
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	d12b      	bne.n	800bfa8 <_printf_float+0x23c>
 800bf50:	e767      	b.n	800be22 <_printf_float+0xb6>
 800bf52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf56:	f240 80dd 	bls.w	800c114 <_printf_float+0x3a8>
 800bf5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2300      	movs	r3, #0
 800bf62:	f7f4 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d033      	beq.n	800bfd2 <_printf_float+0x266>
 800bf6a:	4a37      	ldr	r2, [pc, #220]	@ (800c048 <_printf_float+0x2dc>)
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	4631      	mov	r1, r6
 800bf70:	4628      	mov	r0, r5
 800bf72:	47b8      	blx	r7
 800bf74:	3001      	adds	r0, #1
 800bf76:	f43f af54 	beq.w	800be22 <_printf_float+0xb6>
 800bf7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bf7e:	4543      	cmp	r3, r8
 800bf80:	db02      	blt.n	800bf88 <_printf_float+0x21c>
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	07d8      	lsls	r0, r3, #31
 800bf86:	d50f      	bpl.n	800bfa8 <_printf_float+0x23c>
 800bf88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b8      	blx	r7
 800bf92:	3001      	adds	r0, #1
 800bf94:	f43f af45 	beq.w	800be22 <_printf_float+0xb6>
 800bf98:	f04f 0900 	mov.w	r9, #0
 800bf9c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfa0:	f104 0a1a 	add.w	sl, r4, #26
 800bfa4:	45c8      	cmp	r8, r9
 800bfa6:	dc09      	bgt.n	800bfbc <_printf_float+0x250>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	079b      	lsls	r3, r3, #30
 800bfac:	f100 8103 	bmi.w	800c1b6 <_printf_float+0x44a>
 800bfb0:	68e0      	ldr	r0, [r4, #12]
 800bfb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb4:	4298      	cmp	r0, r3
 800bfb6:	bfb8      	it	lt
 800bfb8:	4618      	movlt	r0, r3
 800bfba:	e734      	b.n	800be26 <_printf_float+0xba>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	4652      	mov	r2, sl
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	47b8      	blx	r7
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	f43f af2b 	beq.w	800be22 <_printf_float+0xb6>
 800bfcc:	f109 0901 	add.w	r9, r9, #1
 800bfd0:	e7e8      	b.n	800bfa4 <_printf_float+0x238>
 800bfd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dc39      	bgt.n	800c04c <_printf_float+0x2e0>
 800bfd8:	4a1b      	ldr	r2, [pc, #108]	@ (800c048 <_printf_float+0x2dc>)
 800bfda:	2301      	movs	r3, #1
 800bfdc:	4631      	mov	r1, r6
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b8      	blx	r7
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	f43f af1d 	beq.w	800be22 <_printf_float+0xb6>
 800bfe8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bfec:	ea59 0303 	orrs.w	r3, r9, r3
 800bff0:	d102      	bne.n	800bff8 <_printf_float+0x28c>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	07d9      	lsls	r1, r3, #31
 800bff6:	d5d7      	bpl.n	800bfa8 <_printf_float+0x23c>
 800bff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bffc:	4631      	mov	r1, r6
 800bffe:	4628      	mov	r0, r5
 800c000:	47b8      	blx	r7
 800c002:	3001      	adds	r0, #1
 800c004:	f43f af0d 	beq.w	800be22 <_printf_float+0xb6>
 800c008:	f04f 0a00 	mov.w	sl, #0
 800c00c:	f104 0b1a 	add.w	fp, r4, #26
 800c010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c012:	425b      	negs	r3, r3
 800c014:	4553      	cmp	r3, sl
 800c016:	dc01      	bgt.n	800c01c <_printf_float+0x2b0>
 800c018:	464b      	mov	r3, r9
 800c01a:	e793      	b.n	800bf44 <_printf_float+0x1d8>
 800c01c:	2301      	movs	r3, #1
 800c01e:	465a      	mov	r2, fp
 800c020:	4631      	mov	r1, r6
 800c022:	4628      	mov	r0, r5
 800c024:	47b8      	blx	r7
 800c026:	3001      	adds	r0, #1
 800c028:	f43f aefb 	beq.w	800be22 <_printf_float+0xb6>
 800c02c:	f10a 0a01 	add.w	sl, sl, #1
 800c030:	e7ee      	b.n	800c010 <_printf_float+0x2a4>
 800c032:	bf00      	nop
 800c034:	7fefffff 	.word	0x7fefffff
 800c038:	0800f598 	.word	0x0800f598
 800c03c:	0800f59c 	.word	0x0800f59c
 800c040:	0800f5a0 	.word	0x0800f5a0
 800c044:	0800f5a4 	.word	0x0800f5a4
 800c048:	0800f5a8 	.word	0x0800f5a8
 800c04c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c04e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c052:	4553      	cmp	r3, sl
 800c054:	bfa8      	it	ge
 800c056:	4653      	movge	r3, sl
 800c058:	2b00      	cmp	r3, #0
 800c05a:	4699      	mov	r9, r3
 800c05c:	dc36      	bgt.n	800c0cc <_printf_float+0x360>
 800c05e:	f04f 0b00 	mov.w	fp, #0
 800c062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c066:	f104 021a 	add.w	r2, r4, #26
 800c06a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c06c:	9306      	str	r3, [sp, #24]
 800c06e:	eba3 0309 	sub.w	r3, r3, r9
 800c072:	455b      	cmp	r3, fp
 800c074:	dc31      	bgt.n	800c0da <_printf_float+0x36e>
 800c076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c078:	459a      	cmp	sl, r3
 800c07a:	dc3a      	bgt.n	800c0f2 <_printf_float+0x386>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	07da      	lsls	r2, r3, #31
 800c080:	d437      	bmi.n	800c0f2 <_printf_float+0x386>
 800c082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c084:	ebaa 0903 	sub.w	r9, sl, r3
 800c088:	9b06      	ldr	r3, [sp, #24]
 800c08a:	ebaa 0303 	sub.w	r3, sl, r3
 800c08e:	4599      	cmp	r9, r3
 800c090:	bfa8      	it	ge
 800c092:	4699      	movge	r9, r3
 800c094:	f1b9 0f00 	cmp.w	r9, #0
 800c098:	dc33      	bgt.n	800c102 <_printf_float+0x396>
 800c09a:	f04f 0800 	mov.w	r8, #0
 800c09e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0a2:	f104 0b1a 	add.w	fp, r4, #26
 800c0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0a8:	ebaa 0303 	sub.w	r3, sl, r3
 800c0ac:	eba3 0309 	sub.w	r3, r3, r9
 800c0b0:	4543      	cmp	r3, r8
 800c0b2:	f77f af79 	ble.w	800bfa8 <_printf_float+0x23c>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	465a      	mov	r2, fp
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b8      	blx	r7
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	f43f aeae 	beq.w	800be22 <_printf_float+0xb6>
 800c0c6:	f108 0801 	add.w	r8, r8, #1
 800c0ca:	e7ec      	b.n	800c0a6 <_printf_float+0x33a>
 800c0cc:	4642      	mov	r2, r8
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	47b8      	blx	r7
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d1c2      	bne.n	800c05e <_printf_float+0x2f2>
 800c0d8:	e6a3      	b.n	800be22 <_printf_float+0xb6>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4628      	mov	r0, r5
 800c0e0:	9206      	str	r2, [sp, #24]
 800c0e2:	47b8      	blx	r7
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	f43f ae9c 	beq.w	800be22 <_printf_float+0xb6>
 800c0ea:	9a06      	ldr	r2, [sp, #24]
 800c0ec:	f10b 0b01 	add.w	fp, fp, #1
 800c0f0:	e7bb      	b.n	800c06a <_printf_float+0x2fe>
 800c0f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0f6:	4631      	mov	r1, r6
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	47b8      	blx	r7
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d1c0      	bne.n	800c082 <_printf_float+0x316>
 800c100:	e68f      	b.n	800be22 <_printf_float+0xb6>
 800c102:	9a06      	ldr	r2, [sp, #24]
 800c104:	464b      	mov	r3, r9
 800c106:	4442      	add	r2, r8
 800c108:	4631      	mov	r1, r6
 800c10a:	4628      	mov	r0, r5
 800c10c:	47b8      	blx	r7
 800c10e:	3001      	adds	r0, #1
 800c110:	d1c3      	bne.n	800c09a <_printf_float+0x32e>
 800c112:	e686      	b.n	800be22 <_printf_float+0xb6>
 800c114:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c118:	f1ba 0f01 	cmp.w	sl, #1
 800c11c:	dc01      	bgt.n	800c122 <_printf_float+0x3b6>
 800c11e:	07db      	lsls	r3, r3, #31
 800c120:	d536      	bpl.n	800c190 <_printf_float+0x424>
 800c122:	2301      	movs	r3, #1
 800c124:	4642      	mov	r2, r8
 800c126:	4631      	mov	r1, r6
 800c128:	4628      	mov	r0, r5
 800c12a:	47b8      	blx	r7
 800c12c:	3001      	adds	r0, #1
 800c12e:	f43f ae78 	beq.w	800be22 <_printf_float+0xb6>
 800c132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c136:	4631      	mov	r1, r6
 800c138:	4628      	mov	r0, r5
 800c13a:	47b8      	blx	r7
 800c13c:	3001      	adds	r0, #1
 800c13e:	f43f ae70 	beq.w	800be22 <_printf_float+0xb6>
 800c142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c146:	2200      	movs	r2, #0
 800c148:	2300      	movs	r3, #0
 800c14a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c14e:	f7f4 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c152:	b9c0      	cbnz	r0, 800c186 <_printf_float+0x41a>
 800c154:	4653      	mov	r3, sl
 800c156:	f108 0201 	add.w	r2, r8, #1
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	d10c      	bne.n	800c17e <_printf_float+0x412>
 800c164:	e65d      	b.n	800be22 <_printf_float+0xb6>
 800c166:	2301      	movs	r3, #1
 800c168:	465a      	mov	r2, fp
 800c16a:	4631      	mov	r1, r6
 800c16c:	4628      	mov	r0, r5
 800c16e:	47b8      	blx	r7
 800c170:	3001      	adds	r0, #1
 800c172:	f43f ae56 	beq.w	800be22 <_printf_float+0xb6>
 800c176:	f108 0801 	add.w	r8, r8, #1
 800c17a:	45d0      	cmp	r8, sl
 800c17c:	dbf3      	blt.n	800c166 <_printf_float+0x3fa>
 800c17e:	464b      	mov	r3, r9
 800c180:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c184:	e6df      	b.n	800bf46 <_printf_float+0x1da>
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	f104 0b1a 	add.w	fp, r4, #26
 800c18e:	e7f4      	b.n	800c17a <_printf_float+0x40e>
 800c190:	2301      	movs	r3, #1
 800c192:	4642      	mov	r2, r8
 800c194:	e7e1      	b.n	800c15a <_printf_float+0x3ee>
 800c196:	2301      	movs	r3, #1
 800c198:	464a      	mov	r2, r9
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f43f ae3e 	beq.w	800be22 <_printf_float+0xb6>
 800c1a6:	f108 0801 	add.w	r8, r8, #1
 800c1aa:	68e3      	ldr	r3, [r4, #12]
 800c1ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1ae:	1a5b      	subs	r3, r3, r1
 800c1b0:	4543      	cmp	r3, r8
 800c1b2:	dcf0      	bgt.n	800c196 <_printf_float+0x42a>
 800c1b4:	e6fc      	b.n	800bfb0 <_printf_float+0x244>
 800c1b6:	f04f 0800 	mov.w	r8, #0
 800c1ba:	f104 0919 	add.w	r9, r4, #25
 800c1be:	e7f4      	b.n	800c1aa <_printf_float+0x43e>

0800c1c0 <_printf_common>:
 800c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	4698      	mov	r8, r3
 800c1c8:	688a      	ldr	r2, [r1, #8]
 800c1ca:	690b      	ldr	r3, [r1, #16]
 800c1cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	bfb8      	it	lt
 800c1d4:	4613      	movlt	r3, r2
 800c1d6:	6033      	str	r3, [r6, #0]
 800c1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c1dc:	4607      	mov	r7, r0
 800c1de:	460c      	mov	r4, r1
 800c1e0:	b10a      	cbz	r2, 800c1e6 <_printf_common+0x26>
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	6033      	str	r3, [r6, #0]
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	0699      	lsls	r1, r3, #26
 800c1ea:	bf42      	ittt	mi
 800c1ec:	6833      	ldrmi	r3, [r6, #0]
 800c1ee:	3302      	addmi	r3, #2
 800c1f0:	6033      	strmi	r3, [r6, #0]
 800c1f2:	6825      	ldr	r5, [r4, #0]
 800c1f4:	f015 0506 	ands.w	r5, r5, #6
 800c1f8:	d106      	bne.n	800c208 <_printf_common+0x48>
 800c1fa:	f104 0a19 	add.w	sl, r4, #25
 800c1fe:	68e3      	ldr	r3, [r4, #12]
 800c200:	6832      	ldr	r2, [r6, #0]
 800c202:	1a9b      	subs	r3, r3, r2
 800c204:	42ab      	cmp	r3, r5
 800c206:	dc26      	bgt.n	800c256 <_printf_common+0x96>
 800c208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c20c:	6822      	ldr	r2, [r4, #0]
 800c20e:	3b00      	subs	r3, #0
 800c210:	bf18      	it	ne
 800c212:	2301      	movne	r3, #1
 800c214:	0692      	lsls	r2, r2, #26
 800c216:	d42b      	bmi.n	800c270 <_printf_common+0xb0>
 800c218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c21c:	4641      	mov	r1, r8
 800c21e:	4638      	mov	r0, r7
 800c220:	47c8      	blx	r9
 800c222:	3001      	adds	r0, #1
 800c224:	d01e      	beq.n	800c264 <_printf_common+0xa4>
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	6922      	ldr	r2, [r4, #16]
 800c22a:	f003 0306 	and.w	r3, r3, #6
 800c22e:	2b04      	cmp	r3, #4
 800c230:	bf02      	ittt	eq
 800c232:	68e5      	ldreq	r5, [r4, #12]
 800c234:	6833      	ldreq	r3, [r6, #0]
 800c236:	1aed      	subeq	r5, r5, r3
 800c238:	68a3      	ldr	r3, [r4, #8]
 800c23a:	bf0c      	ite	eq
 800c23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c240:	2500      	movne	r5, #0
 800c242:	4293      	cmp	r3, r2
 800c244:	bfc4      	itt	gt
 800c246:	1a9b      	subgt	r3, r3, r2
 800c248:	18ed      	addgt	r5, r5, r3
 800c24a:	2600      	movs	r6, #0
 800c24c:	341a      	adds	r4, #26
 800c24e:	42b5      	cmp	r5, r6
 800c250:	d11a      	bne.n	800c288 <_printf_common+0xc8>
 800c252:	2000      	movs	r0, #0
 800c254:	e008      	b.n	800c268 <_printf_common+0xa8>
 800c256:	2301      	movs	r3, #1
 800c258:	4652      	mov	r2, sl
 800c25a:	4641      	mov	r1, r8
 800c25c:	4638      	mov	r0, r7
 800c25e:	47c8      	blx	r9
 800c260:	3001      	adds	r0, #1
 800c262:	d103      	bne.n	800c26c <_printf_common+0xac>
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c26c:	3501      	adds	r5, #1
 800c26e:	e7c6      	b.n	800c1fe <_printf_common+0x3e>
 800c270:	18e1      	adds	r1, r4, r3
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	2030      	movs	r0, #48	@ 0x30
 800c276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c27a:	4422      	add	r2, r4
 800c27c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c284:	3302      	adds	r3, #2
 800c286:	e7c7      	b.n	800c218 <_printf_common+0x58>
 800c288:	2301      	movs	r3, #1
 800c28a:	4622      	mov	r2, r4
 800c28c:	4641      	mov	r1, r8
 800c28e:	4638      	mov	r0, r7
 800c290:	47c8      	blx	r9
 800c292:	3001      	adds	r0, #1
 800c294:	d0e6      	beq.n	800c264 <_printf_common+0xa4>
 800c296:	3601      	adds	r6, #1
 800c298:	e7d9      	b.n	800c24e <_printf_common+0x8e>
	...

0800c29c <_printf_i>:
 800c29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a0:	7e0f      	ldrb	r7, [r1, #24]
 800c2a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c2a4:	2f78      	cmp	r7, #120	@ 0x78
 800c2a6:	4691      	mov	r9, r2
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	469a      	mov	sl, r3
 800c2ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c2b2:	d807      	bhi.n	800c2c4 <_printf_i+0x28>
 800c2b4:	2f62      	cmp	r7, #98	@ 0x62
 800c2b6:	d80a      	bhi.n	800c2ce <_printf_i+0x32>
 800c2b8:	2f00      	cmp	r7, #0
 800c2ba:	f000 80d2 	beq.w	800c462 <_printf_i+0x1c6>
 800c2be:	2f58      	cmp	r7, #88	@ 0x58
 800c2c0:	f000 80b9 	beq.w	800c436 <_printf_i+0x19a>
 800c2c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c2cc:	e03a      	b.n	800c344 <_printf_i+0xa8>
 800c2ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c2d2:	2b15      	cmp	r3, #21
 800c2d4:	d8f6      	bhi.n	800c2c4 <_printf_i+0x28>
 800c2d6:	a101      	add	r1, pc, #4	@ (adr r1, 800c2dc <_printf_i+0x40>)
 800c2d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2dc:	0800c335 	.word	0x0800c335
 800c2e0:	0800c349 	.word	0x0800c349
 800c2e4:	0800c2c5 	.word	0x0800c2c5
 800c2e8:	0800c2c5 	.word	0x0800c2c5
 800c2ec:	0800c2c5 	.word	0x0800c2c5
 800c2f0:	0800c2c5 	.word	0x0800c2c5
 800c2f4:	0800c349 	.word	0x0800c349
 800c2f8:	0800c2c5 	.word	0x0800c2c5
 800c2fc:	0800c2c5 	.word	0x0800c2c5
 800c300:	0800c2c5 	.word	0x0800c2c5
 800c304:	0800c2c5 	.word	0x0800c2c5
 800c308:	0800c449 	.word	0x0800c449
 800c30c:	0800c373 	.word	0x0800c373
 800c310:	0800c403 	.word	0x0800c403
 800c314:	0800c2c5 	.word	0x0800c2c5
 800c318:	0800c2c5 	.word	0x0800c2c5
 800c31c:	0800c46b 	.word	0x0800c46b
 800c320:	0800c2c5 	.word	0x0800c2c5
 800c324:	0800c373 	.word	0x0800c373
 800c328:	0800c2c5 	.word	0x0800c2c5
 800c32c:	0800c2c5 	.word	0x0800c2c5
 800c330:	0800c40b 	.word	0x0800c40b
 800c334:	6833      	ldr	r3, [r6, #0]
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6032      	str	r2, [r6, #0]
 800c33c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c344:	2301      	movs	r3, #1
 800c346:	e09d      	b.n	800c484 <_printf_i+0x1e8>
 800c348:	6833      	ldr	r3, [r6, #0]
 800c34a:	6820      	ldr	r0, [r4, #0]
 800c34c:	1d19      	adds	r1, r3, #4
 800c34e:	6031      	str	r1, [r6, #0]
 800c350:	0606      	lsls	r6, r0, #24
 800c352:	d501      	bpl.n	800c358 <_printf_i+0xbc>
 800c354:	681d      	ldr	r5, [r3, #0]
 800c356:	e003      	b.n	800c360 <_printf_i+0xc4>
 800c358:	0645      	lsls	r5, r0, #25
 800c35a:	d5fb      	bpl.n	800c354 <_printf_i+0xb8>
 800c35c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c360:	2d00      	cmp	r5, #0
 800c362:	da03      	bge.n	800c36c <_printf_i+0xd0>
 800c364:	232d      	movs	r3, #45	@ 0x2d
 800c366:	426d      	negs	r5, r5
 800c368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c36c:	4859      	ldr	r0, [pc, #356]	@ (800c4d4 <_printf_i+0x238>)
 800c36e:	230a      	movs	r3, #10
 800c370:	e011      	b.n	800c396 <_printf_i+0xfa>
 800c372:	6821      	ldr	r1, [r4, #0]
 800c374:	6833      	ldr	r3, [r6, #0]
 800c376:	0608      	lsls	r0, r1, #24
 800c378:	f853 5b04 	ldr.w	r5, [r3], #4
 800c37c:	d402      	bmi.n	800c384 <_printf_i+0xe8>
 800c37e:	0649      	lsls	r1, r1, #25
 800c380:	bf48      	it	mi
 800c382:	b2ad      	uxthmi	r5, r5
 800c384:	2f6f      	cmp	r7, #111	@ 0x6f
 800c386:	4853      	ldr	r0, [pc, #332]	@ (800c4d4 <_printf_i+0x238>)
 800c388:	6033      	str	r3, [r6, #0]
 800c38a:	bf14      	ite	ne
 800c38c:	230a      	movne	r3, #10
 800c38e:	2308      	moveq	r3, #8
 800c390:	2100      	movs	r1, #0
 800c392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c396:	6866      	ldr	r6, [r4, #4]
 800c398:	60a6      	str	r6, [r4, #8]
 800c39a:	2e00      	cmp	r6, #0
 800c39c:	bfa2      	ittt	ge
 800c39e:	6821      	ldrge	r1, [r4, #0]
 800c3a0:	f021 0104 	bicge.w	r1, r1, #4
 800c3a4:	6021      	strge	r1, [r4, #0]
 800c3a6:	b90d      	cbnz	r5, 800c3ac <_printf_i+0x110>
 800c3a8:	2e00      	cmp	r6, #0
 800c3aa:	d04b      	beq.n	800c444 <_printf_i+0x1a8>
 800c3ac:	4616      	mov	r6, r2
 800c3ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3b2:	fb03 5711 	mls	r7, r3, r1, r5
 800c3b6:	5dc7      	ldrb	r7, [r0, r7]
 800c3b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3bc:	462f      	mov	r7, r5
 800c3be:	42bb      	cmp	r3, r7
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	d9f4      	bls.n	800c3ae <_printf_i+0x112>
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d10b      	bne.n	800c3e0 <_printf_i+0x144>
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	07df      	lsls	r7, r3, #31
 800c3cc:	d508      	bpl.n	800c3e0 <_printf_i+0x144>
 800c3ce:	6923      	ldr	r3, [r4, #16]
 800c3d0:	6861      	ldr	r1, [r4, #4]
 800c3d2:	4299      	cmp	r1, r3
 800c3d4:	bfde      	ittt	le
 800c3d6:	2330      	movle	r3, #48	@ 0x30
 800c3d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c3e0:	1b92      	subs	r2, r2, r6
 800c3e2:	6122      	str	r2, [r4, #16]
 800c3e4:	f8cd a000 	str.w	sl, [sp]
 800c3e8:	464b      	mov	r3, r9
 800c3ea:	aa03      	add	r2, sp, #12
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	4640      	mov	r0, r8
 800c3f0:	f7ff fee6 	bl	800c1c0 <_printf_common>
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d14a      	bne.n	800c48e <_printf_i+0x1f2>
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	b004      	add	sp, #16
 800c3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	f043 0320 	orr.w	r3, r3, #32
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	4833      	ldr	r0, [pc, #204]	@ (800c4d8 <_printf_i+0x23c>)
 800c40c:	2778      	movs	r7, #120	@ 0x78
 800c40e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	6831      	ldr	r1, [r6, #0]
 800c416:	061f      	lsls	r7, r3, #24
 800c418:	f851 5b04 	ldr.w	r5, [r1], #4
 800c41c:	d402      	bmi.n	800c424 <_printf_i+0x188>
 800c41e:	065f      	lsls	r7, r3, #25
 800c420:	bf48      	it	mi
 800c422:	b2ad      	uxthmi	r5, r5
 800c424:	6031      	str	r1, [r6, #0]
 800c426:	07d9      	lsls	r1, r3, #31
 800c428:	bf44      	itt	mi
 800c42a:	f043 0320 	orrmi.w	r3, r3, #32
 800c42e:	6023      	strmi	r3, [r4, #0]
 800c430:	b11d      	cbz	r5, 800c43a <_printf_i+0x19e>
 800c432:	2310      	movs	r3, #16
 800c434:	e7ac      	b.n	800c390 <_printf_i+0xf4>
 800c436:	4827      	ldr	r0, [pc, #156]	@ (800c4d4 <_printf_i+0x238>)
 800c438:	e7e9      	b.n	800c40e <_printf_i+0x172>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	f023 0320 	bic.w	r3, r3, #32
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	e7f6      	b.n	800c432 <_printf_i+0x196>
 800c444:	4616      	mov	r6, r2
 800c446:	e7bd      	b.n	800c3c4 <_printf_i+0x128>
 800c448:	6833      	ldr	r3, [r6, #0]
 800c44a:	6825      	ldr	r5, [r4, #0]
 800c44c:	6961      	ldr	r1, [r4, #20]
 800c44e:	1d18      	adds	r0, r3, #4
 800c450:	6030      	str	r0, [r6, #0]
 800c452:	062e      	lsls	r6, r5, #24
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	d501      	bpl.n	800c45c <_printf_i+0x1c0>
 800c458:	6019      	str	r1, [r3, #0]
 800c45a:	e002      	b.n	800c462 <_printf_i+0x1c6>
 800c45c:	0668      	lsls	r0, r5, #25
 800c45e:	d5fb      	bpl.n	800c458 <_printf_i+0x1bc>
 800c460:	8019      	strh	r1, [r3, #0]
 800c462:	2300      	movs	r3, #0
 800c464:	6123      	str	r3, [r4, #16]
 800c466:	4616      	mov	r6, r2
 800c468:	e7bc      	b.n	800c3e4 <_printf_i+0x148>
 800c46a:	6833      	ldr	r3, [r6, #0]
 800c46c:	1d1a      	adds	r2, r3, #4
 800c46e:	6032      	str	r2, [r6, #0]
 800c470:	681e      	ldr	r6, [r3, #0]
 800c472:	6862      	ldr	r2, [r4, #4]
 800c474:	2100      	movs	r1, #0
 800c476:	4630      	mov	r0, r6
 800c478:	f7f3 feaa 	bl	80001d0 <memchr>
 800c47c:	b108      	cbz	r0, 800c482 <_printf_i+0x1e6>
 800c47e:	1b80      	subs	r0, r0, r6
 800c480:	6060      	str	r0, [r4, #4]
 800c482:	6863      	ldr	r3, [r4, #4]
 800c484:	6123      	str	r3, [r4, #16]
 800c486:	2300      	movs	r3, #0
 800c488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c48c:	e7aa      	b.n	800c3e4 <_printf_i+0x148>
 800c48e:	6923      	ldr	r3, [r4, #16]
 800c490:	4632      	mov	r2, r6
 800c492:	4649      	mov	r1, r9
 800c494:	4640      	mov	r0, r8
 800c496:	47d0      	blx	sl
 800c498:	3001      	adds	r0, #1
 800c49a:	d0ad      	beq.n	800c3f8 <_printf_i+0x15c>
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	079b      	lsls	r3, r3, #30
 800c4a0:	d413      	bmi.n	800c4ca <_printf_i+0x22e>
 800c4a2:	68e0      	ldr	r0, [r4, #12]
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	4298      	cmp	r0, r3
 800c4a8:	bfb8      	it	lt
 800c4aa:	4618      	movlt	r0, r3
 800c4ac:	e7a6      	b.n	800c3fc <_printf_i+0x160>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	47d0      	blx	sl
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d09d      	beq.n	800c3f8 <_printf_i+0x15c>
 800c4bc:	3501      	adds	r5, #1
 800c4be:	68e3      	ldr	r3, [r4, #12]
 800c4c0:	9903      	ldr	r1, [sp, #12]
 800c4c2:	1a5b      	subs	r3, r3, r1
 800c4c4:	42ab      	cmp	r3, r5
 800c4c6:	dcf2      	bgt.n	800c4ae <_printf_i+0x212>
 800c4c8:	e7eb      	b.n	800c4a2 <_printf_i+0x206>
 800c4ca:	2500      	movs	r5, #0
 800c4cc:	f104 0619 	add.w	r6, r4, #25
 800c4d0:	e7f5      	b.n	800c4be <_printf_i+0x222>
 800c4d2:	bf00      	nop
 800c4d4:	0800f5aa 	.word	0x0800f5aa
 800c4d8:	0800f5bb 	.word	0x0800f5bb

0800c4dc <std>:
 800c4dc:	2300      	movs	r3, #0
 800c4de:	b510      	push	{r4, lr}
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	e9c0 3300 	strd	r3, r3, [r0]
 800c4e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ea:	6083      	str	r3, [r0, #8]
 800c4ec:	8181      	strh	r1, [r0, #12]
 800c4ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800c4f0:	81c2      	strh	r2, [r0, #14]
 800c4f2:	6183      	str	r3, [r0, #24]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	2208      	movs	r2, #8
 800c4f8:	305c      	adds	r0, #92	@ 0x5c
 800c4fa:	f000 f914 	bl	800c726 <memset>
 800c4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c534 <std+0x58>)
 800c500:	6263      	str	r3, [r4, #36]	@ 0x24
 800c502:	4b0d      	ldr	r3, [pc, #52]	@ (800c538 <std+0x5c>)
 800c504:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c506:	4b0d      	ldr	r3, [pc, #52]	@ (800c53c <std+0x60>)
 800c508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c50a:	4b0d      	ldr	r3, [pc, #52]	@ (800c540 <std+0x64>)
 800c50c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c50e:	4b0d      	ldr	r3, [pc, #52]	@ (800c544 <std+0x68>)
 800c510:	6224      	str	r4, [r4, #32]
 800c512:	429c      	cmp	r4, r3
 800c514:	d006      	beq.n	800c524 <std+0x48>
 800c516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c51a:	4294      	cmp	r4, r2
 800c51c:	d002      	beq.n	800c524 <std+0x48>
 800c51e:	33d0      	adds	r3, #208	@ 0xd0
 800c520:	429c      	cmp	r4, r3
 800c522:	d105      	bne.n	800c530 <std+0x54>
 800c524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c52c:	f000 b978 	b.w	800c820 <__retarget_lock_init_recursive>
 800c530:	bd10      	pop	{r4, pc}
 800c532:	bf00      	nop
 800c534:	0800c6a1 	.word	0x0800c6a1
 800c538:	0800c6c3 	.word	0x0800c6c3
 800c53c:	0800c6fb 	.word	0x0800c6fb
 800c540:	0800c71f 	.word	0x0800c71f
 800c544:	20005294 	.word	0x20005294

0800c548 <stdio_exit_handler>:
 800c548:	4a02      	ldr	r2, [pc, #8]	@ (800c554 <stdio_exit_handler+0xc>)
 800c54a:	4903      	ldr	r1, [pc, #12]	@ (800c558 <stdio_exit_handler+0x10>)
 800c54c:	4803      	ldr	r0, [pc, #12]	@ (800c55c <stdio_exit_handler+0x14>)
 800c54e:	f000 b869 	b.w	800c624 <_fwalk_sglue>
 800c552:	bf00      	nop
 800c554:	20000014 	.word	0x20000014
 800c558:	0800e19d 	.word	0x0800e19d
 800c55c:	20000024 	.word	0x20000024

0800c560 <cleanup_stdio>:
 800c560:	6841      	ldr	r1, [r0, #4]
 800c562:	4b0c      	ldr	r3, [pc, #48]	@ (800c594 <cleanup_stdio+0x34>)
 800c564:	4299      	cmp	r1, r3
 800c566:	b510      	push	{r4, lr}
 800c568:	4604      	mov	r4, r0
 800c56a:	d001      	beq.n	800c570 <cleanup_stdio+0x10>
 800c56c:	f001 fe16 	bl	800e19c <_fflush_r>
 800c570:	68a1      	ldr	r1, [r4, #8]
 800c572:	4b09      	ldr	r3, [pc, #36]	@ (800c598 <cleanup_stdio+0x38>)
 800c574:	4299      	cmp	r1, r3
 800c576:	d002      	beq.n	800c57e <cleanup_stdio+0x1e>
 800c578:	4620      	mov	r0, r4
 800c57a:	f001 fe0f 	bl	800e19c <_fflush_r>
 800c57e:	68e1      	ldr	r1, [r4, #12]
 800c580:	4b06      	ldr	r3, [pc, #24]	@ (800c59c <cleanup_stdio+0x3c>)
 800c582:	4299      	cmp	r1, r3
 800c584:	d004      	beq.n	800c590 <cleanup_stdio+0x30>
 800c586:	4620      	mov	r0, r4
 800c588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c58c:	f001 be06 	b.w	800e19c <_fflush_r>
 800c590:	bd10      	pop	{r4, pc}
 800c592:	bf00      	nop
 800c594:	20005294 	.word	0x20005294
 800c598:	200052fc 	.word	0x200052fc
 800c59c:	20005364 	.word	0x20005364

0800c5a0 <global_stdio_init.part.0>:
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d0 <global_stdio_init.part.0+0x30>)
 800c5a4:	4c0b      	ldr	r4, [pc, #44]	@ (800c5d4 <global_stdio_init.part.0+0x34>)
 800c5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800c5d8 <global_stdio_init.part.0+0x38>)
 800c5a8:	601a      	str	r2, [r3, #0]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2104      	movs	r1, #4
 800c5b0:	f7ff ff94 	bl	800c4dc <std>
 800c5b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	2109      	movs	r1, #9
 800c5bc:	f7ff ff8e 	bl	800c4dc <std>
 800c5c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c5c4:	2202      	movs	r2, #2
 800c5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5ca:	2112      	movs	r1, #18
 800c5cc:	f7ff bf86 	b.w	800c4dc <std>
 800c5d0:	200053cc 	.word	0x200053cc
 800c5d4:	20005294 	.word	0x20005294
 800c5d8:	0800c549 	.word	0x0800c549

0800c5dc <__sfp_lock_acquire>:
 800c5dc:	4801      	ldr	r0, [pc, #4]	@ (800c5e4 <__sfp_lock_acquire+0x8>)
 800c5de:	f000 b920 	b.w	800c822 <__retarget_lock_acquire_recursive>
 800c5e2:	bf00      	nop
 800c5e4:	200053d5 	.word	0x200053d5

0800c5e8 <__sfp_lock_release>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	@ (800c5f0 <__sfp_lock_release+0x8>)
 800c5ea:	f000 b91b 	b.w	800c824 <__retarget_lock_release_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	200053d5 	.word	0x200053d5

0800c5f4 <__sinit>:
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	f7ff fff0 	bl	800c5dc <__sfp_lock_acquire>
 800c5fc:	6a23      	ldr	r3, [r4, #32]
 800c5fe:	b11b      	cbz	r3, 800c608 <__sinit+0x14>
 800c600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c604:	f7ff bff0 	b.w	800c5e8 <__sfp_lock_release>
 800c608:	4b04      	ldr	r3, [pc, #16]	@ (800c61c <__sinit+0x28>)
 800c60a:	6223      	str	r3, [r4, #32]
 800c60c:	4b04      	ldr	r3, [pc, #16]	@ (800c620 <__sinit+0x2c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1f5      	bne.n	800c600 <__sinit+0xc>
 800c614:	f7ff ffc4 	bl	800c5a0 <global_stdio_init.part.0>
 800c618:	e7f2      	b.n	800c600 <__sinit+0xc>
 800c61a:	bf00      	nop
 800c61c:	0800c561 	.word	0x0800c561
 800c620:	200053cc 	.word	0x200053cc

0800c624 <_fwalk_sglue>:
 800c624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c628:	4607      	mov	r7, r0
 800c62a:	4688      	mov	r8, r1
 800c62c:	4614      	mov	r4, r2
 800c62e:	2600      	movs	r6, #0
 800c630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c634:	f1b9 0901 	subs.w	r9, r9, #1
 800c638:	d505      	bpl.n	800c646 <_fwalk_sglue+0x22>
 800c63a:	6824      	ldr	r4, [r4, #0]
 800c63c:	2c00      	cmp	r4, #0
 800c63e:	d1f7      	bne.n	800c630 <_fwalk_sglue+0xc>
 800c640:	4630      	mov	r0, r6
 800c642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c646:	89ab      	ldrh	r3, [r5, #12]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d907      	bls.n	800c65c <_fwalk_sglue+0x38>
 800c64c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c650:	3301      	adds	r3, #1
 800c652:	d003      	beq.n	800c65c <_fwalk_sglue+0x38>
 800c654:	4629      	mov	r1, r5
 800c656:	4638      	mov	r0, r7
 800c658:	47c0      	blx	r8
 800c65a:	4306      	orrs	r6, r0
 800c65c:	3568      	adds	r5, #104	@ 0x68
 800c65e:	e7e9      	b.n	800c634 <_fwalk_sglue+0x10>

0800c660 <siprintf>:
 800c660:	b40e      	push	{r1, r2, r3}
 800c662:	b500      	push	{lr}
 800c664:	b09c      	sub	sp, #112	@ 0x70
 800c666:	ab1d      	add	r3, sp, #116	@ 0x74
 800c668:	9002      	str	r0, [sp, #8]
 800c66a:	9006      	str	r0, [sp, #24]
 800c66c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c670:	4809      	ldr	r0, [pc, #36]	@ (800c698 <siprintf+0x38>)
 800c672:	9107      	str	r1, [sp, #28]
 800c674:	9104      	str	r1, [sp, #16]
 800c676:	4909      	ldr	r1, [pc, #36]	@ (800c69c <siprintf+0x3c>)
 800c678:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67c:	9105      	str	r1, [sp, #20]
 800c67e:	6800      	ldr	r0, [r0, #0]
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	a902      	add	r1, sp, #8
 800c684:	f001 fc0a 	bl	800de9c <_svfiprintf_r>
 800c688:	9b02      	ldr	r3, [sp, #8]
 800c68a:	2200      	movs	r2, #0
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	b01c      	add	sp, #112	@ 0x70
 800c690:	f85d eb04 	ldr.w	lr, [sp], #4
 800c694:	b003      	add	sp, #12
 800c696:	4770      	bx	lr
 800c698:	20000020 	.word	0x20000020
 800c69c:	ffff0208 	.word	0xffff0208

0800c6a0 <__sread>:
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a8:	f000 f86c 	bl	800c784 <_read_r>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	bfab      	itete	ge
 800c6b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c6b4:	181b      	addge	r3, r3, r0
 800c6b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6ba:	bfac      	ite	ge
 800c6bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6be:	81a3      	strhlt	r3, [r4, #12]
 800c6c0:	bd10      	pop	{r4, pc}

0800c6c2 <__swrite>:
 800c6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c6:	461f      	mov	r7, r3
 800c6c8:	898b      	ldrh	r3, [r1, #12]
 800c6ca:	05db      	lsls	r3, r3, #23
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	4616      	mov	r6, r2
 800c6d2:	d505      	bpl.n	800c6e0 <__swrite+0x1e>
 800c6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d8:	2302      	movs	r3, #2
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f000 f840 	bl	800c760 <_lseek_r>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	f000 b857 	b.w	800c7a8 <_write_r>

0800c6fa <__sseek>:
 800c6fa:	b510      	push	{r4, lr}
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c702:	f000 f82d 	bl	800c760 <_lseek_r>
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	bf15      	itete	ne
 800c70c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c70e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c716:	81a3      	strheq	r3, [r4, #12]
 800c718:	bf18      	it	ne
 800c71a:	81a3      	strhne	r3, [r4, #12]
 800c71c:	bd10      	pop	{r4, pc}

0800c71e <__sclose>:
 800c71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c722:	f000 b80d 	b.w	800c740 <_close_r>

0800c726 <memset>:
 800c726:	4402      	add	r2, r0
 800c728:	4603      	mov	r3, r0
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d100      	bne.n	800c730 <memset+0xa>
 800c72e:	4770      	bx	lr
 800c730:	f803 1b01 	strb.w	r1, [r3], #1
 800c734:	e7f9      	b.n	800c72a <memset+0x4>
	...

0800c738 <_localeconv_r>:
 800c738:	4800      	ldr	r0, [pc, #0]	@ (800c73c <_localeconv_r+0x4>)
 800c73a:	4770      	bx	lr
 800c73c:	20000160 	.word	0x20000160

0800c740 <_close_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d06      	ldr	r5, [pc, #24]	@ (800c75c <_close_r+0x1c>)
 800c744:	2300      	movs	r3, #0
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	f7f6 ff70 	bl	8003630 <_close>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	d102      	bne.n	800c75a <_close_r+0x1a>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	b103      	cbz	r3, 800c75a <_close_r+0x1a>
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	200053d0 	.word	0x200053d0

0800c760 <_lseek_r>:
 800c760:	b538      	push	{r3, r4, r5, lr}
 800c762:	4d07      	ldr	r5, [pc, #28]	@ (800c780 <_lseek_r+0x20>)
 800c764:	4604      	mov	r4, r0
 800c766:	4608      	mov	r0, r1
 800c768:	4611      	mov	r1, r2
 800c76a:	2200      	movs	r2, #0
 800c76c:	602a      	str	r2, [r5, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	f7f6 ff85 	bl	800367e <_lseek>
 800c774:	1c43      	adds	r3, r0, #1
 800c776:	d102      	bne.n	800c77e <_lseek_r+0x1e>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	b103      	cbz	r3, 800c77e <_lseek_r+0x1e>
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	bd38      	pop	{r3, r4, r5, pc}
 800c780:	200053d0 	.word	0x200053d0

0800c784 <_read_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4d07      	ldr	r5, [pc, #28]	@ (800c7a4 <_read_r+0x20>)
 800c788:	4604      	mov	r4, r0
 800c78a:	4608      	mov	r0, r1
 800c78c:	4611      	mov	r1, r2
 800c78e:	2200      	movs	r2, #0
 800c790:	602a      	str	r2, [r5, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	f7f6 ff13 	bl	80035be <_read>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_read_r+0x1e>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_read_r+0x1e>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	200053d0 	.word	0x200053d0

0800c7a8 <_write_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4d07      	ldr	r5, [pc, #28]	@ (800c7c8 <_write_r+0x20>)
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	4608      	mov	r0, r1
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	602a      	str	r2, [r5, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	f7f6 ff1e 	bl	80035f8 <_write>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d102      	bne.n	800c7c6 <_write_r+0x1e>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	b103      	cbz	r3, 800c7c6 <_write_r+0x1e>
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	200053d0 	.word	0x200053d0

0800c7cc <__errno>:
 800c7cc:	4b01      	ldr	r3, [pc, #4]	@ (800c7d4 <__errno+0x8>)
 800c7ce:	6818      	ldr	r0, [r3, #0]
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	20000020 	.word	0x20000020

0800c7d8 <__libc_init_array>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	4d0d      	ldr	r5, [pc, #52]	@ (800c810 <__libc_init_array+0x38>)
 800c7dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c814 <__libc_init_array+0x3c>)
 800c7de:	1b64      	subs	r4, r4, r5
 800c7e0:	10a4      	asrs	r4, r4, #2
 800c7e2:	2600      	movs	r6, #0
 800c7e4:	42a6      	cmp	r6, r4
 800c7e6:	d109      	bne.n	800c7fc <__libc_init_array+0x24>
 800c7e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c818 <__libc_init_array+0x40>)
 800c7ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c81c <__libc_init_array+0x44>)
 800c7ec:	f002 f866 	bl	800e8bc <_init>
 800c7f0:	1b64      	subs	r4, r4, r5
 800c7f2:	10a4      	asrs	r4, r4, #2
 800c7f4:	2600      	movs	r6, #0
 800c7f6:	42a6      	cmp	r6, r4
 800c7f8:	d105      	bne.n	800c806 <__libc_init_array+0x2e>
 800c7fa:	bd70      	pop	{r4, r5, r6, pc}
 800c7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c800:	4798      	blx	r3
 800c802:	3601      	adds	r6, #1
 800c804:	e7ee      	b.n	800c7e4 <__libc_init_array+0xc>
 800c806:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80a:	4798      	blx	r3
 800c80c:	3601      	adds	r6, #1
 800c80e:	e7f2      	b.n	800c7f6 <__libc_init_array+0x1e>
 800c810:	0800f910 	.word	0x0800f910
 800c814:	0800f910 	.word	0x0800f910
 800c818:	0800f910 	.word	0x0800f910
 800c81c:	0800f914 	.word	0x0800f914

0800c820 <__retarget_lock_init_recursive>:
 800c820:	4770      	bx	lr

0800c822 <__retarget_lock_acquire_recursive>:
 800c822:	4770      	bx	lr

0800c824 <__retarget_lock_release_recursive>:
 800c824:	4770      	bx	lr

0800c826 <memcpy>:
 800c826:	440a      	add	r2, r1
 800c828:	4291      	cmp	r1, r2
 800c82a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c82e:	d100      	bne.n	800c832 <memcpy+0xc>
 800c830:	4770      	bx	lr
 800c832:	b510      	push	{r4, lr}
 800c834:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c83c:	4291      	cmp	r1, r2
 800c83e:	d1f9      	bne.n	800c834 <memcpy+0xe>
 800c840:	bd10      	pop	{r4, pc}

0800c842 <quorem>:
 800c842:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c846:	6903      	ldr	r3, [r0, #16]
 800c848:	690c      	ldr	r4, [r1, #16]
 800c84a:	42a3      	cmp	r3, r4
 800c84c:	4607      	mov	r7, r0
 800c84e:	db7e      	blt.n	800c94e <quorem+0x10c>
 800c850:	3c01      	subs	r4, #1
 800c852:	f101 0814 	add.w	r8, r1, #20
 800c856:	00a3      	lsls	r3, r4, #2
 800c858:	f100 0514 	add.w	r5, r0, #20
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c86c:	3301      	adds	r3, #1
 800c86e:	429a      	cmp	r2, r3
 800c870:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c874:	fbb2 f6f3 	udiv	r6, r2, r3
 800c878:	d32e      	bcc.n	800c8d8 <quorem+0x96>
 800c87a:	f04f 0a00 	mov.w	sl, #0
 800c87e:	46c4      	mov	ip, r8
 800c880:	46ae      	mov	lr, r5
 800c882:	46d3      	mov	fp, sl
 800c884:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c888:	b298      	uxth	r0, r3
 800c88a:	fb06 a000 	mla	r0, r6, r0, sl
 800c88e:	0c02      	lsrs	r2, r0, #16
 800c890:	0c1b      	lsrs	r3, r3, #16
 800c892:	fb06 2303 	mla	r3, r6, r3, r2
 800c896:	f8de 2000 	ldr.w	r2, [lr]
 800c89a:	b280      	uxth	r0, r0
 800c89c:	b292      	uxth	r2, r2
 800c89e:	1a12      	subs	r2, r2, r0
 800c8a0:	445a      	add	r2, fp
 800c8a2:	f8de 0000 	ldr.w	r0, [lr]
 800c8a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c8b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c8b4:	b292      	uxth	r2, r2
 800c8b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c8ba:	45e1      	cmp	r9, ip
 800c8bc:	f84e 2b04 	str.w	r2, [lr], #4
 800c8c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c8c4:	d2de      	bcs.n	800c884 <quorem+0x42>
 800c8c6:	9b00      	ldr	r3, [sp, #0]
 800c8c8:	58eb      	ldr	r3, [r5, r3]
 800c8ca:	b92b      	cbnz	r3, 800c8d8 <quorem+0x96>
 800c8cc:	9b01      	ldr	r3, [sp, #4]
 800c8ce:	3b04      	subs	r3, #4
 800c8d0:	429d      	cmp	r5, r3
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	d32f      	bcc.n	800c936 <quorem+0xf4>
 800c8d6:	613c      	str	r4, [r7, #16]
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f001 f97b 	bl	800dbd4 <__mcmp>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	db25      	blt.n	800c92e <quorem+0xec>
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8ea:	f8d1 c000 	ldr.w	ip, [r1]
 800c8ee:	fa1f fe82 	uxth.w	lr, r2
 800c8f2:	fa1f f38c 	uxth.w	r3, ip
 800c8f6:	eba3 030e 	sub.w	r3, r3, lr
 800c8fa:	4403      	add	r3, r0
 800c8fc:	0c12      	lsrs	r2, r2, #16
 800c8fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c902:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c906:	b29b      	uxth	r3, r3
 800c908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c90c:	45c1      	cmp	r9, r8
 800c90e:	f841 3b04 	str.w	r3, [r1], #4
 800c912:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c916:	d2e6      	bcs.n	800c8e6 <quorem+0xa4>
 800c918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c91c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c920:	b922      	cbnz	r2, 800c92c <quorem+0xea>
 800c922:	3b04      	subs	r3, #4
 800c924:	429d      	cmp	r5, r3
 800c926:	461a      	mov	r2, r3
 800c928:	d30b      	bcc.n	800c942 <quorem+0x100>
 800c92a:	613c      	str	r4, [r7, #16]
 800c92c:	3601      	adds	r6, #1
 800c92e:	4630      	mov	r0, r6
 800c930:	b003      	add	sp, #12
 800c932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	3b04      	subs	r3, #4
 800c93a:	2a00      	cmp	r2, #0
 800c93c:	d1cb      	bne.n	800c8d6 <quorem+0x94>
 800c93e:	3c01      	subs	r4, #1
 800c940:	e7c6      	b.n	800c8d0 <quorem+0x8e>
 800c942:	6812      	ldr	r2, [r2, #0]
 800c944:	3b04      	subs	r3, #4
 800c946:	2a00      	cmp	r2, #0
 800c948:	d1ef      	bne.n	800c92a <quorem+0xe8>
 800c94a:	3c01      	subs	r4, #1
 800c94c:	e7ea      	b.n	800c924 <quorem+0xe2>
 800c94e:	2000      	movs	r0, #0
 800c950:	e7ee      	b.n	800c930 <quorem+0xee>
 800c952:	0000      	movs	r0, r0
 800c954:	0000      	movs	r0, r0
	...

0800c958 <_dtoa_r>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	69c7      	ldr	r7, [r0, #28]
 800c95e:	b099      	sub	sp, #100	@ 0x64
 800c960:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c964:	ec55 4b10 	vmov	r4, r5, d0
 800c968:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c96a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c96c:	4683      	mov	fp, r0
 800c96e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c970:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c972:	b97f      	cbnz	r7, 800c994 <_dtoa_r+0x3c>
 800c974:	2010      	movs	r0, #16
 800c976:	f000 fdfd 	bl	800d574 <malloc>
 800c97a:	4602      	mov	r2, r0
 800c97c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c980:	b920      	cbnz	r0, 800c98c <_dtoa_r+0x34>
 800c982:	4ba7      	ldr	r3, [pc, #668]	@ (800cc20 <_dtoa_r+0x2c8>)
 800c984:	21ef      	movs	r1, #239	@ 0xef
 800c986:	48a7      	ldr	r0, [pc, #668]	@ (800cc24 <_dtoa_r+0x2cc>)
 800c988:	f001 fc5a 	bl	800e240 <__assert_func>
 800c98c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c990:	6007      	str	r7, [r0, #0]
 800c992:	60c7      	str	r7, [r0, #12]
 800c994:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c998:	6819      	ldr	r1, [r3, #0]
 800c99a:	b159      	cbz	r1, 800c9b4 <_dtoa_r+0x5c>
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	604a      	str	r2, [r1, #4]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	4093      	lsls	r3, r2
 800c9a4:	608b      	str	r3, [r1, #8]
 800c9a6:	4658      	mov	r0, fp
 800c9a8:	f000 feda 	bl	800d760 <_Bfree>
 800c9ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	1e2b      	subs	r3, r5, #0
 800c9b6:	bfb9      	ittee	lt
 800c9b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c9bc:	9303      	strlt	r3, [sp, #12]
 800c9be:	2300      	movge	r3, #0
 800c9c0:	6033      	strge	r3, [r6, #0]
 800c9c2:	9f03      	ldr	r7, [sp, #12]
 800c9c4:	4b98      	ldr	r3, [pc, #608]	@ (800cc28 <_dtoa_r+0x2d0>)
 800c9c6:	bfbc      	itt	lt
 800c9c8:	2201      	movlt	r2, #1
 800c9ca:	6032      	strlt	r2, [r6, #0]
 800c9cc:	43bb      	bics	r3, r7
 800c9ce:	d112      	bne.n	800c9f6 <_dtoa_r+0x9e>
 800c9d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c9d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c9d6:	6013      	str	r3, [r2, #0]
 800c9d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9dc:	4323      	orrs	r3, r4
 800c9de:	f000 854d 	beq.w	800d47c <_dtoa_r+0xb24>
 800c9e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cc3c <_dtoa_r+0x2e4>
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 854f 	beq.w	800d48c <_dtoa_r+0xb34>
 800c9ee:	f10a 0303 	add.w	r3, sl, #3
 800c9f2:	f000 bd49 	b.w	800d488 <_dtoa_r+0xb30>
 800c9f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	ec51 0b17 	vmov	r0, r1, d7
 800ca00:	2300      	movs	r3, #0
 800ca02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ca06:	f7f4 f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca0a:	4680      	mov	r8, r0
 800ca0c:	b158      	cbz	r0, 800ca26 <_dtoa_r+0xce>
 800ca0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ca10:	2301      	movs	r3, #1
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca16:	b113      	cbz	r3, 800ca1e <_dtoa_r+0xc6>
 800ca18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ca1a:	4b84      	ldr	r3, [pc, #528]	@ (800cc2c <_dtoa_r+0x2d4>)
 800ca1c:	6013      	str	r3, [r2, #0]
 800ca1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cc40 <_dtoa_r+0x2e8>
 800ca22:	f000 bd33 	b.w	800d48c <_dtoa_r+0xb34>
 800ca26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ca2a:	aa16      	add	r2, sp, #88	@ 0x58
 800ca2c:	a917      	add	r1, sp, #92	@ 0x5c
 800ca2e:	4658      	mov	r0, fp
 800ca30:	f001 f980 	bl	800dd34 <__d2b>
 800ca34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca38:	4681      	mov	r9, r0
 800ca3a:	2e00      	cmp	r6, #0
 800ca3c:	d077      	beq.n	800cb2e <_dtoa_r+0x1d6>
 800ca3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ca44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ca54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ca58:	4619      	mov	r1, r3
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	4b74      	ldr	r3, [pc, #464]	@ (800cc30 <_dtoa_r+0x2d8>)
 800ca5e:	f7f3 fc13 	bl	8000288 <__aeabi_dsub>
 800ca62:	a369      	add	r3, pc, #420	@ (adr r3, 800cc08 <_dtoa_r+0x2b0>)
 800ca64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca68:	f7f3 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ca6c:	a368      	add	r3, pc, #416	@ (adr r3, 800cc10 <_dtoa_r+0x2b8>)
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f7f3 fc0b 	bl	800028c <__adddf3>
 800ca76:	4604      	mov	r4, r0
 800ca78:	4630      	mov	r0, r6
 800ca7a:	460d      	mov	r5, r1
 800ca7c:	f7f3 fd52 	bl	8000524 <__aeabi_i2d>
 800ca80:	a365      	add	r3, pc, #404	@ (adr r3, 800cc18 <_dtoa_r+0x2c0>)
 800ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca86:	f7f3 fdb7 	bl	80005f8 <__aeabi_dmul>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fbfb 	bl	800028c <__adddf3>
 800ca96:	4604      	mov	r4, r0
 800ca98:	460d      	mov	r5, r1
 800ca9a:	f7f4 f85d 	bl	8000b58 <__aeabi_d2iz>
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4607      	mov	r7, r0
 800caa2:	2300      	movs	r3, #0
 800caa4:	4620      	mov	r0, r4
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7f4 f818 	bl	8000adc <__aeabi_dcmplt>
 800caac:	b140      	cbz	r0, 800cac0 <_dtoa_r+0x168>
 800caae:	4638      	mov	r0, r7
 800cab0:	f7f3 fd38 	bl	8000524 <__aeabi_i2d>
 800cab4:	4622      	mov	r2, r4
 800cab6:	462b      	mov	r3, r5
 800cab8:	f7f4 f806 	bl	8000ac8 <__aeabi_dcmpeq>
 800cabc:	b900      	cbnz	r0, 800cac0 <_dtoa_r+0x168>
 800cabe:	3f01      	subs	r7, #1
 800cac0:	2f16      	cmp	r7, #22
 800cac2:	d851      	bhi.n	800cb68 <_dtoa_r+0x210>
 800cac4:	4b5b      	ldr	r3, [pc, #364]	@ (800cc34 <_dtoa_r+0x2dc>)
 800cac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cad2:	f7f4 f803 	bl	8000adc <__aeabi_dcmplt>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d048      	beq.n	800cb6c <_dtoa_r+0x214>
 800cada:	3f01      	subs	r7, #1
 800cadc:	2300      	movs	r3, #0
 800cade:	9312      	str	r3, [sp, #72]	@ 0x48
 800cae0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cae2:	1b9b      	subs	r3, r3, r6
 800cae4:	1e5a      	subs	r2, r3, #1
 800cae6:	bf44      	itt	mi
 800cae8:	f1c3 0801 	rsbmi	r8, r3, #1
 800caec:	2300      	movmi	r3, #0
 800caee:	9208      	str	r2, [sp, #32]
 800caf0:	bf54      	ite	pl
 800caf2:	f04f 0800 	movpl.w	r8, #0
 800caf6:	9308      	strmi	r3, [sp, #32]
 800caf8:	2f00      	cmp	r7, #0
 800cafa:	db39      	blt.n	800cb70 <_dtoa_r+0x218>
 800cafc:	9b08      	ldr	r3, [sp, #32]
 800cafe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cb00:	443b      	add	r3, r7
 800cb02:	9308      	str	r3, [sp, #32]
 800cb04:	2300      	movs	r3, #0
 800cb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb0a:	2b09      	cmp	r3, #9
 800cb0c:	d864      	bhi.n	800cbd8 <_dtoa_r+0x280>
 800cb0e:	2b05      	cmp	r3, #5
 800cb10:	bfc4      	itt	gt
 800cb12:	3b04      	subgt	r3, #4
 800cb14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb18:	f1a3 0302 	sub.w	r3, r3, #2
 800cb1c:	bfcc      	ite	gt
 800cb1e:	2400      	movgt	r4, #0
 800cb20:	2401      	movle	r4, #1
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d863      	bhi.n	800cbee <_dtoa_r+0x296>
 800cb26:	e8df f003 	tbb	[pc, r3]
 800cb2a:	372a      	.short	0x372a
 800cb2c:	5535      	.short	0x5535
 800cb2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cb32:	441e      	add	r6, r3
 800cb34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cb38:	2b20      	cmp	r3, #32
 800cb3a:	bfc1      	itttt	gt
 800cb3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cb40:	409f      	lslgt	r7, r3
 800cb42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cb46:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cb4a:	bfd6      	itet	le
 800cb4c:	f1c3 0320 	rsble	r3, r3, #32
 800cb50:	ea47 0003 	orrgt.w	r0, r7, r3
 800cb54:	fa04 f003 	lslle.w	r0, r4, r3
 800cb58:	f7f3 fcd4 	bl	8000504 <__aeabi_ui2d>
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cb62:	3e01      	subs	r6, #1
 800cb64:	9214      	str	r2, [sp, #80]	@ 0x50
 800cb66:	e777      	b.n	800ca58 <_dtoa_r+0x100>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e7b8      	b.n	800cade <_dtoa_r+0x186>
 800cb6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cb6e:	e7b7      	b.n	800cae0 <_dtoa_r+0x188>
 800cb70:	427b      	negs	r3, r7
 800cb72:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb74:	2300      	movs	r3, #0
 800cb76:	eba8 0807 	sub.w	r8, r8, r7
 800cb7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb7c:	e7c4      	b.n	800cb08 <_dtoa_r+0x1b0>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	dc35      	bgt.n	800cbf4 <_dtoa_r+0x29c>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	9307      	str	r3, [sp, #28]
 800cb8e:	461a      	mov	r2, r3
 800cb90:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb92:	e00b      	b.n	800cbac <_dtoa_r+0x254>
 800cb94:	2301      	movs	r3, #1
 800cb96:	e7f3      	b.n	800cb80 <_dtoa_r+0x228>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb9e:	18fb      	adds	r3, r7, r3
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	3301      	adds	r3, #1
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	9307      	str	r3, [sp, #28]
 800cba8:	bfb8      	it	lt
 800cbaa:	2301      	movlt	r3, #1
 800cbac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	2204      	movs	r2, #4
 800cbb4:	f102 0514 	add.w	r5, r2, #20
 800cbb8:	429d      	cmp	r5, r3
 800cbba:	d91f      	bls.n	800cbfc <_dtoa_r+0x2a4>
 800cbbc:	6041      	str	r1, [r0, #4]
 800cbbe:	4658      	mov	r0, fp
 800cbc0:	f000 fd8e 	bl	800d6e0 <_Balloc>
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d13c      	bne.n	800cc44 <_dtoa_r+0x2ec>
 800cbca:	4b1b      	ldr	r3, [pc, #108]	@ (800cc38 <_dtoa_r+0x2e0>)
 800cbcc:	4602      	mov	r2, r0
 800cbce:	f240 11af 	movw	r1, #431	@ 0x1af
 800cbd2:	e6d8      	b.n	800c986 <_dtoa_r+0x2e>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e7e0      	b.n	800cb9a <_dtoa_r+0x242>
 800cbd8:	2401      	movs	r4, #1
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbde:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	9307      	str	r3, [sp, #28]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2312      	movs	r3, #18
 800cbec:	e7d0      	b.n	800cb90 <_dtoa_r+0x238>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbf2:	e7f5      	b.n	800cbe0 <_dtoa_r+0x288>
 800cbf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	9307      	str	r3, [sp, #28]
 800cbfa:	e7d7      	b.n	800cbac <_dtoa_r+0x254>
 800cbfc:	3101      	adds	r1, #1
 800cbfe:	0052      	lsls	r2, r2, #1
 800cc00:	e7d8      	b.n	800cbb4 <_dtoa_r+0x25c>
 800cc02:	bf00      	nop
 800cc04:	f3af 8000 	nop.w
 800cc08:	636f4361 	.word	0x636f4361
 800cc0c:	3fd287a7 	.word	0x3fd287a7
 800cc10:	8b60c8b3 	.word	0x8b60c8b3
 800cc14:	3fc68a28 	.word	0x3fc68a28
 800cc18:	509f79fb 	.word	0x509f79fb
 800cc1c:	3fd34413 	.word	0x3fd34413
 800cc20:	0800f5d9 	.word	0x0800f5d9
 800cc24:	0800f5f0 	.word	0x0800f5f0
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	0800f5a9 	.word	0x0800f5a9
 800cc30:	3ff80000 	.word	0x3ff80000
 800cc34:	0800f6e8 	.word	0x0800f6e8
 800cc38:	0800f648 	.word	0x0800f648
 800cc3c:	0800f5d5 	.word	0x0800f5d5
 800cc40:	0800f5a8 	.word	0x0800f5a8
 800cc44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc48:	6018      	str	r0, [r3, #0]
 800cc4a:	9b07      	ldr	r3, [sp, #28]
 800cc4c:	2b0e      	cmp	r3, #14
 800cc4e:	f200 80a4 	bhi.w	800cd9a <_dtoa_r+0x442>
 800cc52:	2c00      	cmp	r4, #0
 800cc54:	f000 80a1 	beq.w	800cd9a <_dtoa_r+0x442>
 800cc58:	2f00      	cmp	r7, #0
 800cc5a:	dd33      	ble.n	800ccc4 <_dtoa_r+0x36c>
 800cc5c:	4bad      	ldr	r3, [pc, #692]	@ (800cf14 <_dtoa_r+0x5bc>)
 800cc5e:	f007 020f 	and.w	r2, r7, #15
 800cc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc66:	ed93 7b00 	vldr	d7, [r3]
 800cc6a:	05f8      	lsls	r0, r7, #23
 800cc6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cc70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cc74:	d516      	bpl.n	800cca4 <_dtoa_r+0x34c>
 800cc76:	4ba8      	ldr	r3, [pc, #672]	@ (800cf18 <_dtoa_r+0x5c0>)
 800cc78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc80:	f7f3 fde4 	bl	800084c <__aeabi_ddiv>
 800cc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc88:	f004 040f 	and.w	r4, r4, #15
 800cc8c:	2603      	movs	r6, #3
 800cc8e:	4da2      	ldr	r5, [pc, #648]	@ (800cf18 <_dtoa_r+0x5c0>)
 800cc90:	b954      	cbnz	r4, 800cca8 <_dtoa_r+0x350>
 800cc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc9a:	f7f3 fdd7 	bl	800084c <__aeabi_ddiv>
 800cc9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cca2:	e028      	b.n	800ccf6 <_dtoa_r+0x39e>
 800cca4:	2602      	movs	r6, #2
 800cca6:	e7f2      	b.n	800cc8e <_dtoa_r+0x336>
 800cca8:	07e1      	lsls	r1, r4, #31
 800ccaa:	d508      	bpl.n	800ccbe <_dtoa_r+0x366>
 800ccac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccb4:	f7f3 fca0 	bl	80005f8 <__aeabi_dmul>
 800ccb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccbc:	3601      	adds	r6, #1
 800ccbe:	1064      	asrs	r4, r4, #1
 800ccc0:	3508      	adds	r5, #8
 800ccc2:	e7e5      	b.n	800cc90 <_dtoa_r+0x338>
 800ccc4:	f000 80d2 	beq.w	800ce6c <_dtoa_r+0x514>
 800ccc8:	427c      	negs	r4, r7
 800ccca:	4b92      	ldr	r3, [pc, #584]	@ (800cf14 <_dtoa_r+0x5bc>)
 800cccc:	4d92      	ldr	r5, [pc, #584]	@ (800cf18 <_dtoa_r+0x5c0>)
 800ccce:	f004 020f 	and.w	r2, r4, #15
 800ccd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccde:	f7f3 fc8b 	bl	80005f8 <__aeabi_dmul>
 800cce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cce6:	1124      	asrs	r4, r4, #4
 800cce8:	2300      	movs	r3, #0
 800ccea:	2602      	movs	r6, #2
 800ccec:	2c00      	cmp	r4, #0
 800ccee:	f040 80b2 	bne.w	800ce56 <_dtoa_r+0x4fe>
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1d3      	bne.n	800cc9e <_dtoa_r+0x346>
 800ccf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ccf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 80b7 	beq.w	800ce70 <_dtoa_r+0x518>
 800cd02:	4b86      	ldr	r3, [pc, #536]	@ (800cf1c <_dtoa_r+0x5c4>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	4620      	mov	r0, r4
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f7f3 fee7 	bl	8000adc <__aeabi_dcmplt>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f000 80ae 	beq.w	800ce70 <_dtoa_r+0x518>
 800cd14:	9b07      	ldr	r3, [sp, #28]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 80aa 	beq.w	800ce70 <_dtoa_r+0x518>
 800cd1c:	9b00      	ldr	r3, [sp, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	dd37      	ble.n	800cd92 <_dtoa_r+0x43a>
 800cd22:	1e7b      	subs	r3, r7, #1
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	4620      	mov	r0, r4
 800cd28:	4b7d      	ldr	r3, [pc, #500]	@ (800cf20 <_dtoa_r+0x5c8>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7f3 fc63 	bl	80005f8 <__aeabi_dmul>
 800cd32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd36:	9c00      	ldr	r4, [sp, #0]
 800cd38:	3601      	adds	r6, #1
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f7f3 fbf2 	bl	8000524 <__aeabi_i2d>
 800cd40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd44:	f7f3 fc58 	bl	80005f8 <__aeabi_dmul>
 800cd48:	4b76      	ldr	r3, [pc, #472]	@ (800cf24 <_dtoa_r+0x5cc>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f7f3 fa9e 	bl	800028c <__adddf3>
 800cd50:	4605      	mov	r5, r0
 800cd52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cd56:	2c00      	cmp	r4, #0
 800cd58:	f040 808d 	bne.w	800ce76 <_dtoa_r+0x51e>
 800cd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd60:	4b71      	ldr	r3, [pc, #452]	@ (800cf28 <_dtoa_r+0x5d0>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	f7f3 fa90 	bl	8000288 <__aeabi_dsub>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd70:	462a      	mov	r2, r5
 800cd72:	4633      	mov	r3, r6
 800cd74:	f7f3 fed0 	bl	8000b18 <__aeabi_dcmpgt>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	f040 828b 	bne.w	800d294 <_dtoa_r+0x93c>
 800cd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd82:	462a      	mov	r2, r5
 800cd84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cd88:	f7f3 fea8 	bl	8000adc <__aeabi_dcmplt>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	f040 8128 	bne.w	800cfe2 <_dtoa_r+0x68a>
 800cd92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cd96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cd9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f2c0 815a 	blt.w	800d056 <_dtoa_r+0x6fe>
 800cda2:	2f0e      	cmp	r7, #14
 800cda4:	f300 8157 	bgt.w	800d056 <_dtoa_r+0x6fe>
 800cda8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf14 <_dtoa_r+0x5bc>)
 800cdaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdae:	ed93 7b00 	vldr	d7, [r3]
 800cdb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	ed8d 7b00 	vstr	d7, [sp]
 800cdba:	da03      	bge.n	800cdc4 <_dtoa_r+0x46c>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f340 8101 	ble.w	800cfc6 <_dtoa_r+0x66e>
 800cdc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cdc8:	4656      	mov	r6, sl
 800cdca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdce:	4620      	mov	r0, r4
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	f7f3 fd3b 	bl	800084c <__aeabi_ddiv>
 800cdd6:	f7f3 febf 	bl	8000b58 <__aeabi_d2iz>
 800cdda:	4680      	mov	r8, r0
 800cddc:	f7f3 fba2 	bl	8000524 <__aeabi_i2d>
 800cde0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cde4:	f7f3 fc08 	bl	80005f8 <__aeabi_dmul>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	4620      	mov	r0, r4
 800cdee:	4629      	mov	r1, r5
 800cdf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cdf4:	f7f3 fa48 	bl	8000288 <__aeabi_dsub>
 800cdf8:	f806 4b01 	strb.w	r4, [r6], #1
 800cdfc:	9d07      	ldr	r5, [sp, #28]
 800cdfe:	eba6 040a 	sub.w	r4, r6, sl
 800ce02:	42a5      	cmp	r5, r4
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	f040 8117 	bne.w	800d03a <_dtoa_r+0x6e2>
 800ce0c:	f7f3 fa3e 	bl	800028c <__adddf3>
 800ce10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce14:	4604      	mov	r4, r0
 800ce16:	460d      	mov	r5, r1
 800ce18:	f7f3 fe7e 	bl	8000b18 <__aeabi_dcmpgt>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	f040 80f9 	bne.w	800d014 <_dtoa_r+0x6bc>
 800ce22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce26:	4620      	mov	r0, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7f3 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce2e:	b118      	cbz	r0, 800ce38 <_dtoa_r+0x4e0>
 800ce30:	f018 0f01 	tst.w	r8, #1
 800ce34:	f040 80ee 	bne.w	800d014 <_dtoa_r+0x6bc>
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4658      	mov	r0, fp
 800ce3c:	f000 fc90 	bl	800d760 <_Bfree>
 800ce40:	2300      	movs	r3, #0
 800ce42:	7033      	strb	r3, [r6, #0]
 800ce44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce46:	3701      	adds	r7, #1
 800ce48:	601f      	str	r7, [r3, #0]
 800ce4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 831d 	beq.w	800d48c <_dtoa_r+0xb34>
 800ce52:	601e      	str	r6, [r3, #0]
 800ce54:	e31a      	b.n	800d48c <_dtoa_r+0xb34>
 800ce56:	07e2      	lsls	r2, r4, #31
 800ce58:	d505      	bpl.n	800ce66 <_dtoa_r+0x50e>
 800ce5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce5e:	f7f3 fbcb 	bl	80005f8 <__aeabi_dmul>
 800ce62:	3601      	adds	r6, #1
 800ce64:	2301      	movs	r3, #1
 800ce66:	1064      	asrs	r4, r4, #1
 800ce68:	3508      	adds	r5, #8
 800ce6a:	e73f      	b.n	800ccec <_dtoa_r+0x394>
 800ce6c:	2602      	movs	r6, #2
 800ce6e:	e742      	b.n	800ccf6 <_dtoa_r+0x39e>
 800ce70:	9c07      	ldr	r4, [sp, #28]
 800ce72:	9704      	str	r7, [sp, #16]
 800ce74:	e761      	b.n	800cd3a <_dtoa_r+0x3e2>
 800ce76:	4b27      	ldr	r3, [pc, #156]	@ (800cf14 <_dtoa_r+0x5bc>)
 800ce78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce82:	4454      	add	r4, sl
 800ce84:	2900      	cmp	r1, #0
 800ce86:	d053      	beq.n	800cf30 <_dtoa_r+0x5d8>
 800ce88:	4928      	ldr	r1, [pc, #160]	@ (800cf2c <_dtoa_r+0x5d4>)
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	f7f3 fcde 	bl	800084c <__aeabi_ddiv>
 800ce90:	4633      	mov	r3, r6
 800ce92:	462a      	mov	r2, r5
 800ce94:	f7f3 f9f8 	bl	8000288 <__aeabi_dsub>
 800ce98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce9c:	4656      	mov	r6, sl
 800ce9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cea2:	f7f3 fe59 	bl	8000b58 <__aeabi_d2iz>
 800cea6:	4605      	mov	r5, r0
 800cea8:	f7f3 fb3c 	bl	8000524 <__aeabi_i2d>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceb4:	f7f3 f9e8 	bl	8000288 <__aeabi_dsub>
 800ceb8:	3530      	adds	r5, #48	@ 0x30
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cec2:	f806 5b01 	strb.w	r5, [r6], #1
 800cec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ceca:	f7f3 fe07 	bl	8000adc <__aeabi_dcmplt>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d171      	bne.n	800cfb6 <_dtoa_r+0x65e>
 800ced2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ced6:	4911      	ldr	r1, [pc, #68]	@ (800cf1c <_dtoa_r+0x5c4>)
 800ced8:	2000      	movs	r0, #0
 800ceda:	f7f3 f9d5 	bl	8000288 <__aeabi_dsub>
 800cede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cee2:	f7f3 fdfb 	bl	8000adc <__aeabi_dcmplt>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f040 8095 	bne.w	800d016 <_dtoa_r+0x6be>
 800ceec:	42a6      	cmp	r6, r4
 800ceee:	f43f af50 	beq.w	800cd92 <_dtoa_r+0x43a>
 800cef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cef6:	4b0a      	ldr	r3, [pc, #40]	@ (800cf20 <_dtoa_r+0x5c8>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	f7f3 fb7d 	bl	80005f8 <__aeabi_dmul>
 800cefe:	4b08      	ldr	r3, [pc, #32]	@ (800cf20 <_dtoa_r+0x5c8>)
 800cf00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf04:	2200      	movs	r2, #0
 800cf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf0a:	f7f3 fb75 	bl	80005f8 <__aeabi_dmul>
 800cf0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf12:	e7c4      	b.n	800ce9e <_dtoa_r+0x546>
 800cf14:	0800f6e8 	.word	0x0800f6e8
 800cf18:	0800f6c0 	.word	0x0800f6c0
 800cf1c:	3ff00000 	.word	0x3ff00000
 800cf20:	40240000 	.word	0x40240000
 800cf24:	401c0000 	.word	0x401c0000
 800cf28:	40140000 	.word	0x40140000
 800cf2c:	3fe00000 	.word	0x3fe00000
 800cf30:	4631      	mov	r1, r6
 800cf32:	4628      	mov	r0, r5
 800cf34:	f7f3 fb60 	bl	80005f8 <__aeabi_dmul>
 800cf38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cf3e:	4656      	mov	r6, sl
 800cf40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf44:	f7f3 fe08 	bl	8000b58 <__aeabi_d2iz>
 800cf48:	4605      	mov	r5, r0
 800cf4a:	f7f3 faeb 	bl	8000524 <__aeabi_i2d>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf56:	f7f3 f997 	bl	8000288 <__aeabi_dsub>
 800cf5a:	3530      	adds	r5, #48	@ 0x30
 800cf5c:	f806 5b01 	strb.w	r5, [r6], #1
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	42a6      	cmp	r6, r4
 800cf66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf6a:	f04f 0200 	mov.w	r2, #0
 800cf6e:	d124      	bne.n	800cfba <_dtoa_r+0x662>
 800cf70:	4bac      	ldr	r3, [pc, #688]	@ (800d224 <_dtoa_r+0x8cc>)
 800cf72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf76:	f7f3 f989 	bl	800028c <__adddf3>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf82:	f7f3 fdc9 	bl	8000b18 <__aeabi_dcmpgt>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d145      	bne.n	800d016 <_dtoa_r+0x6be>
 800cf8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf8e:	49a5      	ldr	r1, [pc, #660]	@ (800d224 <_dtoa_r+0x8cc>)
 800cf90:	2000      	movs	r0, #0
 800cf92:	f7f3 f979 	bl	8000288 <__aeabi_dsub>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf9e:	f7f3 fd9d 	bl	8000adc <__aeabi_dcmplt>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	f43f aef5 	beq.w	800cd92 <_dtoa_r+0x43a>
 800cfa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cfaa:	1e73      	subs	r3, r6, #1
 800cfac:	9315      	str	r3, [sp, #84]	@ 0x54
 800cfae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cfb2:	2b30      	cmp	r3, #48	@ 0x30
 800cfb4:	d0f8      	beq.n	800cfa8 <_dtoa_r+0x650>
 800cfb6:	9f04      	ldr	r7, [sp, #16]
 800cfb8:	e73e      	b.n	800ce38 <_dtoa_r+0x4e0>
 800cfba:	4b9b      	ldr	r3, [pc, #620]	@ (800d228 <_dtoa_r+0x8d0>)
 800cfbc:	f7f3 fb1c 	bl	80005f8 <__aeabi_dmul>
 800cfc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfc4:	e7bc      	b.n	800cf40 <_dtoa_r+0x5e8>
 800cfc6:	d10c      	bne.n	800cfe2 <_dtoa_r+0x68a>
 800cfc8:	4b98      	ldr	r3, [pc, #608]	@ (800d22c <_dtoa_r+0x8d4>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfd0:	f7f3 fb12 	bl	80005f8 <__aeabi_dmul>
 800cfd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfd8:	f7f3 fd94 	bl	8000b04 <__aeabi_dcmpge>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	f000 8157 	beq.w	800d290 <_dtoa_r+0x938>
 800cfe2:	2400      	movs	r4, #0
 800cfe4:	4625      	mov	r5, r4
 800cfe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfe8:	43db      	mvns	r3, r3
 800cfea:	9304      	str	r3, [sp, #16]
 800cfec:	4656      	mov	r6, sl
 800cfee:	2700      	movs	r7, #0
 800cff0:	4621      	mov	r1, r4
 800cff2:	4658      	mov	r0, fp
 800cff4:	f000 fbb4 	bl	800d760 <_Bfree>
 800cff8:	2d00      	cmp	r5, #0
 800cffa:	d0dc      	beq.n	800cfb6 <_dtoa_r+0x65e>
 800cffc:	b12f      	cbz	r7, 800d00a <_dtoa_r+0x6b2>
 800cffe:	42af      	cmp	r7, r5
 800d000:	d003      	beq.n	800d00a <_dtoa_r+0x6b2>
 800d002:	4639      	mov	r1, r7
 800d004:	4658      	mov	r0, fp
 800d006:	f000 fbab 	bl	800d760 <_Bfree>
 800d00a:	4629      	mov	r1, r5
 800d00c:	4658      	mov	r0, fp
 800d00e:	f000 fba7 	bl	800d760 <_Bfree>
 800d012:	e7d0      	b.n	800cfb6 <_dtoa_r+0x65e>
 800d014:	9704      	str	r7, [sp, #16]
 800d016:	4633      	mov	r3, r6
 800d018:	461e      	mov	r6, r3
 800d01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d01e:	2a39      	cmp	r2, #57	@ 0x39
 800d020:	d107      	bne.n	800d032 <_dtoa_r+0x6da>
 800d022:	459a      	cmp	sl, r3
 800d024:	d1f8      	bne.n	800d018 <_dtoa_r+0x6c0>
 800d026:	9a04      	ldr	r2, [sp, #16]
 800d028:	3201      	adds	r2, #1
 800d02a:	9204      	str	r2, [sp, #16]
 800d02c:	2230      	movs	r2, #48	@ 0x30
 800d02e:	f88a 2000 	strb.w	r2, [sl]
 800d032:	781a      	ldrb	r2, [r3, #0]
 800d034:	3201      	adds	r2, #1
 800d036:	701a      	strb	r2, [r3, #0]
 800d038:	e7bd      	b.n	800cfb6 <_dtoa_r+0x65e>
 800d03a:	4b7b      	ldr	r3, [pc, #492]	@ (800d228 <_dtoa_r+0x8d0>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	f7f3 fadb 	bl	80005f8 <__aeabi_dmul>
 800d042:	2200      	movs	r2, #0
 800d044:	2300      	movs	r3, #0
 800d046:	4604      	mov	r4, r0
 800d048:	460d      	mov	r5, r1
 800d04a:	f7f3 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d04e:	2800      	cmp	r0, #0
 800d050:	f43f aebb 	beq.w	800cdca <_dtoa_r+0x472>
 800d054:	e6f0      	b.n	800ce38 <_dtoa_r+0x4e0>
 800d056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d058:	2a00      	cmp	r2, #0
 800d05a:	f000 80db 	beq.w	800d214 <_dtoa_r+0x8bc>
 800d05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d060:	2a01      	cmp	r2, #1
 800d062:	f300 80bf 	bgt.w	800d1e4 <_dtoa_r+0x88c>
 800d066:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d068:	2a00      	cmp	r2, #0
 800d06a:	f000 80b7 	beq.w	800d1dc <_dtoa_r+0x884>
 800d06e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d074:	4646      	mov	r6, r8
 800d076:	9a08      	ldr	r2, [sp, #32]
 800d078:	2101      	movs	r1, #1
 800d07a:	441a      	add	r2, r3
 800d07c:	4658      	mov	r0, fp
 800d07e:	4498      	add	r8, r3
 800d080:	9208      	str	r2, [sp, #32]
 800d082:	f000 fc21 	bl	800d8c8 <__i2b>
 800d086:	4605      	mov	r5, r0
 800d088:	b15e      	cbz	r6, 800d0a2 <_dtoa_r+0x74a>
 800d08a:	9b08      	ldr	r3, [sp, #32]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	dd08      	ble.n	800d0a2 <_dtoa_r+0x74a>
 800d090:	42b3      	cmp	r3, r6
 800d092:	9a08      	ldr	r2, [sp, #32]
 800d094:	bfa8      	it	ge
 800d096:	4633      	movge	r3, r6
 800d098:	eba8 0803 	sub.w	r8, r8, r3
 800d09c:	1af6      	subs	r6, r6, r3
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	9308      	str	r3, [sp, #32]
 800d0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0a4:	b1f3      	cbz	r3, 800d0e4 <_dtoa_r+0x78c>
 800d0a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 80b7 	beq.w	800d21c <_dtoa_r+0x8c4>
 800d0ae:	b18c      	cbz	r4, 800d0d4 <_dtoa_r+0x77c>
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	4622      	mov	r2, r4
 800d0b4:	4658      	mov	r0, fp
 800d0b6:	f000 fcc7 	bl	800da48 <__pow5mult>
 800d0ba:	464a      	mov	r2, r9
 800d0bc:	4601      	mov	r1, r0
 800d0be:	4605      	mov	r5, r0
 800d0c0:	4658      	mov	r0, fp
 800d0c2:	f000 fc17 	bl	800d8f4 <__multiply>
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	9004      	str	r0, [sp, #16]
 800d0ca:	4658      	mov	r0, fp
 800d0cc:	f000 fb48 	bl	800d760 <_Bfree>
 800d0d0:	9b04      	ldr	r3, [sp, #16]
 800d0d2:	4699      	mov	r9, r3
 800d0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0d6:	1b1a      	subs	r2, r3, r4
 800d0d8:	d004      	beq.n	800d0e4 <_dtoa_r+0x78c>
 800d0da:	4649      	mov	r1, r9
 800d0dc:	4658      	mov	r0, fp
 800d0de:	f000 fcb3 	bl	800da48 <__pow5mult>
 800d0e2:	4681      	mov	r9, r0
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	f000 fbee 	bl	800d8c8 <__i2b>
 800d0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 81cf 	beq.w	800d494 <_dtoa_r+0xb3c>
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	4601      	mov	r1, r0
 800d0fa:	4658      	mov	r0, fp
 800d0fc:	f000 fca4 	bl	800da48 <__pow5mult>
 800d100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d102:	2b01      	cmp	r3, #1
 800d104:	4604      	mov	r4, r0
 800d106:	f300 8095 	bgt.w	800d234 <_dtoa_r+0x8dc>
 800d10a:	9b02      	ldr	r3, [sp, #8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f040 8087 	bne.w	800d220 <_dtoa_r+0x8c8>
 800d112:	9b03      	ldr	r3, [sp, #12]
 800d114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f040 8089 	bne.w	800d230 <_dtoa_r+0x8d8>
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d124:	0d1b      	lsrs	r3, r3, #20
 800d126:	051b      	lsls	r3, r3, #20
 800d128:	b12b      	cbz	r3, 800d136 <_dtoa_r+0x7de>
 800d12a:	9b08      	ldr	r3, [sp, #32]
 800d12c:	3301      	adds	r3, #1
 800d12e:	9308      	str	r3, [sp, #32]
 800d130:	f108 0801 	add.w	r8, r8, #1
 800d134:	2301      	movs	r3, #1
 800d136:	930a      	str	r3, [sp, #40]	@ 0x28
 800d138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 81b0 	beq.w	800d4a0 <_dtoa_r+0xb48>
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d146:	6918      	ldr	r0, [r3, #16]
 800d148:	f000 fb72 	bl	800d830 <__hi0bits>
 800d14c:	f1c0 0020 	rsb	r0, r0, #32
 800d150:	9b08      	ldr	r3, [sp, #32]
 800d152:	4418      	add	r0, r3
 800d154:	f010 001f 	ands.w	r0, r0, #31
 800d158:	d077      	beq.n	800d24a <_dtoa_r+0x8f2>
 800d15a:	f1c0 0320 	rsb	r3, r0, #32
 800d15e:	2b04      	cmp	r3, #4
 800d160:	dd6b      	ble.n	800d23a <_dtoa_r+0x8e2>
 800d162:	9b08      	ldr	r3, [sp, #32]
 800d164:	f1c0 001c 	rsb	r0, r0, #28
 800d168:	4403      	add	r3, r0
 800d16a:	4480      	add	r8, r0
 800d16c:	4406      	add	r6, r0
 800d16e:	9308      	str	r3, [sp, #32]
 800d170:	f1b8 0f00 	cmp.w	r8, #0
 800d174:	dd05      	ble.n	800d182 <_dtoa_r+0x82a>
 800d176:	4649      	mov	r1, r9
 800d178:	4642      	mov	r2, r8
 800d17a:	4658      	mov	r0, fp
 800d17c:	f000 fcbe 	bl	800dafc <__lshift>
 800d180:	4681      	mov	r9, r0
 800d182:	9b08      	ldr	r3, [sp, #32]
 800d184:	2b00      	cmp	r3, #0
 800d186:	dd05      	ble.n	800d194 <_dtoa_r+0x83c>
 800d188:	4621      	mov	r1, r4
 800d18a:	461a      	mov	r2, r3
 800d18c:	4658      	mov	r0, fp
 800d18e:	f000 fcb5 	bl	800dafc <__lshift>
 800d192:	4604      	mov	r4, r0
 800d194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d196:	2b00      	cmp	r3, #0
 800d198:	d059      	beq.n	800d24e <_dtoa_r+0x8f6>
 800d19a:	4621      	mov	r1, r4
 800d19c:	4648      	mov	r0, r9
 800d19e:	f000 fd19 	bl	800dbd4 <__mcmp>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	da53      	bge.n	800d24e <_dtoa_r+0x8f6>
 800d1a6:	1e7b      	subs	r3, r7, #1
 800d1a8:	9304      	str	r3, [sp, #16]
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	220a      	movs	r2, #10
 800d1b0:	4658      	mov	r0, fp
 800d1b2:	f000 faf7 	bl	800d7a4 <__multadd>
 800d1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1b8:	4681      	mov	r9, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 8172 	beq.w	800d4a4 <_dtoa_r+0xb4c>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4629      	mov	r1, r5
 800d1c4:	220a      	movs	r2, #10
 800d1c6:	4658      	mov	r0, fp
 800d1c8:	f000 faec 	bl	800d7a4 <__multadd>
 800d1cc:	9b00      	ldr	r3, [sp, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	dc67      	bgt.n	800d2a4 <_dtoa_r+0x94c>
 800d1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	dc41      	bgt.n	800d25e <_dtoa_r+0x906>
 800d1da:	e063      	b.n	800d2a4 <_dtoa_r+0x94c>
 800d1dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d1de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d1e2:	e746      	b.n	800d072 <_dtoa_r+0x71a>
 800d1e4:	9b07      	ldr	r3, [sp, #28]
 800d1e6:	1e5c      	subs	r4, r3, #1
 800d1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ea:	42a3      	cmp	r3, r4
 800d1ec:	bfbf      	itttt	lt
 800d1ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d1f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d1f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d1f4:	1ae3      	sublt	r3, r4, r3
 800d1f6:	bfb4      	ite	lt
 800d1f8:	18d2      	addlt	r2, r2, r3
 800d1fa:	1b1c      	subge	r4, r3, r4
 800d1fc:	9b07      	ldr	r3, [sp, #28]
 800d1fe:	bfbc      	itt	lt
 800d200:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d202:	2400      	movlt	r4, #0
 800d204:	2b00      	cmp	r3, #0
 800d206:	bfb5      	itete	lt
 800d208:	eba8 0603 	sublt.w	r6, r8, r3
 800d20c:	9b07      	ldrge	r3, [sp, #28]
 800d20e:	2300      	movlt	r3, #0
 800d210:	4646      	movge	r6, r8
 800d212:	e730      	b.n	800d076 <_dtoa_r+0x71e>
 800d214:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d216:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d218:	4646      	mov	r6, r8
 800d21a:	e735      	b.n	800d088 <_dtoa_r+0x730>
 800d21c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d21e:	e75c      	b.n	800d0da <_dtoa_r+0x782>
 800d220:	2300      	movs	r3, #0
 800d222:	e788      	b.n	800d136 <_dtoa_r+0x7de>
 800d224:	3fe00000 	.word	0x3fe00000
 800d228:	40240000 	.word	0x40240000
 800d22c:	40140000 	.word	0x40140000
 800d230:	9b02      	ldr	r3, [sp, #8]
 800d232:	e780      	b.n	800d136 <_dtoa_r+0x7de>
 800d234:	2300      	movs	r3, #0
 800d236:	930a      	str	r3, [sp, #40]	@ 0x28
 800d238:	e782      	b.n	800d140 <_dtoa_r+0x7e8>
 800d23a:	d099      	beq.n	800d170 <_dtoa_r+0x818>
 800d23c:	9a08      	ldr	r2, [sp, #32]
 800d23e:	331c      	adds	r3, #28
 800d240:	441a      	add	r2, r3
 800d242:	4498      	add	r8, r3
 800d244:	441e      	add	r6, r3
 800d246:	9208      	str	r2, [sp, #32]
 800d248:	e792      	b.n	800d170 <_dtoa_r+0x818>
 800d24a:	4603      	mov	r3, r0
 800d24c:	e7f6      	b.n	800d23c <_dtoa_r+0x8e4>
 800d24e:	9b07      	ldr	r3, [sp, #28]
 800d250:	9704      	str	r7, [sp, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	dc20      	bgt.n	800d298 <_dtoa_r+0x940>
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	dd1e      	ble.n	800d29c <_dtoa_r+0x944>
 800d25e:	9b00      	ldr	r3, [sp, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	f47f aec0 	bne.w	800cfe6 <_dtoa_r+0x68e>
 800d266:	4621      	mov	r1, r4
 800d268:	2205      	movs	r2, #5
 800d26a:	4658      	mov	r0, fp
 800d26c:	f000 fa9a 	bl	800d7a4 <__multadd>
 800d270:	4601      	mov	r1, r0
 800d272:	4604      	mov	r4, r0
 800d274:	4648      	mov	r0, r9
 800d276:	f000 fcad 	bl	800dbd4 <__mcmp>
 800d27a:	2800      	cmp	r0, #0
 800d27c:	f77f aeb3 	ble.w	800cfe6 <_dtoa_r+0x68e>
 800d280:	4656      	mov	r6, sl
 800d282:	2331      	movs	r3, #49	@ 0x31
 800d284:	f806 3b01 	strb.w	r3, [r6], #1
 800d288:	9b04      	ldr	r3, [sp, #16]
 800d28a:	3301      	adds	r3, #1
 800d28c:	9304      	str	r3, [sp, #16]
 800d28e:	e6ae      	b.n	800cfee <_dtoa_r+0x696>
 800d290:	9c07      	ldr	r4, [sp, #28]
 800d292:	9704      	str	r7, [sp, #16]
 800d294:	4625      	mov	r5, r4
 800d296:	e7f3      	b.n	800d280 <_dtoa_r+0x928>
 800d298:	9b07      	ldr	r3, [sp, #28]
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f000 8104 	beq.w	800d4ac <_dtoa_r+0xb54>
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	dd05      	ble.n	800d2b4 <_dtoa_r+0x95c>
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	4658      	mov	r0, fp
 800d2ae:	f000 fc25 	bl	800dafc <__lshift>
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d05a      	beq.n	800d370 <_dtoa_r+0xa18>
 800d2ba:	6869      	ldr	r1, [r5, #4]
 800d2bc:	4658      	mov	r0, fp
 800d2be:	f000 fa0f 	bl	800d6e0 <_Balloc>
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	b928      	cbnz	r0, 800d2d2 <_dtoa_r+0x97a>
 800d2c6:	4b84      	ldr	r3, [pc, #528]	@ (800d4d8 <_dtoa_r+0xb80>)
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2ce:	f7ff bb5a 	b.w	800c986 <_dtoa_r+0x2e>
 800d2d2:	692a      	ldr	r2, [r5, #16]
 800d2d4:	3202      	adds	r2, #2
 800d2d6:	0092      	lsls	r2, r2, #2
 800d2d8:	f105 010c 	add.w	r1, r5, #12
 800d2dc:	300c      	adds	r0, #12
 800d2de:	f7ff faa2 	bl	800c826 <memcpy>
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	4631      	mov	r1, r6
 800d2e6:	4658      	mov	r0, fp
 800d2e8:	f000 fc08 	bl	800dafc <__lshift>
 800d2ec:	f10a 0301 	add.w	r3, sl, #1
 800d2f0:	9307      	str	r3, [sp, #28]
 800d2f2:	9b00      	ldr	r3, [sp, #0]
 800d2f4:	4453      	add	r3, sl
 800d2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2f8:	9b02      	ldr	r3, [sp, #8]
 800d2fa:	f003 0301 	and.w	r3, r3, #1
 800d2fe:	462f      	mov	r7, r5
 800d300:	930a      	str	r3, [sp, #40]	@ 0x28
 800d302:	4605      	mov	r5, r0
 800d304:	9b07      	ldr	r3, [sp, #28]
 800d306:	4621      	mov	r1, r4
 800d308:	3b01      	subs	r3, #1
 800d30a:	4648      	mov	r0, r9
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	f7ff fa98 	bl	800c842 <quorem>
 800d312:	4639      	mov	r1, r7
 800d314:	9002      	str	r0, [sp, #8]
 800d316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d31a:	4648      	mov	r0, r9
 800d31c:	f000 fc5a 	bl	800dbd4 <__mcmp>
 800d320:	462a      	mov	r2, r5
 800d322:	9008      	str	r0, [sp, #32]
 800d324:	4621      	mov	r1, r4
 800d326:	4658      	mov	r0, fp
 800d328:	f000 fc70 	bl	800dc0c <__mdiff>
 800d32c:	68c2      	ldr	r2, [r0, #12]
 800d32e:	4606      	mov	r6, r0
 800d330:	bb02      	cbnz	r2, 800d374 <_dtoa_r+0xa1c>
 800d332:	4601      	mov	r1, r0
 800d334:	4648      	mov	r0, r9
 800d336:	f000 fc4d 	bl	800dbd4 <__mcmp>
 800d33a:	4602      	mov	r2, r0
 800d33c:	4631      	mov	r1, r6
 800d33e:	4658      	mov	r0, fp
 800d340:	920e      	str	r2, [sp, #56]	@ 0x38
 800d342:	f000 fa0d 	bl	800d760 <_Bfree>
 800d346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d34a:	9e07      	ldr	r6, [sp, #28]
 800d34c:	ea43 0102 	orr.w	r1, r3, r2
 800d350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d352:	4319      	orrs	r1, r3
 800d354:	d110      	bne.n	800d378 <_dtoa_r+0xa20>
 800d356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d35a:	d029      	beq.n	800d3b0 <_dtoa_r+0xa58>
 800d35c:	9b08      	ldr	r3, [sp, #32]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	dd02      	ble.n	800d368 <_dtoa_r+0xa10>
 800d362:	9b02      	ldr	r3, [sp, #8]
 800d364:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d368:	9b00      	ldr	r3, [sp, #0]
 800d36a:	f883 8000 	strb.w	r8, [r3]
 800d36e:	e63f      	b.n	800cff0 <_dtoa_r+0x698>
 800d370:	4628      	mov	r0, r5
 800d372:	e7bb      	b.n	800d2ec <_dtoa_r+0x994>
 800d374:	2201      	movs	r2, #1
 800d376:	e7e1      	b.n	800d33c <_dtoa_r+0x9e4>
 800d378:	9b08      	ldr	r3, [sp, #32]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	db04      	blt.n	800d388 <_dtoa_r+0xa30>
 800d37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d380:	430b      	orrs	r3, r1
 800d382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d384:	430b      	orrs	r3, r1
 800d386:	d120      	bne.n	800d3ca <_dtoa_r+0xa72>
 800d388:	2a00      	cmp	r2, #0
 800d38a:	dded      	ble.n	800d368 <_dtoa_r+0xa10>
 800d38c:	4649      	mov	r1, r9
 800d38e:	2201      	movs	r2, #1
 800d390:	4658      	mov	r0, fp
 800d392:	f000 fbb3 	bl	800dafc <__lshift>
 800d396:	4621      	mov	r1, r4
 800d398:	4681      	mov	r9, r0
 800d39a:	f000 fc1b 	bl	800dbd4 <__mcmp>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	dc03      	bgt.n	800d3aa <_dtoa_r+0xa52>
 800d3a2:	d1e1      	bne.n	800d368 <_dtoa_r+0xa10>
 800d3a4:	f018 0f01 	tst.w	r8, #1
 800d3a8:	d0de      	beq.n	800d368 <_dtoa_r+0xa10>
 800d3aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3ae:	d1d8      	bne.n	800d362 <_dtoa_r+0xa0a>
 800d3b0:	9a00      	ldr	r2, [sp, #0]
 800d3b2:	2339      	movs	r3, #57	@ 0x39
 800d3b4:	7013      	strb	r3, [r2, #0]
 800d3b6:	4633      	mov	r3, r6
 800d3b8:	461e      	mov	r6, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3c0:	2a39      	cmp	r2, #57	@ 0x39
 800d3c2:	d052      	beq.n	800d46a <_dtoa_r+0xb12>
 800d3c4:	3201      	adds	r2, #1
 800d3c6:	701a      	strb	r2, [r3, #0]
 800d3c8:	e612      	b.n	800cff0 <_dtoa_r+0x698>
 800d3ca:	2a00      	cmp	r2, #0
 800d3cc:	dd07      	ble.n	800d3de <_dtoa_r+0xa86>
 800d3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3d2:	d0ed      	beq.n	800d3b0 <_dtoa_r+0xa58>
 800d3d4:	9a00      	ldr	r2, [sp, #0]
 800d3d6:	f108 0301 	add.w	r3, r8, #1
 800d3da:	7013      	strb	r3, [r2, #0]
 800d3dc:	e608      	b.n	800cff0 <_dtoa_r+0x698>
 800d3de:	9b07      	ldr	r3, [sp, #28]
 800d3e0:	9a07      	ldr	r2, [sp, #28]
 800d3e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d028      	beq.n	800d43e <_dtoa_r+0xae6>
 800d3ec:	4649      	mov	r1, r9
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	220a      	movs	r2, #10
 800d3f2:	4658      	mov	r0, fp
 800d3f4:	f000 f9d6 	bl	800d7a4 <__multadd>
 800d3f8:	42af      	cmp	r7, r5
 800d3fa:	4681      	mov	r9, r0
 800d3fc:	f04f 0300 	mov.w	r3, #0
 800d400:	f04f 020a 	mov.w	r2, #10
 800d404:	4639      	mov	r1, r7
 800d406:	4658      	mov	r0, fp
 800d408:	d107      	bne.n	800d41a <_dtoa_r+0xac2>
 800d40a:	f000 f9cb 	bl	800d7a4 <__multadd>
 800d40e:	4607      	mov	r7, r0
 800d410:	4605      	mov	r5, r0
 800d412:	9b07      	ldr	r3, [sp, #28]
 800d414:	3301      	adds	r3, #1
 800d416:	9307      	str	r3, [sp, #28]
 800d418:	e774      	b.n	800d304 <_dtoa_r+0x9ac>
 800d41a:	f000 f9c3 	bl	800d7a4 <__multadd>
 800d41e:	4629      	mov	r1, r5
 800d420:	4607      	mov	r7, r0
 800d422:	2300      	movs	r3, #0
 800d424:	220a      	movs	r2, #10
 800d426:	4658      	mov	r0, fp
 800d428:	f000 f9bc 	bl	800d7a4 <__multadd>
 800d42c:	4605      	mov	r5, r0
 800d42e:	e7f0      	b.n	800d412 <_dtoa_r+0xaba>
 800d430:	9b00      	ldr	r3, [sp, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	bfcc      	ite	gt
 800d436:	461e      	movgt	r6, r3
 800d438:	2601      	movle	r6, #1
 800d43a:	4456      	add	r6, sl
 800d43c:	2700      	movs	r7, #0
 800d43e:	4649      	mov	r1, r9
 800d440:	2201      	movs	r2, #1
 800d442:	4658      	mov	r0, fp
 800d444:	f000 fb5a 	bl	800dafc <__lshift>
 800d448:	4621      	mov	r1, r4
 800d44a:	4681      	mov	r9, r0
 800d44c:	f000 fbc2 	bl	800dbd4 <__mcmp>
 800d450:	2800      	cmp	r0, #0
 800d452:	dcb0      	bgt.n	800d3b6 <_dtoa_r+0xa5e>
 800d454:	d102      	bne.n	800d45c <_dtoa_r+0xb04>
 800d456:	f018 0f01 	tst.w	r8, #1
 800d45a:	d1ac      	bne.n	800d3b6 <_dtoa_r+0xa5e>
 800d45c:	4633      	mov	r3, r6
 800d45e:	461e      	mov	r6, r3
 800d460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d464:	2a30      	cmp	r2, #48	@ 0x30
 800d466:	d0fa      	beq.n	800d45e <_dtoa_r+0xb06>
 800d468:	e5c2      	b.n	800cff0 <_dtoa_r+0x698>
 800d46a:	459a      	cmp	sl, r3
 800d46c:	d1a4      	bne.n	800d3b8 <_dtoa_r+0xa60>
 800d46e:	9b04      	ldr	r3, [sp, #16]
 800d470:	3301      	adds	r3, #1
 800d472:	9304      	str	r3, [sp, #16]
 800d474:	2331      	movs	r3, #49	@ 0x31
 800d476:	f88a 3000 	strb.w	r3, [sl]
 800d47a:	e5b9      	b.n	800cff0 <_dtoa_r+0x698>
 800d47c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d47e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d4dc <_dtoa_r+0xb84>
 800d482:	b11b      	cbz	r3, 800d48c <_dtoa_r+0xb34>
 800d484:	f10a 0308 	add.w	r3, sl, #8
 800d488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d48a:	6013      	str	r3, [r2, #0]
 800d48c:	4650      	mov	r0, sl
 800d48e:	b019      	add	sp, #100	@ 0x64
 800d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d496:	2b01      	cmp	r3, #1
 800d498:	f77f ae37 	ble.w	800d10a <_dtoa_r+0x7b2>
 800d49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d49e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4a0:	2001      	movs	r0, #1
 800d4a2:	e655      	b.n	800d150 <_dtoa_r+0x7f8>
 800d4a4:	9b00      	ldr	r3, [sp, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f77f aed6 	ble.w	800d258 <_dtoa_r+0x900>
 800d4ac:	4656      	mov	r6, sl
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4648      	mov	r0, r9
 800d4b2:	f7ff f9c6 	bl	800c842 <quorem>
 800d4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4ba:	f806 8b01 	strb.w	r8, [r6], #1
 800d4be:	9b00      	ldr	r3, [sp, #0]
 800d4c0:	eba6 020a 	sub.w	r2, r6, sl
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	ddb3      	ble.n	800d430 <_dtoa_r+0xad8>
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	220a      	movs	r2, #10
 800d4ce:	4658      	mov	r0, fp
 800d4d0:	f000 f968 	bl	800d7a4 <__multadd>
 800d4d4:	4681      	mov	r9, r0
 800d4d6:	e7ea      	b.n	800d4ae <_dtoa_r+0xb56>
 800d4d8:	0800f648 	.word	0x0800f648
 800d4dc:	0800f5cc 	.word	0x0800f5cc

0800d4e0 <_free_r>:
 800d4e0:	b538      	push	{r3, r4, r5, lr}
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	2900      	cmp	r1, #0
 800d4e6:	d041      	beq.n	800d56c <_free_r+0x8c>
 800d4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ec:	1f0c      	subs	r4, r1, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	bfb8      	it	lt
 800d4f2:	18e4      	addlt	r4, r4, r3
 800d4f4:	f000 f8e8 	bl	800d6c8 <__malloc_lock>
 800d4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d570 <_free_r+0x90>)
 800d4fa:	6813      	ldr	r3, [r2, #0]
 800d4fc:	b933      	cbnz	r3, 800d50c <_free_r+0x2c>
 800d4fe:	6063      	str	r3, [r4, #4]
 800d500:	6014      	str	r4, [r2, #0]
 800d502:	4628      	mov	r0, r5
 800d504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d508:	f000 b8e4 	b.w	800d6d4 <__malloc_unlock>
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	d908      	bls.n	800d522 <_free_r+0x42>
 800d510:	6820      	ldr	r0, [r4, #0]
 800d512:	1821      	adds	r1, r4, r0
 800d514:	428b      	cmp	r3, r1
 800d516:	bf01      	itttt	eq
 800d518:	6819      	ldreq	r1, [r3, #0]
 800d51a:	685b      	ldreq	r3, [r3, #4]
 800d51c:	1809      	addeq	r1, r1, r0
 800d51e:	6021      	streq	r1, [r4, #0]
 800d520:	e7ed      	b.n	800d4fe <_free_r+0x1e>
 800d522:	461a      	mov	r2, r3
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	b10b      	cbz	r3, 800d52c <_free_r+0x4c>
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d9fa      	bls.n	800d522 <_free_r+0x42>
 800d52c:	6811      	ldr	r1, [r2, #0]
 800d52e:	1850      	adds	r0, r2, r1
 800d530:	42a0      	cmp	r0, r4
 800d532:	d10b      	bne.n	800d54c <_free_r+0x6c>
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	4401      	add	r1, r0
 800d538:	1850      	adds	r0, r2, r1
 800d53a:	4283      	cmp	r3, r0
 800d53c:	6011      	str	r1, [r2, #0]
 800d53e:	d1e0      	bne.n	800d502 <_free_r+0x22>
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	6053      	str	r3, [r2, #4]
 800d546:	4408      	add	r0, r1
 800d548:	6010      	str	r0, [r2, #0]
 800d54a:	e7da      	b.n	800d502 <_free_r+0x22>
 800d54c:	d902      	bls.n	800d554 <_free_r+0x74>
 800d54e:	230c      	movs	r3, #12
 800d550:	602b      	str	r3, [r5, #0]
 800d552:	e7d6      	b.n	800d502 <_free_r+0x22>
 800d554:	6820      	ldr	r0, [r4, #0]
 800d556:	1821      	adds	r1, r4, r0
 800d558:	428b      	cmp	r3, r1
 800d55a:	bf04      	itt	eq
 800d55c:	6819      	ldreq	r1, [r3, #0]
 800d55e:	685b      	ldreq	r3, [r3, #4]
 800d560:	6063      	str	r3, [r4, #4]
 800d562:	bf04      	itt	eq
 800d564:	1809      	addeq	r1, r1, r0
 800d566:	6021      	streq	r1, [r4, #0]
 800d568:	6054      	str	r4, [r2, #4]
 800d56a:	e7ca      	b.n	800d502 <_free_r+0x22>
 800d56c:	bd38      	pop	{r3, r4, r5, pc}
 800d56e:	bf00      	nop
 800d570:	200053dc 	.word	0x200053dc

0800d574 <malloc>:
 800d574:	4b02      	ldr	r3, [pc, #8]	@ (800d580 <malloc+0xc>)
 800d576:	4601      	mov	r1, r0
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	f000 b825 	b.w	800d5c8 <_malloc_r>
 800d57e:	bf00      	nop
 800d580:	20000020 	.word	0x20000020

0800d584 <sbrk_aligned>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	4e0f      	ldr	r6, [pc, #60]	@ (800d5c4 <sbrk_aligned+0x40>)
 800d588:	460c      	mov	r4, r1
 800d58a:	6831      	ldr	r1, [r6, #0]
 800d58c:	4605      	mov	r5, r0
 800d58e:	b911      	cbnz	r1, 800d596 <sbrk_aligned+0x12>
 800d590:	f000 fe46 	bl	800e220 <_sbrk_r>
 800d594:	6030      	str	r0, [r6, #0]
 800d596:	4621      	mov	r1, r4
 800d598:	4628      	mov	r0, r5
 800d59a:	f000 fe41 	bl	800e220 <_sbrk_r>
 800d59e:	1c43      	adds	r3, r0, #1
 800d5a0:	d103      	bne.n	800d5aa <sbrk_aligned+0x26>
 800d5a2:	f04f 34ff 	mov.w	r4, #4294967295
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	bd70      	pop	{r4, r5, r6, pc}
 800d5aa:	1cc4      	adds	r4, r0, #3
 800d5ac:	f024 0403 	bic.w	r4, r4, #3
 800d5b0:	42a0      	cmp	r0, r4
 800d5b2:	d0f8      	beq.n	800d5a6 <sbrk_aligned+0x22>
 800d5b4:	1a21      	subs	r1, r4, r0
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f000 fe32 	bl	800e220 <_sbrk_r>
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d1f2      	bne.n	800d5a6 <sbrk_aligned+0x22>
 800d5c0:	e7ef      	b.n	800d5a2 <sbrk_aligned+0x1e>
 800d5c2:	bf00      	nop
 800d5c4:	200053d8 	.word	0x200053d8

0800d5c8 <_malloc_r>:
 800d5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5cc:	1ccd      	adds	r5, r1, #3
 800d5ce:	f025 0503 	bic.w	r5, r5, #3
 800d5d2:	3508      	adds	r5, #8
 800d5d4:	2d0c      	cmp	r5, #12
 800d5d6:	bf38      	it	cc
 800d5d8:	250c      	movcc	r5, #12
 800d5da:	2d00      	cmp	r5, #0
 800d5dc:	4606      	mov	r6, r0
 800d5de:	db01      	blt.n	800d5e4 <_malloc_r+0x1c>
 800d5e0:	42a9      	cmp	r1, r5
 800d5e2:	d904      	bls.n	800d5ee <_malloc_r+0x26>
 800d5e4:	230c      	movs	r3, #12
 800d5e6:	6033      	str	r3, [r6, #0]
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6c4 <_malloc_r+0xfc>
 800d5f2:	f000 f869 	bl	800d6c8 <__malloc_lock>
 800d5f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d5fa:	461c      	mov	r4, r3
 800d5fc:	bb44      	cbnz	r4, 800d650 <_malloc_r+0x88>
 800d5fe:	4629      	mov	r1, r5
 800d600:	4630      	mov	r0, r6
 800d602:	f7ff ffbf 	bl	800d584 <sbrk_aligned>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	4604      	mov	r4, r0
 800d60a:	d158      	bne.n	800d6be <_malloc_r+0xf6>
 800d60c:	f8d8 4000 	ldr.w	r4, [r8]
 800d610:	4627      	mov	r7, r4
 800d612:	2f00      	cmp	r7, #0
 800d614:	d143      	bne.n	800d69e <_malloc_r+0xd6>
 800d616:	2c00      	cmp	r4, #0
 800d618:	d04b      	beq.n	800d6b2 <_malloc_r+0xea>
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	4639      	mov	r1, r7
 800d61e:	4630      	mov	r0, r6
 800d620:	eb04 0903 	add.w	r9, r4, r3
 800d624:	f000 fdfc 	bl	800e220 <_sbrk_r>
 800d628:	4581      	cmp	r9, r0
 800d62a:	d142      	bne.n	800d6b2 <_malloc_r+0xea>
 800d62c:	6821      	ldr	r1, [r4, #0]
 800d62e:	1a6d      	subs	r5, r5, r1
 800d630:	4629      	mov	r1, r5
 800d632:	4630      	mov	r0, r6
 800d634:	f7ff ffa6 	bl	800d584 <sbrk_aligned>
 800d638:	3001      	adds	r0, #1
 800d63a:	d03a      	beq.n	800d6b2 <_malloc_r+0xea>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	442b      	add	r3, r5
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	f8d8 3000 	ldr.w	r3, [r8]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	bb62      	cbnz	r2, 800d6a4 <_malloc_r+0xdc>
 800d64a:	f8c8 7000 	str.w	r7, [r8]
 800d64e:	e00f      	b.n	800d670 <_malloc_r+0xa8>
 800d650:	6822      	ldr	r2, [r4, #0]
 800d652:	1b52      	subs	r2, r2, r5
 800d654:	d420      	bmi.n	800d698 <_malloc_r+0xd0>
 800d656:	2a0b      	cmp	r2, #11
 800d658:	d917      	bls.n	800d68a <_malloc_r+0xc2>
 800d65a:	1961      	adds	r1, r4, r5
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	6025      	str	r5, [r4, #0]
 800d660:	bf18      	it	ne
 800d662:	6059      	strne	r1, [r3, #4]
 800d664:	6863      	ldr	r3, [r4, #4]
 800d666:	bf08      	it	eq
 800d668:	f8c8 1000 	streq.w	r1, [r8]
 800d66c:	5162      	str	r2, [r4, r5]
 800d66e:	604b      	str	r3, [r1, #4]
 800d670:	4630      	mov	r0, r6
 800d672:	f000 f82f 	bl	800d6d4 <__malloc_unlock>
 800d676:	f104 000b 	add.w	r0, r4, #11
 800d67a:	1d23      	adds	r3, r4, #4
 800d67c:	f020 0007 	bic.w	r0, r0, #7
 800d680:	1ac2      	subs	r2, r0, r3
 800d682:	bf1c      	itt	ne
 800d684:	1a1b      	subne	r3, r3, r0
 800d686:	50a3      	strne	r3, [r4, r2]
 800d688:	e7af      	b.n	800d5ea <_malloc_r+0x22>
 800d68a:	6862      	ldr	r2, [r4, #4]
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	bf0c      	ite	eq
 800d690:	f8c8 2000 	streq.w	r2, [r8]
 800d694:	605a      	strne	r2, [r3, #4]
 800d696:	e7eb      	b.n	800d670 <_malloc_r+0xa8>
 800d698:	4623      	mov	r3, r4
 800d69a:	6864      	ldr	r4, [r4, #4]
 800d69c:	e7ae      	b.n	800d5fc <_malloc_r+0x34>
 800d69e:	463c      	mov	r4, r7
 800d6a0:	687f      	ldr	r7, [r7, #4]
 800d6a2:	e7b6      	b.n	800d612 <_malloc_r+0x4a>
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	d1fb      	bne.n	800d6a4 <_malloc_r+0xdc>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	6053      	str	r3, [r2, #4]
 800d6b0:	e7de      	b.n	800d670 <_malloc_r+0xa8>
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	6033      	str	r3, [r6, #0]
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f000 f80c 	bl	800d6d4 <__malloc_unlock>
 800d6bc:	e794      	b.n	800d5e8 <_malloc_r+0x20>
 800d6be:	6005      	str	r5, [r0, #0]
 800d6c0:	e7d6      	b.n	800d670 <_malloc_r+0xa8>
 800d6c2:	bf00      	nop
 800d6c4:	200053dc 	.word	0x200053dc

0800d6c8 <__malloc_lock>:
 800d6c8:	4801      	ldr	r0, [pc, #4]	@ (800d6d0 <__malloc_lock+0x8>)
 800d6ca:	f7ff b8aa 	b.w	800c822 <__retarget_lock_acquire_recursive>
 800d6ce:	bf00      	nop
 800d6d0:	200053d4 	.word	0x200053d4

0800d6d4 <__malloc_unlock>:
 800d6d4:	4801      	ldr	r0, [pc, #4]	@ (800d6dc <__malloc_unlock+0x8>)
 800d6d6:	f7ff b8a5 	b.w	800c824 <__retarget_lock_release_recursive>
 800d6da:	bf00      	nop
 800d6dc:	200053d4 	.word	0x200053d4

0800d6e0 <_Balloc>:
 800d6e0:	b570      	push	{r4, r5, r6, lr}
 800d6e2:	69c6      	ldr	r6, [r0, #28]
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	b976      	cbnz	r6, 800d708 <_Balloc+0x28>
 800d6ea:	2010      	movs	r0, #16
 800d6ec:	f7ff ff42 	bl	800d574 <malloc>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	61e0      	str	r0, [r4, #28]
 800d6f4:	b920      	cbnz	r0, 800d700 <_Balloc+0x20>
 800d6f6:	4b18      	ldr	r3, [pc, #96]	@ (800d758 <_Balloc+0x78>)
 800d6f8:	4818      	ldr	r0, [pc, #96]	@ (800d75c <_Balloc+0x7c>)
 800d6fa:	216b      	movs	r1, #107	@ 0x6b
 800d6fc:	f000 fda0 	bl	800e240 <__assert_func>
 800d700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d704:	6006      	str	r6, [r0, #0]
 800d706:	60c6      	str	r6, [r0, #12]
 800d708:	69e6      	ldr	r6, [r4, #28]
 800d70a:	68f3      	ldr	r3, [r6, #12]
 800d70c:	b183      	cbz	r3, 800d730 <_Balloc+0x50>
 800d70e:	69e3      	ldr	r3, [r4, #28]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d716:	b9b8      	cbnz	r0, 800d748 <_Balloc+0x68>
 800d718:	2101      	movs	r1, #1
 800d71a:	fa01 f605 	lsl.w	r6, r1, r5
 800d71e:	1d72      	adds	r2, r6, #5
 800d720:	0092      	lsls	r2, r2, #2
 800d722:	4620      	mov	r0, r4
 800d724:	f000 fdaa 	bl	800e27c <_calloc_r>
 800d728:	b160      	cbz	r0, 800d744 <_Balloc+0x64>
 800d72a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d72e:	e00e      	b.n	800d74e <_Balloc+0x6e>
 800d730:	2221      	movs	r2, #33	@ 0x21
 800d732:	2104      	movs	r1, #4
 800d734:	4620      	mov	r0, r4
 800d736:	f000 fda1 	bl	800e27c <_calloc_r>
 800d73a:	69e3      	ldr	r3, [r4, #28]
 800d73c:	60f0      	str	r0, [r6, #12]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1e4      	bne.n	800d70e <_Balloc+0x2e>
 800d744:	2000      	movs	r0, #0
 800d746:	bd70      	pop	{r4, r5, r6, pc}
 800d748:	6802      	ldr	r2, [r0, #0]
 800d74a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d74e:	2300      	movs	r3, #0
 800d750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d754:	e7f7      	b.n	800d746 <_Balloc+0x66>
 800d756:	bf00      	nop
 800d758:	0800f5d9 	.word	0x0800f5d9
 800d75c:	0800f659 	.word	0x0800f659

0800d760 <_Bfree>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	69c6      	ldr	r6, [r0, #28]
 800d764:	4605      	mov	r5, r0
 800d766:	460c      	mov	r4, r1
 800d768:	b976      	cbnz	r6, 800d788 <_Bfree+0x28>
 800d76a:	2010      	movs	r0, #16
 800d76c:	f7ff ff02 	bl	800d574 <malloc>
 800d770:	4602      	mov	r2, r0
 800d772:	61e8      	str	r0, [r5, #28]
 800d774:	b920      	cbnz	r0, 800d780 <_Bfree+0x20>
 800d776:	4b09      	ldr	r3, [pc, #36]	@ (800d79c <_Bfree+0x3c>)
 800d778:	4809      	ldr	r0, [pc, #36]	@ (800d7a0 <_Bfree+0x40>)
 800d77a:	218f      	movs	r1, #143	@ 0x8f
 800d77c:	f000 fd60 	bl	800e240 <__assert_func>
 800d780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d784:	6006      	str	r6, [r0, #0]
 800d786:	60c6      	str	r6, [r0, #12]
 800d788:	b13c      	cbz	r4, 800d79a <_Bfree+0x3a>
 800d78a:	69eb      	ldr	r3, [r5, #28]
 800d78c:	6862      	ldr	r2, [r4, #4]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d794:	6021      	str	r1, [r4, #0]
 800d796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	0800f5d9 	.word	0x0800f5d9
 800d7a0:	0800f659 	.word	0x0800f659

0800d7a4 <__multadd>:
 800d7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a8:	690d      	ldr	r5, [r1, #16]
 800d7aa:	4607      	mov	r7, r0
 800d7ac:	460c      	mov	r4, r1
 800d7ae:	461e      	mov	r6, r3
 800d7b0:	f101 0c14 	add.w	ip, r1, #20
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	f8dc 3000 	ldr.w	r3, [ip]
 800d7ba:	b299      	uxth	r1, r3
 800d7bc:	fb02 6101 	mla	r1, r2, r1, r6
 800d7c0:	0c1e      	lsrs	r6, r3, #16
 800d7c2:	0c0b      	lsrs	r3, r1, #16
 800d7c4:	fb02 3306 	mla	r3, r2, r6, r3
 800d7c8:	b289      	uxth	r1, r1
 800d7ca:	3001      	adds	r0, #1
 800d7cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7d0:	4285      	cmp	r5, r0
 800d7d2:	f84c 1b04 	str.w	r1, [ip], #4
 800d7d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7da:	dcec      	bgt.n	800d7b6 <__multadd+0x12>
 800d7dc:	b30e      	cbz	r6, 800d822 <__multadd+0x7e>
 800d7de:	68a3      	ldr	r3, [r4, #8]
 800d7e0:	42ab      	cmp	r3, r5
 800d7e2:	dc19      	bgt.n	800d818 <__multadd+0x74>
 800d7e4:	6861      	ldr	r1, [r4, #4]
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	3101      	adds	r1, #1
 800d7ea:	f7ff ff79 	bl	800d6e0 <_Balloc>
 800d7ee:	4680      	mov	r8, r0
 800d7f0:	b928      	cbnz	r0, 800d7fe <__multadd+0x5a>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d828 <__multadd+0x84>)
 800d7f6:	480d      	ldr	r0, [pc, #52]	@ (800d82c <__multadd+0x88>)
 800d7f8:	21ba      	movs	r1, #186	@ 0xba
 800d7fa:	f000 fd21 	bl	800e240 <__assert_func>
 800d7fe:	6922      	ldr	r2, [r4, #16]
 800d800:	3202      	adds	r2, #2
 800d802:	f104 010c 	add.w	r1, r4, #12
 800d806:	0092      	lsls	r2, r2, #2
 800d808:	300c      	adds	r0, #12
 800d80a:	f7ff f80c 	bl	800c826 <memcpy>
 800d80e:	4621      	mov	r1, r4
 800d810:	4638      	mov	r0, r7
 800d812:	f7ff ffa5 	bl	800d760 <_Bfree>
 800d816:	4644      	mov	r4, r8
 800d818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d81c:	3501      	adds	r5, #1
 800d81e:	615e      	str	r6, [r3, #20]
 800d820:	6125      	str	r5, [r4, #16]
 800d822:	4620      	mov	r0, r4
 800d824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d828:	0800f648 	.word	0x0800f648
 800d82c:	0800f659 	.word	0x0800f659

0800d830 <__hi0bits>:
 800d830:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d834:	4603      	mov	r3, r0
 800d836:	bf36      	itet	cc
 800d838:	0403      	lslcc	r3, r0, #16
 800d83a:	2000      	movcs	r0, #0
 800d83c:	2010      	movcc	r0, #16
 800d83e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d842:	bf3c      	itt	cc
 800d844:	021b      	lslcc	r3, r3, #8
 800d846:	3008      	addcc	r0, #8
 800d848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d84c:	bf3c      	itt	cc
 800d84e:	011b      	lslcc	r3, r3, #4
 800d850:	3004      	addcc	r0, #4
 800d852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d856:	bf3c      	itt	cc
 800d858:	009b      	lslcc	r3, r3, #2
 800d85a:	3002      	addcc	r0, #2
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	db05      	blt.n	800d86c <__hi0bits+0x3c>
 800d860:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d864:	f100 0001 	add.w	r0, r0, #1
 800d868:	bf08      	it	eq
 800d86a:	2020      	moveq	r0, #32
 800d86c:	4770      	bx	lr

0800d86e <__lo0bits>:
 800d86e:	6803      	ldr	r3, [r0, #0]
 800d870:	4602      	mov	r2, r0
 800d872:	f013 0007 	ands.w	r0, r3, #7
 800d876:	d00b      	beq.n	800d890 <__lo0bits+0x22>
 800d878:	07d9      	lsls	r1, r3, #31
 800d87a:	d421      	bmi.n	800d8c0 <__lo0bits+0x52>
 800d87c:	0798      	lsls	r0, r3, #30
 800d87e:	bf49      	itett	mi
 800d880:	085b      	lsrmi	r3, r3, #1
 800d882:	089b      	lsrpl	r3, r3, #2
 800d884:	2001      	movmi	r0, #1
 800d886:	6013      	strmi	r3, [r2, #0]
 800d888:	bf5c      	itt	pl
 800d88a:	6013      	strpl	r3, [r2, #0]
 800d88c:	2002      	movpl	r0, #2
 800d88e:	4770      	bx	lr
 800d890:	b299      	uxth	r1, r3
 800d892:	b909      	cbnz	r1, 800d898 <__lo0bits+0x2a>
 800d894:	0c1b      	lsrs	r3, r3, #16
 800d896:	2010      	movs	r0, #16
 800d898:	b2d9      	uxtb	r1, r3
 800d89a:	b909      	cbnz	r1, 800d8a0 <__lo0bits+0x32>
 800d89c:	3008      	adds	r0, #8
 800d89e:	0a1b      	lsrs	r3, r3, #8
 800d8a0:	0719      	lsls	r1, r3, #28
 800d8a2:	bf04      	itt	eq
 800d8a4:	091b      	lsreq	r3, r3, #4
 800d8a6:	3004      	addeq	r0, #4
 800d8a8:	0799      	lsls	r1, r3, #30
 800d8aa:	bf04      	itt	eq
 800d8ac:	089b      	lsreq	r3, r3, #2
 800d8ae:	3002      	addeq	r0, #2
 800d8b0:	07d9      	lsls	r1, r3, #31
 800d8b2:	d403      	bmi.n	800d8bc <__lo0bits+0x4e>
 800d8b4:	085b      	lsrs	r3, r3, #1
 800d8b6:	f100 0001 	add.w	r0, r0, #1
 800d8ba:	d003      	beq.n	800d8c4 <__lo0bits+0x56>
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	4770      	bx	lr
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	4770      	bx	lr
 800d8c4:	2020      	movs	r0, #32
 800d8c6:	4770      	bx	lr

0800d8c8 <__i2b>:
 800d8c8:	b510      	push	{r4, lr}
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	f7ff ff07 	bl	800d6e0 <_Balloc>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	b928      	cbnz	r0, 800d8e2 <__i2b+0x1a>
 800d8d6:	4b05      	ldr	r3, [pc, #20]	@ (800d8ec <__i2b+0x24>)
 800d8d8:	4805      	ldr	r0, [pc, #20]	@ (800d8f0 <__i2b+0x28>)
 800d8da:	f240 1145 	movw	r1, #325	@ 0x145
 800d8de:	f000 fcaf 	bl	800e240 <__assert_func>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	6144      	str	r4, [r0, #20]
 800d8e6:	6103      	str	r3, [r0, #16]
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	bf00      	nop
 800d8ec:	0800f648 	.word	0x0800f648
 800d8f0:	0800f659 	.word	0x0800f659

0800d8f4 <__multiply>:
 800d8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f8:	4614      	mov	r4, r2
 800d8fa:	690a      	ldr	r2, [r1, #16]
 800d8fc:	6923      	ldr	r3, [r4, #16]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	bfa8      	it	ge
 800d902:	4623      	movge	r3, r4
 800d904:	460f      	mov	r7, r1
 800d906:	bfa4      	itt	ge
 800d908:	460c      	movge	r4, r1
 800d90a:	461f      	movge	r7, r3
 800d90c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d910:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	6861      	ldr	r1, [r4, #4]
 800d918:	eb0a 0609 	add.w	r6, sl, r9
 800d91c:	42b3      	cmp	r3, r6
 800d91e:	b085      	sub	sp, #20
 800d920:	bfb8      	it	lt
 800d922:	3101      	addlt	r1, #1
 800d924:	f7ff fedc 	bl	800d6e0 <_Balloc>
 800d928:	b930      	cbnz	r0, 800d938 <__multiply+0x44>
 800d92a:	4602      	mov	r2, r0
 800d92c:	4b44      	ldr	r3, [pc, #272]	@ (800da40 <__multiply+0x14c>)
 800d92e:	4845      	ldr	r0, [pc, #276]	@ (800da44 <__multiply+0x150>)
 800d930:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d934:	f000 fc84 	bl	800e240 <__assert_func>
 800d938:	f100 0514 	add.w	r5, r0, #20
 800d93c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d940:	462b      	mov	r3, r5
 800d942:	2200      	movs	r2, #0
 800d944:	4543      	cmp	r3, r8
 800d946:	d321      	bcc.n	800d98c <__multiply+0x98>
 800d948:	f107 0114 	add.w	r1, r7, #20
 800d94c:	f104 0214 	add.w	r2, r4, #20
 800d950:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d954:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d958:	9302      	str	r3, [sp, #8]
 800d95a:	1b13      	subs	r3, r2, r4
 800d95c:	3b15      	subs	r3, #21
 800d95e:	f023 0303 	bic.w	r3, r3, #3
 800d962:	3304      	adds	r3, #4
 800d964:	f104 0715 	add.w	r7, r4, #21
 800d968:	42ba      	cmp	r2, r7
 800d96a:	bf38      	it	cc
 800d96c:	2304      	movcc	r3, #4
 800d96e:	9301      	str	r3, [sp, #4]
 800d970:	9b02      	ldr	r3, [sp, #8]
 800d972:	9103      	str	r1, [sp, #12]
 800d974:	428b      	cmp	r3, r1
 800d976:	d80c      	bhi.n	800d992 <__multiply+0x9e>
 800d978:	2e00      	cmp	r6, #0
 800d97a:	dd03      	ble.n	800d984 <__multiply+0x90>
 800d97c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d980:	2b00      	cmp	r3, #0
 800d982:	d05b      	beq.n	800da3c <__multiply+0x148>
 800d984:	6106      	str	r6, [r0, #16]
 800d986:	b005      	add	sp, #20
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98c:	f843 2b04 	str.w	r2, [r3], #4
 800d990:	e7d8      	b.n	800d944 <__multiply+0x50>
 800d992:	f8b1 a000 	ldrh.w	sl, [r1]
 800d996:	f1ba 0f00 	cmp.w	sl, #0
 800d99a:	d024      	beq.n	800d9e6 <__multiply+0xf2>
 800d99c:	f104 0e14 	add.w	lr, r4, #20
 800d9a0:	46a9      	mov	r9, r5
 800d9a2:	f04f 0c00 	mov.w	ip, #0
 800d9a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ae:	fa1f fb87 	uxth.w	fp, r7
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d9bc:	f8d9 7000 	ldr.w	r7, [r9]
 800d9c0:	4463      	add	r3, ip
 800d9c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d9ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9d4:	4572      	cmp	r2, lr
 800d9d6:	f849 3b04 	str.w	r3, [r9], #4
 800d9da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9de:	d8e2      	bhi.n	800d9a6 <__multiply+0xb2>
 800d9e0:	9b01      	ldr	r3, [sp, #4]
 800d9e2:	f845 c003 	str.w	ip, [r5, r3]
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9ec:	3104      	adds	r1, #4
 800d9ee:	f1b9 0f00 	cmp.w	r9, #0
 800d9f2:	d021      	beq.n	800da38 <__multiply+0x144>
 800d9f4:	682b      	ldr	r3, [r5, #0]
 800d9f6:	f104 0c14 	add.w	ip, r4, #20
 800d9fa:	46ae      	mov	lr, r5
 800d9fc:	f04f 0a00 	mov.w	sl, #0
 800da00:	f8bc b000 	ldrh.w	fp, [ip]
 800da04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da08:	fb09 770b 	mla	r7, r9, fp, r7
 800da0c:	4457      	add	r7, sl
 800da0e:	b29b      	uxth	r3, r3
 800da10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da14:	f84e 3b04 	str.w	r3, [lr], #4
 800da18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da20:	f8be 3000 	ldrh.w	r3, [lr]
 800da24:	fb09 330a 	mla	r3, r9, sl, r3
 800da28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da2c:	4562      	cmp	r2, ip
 800da2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da32:	d8e5      	bhi.n	800da00 <__multiply+0x10c>
 800da34:	9f01      	ldr	r7, [sp, #4]
 800da36:	51eb      	str	r3, [r5, r7]
 800da38:	3504      	adds	r5, #4
 800da3a:	e799      	b.n	800d970 <__multiply+0x7c>
 800da3c:	3e01      	subs	r6, #1
 800da3e:	e79b      	b.n	800d978 <__multiply+0x84>
 800da40:	0800f648 	.word	0x0800f648
 800da44:	0800f659 	.word	0x0800f659

0800da48 <__pow5mult>:
 800da48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da4c:	4615      	mov	r5, r2
 800da4e:	f012 0203 	ands.w	r2, r2, #3
 800da52:	4607      	mov	r7, r0
 800da54:	460e      	mov	r6, r1
 800da56:	d007      	beq.n	800da68 <__pow5mult+0x20>
 800da58:	4c25      	ldr	r4, [pc, #148]	@ (800daf0 <__pow5mult+0xa8>)
 800da5a:	3a01      	subs	r2, #1
 800da5c:	2300      	movs	r3, #0
 800da5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da62:	f7ff fe9f 	bl	800d7a4 <__multadd>
 800da66:	4606      	mov	r6, r0
 800da68:	10ad      	asrs	r5, r5, #2
 800da6a:	d03d      	beq.n	800dae8 <__pow5mult+0xa0>
 800da6c:	69fc      	ldr	r4, [r7, #28]
 800da6e:	b97c      	cbnz	r4, 800da90 <__pow5mult+0x48>
 800da70:	2010      	movs	r0, #16
 800da72:	f7ff fd7f 	bl	800d574 <malloc>
 800da76:	4602      	mov	r2, r0
 800da78:	61f8      	str	r0, [r7, #28]
 800da7a:	b928      	cbnz	r0, 800da88 <__pow5mult+0x40>
 800da7c:	4b1d      	ldr	r3, [pc, #116]	@ (800daf4 <__pow5mult+0xac>)
 800da7e:	481e      	ldr	r0, [pc, #120]	@ (800daf8 <__pow5mult+0xb0>)
 800da80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da84:	f000 fbdc 	bl	800e240 <__assert_func>
 800da88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da8c:	6004      	str	r4, [r0, #0]
 800da8e:	60c4      	str	r4, [r0, #12]
 800da90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da98:	b94c      	cbnz	r4, 800daae <__pow5mult+0x66>
 800da9a:	f240 2171 	movw	r1, #625	@ 0x271
 800da9e:	4638      	mov	r0, r7
 800daa0:	f7ff ff12 	bl	800d8c8 <__i2b>
 800daa4:	2300      	movs	r3, #0
 800daa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800daaa:	4604      	mov	r4, r0
 800daac:	6003      	str	r3, [r0, #0]
 800daae:	f04f 0900 	mov.w	r9, #0
 800dab2:	07eb      	lsls	r3, r5, #31
 800dab4:	d50a      	bpl.n	800dacc <__pow5mult+0x84>
 800dab6:	4631      	mov	r1, r6
 800dab8:	4622      	mov	r2, r4
 800daba:	4638      	mov	r0, r7
 800dabc:	f7ff ff1a 	bl	800d8f4 <__multiply>
 800dac0:	4631      	mov	r1, r6
 800dac2:	4680      	mov	r8, r0
 800dac4:	4638      	mov	r0, r7
 800dac6:	f7ff fe4b 	bl	800d760 <_Bfree>
 800daca:	4646      	mov	r6, r8
 800dacc:	106d      	asrs	r5, r5, #1
 800dace:	d00b      	beq.n	800dae8 <__pow5mult+0xa0>
 800dad0:	6820      	ldr	r0, [r4, #0]
 800dad2:	b938      	cbnz	r0, 800dae4 <__pow5mult+0x9c>
 800dad4:	4622      	mov	r2, r4
 800dad6:	4621      	mov	r1, r4
 800dad8:	4638      	mov	r0, r7
 800dada:	f7ff ff0b 	bl	800d8f4 <__multiply>
 800dade:	6020      	str	r0, [r4, #0]
 800dae0:	f8c0 9000 	str.w	r9, [r0]
 800dae4:	4604      	mov	r4, r0
 800dae6:	e7e4      	b.n	800dab2 <__pow5mult+0x6a>
 800dae8:	4630      	mov	r0, r6
 800daea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daee:	bf00      	nop
 800daf0:	0800f6b4 	.word	0x0800f6b4
 800daf4:	0800f5d9 	.word	0x0800f5d9
 800daf8:	0800f659 	.word	0x0800f659

0800dafc <__lshift>:
 800dafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db00:	460c      	mov	r4, r1
 800db02:	6849      	ldr	r1, [r1, #4]
 800db04:	6923      	ldr	r3, [r4, #16]
 800db06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db0a:	68a3      	ldr	r3, [r4, #8]
 800db0c:	4607      	mov	r7, r0
 800db0e:	4691      	mov	r9, r2
 800db10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db14:	f108 0601 	add.w	r6, r8, #1
 800db18:	42b3      	cmp	r3, r6
 800db1a:	db0b      	blt.n	800db34 <__lshift+0x38>
 800db1c:	4638      	mov	r0, r7
 800db1e:	f7ff fddf 	bl	800d6e0 <_Balloc>
 800db22:	4605      	mov	r5, r0
 800db24:	b948      	cbnz	r0, 800db3a <__lshift+0x3e>
 800db26:	4602      	mov	r2, r0
 800db28:	4b28      	ldr	r3, [pc, #160]	@ (800dbcc <__lshift+0xd0>)
 800db2a:	4829      	ldr	r0, [pc, #164]	@ (800dbd0 <__lshift+0xd4>)
 800db2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db30:	f000 fb86 	bl	800e240 <__assert_func>
 800db34:	3101      	adds	r1, #1
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	e7ee      	b.n	800db18 <__lshift+0x1c>
 800db3a:	2300      	movs	r3, #0
 800db3c:	f100 0114 	add.w	r1, r0, #20
 800db40:	f100 0210 	add.w	r2, r0, #16
 800db44:	4618      	mov	r0, r3
 800db46:	4553      	cmp	r3, sl
 800db48:	db33      	blt.n	800dbb2 <__lshift+0xb6>
 800db4a:	6920      	ldr	r0, [r4, #16]
 800db4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db50:	f104 0314 	add.w	r3, r4, #20
 800db54:	f019 091f 	ands.w	r9, r9, #31
 800db58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db60:	d02b      	beq.n	800dbba <__lshift+0xbe>
 800db62:	f1c9 0e20 	rsb	lr, r9, #32
 800db66:	468a      	mov	sl, r1
 800db68:	2200      	movs	r2, #0
 800db6a:	6818      	ldr	r0, [r3, #0]
 800db6c:	fa00 f009 	lsl.w	r0, r0, r9
 800db70:	4310      	orrs	r0, r2
 800db72:	f84a 0b04 	str.w	r0, [sl], #4
 800db76:	f853 2b04 	ldr.w	r2, [r3], #4
 800db7a:	459c      	cmp	ip, r3
 800db7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800db80:	d8f3      	bhi.n	800db6a <__lshift+0x6e>
 800db82:	ebac 0304 	sub.w	r3, ip, r4
 800db86:	3b15      	subs	r3, #21
 800db88:	f023 0303 	bic.w	r3, r3, #3
 800db8c:	3304      	adds	r3, #4
 800db8e:	f104 0015 	add.w	r0, r4, #21
 800db92:	4584      	cmp	ip, r0
 800db94:	bf38      	it	cc
 800db96:	2304      	movcc	r3, #4
 800db98:	50ca      	str	r2, [r1, r3]
 800db9a:	b10a      	cbz	r2, 800dba0 <__lshift+0xa4>
 800db9c:	f108 0602 	add.w	r6, r8, #2
 800dba0:	3e01      	subs	r6, #1
 800dba2:	4638      	mov	r0, r7
 800dba4:	612e      	str	r6, [r5, #16]
 800dba6:	4621      	mov	r1, r4
 800dba8:	f7ff fdda 	bl	800d760 <_Bfree>
 800dbac:	4628      	mov	r0, r5
 800dbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	e7c5      	b.n	800db46 <__lshift+0x4a>
 800dbba:	3904      	subs	r1, #4
 800dbbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbc4:	459c      	cmp	ip, r3
 800dbc6:	d8f9      	bhi.n	800dbbc <__lshift+0xc0>
 800dbc8:	e7ea      	b.n	800dba0 <__lshift+0xa4>
 800dbca:	bf00      	nop
 800dbcc:	0800f648 	.word	0x0800f648
 800dbd0:	0800f659 	.word	0x0800f659

0800dbd4 <__mcmp>:
 800dbd4:	690a      	ldr	r2, [r1, #16]
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	6900      	ldr	r0, [r0, #16]
 800dbda:	1a80      	subs	r0, r0, r2
 800dbdc:	b530      	push	{r4, r5, lr}
 800dbde:	d10e      	bne.n	800dbfe <__mcmp+0x2a>
 800dbe0:	3314      	adds	r3, #20
 800dbe2:	3114      	adds	r1, #20
 800dbe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbf4:	4295      	cmp	r5, r2
 800dbf6:	d003      	beq.n	800dc00 <__mcmp+0x2c>
 800dbf8:	d205      	bcs.n	800dc06 <__mcmp+0x32>
 800dbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800dbfe:	bd30      	pop	{r4, r5, pc}
 800dc00:	42a3      	cmp	r3, r4
 800dc02:	d3f3      	bcc.n	800dbec <__mcmp+0x18>
 800dc04:	e7fb      	b.n	800dbfe <__mcmp+0x2a>
 800dc06:	2001      	movs	r0, #1
 800dc08:	e7f9      	b.n	800dbfe <__mcmp+0x2a>
	...

0800dc0c <__mdiff>:
 800dc0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	4689      	mov	r9, r1
 800dc12:	4606      	mov	r6, r0
 800dc14:	4611      	mov	r1, r2
 800dc16:	4648      	mov	r0, r9
 800dc18:	4614      	mov	r4, r2
 800dc1a:	f7ff ffdb 	bl	800dbd4 <__mcmp>
 800dc1e:	1e05      	subs	r5, r0, #0
 800dc20:	d112      	bne.n	800dc48 <__mdiff+0x3c>
 800dc22:	4629      	mov	r1, r5
 800dc24:	4630      	mov	r0, r6
 800dc26:	f7ff fd5b 	bl	800d6e0 <_Balloc>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	b928      	cbnz	r0, 800dc3a <__mdiff+0x2e>
 800dc2e:	4b3f      	ldr	r3, [pc, #252]	@ (800dd2c <__mdiff+0x120>)
 800dc30:	f240 2137 	movw	r1, #567	@ 0x237
 800dc34:	483e      	ldr	r0, [pc, #248]	@ (800dd30 <__mdiff+0x124>)
 800dc36:	f000 fb03 	bl	800e240 <__assert_func>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc40:	4610      	mov	r0, r2
 800dc42:	b003      	add	sp, #12
 800dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc48:	bfbc      	itt	lt
 800dc4a:	464b      	movlt	r3, r9
 800dc4c:	46a1      	movlt	r9, r4
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc54:	bfba      	itte	lt
 800dc56:	461c      	movlt	r4, r3
 800dc58:	2501      	movlt	r5, #1
 800dc5a:	2500      	movge	r5, #0
 800dc5c:	f7ff fd40 	bl	800d6e0 <_Balloc>
 800dc60:	4602      	mov	r2, r0
 800dc62:	b918      	cbnz	r0, 800dc6c <__mdiff+0x60>
 800dc64:	4b31      	ldr	r3, [pc, #196]	@ (800dd2c <__mdiff+0x120>)
 800dc66:	f240 2145 	movw	r1, #581	@ 0x245
 800dc6a:	e7e3      	b.n	800dc34 <__mdiff+0x28>
 800dc6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc70:	6926      	ldr	r6, [r4, #16]
 800dc72:	60c5      	str	r5, [r0, #12]
 800dc74:	f109 0310 	add.w	r3, r9, #16
 800dc78:	f109 0514 	add.w	r5, r9, #20
 800dc7c:	f104 0e14 	add.w	lr, r4, #20
 800dc80:	f100 0b14 	add.w	fp, r0, #20
 800dc84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc8c:	9301      	str	r3, [sp, #4]
 800dc8e:	46d9      	mov	r9, fp
 800dc90:	f04f 0c00 	mov.w	ip, #0
 800dc94:	9b01      	ldr	r3, [sp, #4]
 800dc96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	fa1f f38a 	uxth.w	r3, sl
 800dca4:	4619      	mov	r1, r3
 800dca6:	b283      	uxth	r3, r0
 800dca8:	1acb      	subs	r3, r1, r3
 800dcaa:	0c00      	lsrs	r0, r0, #16
 800dcac:	4463      	add	r3, ip
 800dcae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dcb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dcbc:	4576      	cmp	r6, lr
 800dcbe:	f849 3b04 	str.w	r3, [r9], #4
 800dcc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcc6:	d8e5      	bhi.n	800dc94 <__mdiff+0x88>
 800dcc8:	1b33      	subs	r3, r6, r4
 800dcca:	3b15      	subs	r3, #21
 800dccc:	f023 0303 	bic.w	r3, r3, #3
 800dcd0:	3415      	adds	r4, #21
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	42a6      	cmp	r6, r4
 800dcd6:	bf38      	it	cc
 800dcd8:	2304      	movcc	r3, #4
 800dcda:	441d      	add	r5, r3
 800dcdc:	445b      	add	r3, fp
 800dcde:	461e      	mov	r6, r3
 800dce0:	462c      	mov	r4, r5
 800dce2:	4544      	cmp	r4, r8
 800dce4:	d30e      	bcc.n	800dd04 <__mdiff+0xf8>
 800dce6:	f108 0103 	add.w	r1, r8, #3
 800dcea:	1b49      	subs	r1, r1, r5
 800dcec:	f021 0103 	bic.w	r1, r1, #3
 800dcf0:	3d03      	subs	r5, #3
 800dcf2:	45a8      	cmp	r8, r5
 800dcf4:	bf38      	it	cc
 800dcf6:	2100      	movcc	r1, #0
 800dcf8:	440b      	add	r3, r1
 800dcfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcfe:	b191      	cbz	r1, 800dd26 <__mdiff+0x11a>
 800dd00:	6117      	str	r7, [r2, #16]
 800dd02:	e79d      	b.n	800dc40 <__mdiff+0x34>
 800dd04:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd08:	46e6      	mov	lr, ip
 800dd0a:	0c08      	lsrs	r0, r1, #16
 800dd0c:	fa1c fc81 	uxtah	ip, ip, r1
 800dd10:	4471      	add	r1, lr
 800dd12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd16:	b289      	uxth	r1, r1
 800dd18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd1c:	f846 1b04 	str.w	r1, [r6], #4
 800dd20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd24:	e7dd      	b.n	800dce2 <__mdiff+0xd6>
 800dd26:	3f01      	subs	r7, #1
 800dd28:	e7e7      	b.n	800dcfa <__mdiff+0xee>
 800dd2a:	bf00      	nop
 800dd2c:	0800f648 	.word	0x0800f648
 800dd30:	0800f659 	.word	0x0800f659

0800dd34 <__d2b>:
 800dd34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd38:	460f      	mov	r7, r1
 800dd3a:	2101      	movs	r1, #1
 800dd3c:	ec59 8b10 	vmov	r8, r9, d0
 800dd40:	4616      	mov	r6, r2
 800dd42:	f7ff fccd 	bl	800d6e0 <_Balloc>
 800dd46:	4604      	mov	r4, r0
 800dd48:	b930      	cbnz	r0, 800dd58 <__d2b+0x24>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	4b23      	ldr	r3, [pc, #140]	@ (800dddc <__d2b+0xa8>)
 800dd4e:	4824      	ldr	r0, [pc, #144]	@ (800dde0 <__d2b+0xac>)
 800dd50:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd54:	f000 fa74 	bl	800e240 <__assert_func>
 800dd58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd60:	b10d      	cbz	r5, 800dd66 <__d2b+0x32>
 800dd62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd66:	9301      	str	r3, [sp, #4]
 800dd68:	f1b8 0300 	subs.w	r3, r8, #0
 800dd6c:	d023      	beq.n	800ddb6 <__d2b+0x82>
 800dd6e:	4668      	mov	r0, sp
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	f7ff fd7c 	bl	800d86e <__lo0bits>
 800dd76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd7a:	b1d0      	cbz	r0, 800ddb2 <__d2b+0x7e>
 800dd7c:	f1c0 0320 	rsb	r3, r0, #32
 800dd80:	fa02 f303 	lsl.w	r3, r2, r3
 800dd84:	430b      	orrs	r3, r1
 800dd86:	40c2      	lsrs	r2, r0
 800dd88:	6163      	str	r3, [r4, #20]
 800dd8a:	9201      	str	r2, [sp, #4]
 800dd8c:	9b01      	ldr	r3, [sp, #4]
 800dd8e:	61a3      	str	r3, [r4, #24]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	bf0c      	ite	eq
 800dd94:	2201      	moveq	r2, #1
 800dd96:	2202      	movne	r2, #2
 800dd98:	6122      	str	r2, [r4, #16]
 800dd9a:	b1a5      	cbz	r5, 800ddc6 <__d2b+0x92>
 800dd9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dda0:	4405      	add	r5, r0
 800dda2:	603d      	str	r5, [r7, #0]
 800dda4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dda8:	6030      	str	r0, [r6, #0]
 800ddaa:	4620      	mov	r0, r4
 800ddac:	b003      	add	sp, #12
 800ddae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddb2:	6161      	str	r1, [r4, #20]
 800ddb4:	e7ea      	b.n	800dd8c <__d2b+0x58>
 800ddb6:	a801      	add	r0, sp, #4
 800ddb8:	f7ff fd59 	bl	800d86e <__lo0bits>
 800ddbc:	9b01      	ldr	r3, [sp, #4]
 800ddbe:	6163      	str	r3, [r4, #20]
 800ddc0:	3020      	adds	r0, #32
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	e7e8      	b.n	800dd98 <__d2b+0x64>
 800ddc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddce:	6038      	str	r0, [r7, #0]
 800ddd0:	6918      	ldr	r0, [r3, #16]
 800ddd2:	f7ff fd2d 	bl	800d830 <__hi0bits>
 800ddd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddda:	e7e5      	b.n	800dda8 <__d2b+0x74>
 800dddc:	0800f648 	.word	0x0800f648
 800dde0:	0800f659 	.word	0x0800f659

0800dde4 <__ssputs_r>:
 800dde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dde8:	688e      	ldr	r6, [r1, #8]
 800ddea:	461f      	mov	r7, r3
 800ddec:	42be      	cmp	r6, r7
 800ddee:	680b      	ldr	r3, [r1, #0]
 800ddf0:	4682      	mov	sl, r0
 800ddf2:	460c      	mov	r4, r1
 800ddf4:	4690      	mov	r8, r2
 800ddf6:	d82d      	bhi.n	800de54 <__ssputs_r+0x70>
 800ddf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de00:	d026      	beq.n	800de50 <__ssputs_r+0x6c>
 800de02:	6965      	ldr	r5, [r4, #20]
 800de04:	6909      	ldr	r1, [r1, #16]
 800de06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de0a:	eba3 0901 	sub.w	r9, r3, r1
 800de0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de12:	1c7b      	adds	r3, r7, #1
 800de14:	444b      	add	r3, r9
 800de16:	106d      	asrs	r5, r5, #1
 800de18:	429d      	cmp	r5, r3
 800de1a:	bf38      	it	cc
 800de1c:	461d      	movcc	r5, r3
 800de1e:	0553      	lsls	r3, r2, #21
 800de20:	d527      	bpl.n	800de72 <__ssputs_r+0x8e>
 800de22:	4629      	mov	r1, r5
 800de24:	f7ff fbd0 	bl	800d5c8 <_malloc_r>
 800de28:	4606      	mov	r6, r0
 800de2a:	b360      	cbz	r0, 800de86 <__ssputs_r+0xa2>
 800de2c:	6921      	ldr	r1, [r4, #16]
 800de2e:	464a      	mov	r2, r9
 800de30:	f7fe fcf9 	bl	800c826 <memcpy>
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de3e:	81a3      	strh	r3, [r4, #12]
 800de40:	6126      	str	r6, [r4, #16]
 800de42:	6165      	str	r5, [r4, #20]
 800de44:	444e      	add	r6, r9
 800de46:	eba5 0509 	sub.w	r5, r5, r9
 800de4a:	6026      	str	r6, [r4, #0]
 800de4c:	60a5      	str	r5, [r4, #8]
 800de4e:	463e      	mov	r6, r7
 800de50:	42be      	cmp	r6, r7
 800de52:	d900      	bls.n	800de56 <__ssputs_r+0x72>
 800de54:	463e      	mov	r6, r7
 800de56:	6820      	ldr	r0, [r4, #0]
 800de58:	4632      	mov	r2, r6
 800de5a:	4641      	mov	r1, r8
 800de5c:	f000 f9c6 	bl	800e1ec <memmove>
 800de60:	68a3      	ldr	r3, [r4, #8]
 800de62:	1b9b      	subs	r3, r3, r6
 800de64:	60a3      	str	r3, [r4, #8]
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	4433      	add	r3, r6
 800de6a:	6023      	str	r3, [r4, #0]
 800de6c:	2000      	movs	r0, #0
 800de6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de72:	462a      	mov	r2, r5
 800de74:	f000 fa28 	bl	800e2c8 <_realloc_r>
 800de78:	4606      	mov	r6, r0
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d1e0      	bne.n	800de40 <__ssputs_r+0x5c>
 800de7e:	6921      	ldr	r1, [r4, #16]
 800de80:	4650      	mov	r0, sl
 800de82:	f7ff fb2d 	bl	800d4e0 <_free_r>
 800de86:	230c      	movs	r3, #12
 800de88:	f8ca 3000 	str.w	r3, [sl]
 800de8c:	89a3      	ldrh	r3, [r4, #12]
 800de8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de92:	81a3      	strh	r3, [r4, #12]
 800de94:	f04f 30ff 	mov.w	r0, #4294967295
 800de98:	e7e9      	b.n	800de6e <__ssputs_r+0x8a>
	...

0800de9c <_svfiprintf_r>:
 800de9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea0:	4698      	mov	r8, r3
 800dea2:	898b      	ldrh	r3, [r1, #12]
 800dea4:	061b      	lsls	r3, r3, #24
 800dea6:	b09d      	sub	sp, #116	@ 0x74
 800dea8:	4607      	mov	r7, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	4614      	mov	r4, r2
 800deae:	d510      	bpl.n	800ded2 <_svfiprintf_r+0x36>
 800deb0:	690b      	ldr	r3, [r1, #16]
 800deb2:	b973      	cbnz	r3, 800ded2 <_svfiprintf_r+0x36>
 800deb4:	2140      	movs	r1, #64	@ 0x40
 800deb6:	f7ff fb87 	bl	800d5c8 <_malloc_r>
 800deba:	6028      	str	r0, [r5, #0]
 800debc:	6128      	str	r0, [r5, #16]
 800debe:	b930      	cbnz	r0, 800dece <_svfiprintf_r+0x32>
 800dec0:	230c      	movs	r3, #12
 800dec2:	603b      	str	r3, [r7, #0]
 800dec4:	f04f 30ff 	mov.w	r0, #4294967295
 800dec8:	b01d      	add	sp, #116	@ 0x74
 800deca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dece:	2340      	movs	r3, #64	@ 0x40
 800ded0:	616b      	str	r3, [r5, #20]
 800ded2:	2300      	movs	r3, #0
 800ded4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ded6:	2320      	movs	r3, #32
 800ded8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dee0:	2330      	movs	r3, #48	@ 0x30
 800dee2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e080 <_svfiprintf_r+0x1e4>
 800dee6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800deea:	f04f 0901 	mov.w	r9, #1
 800deee:	4623      	mov	r3, r4
 800def0:	469a      	mov	sl, r3
 800def2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def6:	b10a      	cbz	r2, 800defc <_svfiprintf_r+0x60>
 800def8:	2a25      	cmp	r2, #37	@ 0x25
 800defa:	d1f9      	bne.n	800def0 <_svfiprintf_r+0x54>
 800defc:	ebba 0b04 	subs.w	fp, sl, r4
 800df00:	d00b      	beq.n	800df1a <_svfiprintf_r+0x7e>
 800df02:	465b      	mov	r3, fp
 800df04:	4622      	mov	r2, r4
 800df06:	4629      	mov	r1, r5
 800df08:	4638      	mov	r0, r7
 800df0a:	f7ff ff6b 	bl	800dde4 <__ssputs_r>
 800df0e:	3001      	adds	r0, #1
 800df10:	f000 80a7 	beq.w	800e062 <_svfiprintf_r+0x1c6>
 800df14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df16:	445a      	add	r2, fp
 800df18:	9209      	str	r2, [sp, #36]	@ 0x24
 800df1a:	f89a 3000 	ldrb.w	r3, [sl]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f000 809f 	beq.w	800e062 <_svfiprintf_r+0x1c6>
 800df24:	2300      	movs	r3, #0
 800df26:	f04f 32ff 	mov.w	r2, #4294967295
 800df2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df2e:	f10a 0a01 	add.w	sl, sl, #1
 800df32:	9304      	str	r3, [sp, #16]
 800df34:	9307      	str	r3, [sp, #28]
 800df36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800df3c:	4654      	mov	r4, sl
 800df3e:	2205      	movs	r2, #5
 800df40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df44:	484e      	ldr	r0, [pc, #312]	@ (800e080 <_svfiprintf_r+0x1e4>)
 800df46:	f7f2 f943 	bl	80001d0 <memchr>
 800df4a:	9a04      	ldr	r2, [sp, #16]
 800df4c:	b9d8      	cbnz	r0, 800df86 <_svfiprintf_r+0xea>
 800df4e:	06d0      	lsls	r0, r2, #27
 800df50:	bf44      	itt	mi
 800df52:	2320      	movmi	r3, #32
 800df54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df58:	0711      	lsls	r1, r2, #28
 800df5a:	bf44      	itt	mi
 800df5c:	232b      	movmi	r3, #43	@ 0x2b
 800df5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df62:	f89a 3000 	ldrb.w	r3, [sl]
 800df66:	2b2a      	cmp	r3, #42	@ 0x2a
 800df68:	d015      	beq.n	800df96 <_svfiprintf_r+0xfa>
 800df6a:	9a07      	ldr	r2, [sp, #28]
 800df6c:	4654      	mov	r4, sl
 800df6e:	2000      	movs	r0, #0
 800df70:	f04f 0c0a 	mov.w	ip, #10
 800df74:	4621      	mov	r1, r4
 800df76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df7a:	3b30      	subs	r3, #48	@ 0x30
 800df7c:	2b09      	cmp	r3, #9
 800df7e:	d94b      	bls.n	800e018 <_svfiprintf_r+0x17c>
 800df80:	b1b0      	cbz	r0, 800dfb0 <_svfiprintf_r+0x114>
 800df82:	9207      	str	r2, [sp, #28]
 800df84:	e014      	b.n	800dfb0 <_svfiprintf_r+0x114>
 800df86:	eba0 0308 	sub.w	r3, r0, r8
 800df8a:	fa09 f303 	lsl.w	r3, r9, r3
 800df8e:	4313      	orrs	r3, r2
 800df90:	9304      	str	r3, [sp, #16]
 800df92:	46a2      	mov	sl, r4
 800df94:	e7d2      	b.n	800df3c <_svfiprintf_r+0xa0>
 800df96:	9b03      	ldr	r3, [sp, #12]
 800df98:	1d19      	adds	r1, r3, #4
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	9103      	str	r1, [sp, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	bfbb      	ittet	lt
 800dfa2:	425b      	neglt	r3, r3
 800dfa4:	f042 0202 	orrlt.w	r2, r2, #2
 800dfa8:	9307      	strge	r3, [sp, #28]
 800dfaa:	9307      	strlt	r3, [sp, #28]
 800dfac:	bfb8      	it	lt
 800dfae:	9204      	strlt	r2, [sp, #16]
 800dfb0:	7823      	ldrb	r3, [r4, #0]
 800dfb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfb4:	d10a      	bne.n	800dfcc <_svfiprintf_r+0x130>
 800dfb6:	7863      	ldrb	r3, [r4, #1]
 800dfb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfba:	d132      	bne.n	800e022 <_svfiprintf_r+0x186>
 800dfbc:	9b03      	ldr	r3, [sp, #12]
 800dfbe:	1d1a      	adds	r2, r3, #4
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	9203      	str	r2, [sp, #12]
 800dfc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfc8:	3402      	adds	r4, #2
 800dfca:	9305      	str	r3, [sp, #20]
 800dfcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e090 <_svfiprintf_r+0x1f4>
 800dfd0:	7821      	ldrb	r1, [r4, #0]
 800dfd2:	2203      	movs	r2, #3
 800dfd4:	4650      	mov	r0, sl
 800dfd6:	f7f2 f8fb 	bl	80001d0 <memchr>
 800dfda:	b138      	cbz	r0, 800dfec <_svfiprintf_r+0x150>
 800dfdc:	9b04      	ldr	r3, [sp, #16]
 800dfde:	eba0 000a 	sub.w	r0, r0, sl
 800dfe2:	2240      	movs	r2, #64	@ 0x40
 800dfe4:	4082      	lsls	r2, r0
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	3401      	adds	r4, #1
 800dfea:	9304      	str	r3, [sp, #16]
 800dfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff0:	4824      	ldr	r0, [pc, #144]	@ (800e084 <_svfiprintf_r+0x1e8>)
 800dff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dff6:	2206      	movs	r2, #6
 800dff8:	f7f2 f8ea 	bl	80001d0 <memchr>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d036      	beq.n	800e06e <_svfiprintf_r+0x1d2>
 800e000:	4b21      	ldr	r3, [pc, #132]	@ (800e088 <_svfiprintf_r+0x1ec>)
 800e002:	bb1b      	cbnz	r3, 800e04c <_svfiprintf_r+0x1b0>
 800e004:	9b03      	ldr	r3, [sp, #12]
 800e006:	3307      	adds	r3, #7
 800e008:	f023 0307 	bic.w	r3, r3, #7
 800e00c:	3308      	adds	r3, #8
 800e00e:	9303      	str	r3, [sp, #12]
 800e010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e012:	4433      	add	r3, r6
 800e014:	9309      	str	r3, [sp, #36]	@ 0x24
 800e016:	e76a      	b.n	800deee <_svfiprintf_r+0x52>
 800e018:	fb0c 3202 	mla	r2, ip, r2, r3
 800e01c:	460c      	mov	r4, r1
 800e01e:	2001      	movs	r0, #1
 800e020:	e7a8      	b.n	800df74 <_svfiprintf_r+0xd8>
 800e022:	2300      	movs	r3, #0
 800e024:	3401      	adds	r4, #1
 800e026:	9305      	str	r3, [sp, #20]
 800e028:	4619      	mov	r1, r3
 800e02a:	f04f 0c0a 	mov.w	ip, #10
 800e02e:	4620      	mov	r0, r4
 800e030:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e034:	3a30      	subs	r2, #48	@ 0x30
 800e036:	2a09      	cmp	r2, #9
 800e038:	d903      	bls.n	800e042 <_svfiprintf_r+0x1a6>
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0c6      	beq.n	800dfcc <_svfiprintf_r+0x130>
 800e03e:	9105      	str	r1, [sp, #20]
 800e040:	e7c4      	b.n	800dfcc <_svfiprintf_r+0x130>
 800e042:	fb0c 2101 	mla	r1, ip, r1, r2
 800e046:	4604      	mov	r4, r0
 800e048:	2301      	movs	r3, #1
 800e04a:	e7f0      	b.n	800e02e <_svfiprintf_r+0x192>
 800e04c:	ab03      	add	r3, sp, #12
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	462a      	mov	r2, r5
 800e052:	4b0e      	ldr	r3, [pc, #56]	@ (800e08c <_svfiprintf_r+0x1f0>)
 800e054:	a904      	add	r1, sp, #16
 800e056:	4638      	mov	r0, r7
 800e058:	f7fd fe88 	bl	800bd6c <_printf_float>
 800e05c:	1c42      	adds	r2, r0, #1
 800e05e:	4606      	mov	r6, r0
 800e060:	d1d6      	bne.n	800e010 <_svfiprintf_r+0x174>
 800e062:	89ab      	ldrh	r3, [r5, #12]
 800e064:	065b      	lsls	r3, r3, #25
 800e066:	f53f af2d 	bmi.w	800dec4 <_svfiprintf_r+0x28>
 800e06a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e06c:	e72c      	b.n	800dec8 <_svfiprintf_r+0x2c>
 800e06e:	ab03      	add	r3, sp, #12
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	462a      	mov	r2, r5
 800e074:	4b05      	ldr	r3, [pc, #20]	@ (800e08c <_svfiprintf_r+0x1f0>)
 800e076:	a904      	add	r1, sp, #16
 800e078:	4638      	mov	r0, r7
 800e07a:	f7fe f90f 	bl	800c29c <_printf_i>
 800e07e:	e7ed      	b.n	800e05c <_svfiprintf_r+0x1c0>
 800e080:	0800f7b0 	.word	0x0800f7b0
 800e084:	0800f7ba 	.word	0x0800f7ba
 800e088:	0800bd6d 	.word	0x0800bd6d
 800e08c:	0800dde5 	.word	0x0800dde5
 800e090:	0800f7b6 	.word	0x0800f7b6

0800e094 <__sflush_r>:
 800e094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	0716      	lsls	r6, r2, #28
 800e09e:	4605      	mov	r5, r0
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	d454      	bmi.n	800e14e <__sflush_r+0xba>
 800e0a4:	684b      	ldr	r3, [r1, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	dc02      	bgt.n	800e0b0 <__sflush_r+0x1c>
 800e0aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	dd48      	ble.n	800e142 <__sflush_r+0xae>
 800e0b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0b2:	2e00      	cmp	r6, #0
 800e0b4:	d045      	beq.n	800e142 <__sflush_r+0xae>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0bc:	682f      	ldr	r7, [r5, #0]
 800e0be:	6a21      	ldr	r1, [r4, #32]
 800e0c0:	602b      	str	r3, [r5, #0]
 800e0c2:	d030      	beq.n	800e126 <__sflush_r+0x92>
 800e0c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0c6:	89a3      	ldrh	r3, [r4, #12]
 800e0c8:	0759      	lsls	r1, r3, #29
 800e0ca:	d505      	bpl.n	800e0d8 <__sflush_r+0x44>
 800e0cc:	6863      	ldr	r3, [r4, #4]
 800e0ce:	1ad2      	subs	r2, r2, r3
 800e0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0d2:	b10b      	cbz	r3, 800e0d8 <__sflush_r+0x44>
 800e0d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0d6:	1ad2      	subs	r2, r2, r3
 800e0d8:	2300      	movs	r3, #0
 800e0da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0dc:	6a21      	ldr	r1, [r4, #32]
 800e0de:	4628      	mov	r0, r5
 800e0e0:	47b0      	blx	r6
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	d106      	bne.n	800e0f6 <__sflush_r+0x62>
 800e0e8:	6829      	ldr	r1, [r5, #0]
 800e0ea:	291d      	cmp	r1, #29
 800e0ec:	d82b      	bhi.n	800e146 <__sflush_r+0xb2>
 800e0ee:	4a2a      	ldr	r2, [pc, #168]	@ (800e198 <__sflush_r+0x104>)
 800e0f0:	410a      	asrs	r2, r1
 800e0f2:	07d6      	lsls	r6, r2, #31
 800e0f4:	d427      	bmi.n	800e146 <__sflush_r+0xb2>
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	6062      	str	r2, [r4, #4]
 800e0fa:	04d9      	lsls	r1, r3, #19
 800e0fc:	6922      	ldr	r2, [r4, #16]
 800e0fe:	6022      	str	r2, [r4, #0]
 800e100:	d504      	bpl.n	800e10c <__sflush_r+0x78>
 800e102:	1c42      	adds	r2, r0, #1
 800e104:	d101      	bne.n	800e10a <__sflush_r+0x76>
 800e106:	682b      	ldr	r3, [r5, #0]
 800e108:	b903      	cbnz	r3, 800e10c <__sflush_r+0x78>
 800e10a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e10e:	602f      	str	r7, [r5, #0]
 800e110:	b1b9      	cbz	r1, 800e142 <__sflush_r+0xae>
 800e112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e116:	4299      	cmp	r1, r3
 800e118:	d002      	beq.n	800e120 <__sflush_r+0x8c>
 800e11a:	4628      	mov	r0, r5
 800e11c:	f7ff f9e0 	bl	800d4e0 <_free_r>
 800e120:	2300      	movs	r3, #0
 800e122:	6363      	str	r3, [r4, #52]	@ 0x34
 800e124:	e00d      	b.n	800e142 <__sflush_r+0xae>
 800e126:	2301      	movs	r3, #1
 800e128:	4628      	mov	r0, r5
 800e12a:	47b0      	blx	r6
 800e12c:	4602      	mov	r2, r0
 800e12e:	1c50      	adds	r0, r2, #1
 800e130:	d1c9      	bne.n	800e0c6 <__sflush_r+0x32>
 800e132:	682b      	ldr	r3, [r5, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d0c6      	beq.n	800e0c6 <__sflush_r+0x32>
 800e138:	2b1d      	cmp	r3, #29
 800e13a:	d001      	beq.n	800e140 <__sflush_r+0xac>
 800e13c:	2b16      	cmp	r3, #22
 800e13e:	d11e      	bne.n	800e17e <__sflush_r+0xea>
 800e140:	602f      	str	r7, [r5, #0]
 800e142:	2000      	movs	r0, #0
 800e144:	e022      	b.n	800e18c <__sflush_r+0xf8>
 800e146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e14a:	b21b      	sxth	r3, r3
 800e14c:	e01b      	b.n	800e186 <__sflush_r+0xf2>
 800e14e:	690f      	ldr	r7, [r1, #16]
 800e150:	2f00      	cmp	r7, #0
 800e152:	d0f6      	beq.n	800e142 <__sflush_r+0xae>
 800e154:	0793      	lsls	r3, r2, #30
 800e156:	680e      	ldr	r6, [r1, #0]
 800e158:	bf08      	it	eq
 800e15a:	694b      	ldreq	r3, [r1, #20]
 800e15c:	600f      	str	r7, [r1, #0]
 800e15e:	bf18      	it	ne
 800e160:	2300      	movne	r3, #0
 800e162:	eba6 0807 	sub.w	r8, r6, r7
 800e166:	608b      	str	r3, [r1, #8]
 800e168:	f1b8 0f00 	cmp.w	r8, #0
 800e16c:	dde9      	ble.n	800e142 <__sflush_r+0xae>
 800e16e:	6a21      	ldr	r1, [r4, #32]
 800e170:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e172:	4643      	mov	r3, r8
 800e174:	463a      	mov	r2, r7
 800e176:	4628      	mov	r0, r5
 800e178:	47b0      	blx	r6
 800e17a:	2800      	cmp	r0, #0
 800e17c:	dc08      	bgt.n	800e190 <__sflush_r+0xfc>
 800e17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e186:	81a3      	strh	r3, [r4, #12]
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e190:	4407      	add	r7, r0
 800e192:	eba8 0800 	sub.w	r8, r8, r0
 800e196:	e7e7      	b.n	800e168 <__sflush_r+0xd4>
 800e198:	dfbffffe 	.word	0xdfbffffe

0800e19c <_fflush_r>:
 800e19c:	b538      	push	{r3, r4, r5, lr}
 800e19e:	690b      	ldr	r3, [r1, #16]
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	b913      	cbnz	r3, 800e1ac <_fflush_r+0x10>
 800e1a6:	2500      	movs	r5, #0
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	b118      	cbz	r0, 800e1b6 <_fflush_r+0x1a>
 800e1ae:	6a03      	ldr	r3, [r0, #32]
 800e1b0:	b90b      	cbnz	r3, 800e1b6 <_fflush_r+0x1a>
 800e1b2:	f7fe fa1f 	bl	800c5f4 <__sinit>
 800e1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d0f3      	beq.n	800e1a6 <_fflush_r+0xa>
 800e1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1c0:	07d0      	lsls	r0, r2, #31
 800e1c2:	d404      	bmi.n	800e1ce <_fflush_r+0x32>
 800e1c4:	0599      	lsls	r1, r3, #22
 800e1c6:	d402      	bmi.n	800e1ce <_fflush_r+0x32>
 800e1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1ca:	f7fe fb2a 	bl	800c822 <__retarget_lock_acquire_recursive>
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	f7ff ff5f 	bl	800e094 <__sflush_r>
 800e1d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1d8:	07da      	lsls	r2, r3, #31
 800e1da:	4605      	mov	r5, r0
 800e1dc:	d4e4      	bmi.n	800e1a8 <_fflush_r+0xc>
 800e1de:	89a3      	ldrh	r3, [r4, #12]
 800e1e0:	059b      	lsls	r3, r3, #22
 800e1e2:	d4e1      	bmi.n	800e1a8 <_fflush_r+0xc>
 800e1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1e6:	f7fe fb1d 	bl	800c824 <__retarget_lock_release_recursive>
 800e1ea:	e7dd      	b.n	800e1a8 <_fflush_r+0xc>

0800e1ec <memmove>:
 800e1ec:	4288      	cmp	r0, r1
 800e1ee:	b510      	push	{r4, lr}
 800e1f0:	eb01 0402 	add.w	r4, r1, r2
 800e1f4:	d902      	bls.n	800e1fc <memmove+0x10>
 800e1f6:	4284      	cmp	r4, r0
 800e1f8:	4623      	mov	r3, r4
 800e1fa:	d807      	bhi.n	800e20c <memmove+0x20>
 800e1fc:	1e43      	subs	r3, r0, #1
 800e1fe:	42a1      	cmp	r1, r4
 800e200:	d008      	beq.n	800e214 <memmove+0x28>
 800e202:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e20a:	e7f8      	b.n	800e1fe <memmove+0x12>
 800e20c:	4402      	add	r2, r0
 800e20e:	4601      	mov	r1, r0
 800e210:	428a      	cmp	r2, r1
 800e212:	d100      	bne.n	800e216 <memmove+0x2a>
 800e214:	bd10      	pop	{r4, pc}
 800e216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e21a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e21e:	e7f7      	b.n	800e210 <memmove+0x24>

0800e220 <_sbrk_r>:
 800e220:	b538      	push	{r3, r4, r5, lr}
 800e222:	4d06      	ldr	r5, [pc, #24]	@ (800e23c <_sbrk_r+0x1c>)
 800e224:	2300      	movs	r3, #0
 800e226:	4604      	mov	r4, r0
 800e228:	4608      	mov	r0, r1
 800e22a:	602b      	str	r3, [r5, #0]
 800e22c:	f7f5 fa34 	bl	8003698 <_sbrk>
 800e230:	1c43      	adds	r3, r0, #1
 800e232:	d102      	bne.n	800e23a <_sbrk_r+0x1a>
 800e234:	682b      	ldr	r3, [r5, #0]
 800e236:	b103      	cbz	r3, 800e23a <_sbrk_r+0x1a>
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	bd38      	pop	{r3, r4, r5, pc}
 800e23c:	200053d0 	.word	0x200053d0

0800e240 <__assert_func>:
 800e240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e242:	4614      	mov	r4, r2
 800e244:	461a      	mov	r2, r3
 800e246:	4b09      	ldr	r3, [pc, #36]	@ (800e26c <__assert_func+0x2c>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4605      	mov	r5, r0
 800e24c:	68d8      	ldr	r0, [r3, #12]
 800e24e:	b954      	cbnz	r4, 800e266 <__assert_func+0x26>
 800e250:	4b07      	ldr	r3, [pc, #28]	@ (800e270 <__assert_func+0x30>)
 800e252:	461c      	mov	r4, r3
 800e254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e258:	9100      	str	r1, [sp, #0]
 800e25a:	462b      	mov	r3, r5
 800e25c:	4905      	ldr	r1, [pc, #20]	@ (800e274 <__assert_func+0x34>)
 800e25e:	f000 f86f 	bl	800e340 <fiprintf>
 800e262:	f000 f87f 	bl	800e364 <abort>
 800e266:	4b04      	ldr	r3, [pc, #16]	@ (800e278 <__assert_func+0x38>)
 800e268:	e7f4      	b.n	800e254 <__assert_func+0x14>
 800e26a:	bf00      	nop
 800e26c:	20000020 	.word	0x20000020
 800e270:	0800f806 	.word	0x0800f806
 800e274:	0800f7d8 	.word	0x0800f7d8
 800e278:	0800f7cb 	.word	0x0800f7cb

0800e27c <_calloc_r>:
 800e27c:	b570      	push	{r4, r5, r6, lr}
 800e27e:	fba1 5402 	umull	r5, r4, r1, r2
 800e282:	b93c      	cbnz	r4, 800e294 <_calloc_r+0x18>
 800e284:	4629      	mov	r1, r5
 800e286:	f7ff f99f 	bl	800d5c8 <_malloc_r>
 800e28a:	4606      	mov	r6, r0
 800e28c:	b928      	cbnz	r0, 800e29a <_calloc_r+0x1e>
 800e28e:	2600      	movs	r6, #0
 800e290:	4630      	mov	r0, r6
 800e292:	bd70      	pop	{r4, r5, r6, pc}
 800e294:	220c      	movs	r2, #12
 800e296:	6002      	str	r2, [r0, #0]
 800e298:	e7f9      	b.n	800e28e <_calloc_r+0x12>
 800e29a:	462a      	mov	r2, r5
 800e29c:	4621      	mov	r1, r4
 800e29e:	f7fe fa42 	bl	800c726 <memset>
 800e2a2:	e7f5      	b.n	800e290 <_calloc_r+0x14>

0800e2a4 <__ascii_mbtowc>:
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	b901      	cbnz	r1, 800e2aa <__ascii_mbtowc+0x6>
 800e2a8:	a901      	add	r1, sp, #4
 800e2aa:	b142      	cbz	r2, 800e2be <__ascii_mbtowc+0x1a>
 800e2ac:	b14b      	cbz	r3, 800e2c2 <__ascii_mbtowc+0x1e>
 800e2ae:	7813      	ldrb	r3, [r2, #0]
 800e2b0:	600b      	str	r3, [r1, #0]
 800e2b2:	7812      	ldrb	r2, [r2, #0]
 800e2b4:	1e10      	subs	r0, r2, #0
 800e2b6:	bf18      	it	ne
 800e2b8:	2001      	movne	r0, #1
 800e2ba:	b002      	add	sp, #8
 800e2bc:	4770      	bx	lr
 800e2be:	4610      	mov	r0, r2
 800e2c0:	e7fb      	b.n	800e2ba <__ascii_mbtowc+0x16>
 800e2c2:	f06f 0001 	mvn.w	r0, #1
 800e2c6:	e7f8      	b.n	800e2ba <__ascii_mbtowc+0x16>

0800e2c8 <_realloc_r>:
 800e2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2cc:	4680      	mov	r8, r0
 800e2ce:	4615      	mov	r5, r2
 800e2d0:	460c      	mov	r4, r1
 800e2d2:	b921      	cbnz	r1, 800e2de <_realloc_r+0x16>
 800e2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d8:	4611      	mov	r1, r2
 800e2da:	f7ff b975 	b.w	800d5c8 <_malloc_r>
 800e2de:	b92a      	cbnz	r2, 800e2ec <_realloc_r+0x24>
 800e2e0:	f7ff f8fe 	bl	800d4e0 <_free_r>
 800e2e4:	2400      	movs	r4, #0
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ec:	f000 f841 	bl	800e372 <_malloc_usable_size_r>
 800e2f0:	4285      	cmp	r5, r0
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	d802      	bhi.n	800e2fc <_realloc_r+0x34>
 800e2f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2fa:	d8f4      	bhi.n	800e2e6 <_realloc_r+0x1e>
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	4640      	mov	r0, r8
 800e300:	f7ff f962 	bl	800d5c8 <_malloc_r>
 800e304:	4607      	mov	r7, r0
 800e306:	2800      	cmp	r0, #0
 800e308:	d0ec      	beq.n	800e2e4 <_realloc_r+0x1c>
 800e30a:	42b5      	cmp	r5, r6
 800e30c:	462a      	mov	r2, r5
 800e30e:	4621      	mov	r1, r4
 800e310:	bf28      	it	cs
 800e312:	4632      	movcs	r2, r6
 800e314:	f7fe fa87 	bl	800c826 <memcpy>
 800e318:	4621      	mov	r1, r4
 800e31a:	4640      	mov	r0, r8
 800e31c:	f7ff f8e0 	bl	800d4e0 <_free_r>
 800e320:	463c      	mov	r4, r7
 800e322:	e7e0      	b.n	800e2e6 <_realloc_r+0x1e>

0800e324 <__ascii_wctomb>:
 800e324:	4603      	mov	r3, r0
 800e326:	4608      	mov	r0, r1
 800e328:	b141      	cbz	r1, 800e33c <__ascii_wctomb+0x18>
 800e32a:	2aff      	cmp	r2, #255	@ 0xff
 800e32c:	d904      	bls.n	800e338 <__ascii_wctomb+0x14>
 800e32e:	228a      	movs	r2, #138	@ 0x8a
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	f04f 30ff 	mov.w	r0, #4294967295
 800e336:	4770      	bx	lr
 800e338:	700a      	strb	r2, [r1, #0]
 800e33a:	2001      	movs	r0, #1
 800e33c:	4770      	bx	lr
	...

0800e340 <fiprintf>:
 800e340:	b40e      	push	{r1, r2, r3}
 800e342:	b503      	push	{r0, r1, lr}
 800e344:	4601      	mov	r1, r0
 800e346:	ab03      	add	r3, sp, #12
 800e348:	4805      	ldr	r0, [pc, #20]	@ (800e360 <fiprintf+0x20>)
 800e34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e34e:	6800      	ldr	r0, [r0, #0]
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	f000 f83f 	bl	800e3d4 <_vfiprintf_r>
 800e356:	b002      	add	sp, #8
 800e358:	f85d eb04 	ldr.w	lr, [sp], #4
 800e35c:	b003      	add	sp, #12
 800e35e:	4770      	bx	lr
 800e360:	20000020 	.word	0x20000020

0800e364 <abort>:
 800e364:	b508      	push	{r3, lr}
 800e366:	2006      	movs	r0, #6
 800e368:	f000 fa08 	bl	800e77c <raise>
 800e36c:	2001      	movs	r0, #1
 800e36e:	f7f5 f91b 	bl	80035a8 <_exit>

0800e372 <_malloc_usable_size_r>:
 800e372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e376:	1f18      	subs	r0, r3, #4
 800e378:	2b00      	cmp	r3, #0
 800e37a:	bfbc      	itt	lt
 800e37c:	580b      	ldrlt	r3, [r1, r0]
 800e37e:	18c0      	addlt	r0, r0, r3
 800e380:	4770      	bx	lr

0800e382 <__sfputc_r>:
 800e382:	6893      	ldr	r3, [r2, #8]
 800e384:	3b01      	subs	r3, #1
 800e386:	2b00      	cmp	r3, #0
 800e388:	b410      	push	{r4}
 800e38a:	6093      	str	r3, [r2, #8]
 800e38c:	da08      	bge.n	800e3a0 <__sfputc_r+0x1e>
 800e38e:	6994      	ldr	r4, [r2, #24]
 800e390:	42a3      	cmp	r3, r4
 800e392:	db01      	blt.n	800e398 <__sfputc_r+0x16>
 800e394:	290a      	cmp	r1, #10
 800e396:	d103      	bne.n	800e3a0 <__sfputc_r+0x1e>
 800e398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e39c:	f000 b932 	b.w	800e604 <__swbuf_r>
 800e3a0:	6813      	ldr	r3, [r2, #0]
 800e3a2:	1c58      	adds	r0, r3, #1
 800e3a4:	6010      	str	r0, [r2, #0]
 800e3a6:	7019      	strb	r1, [r3, #0]
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <__sfputs_r>:
 800e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	460f      	mov	r7, r1
 800e3b6:	4614      	mov	r4, r2
 800e3b8:	18d5      	adds	r5, r2, r3
 800e3ba:	42ac      	cmp	r4, r5
 800e3bc:	d101      	bne.n	800e3c2 <__sfputs_r+0x12>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	e007      	b.n	800e3d2 <__sfputs_r+0x22>
 800e3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3c6:	463a      	mov	r2, r7
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f7ff ffda 	bl	800e382 <__sfputc_r>
 800e3ce:	1c43      	adds	r3, r0, #1
 800e3d0:	d1f3      	bne.n	800e3ba <__sfputs_r+0xa>
 800e3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3d4 <_vfiprintf_r>:
 800e3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d8:	460d      	mov	r5, r1
 800e3da:	b09d      	sub	sp, #116	@ 0x74
 800e3dc:	4614      	mov	r4, r2
 800e3de:	4698      	mov	r8, r3
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	b118      	cbz	r0, 800e3ec <_vfiprintf_r+0x18>
 800e3e4:	6a03      	ldr	r3, [r0, #32]
 800e3e6:	b90b      	cbnz	r3, 800e3ec <_vfiprintf_r+0x18>
 800e3e8:	f7fe f904 	bl	800c5f4 <__sinit>
 800e3ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3ee:	07d9      	lsls	r1, r3, #31
 800e3f0:	d405      	bmi.n	800e3fe <_vfiprintf_r+0x2a>
 800e3f2:	89ab      	ldrh	r3, [r5, #12]
 800e3f4:	059a      	lsls	r2, r3, #22
 800e3f6:	d402      	bmi.n	800e3fe <_vfiprintf_r+0x2a>
 800e3f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3fa:	f7fe fa12 	bl	800c822 <__retarget_lock_acquire_recursive>
 800e3fe:	89ab      	ldrh	r3, [r5, #12]
 800e400:	071b      	lsls	r3, r3, #28
 800e402:	d501      	bpl.n	800e408 <_vfiprintf_r+0x34>
 800e404:	692b      	ldr	r3, [r5, #16]
 800e406:	b99b      	cbnz	r3, 800e430 <_vfiprintf_r+0x5c>
 800e408:	4629      	mov	r1, r5
 800e40a:	4630      	mov	r0, r6
 800e40c:	f000 f938 	bl	800e680 <__swsetup_r>
 800e410:	b170      	cbz	r0, 800e430 <_vfiprintf_r+0x5c>
 800e412:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e414:	07dc      	lsls	r4, r3, #31
 800e416:	d504      	bpl.n	800e422 <_vfiprintf_r+0x4e>
 800e418:	f04f 30ff 	mov.w	r0, #4294967295
 800e41c:	b01d      	add	sp, #116	@ 0x74
 800e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e422:	89ab      	ldrh	r3, [r5, #12]
 800e424:	0598      	lsls	r0, r3, #22
 800e426:	d4f7      	bmi.n	800e418 <_vfiprintf_r+0x44>
 800e428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e42a:	f7fe f9fb 	bl	800c824 <__retarget_lock_release_recursive>
 800e42e:	e7f3      	b.n	800e418 <_vfiprintf_r+0x44>
 800e430:	2300      	movs	r3, #0
 800e432:	9309      	str	r3, [sp, #36]	@ 0x24
 800e434:	2320      	movs	r3, #32
 800e436:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e43a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e43e:	2330      	movs	r3, #48	@ 0x30
 800e440:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5f0 <_vfiprintf_r+0x21c>
 800e444:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e448:	f04f 0901 	mov.w	r9, #1
 800e44c:	4623      	mov	r3, r4
 800e44e:	469a      	mov	sl, r3
 800e450:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e454:	b10a      	cbz	r2, 800e45a <_vfiprintf_r+0x86>
 800e456:	2a25      	cmp	r2, #37	@ 0x25
 800e458:	d1f9      	bne.n	800e44e <_vfiprintf_r+0x7a>
 800e45a:	ebba 0b04 	subs.w	fp, sl, r4
 800e45e:	d00b      	beq.n	800e478 <_vfiprintf_r+0xa4>
 800e460:	465b      	mov	r3, fp
 800e462:	4622      	mov	r2, r4
 800e464:	4629      	mov	r1, r5
 800e466:	4630      	mov	r0, r6
 800e468:	f7ff ffa2 	bl	800e3b0 <__sfputs_r>
 800e46c:	3001      	adds	r0, #1
 800e46e:	f000 80a7 	beq.w	800e5c0 <_vfiprintf_r+0x1ec>
 800e472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e474:	445a      	add	r2, fp
 800e476:	9209      	str	r2, [sp, #36]	@ 0x24
 800e478:	f89a 3000 	ldrb.w	r3, [sl]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 809f 	beq.w	800e5c0 <_vfiprintf_r+0x1ec>
 800e482:	2300      	movs	r3, #0
 800e484:	f04f 32ff 	mov.w	r2, #4294967295
 800e488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e48c:	f10a 0a01 	add.w	sl, sl, #1
 800e490:	9304      	str	r3, [sp, #16]
 800e492:	9307      	str	r3, [sp, #28]
 800e494:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e498:	931a      	str	r3, [sp, #104]	@ 0x68
 800e49a:	4654      	mov	r4, sl
 800e49c:	2205      	movs	r2, #5
 800e49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a2:	4853      	ldr	r0, [pc, #332]	@ (800e5f0 <_vfiprintf_r+0x21c>)
 800e4a4:	f7f1 fe94 	bl	80001d0 <memchr>
 800e4a8:	9a04      	ldr	r2, [sp, #16]
 800e4aa:	b9d8      	cbnz	r0, 800e4e4 <_vfiprintf_r+0x110>
 800e4ac:	06d1      	lsls	r1, r2, #27
 800e4ae:	bf44      	itt	mi
 800e4b0:	2320      	movmi	r3, #32
 800e4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4b6:	0713      	lsls	r3, r2, #28
 800e4b8:	bf44      	itt	mi
 800e4ba:	232b      	movmi	r3, #43	@ 0x2b
 800e4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4c6:	d015      	beq.n	800e4f4 <_vfiprintf_r+0x120>
 800e4c8:	9a07      	ldr	r2, [sp, #28]
 800e4ca:	4654      	mov	r4, sl
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	f04f 0c0a 	mov.w	ip, #10
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4d8:	3b30      	subs	r3, #48	@ 0x30
 800e4da:	2b09      	cmp	r3, #9
 800e4dc:	d94b      	bls.n	800e576 <_vfiprintf_r+0x1a2>
 800e4de:	b1b0      	cbz	r0, 800e50e <_vfiprintf_r+0x13a>
 800e4e0:	9207      	str	r2, [sp, #28]
 800e4e2:	e014      	b.n	800e50e <_vfiprintf_r+0x13a>
 800e4e4:	eba0 0308 	sub.w	r3, r0, r8
 800e4e8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	9304      	str	r3, [sp, #16]
 800e4f0:	46a2      	mov	sl, r4
 800e4f2:	e7d2      	b.n	800e49a <_vfiprintf_r+0xc6>
 800e4f4:	9b03      	ldr	r3, [sp, #12]
 800e4f6:	1d19      	adds	r1, r3, #4
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	9103      	str	r1, [sp, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	bfbb      	ittet	lt
 800e500:	425b      	neglt	r3, r3
 800e502:	f042 0202 	orrlt.w	r2, r2, #2
 800e506:	9307      	strge	r3, [sp, #28]
 800e508:	9307      	strlt	r3, [sp, #28]
 800e50a:	bfb8      	it	lt
 800e50c:	9204      	strlt	r2, [sp, #16]
 800e50e:	7823      	ldrb	r3, [r4, #0]
 800e510:	2b2e      	cmp	r3, #46	@ 0x2e
 800e512:	d10a      	bne.n	800e52a <_vfiprintf_r+0x156>
 800e514:	7863      	ldrb	r3, [r4, #1]
 800e516:	2b2a      	cmp	r3, #42	@ 0x2a
 800e518:	d132      	bne.n	800e580 <_vfiprintf_r+0x1ac>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	1d1a      	adds	r2, r3, #4
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	9203      	str	r2, [sp, #12]
 800e522:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e526:	3402      	adds	r4, #2
 800e528:	9305      	str	r3, [sp, #20]
 800e52a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e600 <_vfiprintf_r+0x22c>
 800e52e:	7821      	ldrb	r1, [r4, #0]
 800e530:	2203      	movs	r2, #3
 800e532:	4650      	mov	r0, sl
 800e534:	f7f1 fe4c 	bl	80001d0 <memchr>
 800e538:	b138      	cbz	r0, 800e54a <_vfiprintf_r+0x176>
 800e53a:	9b04      	ldr	r3, [sp, #16]
 800e53c:	eba0 000a 	sub.w	r0, r0, sl
 800e540:	2240      	movs	r2, #64	@ 0x40
 800e542:	4082      	lsls	r2, r0
 800e544:	4313      	orrs	r3, r2
 800e546:	3401      	adds	r4, #1
 800e548:	9304      	str	r3, [sp, #16]
 800e54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e54e:	4829      	ldr	r0, [pc, #164]	@ (800e5f4 <_vfiprintf_r+0x220>)
 800e550:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e554:	2206      	movs	r2, #6
 800e556:	f7f1 fe3b 	bl	80001d0 <memchr>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d03f      	beq.n	800e5de <_vfiprintf_r+0x20a>
 800e55e:	4b26      	ldr	r3, [pc, #152]	@ (800e5f8 <_vfiprintf_r+0x224>)
 800e560:	bb1b      	cbnz	r3, 800e5aa <_vfiprintf_r+0x1d6>
 800e562:	9b03      	ldr	r3, [sp, #12]
 800e564:	3307      	adds	r3, #7
 800e566:	f023 0307 	bic.w	r3, r3, #7
 800e56a:	3308      	adds	r3, #8
 800e56c:	9303      	str	r3, [sp, #12]
 800e56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e570:	443b      	add	r3, r7
 800e572:	9309      	str	r3, [sp, #36]	@ 0x24
 800e574:	e76a      	b.n	800e44c <_vfiprintf_r+0x78>
 800e576:	fb0c 3202 	mla	r2, ip, r2, r3
 800e57a:	460c      	mov	r4, r1
 800e57c:	2001      	movs	r0, #1
 800e57e:	e7a8      	b.n	800e4d2 <_vfiprintf_r+0xfe>
 800e580:	2300      	movs	r3, #0
 800e582:	3401      	adds	r4, #1
 800e584:	9305      	str	r3, [sp, #20]
 800e586:	4619      	mov	r1, r3
 800e588:	f04f 0c0a 	mov.w	ip, #10
 800e58c:	4620      	mov	r0, r4
 800e58e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e592:	3a30      	subs	r2, #48	@ 0x30
 800e594:	2a09      	cmp	r2, #9
 800e596:	d903      	bls.n	800e5a0 <_vfiprintf_r+0x1cc>
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d0c6      	beq.n	800e52a <_vfiprintf_r+0x156>
 800e59c:	9105      	str	r1, [sp, #20]
 800e59e:	e7c4      	b.n	800e52a <_vfiprintf_r+0x156>
 800e5a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e7f0      	b.n	800e58c <_vfiprintf_r+0x1b8>
 800e5aa:	ab03      	add	r3, sp, #12
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	462a      	mov	r2, r5
 800e5b0:	4b12      	ldr	r3, [pc, #72]	@ (800e5fc <_vfiprintf_r+0x228>)
 800e5b2:	a904      	add	r1, sp, #16
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7fd fbd9 	bl	800bd6c <_printf_float>
 800e5ba:	4607      	mov	r7, r0
 800e5bc:	1c78      	adds	r0, r7, #1
 800e5be:	d1d6      	bne.n	800e56e <_vfiprintf_r+0x19a>
 800e5c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5c2:	07d9      	lsls	r1, r3, #31
 800e5c4:	d405      	bmi.n	800e5d2 <_vfiprintf_r+0x1fe>
 800e5c6:	89ab      	ldrh	r3, [r5, #12]
 800e5c8:	059a      	lsls	r2, r3, #22
 800e5ca:	d402      	bmi.n	800e5d2 <_vfiprintf_r+0x1fe>
 800e5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ce:	f7fe f929 	bl	800c824 <__retarget_lock_release_recursive>
 800e5d2:	89ab      	ldrh	r3, [r5, #12]
 800e5d4:	065b      	lsls	r3, r3, #25
 800e5d6:	f53f af1f 	bmi.w	800e418 <_vfiprintf_r+0x44>
 800e5da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5dc:	e71e      	b.n	800e41c <_vfiprintf_r+0x48>
 800e5de:	ab03      	add	r3, sp, #12
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	4b05      	ldr	r3, [pc, #20]	@ (800e5fc <_vfiprintf_r+0x228>)
 800e5e6:	a904      	add	r1, sp, #16
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f7fd fe57 	bl	800c29c <_printf_i>
 800e5ee:	e7e4      	b.n	800e5ba <_vfiprintf_r+0x1e6>
 800e5f0:	0800f7b0 	.word	0x0800f7b0
 800e5f4:	0800f7ba 	.word	0x0800f7ba
 800e5f8:	0800bd6d 	.word	0x0800bd6d
 800e5fc:	0800e3b1 	.word	0x0800e3b1
 800e600:	0800f7b6 	.word	0x0800f7b6

0800e604 <__swbuf_r>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	460e      	mov	r6, r1
 800e608:	4614      	mov	r4, r2
 800e60a:	4605      	mov	r5, r0
 800e60c:	b118      	cbz	r0, 800e616 <__swbuf_r+0x12>
 800e60e:	6a03      	ldr	r3, [r0, #32]
 800e610:	b90b      	cbnz	r3, 800e616 <__swbuf_r+0x12>
 800e612:	f7fd ffef 	bl	800c5f4 <__sinit>
 800e616:	69a3      	ldr	r3, [r4, #24]
 800e618:	60a3      	str	r3, [r4, #8]
 800e61a:	89a3      	ldrh	r3, [r4, #12]
 800e61c:	071a      	lsls	r2, r3, #28
 800e61e:	d501      	bpl.n	800e624 <__swbuf_r+0x20>
 800e620:	6923      	ldr	r3, [r4, #16]
 800e622:	b943      	cbnz	r3, 800e636 <__swbuf_r+0x32>
 800e624:	4621      	mov	r1, r4
 800e626:	4628      	mov	r0, r5
 800e628:	f000 f82a 	bl	800e680 <__swsetup_r>
 800e62c:	b118      	cbz	r0, 800e636 <__swbuf_r+0x32>
 800e62e:	f04f 37ff 	mov.w	r7, #4294967295
 800e632:	4638      	mov	r0, r7
 800e634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	6922      	ldr	r2, [r4, #16]
 800e63a:	1a98      	subs	r0, r3, r2
 800e63c:	6963      	ldr	r3, [r4, #20]
 800e63e:	b2f6      	uxtb	r6, r6
 800e640:	4283      	cmp	r3, r0
 800e642:	4637      	mov	r7, r6
 800e644:	dc05      	bgt.n	800e652 <__swbuf_r+0x4e>
 800e646:	4621      	mov	r1, r4
 800e648:	4628      	mov	r0, r5
 800e64a:	f7ff fda7 	bl	800e19c <_fflush_r>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d1ed      	bne.n	800e62e <__swbuf_r+0x2a>
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	3b01      	subs	r3, #1
 800e656:	60a3      	str	r3, [r4, #8]
 800e658:	6823      	ldr	r3, [r4, #0]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	6022      	str	r2, [r4, #0]
 800e65e:	701e      	strb	r6, [r3, #0]
 800e660:	6962      	ldr	r2, [r4, #20]
 800e662:	1c43      	adds	r3, r0, #1
 800e664:	429a      	cmp	r2, r3
 800e666:	d004      	beq.n	800e672 <__swbuf_r+0x6e>
 800e668:	89a3      	ldrh	r3, [r4, #12]
 800e66a:	07db      	lsls	r3, r3, #31
 800e66c:	d5e1      	bpl.n	800e632 <__swbuf_r+0x2e>
 800e66e:	2e0a      	cmp	r6, #10
 800e670:	d1df      	bne.n	800e632 <__swbuf_r+0x2e>
 800e672:	4621      	mov	r1, r4
 800e674:	4628      	mov	r0, r5
 800e676:	f7ff fd91 	bl	800e19c <_fflush_r>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d0d9      	beq.n	800e632 <__swbuf_r+0x2e>
 800e67e:	e7d6      	b.n	800e62e <__swbuf_r+0x2a>

0800e680 <__swsetup_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4b29      	ldr	r3, [pc, #164]	@ (800e728 <__swsetup_r+0xa8>)
 800e684:	4605      	mov	r5, r0
 800e686:	6818      	ldr	r0, [r3, #0]
 800e688:	460c      	mov	r4, r1
 800e68a:	b118      	cbz	r0, 800e694 <__swsetup_r+0x14>
 800e68c:	6a03      	ldr	r3, [r0, #32]
 800e68e:	b90b      	cbnz	r3, 800e694 <__swsetup_r+0x14>
 800e690:	f7fd ffb0 	bl	800c5f4 <__sinit>
 800e694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e698:	0719      	lsls	r1, r3, #28
 800e69a:	d422      	bmi.n	800e6e2 <__swsetup_r+0x62>
 800e69c:	06da      	lsls	r2, r3, #27
 800e69e:	d407      	bmi.n	800e6b0 <__swsetup_r+0x30>
 800e6a0:	2209      	movs	r2, #9
 800e6a2:	602a      	str	r2, [r5, #0]
 800e6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ae:	e033      	b.n	800e718 <__swsetup_r+0x98>
 800e6b0:	0758      	lsls	r0, r3, #29
 800e6b2:	d512      	bpl.n	800e6da <__swsetup_r+0x5a>
 800e6b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6b6:	b141      	cbz	r1, 800e6ca <__swsetup_r+0x4a>
 800e6b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6bc:	4299      	cmp	r1, r3
 800e6be:	d002      	beq.n	800e6c6 <__swsetup_r+0x46>
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	f7fe ff0d 	bl	800d4e0 <_free_r>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	6063      	str	r3, [r4, #4]
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	f043 0308 	orr.w	r3, r3, #8
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	6923      	ldr	r3, [r4, #16]
 800e6e4:	b94b      	cbnz	r3, 800e6fa <__swsetup_r+0x7a>
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6f0:	d003      	beq.n	800e6fa <__swsetup_r+0x7a>
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f000 f883 	bl	800e800 <__smakebuf_r>
 800e6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fe:	f013 0201 	ands.w	r2, r3, #1
 800e702:	d00a      	beq.n	800e71a <__swsetup_r+0x9a>
 800e704:	2200      	movs	r2, #0
 800e706:	60a2      	str	r2, [r4, #8]
 800e708:	6962      	ldr	r2, [r4, #20]
 800e70a:	4252      	negs	r2, r2
 800e70c:	61a2      	str	r2, [r4, #24]
 800e70e:	6922      	ldr	r2, [r4, #16]
 800e710:	b942      	cbnz	r2, 800e724 <__swsetup_r+0xa4>
 800e712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e716:	d1c5      	bne.n	800e6a4 <__swsetup_r+0x24>
 800e718:	bd38      	pop	{r3, r4, r5, pc}
 800e71a:	0799      	lsls	r1, r3, #30
 800e71c:	bf58      	it	pl
 800e71e:	6962      	ldrpl	r2, [r4, #20]
 800e720:	60a2      	str	r2, [r4, #8]
 800e722:	e7f4      	b.n	800e70e <__swsetup_r+0x8e>
 800e724:	2000      	movs	r0, #0
 800e726:	e7f7      	b.n	800e718 <__swsetup_r+0x98>
 800e728:	20000020 	.word	0x20000020

0800e72c <_raise_r>:
 800e72c:	291f      	cmp	r1, #31
 800e72e:	b538      	push	{r3, r4, r5, lr}
 800e730:	4605      	mov	r5, r0
 800e732:	460c      	mov	r4, r1
 800e734:	d904      	bls.n	800e740 <_raise_r+0x14>
 800e736:	2316      	movs	r3, #22
 800e738:	6003      	str	r3, [r0, #0]
 800e73a:	f04f 30ff 	mov.w	r0, #4294967295
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e742:	b112      	cbz	r2, 800e74a <_raise_r+0x1e>
 800e744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e748:	b94b      	cbnz	r3, 800e75e <_raise_r+0x32>
 800e74a:	4628      	mov	r0, r5
 800e74c:	f000 f830 	bl	800e7b0 <_getpid_r>
 800e750:	4622      	mov	r2, r4
 800e752:	4601      	mov	r1, r0
 800e754:	4628      	mov	r0, r5
 800e756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e75a:	f000 b817 	b.w	800e78c <_kill_r>
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d00a      	beq.n	800e778 <_raise_r+0x4c>
 800e762:	1c59      	adds	r1, r3, #1
 800e764:	d103      	bne.n	800e76e <_raise_r+0x42>
 800e766:	2316      	movs	r3, #22
 800e768:	6003      	str	r3, [r0, #0]
 800e76a:	2001      	movs	r0, #1
 800e76c:	e7e7      	b.n	800e73e <_raise_r+0x12>
 800e76e:	2100      	movs	r1, #0
 800e770:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e774:	4620      	mov	r0, r4
 800e776:	4798      	blx	r3
 800e778:	2000      	movs	r0, #0
 800e77a:	e7e0      	b.n	800e73e <_raise_r+0x12>

0800e77c <raise>:
 800e77c:	4b02      	ldr	r3, [pc, #8]	@ (800e788 <raise+0xc>)
 800e77e:	4601      	mov	r1, r0
 800e780:	6818      	ldr	r0, [r3, #0]
 800e782:	f7ff bfd3 	b.w	800e72c <_raise_r>
 800e786:	bf00      	nop
 800e788:	20000020 	.word	0x20000020

0800e78c <_kill_r>:
 800e78c:	b538      	push	{r3, r4, r5, lr}
 800e78e:	4d07      	ldr	r5, [pc, #28]	@ (800e7ac <_kill_r+0x20>)
 800e790:	2300      	movs	r3, #0
 800e792:	4604      	mov	r4, r0
 800e794:	4608      	mov	r0, r1
 800e796:	4611      	mov	r1, r2
 800e798:	602b      	str	r3, [r5, #0]
 800e79a:	f7f4 fef5 	bl	8003588 <_kill>
 800e79e:	1c43      	adds	r3, r0, #1
 800e7a0:	d102      	bne.n	800e7a8 <_kill_r+0x1c>
 800e7a2:	682b      	ldr	r3, [r5, #0]
 800e7a4:	b103      	cbz	r3, 800e7a8 <_kill_r+0x1c>
 800e7a6:	6023      	str	r3, [r4, #0]
 800e7a8:	bd38      	pop	{r3, r4, r5, pc}
 800e7aa:	bf00      	nop
 800e7ac:	200053d0 	.word	0x200053d0

0800e7b0 <_getpid_r>:
 800e7b0:	f7f4 bee2 	b.w	8003578 <_getpid>

0800e7b4 <__swhatbuf_r>:
 800e7b4:	b570      	push	{r4, r5, r6, lr}
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7bc:	2900      	cmp	r1, #0
 800e7be:	b096      	sub	sp, #88	@ 0x58
 800e7c0:	4615      	mov	r5, r2
 800e7c2:	461e      	mov	r6, r3
 800e7c4:	da0d      	bge.n	800e7e2 <__swhatbuf_r+0x2e>
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7cc:	f04f 0100 	mov.w	r1, #0
 800e7d0:	bf14      	ite	ne
 800e7d2:	2340      	movne	r3, #64	@ 0x40
 800e7d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7d8:	2000      	movs	r0, #0
 800e7da:	6031      	str	r1, [r6, #0]
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	b016      	add	sp, #88	@ 0x58
 800e7e0:	bd70      	pop	{r4, r5, r6, pc}
 800e7e2:	466a      	mov	r2, sp
 800e7e4:	f000 f848 	bl	800e878 <_fstat_r>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	dbec      	blt.n	800e7c6 <__swhatbuf_r+0x12>
 800e7ec:	9901      	ldr	r1, [sp, #4]
 800e7ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7f6:	4259      	negs	r1, r3
 800e7f8:	4159      	adcs	r1, r3
 800e7fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7fe:	e7eb      	b.n	800e7d8 <__swhatbuf_r+0x24>

0800e800 <__smakebuf_r>:
 800e800:	898b      	ldrh	r3, [r1, #12]
 800e802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e804:	079d      	lsls	r5, r3, #30
 800e806:	4606      	mov	r6, r0
 800e808:	460c      	mov	r4, r1
 800e80a:	d507      	bpl.n	800e81c <__smakebuf_r+0x1c>
 800e80c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	6123      	str	r3, [r4, #16]
 800e814:	2301      	movs	r3, #1
 800e816:	6163      	str	r3, [r4, #20]
 800e818:	b003      	add	sp, #12
 800e81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e81c:	ab01      	add	r3, sp, #4
 800e81e:	466a      	mov	r2, sp
 800e820:	f7ff ffc8 	bl	800e7b4 <__swhatbuf_r>
 800e824:	9f00      	ldr	r7, [sp, #0]
 800e826:	4605      	mov	r5, r0
 800e828:	4639      	mov	r1, r7
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7fe fecc 	bl	800d5c8 <_malloc_r>
 800e830:	b948      	cbnz	r0, 800e846 <__smakebuf_r+0x46>
 800e832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e836:	059a      	lsls	r2, r3, #22
 800e838:	d4ee      	bmi.n	800e818 <__smakebuf_r+0x18>
 800e83a:	f023 0303 	bic.w	r3, r3, #3
 800e83e:	f043 0302 	orr.w	r3, r3, #2
 800e842:	81a3      	strh	r3, [r4, #12]
 800e844:	e7e2      	b.n	800e80c <__smakebuf_r+0xc>
 800e846:	89a3      	ldrh	r3, [r4, #12]
 800e848:	6020      	str	r0, [r4, #0]
 800e84a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e84e:	81a3      	strh	r3, [r4, #12]
 800e850:	9b01      	ldr	r3, [sp, #4]
 800e852:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e856:	b15b      	cbz	r3, 800e870 <__smakebuf_r+0x70>
 800e858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e85c:	4630      	mov	r0, r6
 800e85e:	f000 f81d 	bl	800e89c <_isatty_r>
 800e862:	b128      	cbz	r0, 800e870 <__smakebuf_r+0x70>
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	f023 0303 	bic.w	r3, r3, #3
 800e86a:	f043 0301 	orr.w	r3, r3, #1
 800e86e:	81a3      	strh	r3, [r4, #12]
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	431d      	orrs	r5, r3
 800e874:	81a5      	strh	r5, [r4, #12]
 800e876:	e7cf      	b.n	800e818 <__smakebuf_r+0x18>

0800e878 <_fstat_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4d07      	ldr	r5, [pc, #28]	@ (800e898 <_fstat_r+0x20>)
 800e87c:	2300      	movs	r3, #0
 800e87e:	4604      	mov	r4, r0
 800e880:	4608      	mov	r0, r1
 800e882:	4611      	mov	r1, r2
 800e884:	602b      	str	r3, [r5, #0]
 800e886:	f7f4 fedf 	bl	8003648 <_fstat>
 800e88a:	1c43      	adds	r3, r0, #1
 800e88c:	d102      	bne.n	800e894 <_fstat_r+0x1c>
 800e88e:	682b      	ldr	r3, [r5, #0]
 800e890:	b103      	cbz	r3, 800e894 <_fstat_r+0x1c>
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	bd38      	pop	{r3, r4, r5, pc}
 800e896:	bf00      	nop
 800e898:	200053d0 	.word	0x200053d0

0800e89c <_isatty_r>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d06      	ldr	r5, [pc, #24]	@ (800e8b8 <_isatty_r+0x1c>)
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	602b      	str	r3, [r5, #0]
 800e8a8:	f7f4 fede 	bl	8003668 <_isatty>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d102      	bne.n	800e8b6 <_isatty_r+0x1a>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	b103      	cbz	r3, 800e8b6 <_isatty_r+0x1a>
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	200053d0 	.word	0x200053d0

0800e8bc <_init>:
 800e8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8be:	bf00      	nop
 800e8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c2:	bc08      	pop	{r3}
 800e8c4:	469e      	mov	lr, r3
 800e8c6:	4770      	bx	lr

0800e8c8 <_fini>:
 800e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ca:	bf00      	nop
 800e8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ce:	bc08      	pop	{r3}
 800e8d0:	469e      	mov	lr, r3
 800e8d2:	4770      	bx	lr
