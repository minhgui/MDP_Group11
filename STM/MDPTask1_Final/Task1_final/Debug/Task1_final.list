
Task1_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa8  0800def8  0800def8  0000eef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eea0  0800eea0  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800eea0  0800eea0  0000fea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eea8  0800eea8  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eea8  0800eea8  0000fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eeac  0800eeac  0000feac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800eeb0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          000051e8  200001e0  200001e0  000101e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200053c8  200053c8  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbf1  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ce0  00000000  00000000  0002cdfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  00030ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f2  00000000  00000000  00032598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000568e  00000000  00000000  00033a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e86d  00000000  00000000  00039118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e727a  00000000  00000000  00057985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ebff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008350  00000000  00000000  0013ec44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00146f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dedc 	.word	0x0800dedc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800dedc 	.word	0x0800dedc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <__NVIC_SystemReset+0x24>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eea:	4904      	ldr	r1, [pc, #16]	@ (8000efc <__NVIC_SystemReset+0x24>)
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_SystemReset+0x28>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef2:	f3bf 8f4f 	dsb	sy
}
 8000ef6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <__NVIC_SystemReset+0x20>
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	05fa0004 	.word	0x05fa0004

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f002 fa0a 	bl	8003320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f87e 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 fc1a 	bl	8001748 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f14:	f000 fb44 	bl	80015a0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f18:	f000 fa46 	bl	80013a8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1c:	f000 f9a6 	bl	800126c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000f20:	f000 fbe8 	bl	80016f4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f24:	f000 fa94 	bl	8001450 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000f28:	f000 f972 	bl	8001210 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f2c:	f000 fae4 	bl	80014f8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f30:	f000 f8ca 	bl	80010c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f34:	f000 f91a 	bl	800116c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /*------------INIT LIBRARIES ----------------*/
 OLED_Init();
 8000f38:	f00a f8fc 	bl	800b134 <OLED_Init>

 /*------------END INIT LIBRARIES ----------------*/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f3c:	f007 f9d2 	bl	80082e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f40:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb8 <main+0xb4>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	481d      	ldr	r0, [pc, #116]	@ (8000fbc <main+0xb8>)
 8000f46:	f007 fa17 	bl	8008378 <osThreadNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <main+0xbc>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* creation of rightEncoderTas */
  rightEncoderTasHandle = osThreadNew(rightEncoder, NULL, &rightEncoderTas_attributes);
 8000f50:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc4 <main+0xc0>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	481c      	ldr	r0, [pc, #112]	@ (8000fc8 <main+0xc4>)
 8000f56:	f007 fa0f 	bl	8008378 <osThreadNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <main+0xc8>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* creation of leftEncoderTask */
  leftEncoderTaskHandle = osThreadNew(leftEncoder, NULL, &leftEncoderTask_attributes);
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <main+0xcc>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	481b      	ldr	r0, [pc, #108]	@ (8000fd4 <main+0xd0>)
 8000f66:	f007 fa07 	bl	8008378 <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <main+0xd4>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(StartCommsTask, NULL, &CommTask_attributes);
 8000f70:	4a1a      	ldr	r2, [pc, #104]	@ (8000fdc <main+0xd8>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	481a      	ldr	r0, [pc, #104]	@ (8000fe0 <main+0xdc>)
 8000f76:	f007 f9ff 	bl	8008378 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <main+0xe0>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(StartOLEDTask, NULL, &OLED_attributes);
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <main+0xe4>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4819      	ldr	r0, [pc, #100]	@ (8000fec <main+0xe8>)
 8000f86:	f007 f9f7 	bl	8008378 <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <main+0xec>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(StartMotorTask, NULL, &Motor_attributes);
 8000f90:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <main+0xf0>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4818      	ldr	r0, [pc, #96]	@ (8000ff8 <main+0xf4>)
 8000f96:	f007 f9ef 	bl	8008378 <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <main+0xf8>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(StartGyroTask, NULL, &GyroTask_attributes);
 8000fa0:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <main+0xfc>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4817      	ldr	r0, [pc, #92]	@ (8001004 <main+0x100>)
 8000fa6:	f007 f9e7 	bl	8008378 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a16      	ldr	r2, [pc, #88]	@ (8001008 <main+0x104>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fb0:	f007 f9bc 	bl	800832c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <main+0xb0>
 8000fb8:	0800dfb4 	.word	0x0800dfb4
 8000fbc:	08001f85 	.word	0x08001f85
 8000fc0:	20000490 	.word	0x20000490
 8000fc4:	0800dfd8 	.word	0x0800dfd8
 8000fc8:	08001fa9 	.word	0x08001fa9
 8000fcc:	20000494 	.word	0x20000494
 8000fd0:	0800dffc 	.word	0x0800dffc
 8000fd4:	08002039 	.word	0x08002039
 8000fd8:	20000498 	.word	0x20000498
 8000fdc:	0800e020 	.word	0x0800e020
 8000fe0:	080020c9 	.word	0x080020c9
 8000fe4:	2000049c 	.word	0x2000049c
 8000fe8:	0800e044 	.word	0x0800e044
 8000fec:	080023bd 	.word	0x080023bd
 8000ff0:	200004a0 	.word	0x200004a0
 8000ff4:	0800e068 	.word	0x0800e068
 8000ff8:	080024e9 	.word	0x080024e9
 8000ffc:	200004a4 	.word	0x200004a4
 8001000:	0800e08c 	.word	0x0800e08c
 8001004:	08002969 	.word	0x08002969
 8001008:	200004a8 	.word	0x200004a8

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	@ 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	2230      	movs	r2, #48	@ 0x30
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00a fe93 	bl	800bd46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <SystemClock_Config+0xb4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <SystemClock_Config+0xb4>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <SystemClock_Config+0xb4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <SystemClock_Config+0xb8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1b      	ldr	r2, [pc, #108]	@ (80010c4 <SystemClock_Config+0xb8>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <SystemClock_Config+0xb8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f003 ffdd 	bl	800503c <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001088:	f001 fd3c 	bl	8002b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 fa40 	bl	800552c <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010b2:	f001 fd27 	bl	8002b04 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	@ 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <MX_ADC1_Init+0x98>)
 80010dc:	4a21      	ldr	r2, [pc, #132]	@ (8001164 <MX_ADC1_Init+0x9c>)
 80010de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_ADC1_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001100:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <MX_ADC1_Init+0x98>)
 8001108:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <MX_ADC1_Init+0xa0>)
 800110a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <MX_ADC1_Init+0x98>)
 8001114:	2201      	movs	r2, #1
 8001116:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <MX_ADC1_Init+0x98>)
 8001122:	2201      	movs	r2, #1
 8001124:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	@ (8001160 <MX_ADC1_Init+0x98>)
 8001128:	f002 f990 	bl	800344c <HAL_ADC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001132:	f001 fce7 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001136:	230b      	movs	r3, #11
 8001138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800113a:	2301      	movs	r3, #1
 800113c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <MX_ADC1_Init+0x98>)
 8001148:	f002 f9c4 	bl	80034d4 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001152:	f001 fcd7 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200001fc 	.word	0x200001fc
 8001164:	40012000 	.word	0x40012000
 8001168:	0f000001 	.word	0x0f000001

0800116c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_ADC2_Init+0x98>)
 8001180:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <MX_ADC2_Init+0x9c>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_ADC2_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_ADC2_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_ADC2_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_ADC2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_ADC2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a4:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011ac:	4a17      	ldr	r2, [pc, #92]	@ (800120c <MX_ADC2_Init+0xa0>)
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011cc:	f002 f93e 	bl	800344c <HAL_ADC_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f001 fc95 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011da:	230c      	movs	r3, #12
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_ADC2_Init+0x98>)
 80011ec:	f002 f972 	bl	80034d4 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80011f6:	f001 fc85 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000244 	.word	0x20000244
 8001208:	40012100 	.word	0x40012100
 800120c:	0f000001 	.word	0x0f000001

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 fed3 	bl	8003ff8 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f001 fc54 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000028c 	.word	0x2000028c
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	@ 0x58
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00a fd4e 	bl	800bd46 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012ac:	4a3d      	ldr	r2, [pc, #244]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80012b0:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012b2:	22a0      	movs	r2, #160	@ 0xa0
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80012bc:	4b38      	ldr	r3, [pc, #224]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b35      	ldr	r3, [pc, #212]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012d2:	2280      	movs	r2, #128	@ 0x80
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d6:	4832      	ldr	r0, [pc, #200]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012d8:	f004 fb08 	bl	80058ec <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012e2:	f001 fc0f 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012f0:	4619      	mov	r1, r3
 80012f2:	482b      	ldr	r0, [pc, #172]	@ (80013a0 <MX_TIM1_Init+0x134>)
 80012f4:	f005 f83c 	bl	8006370 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012fe:	f001 fc01 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001302:	4827      	ldr	r0, [pc, #156]	@ (80013a0 <MX_TIM1_Init+0x134>)
 8001304:	f004 fb41 	bl	800598a <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800130e:	f001 fbf9 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800131e:	4619      	mov	r1, r3
 8001320:	481f      	ldr	r0, [pc, #124]	@ (80013a0 <MX_TIM1_Init+0x134>)
 8001322:	f005 fd9f 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800132c:	f001 fbea 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	@ 0x60
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	220c      	movs	r2, #12
 800134e:	4619      	mov	r1, r3
 8001350:	4813      	ldr	r0, [pc, #76]	@ (80013a0 <MX_TIM1_Init+0x134>)
 8001352:	f004 ff4b 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800135c:	f001 fbd2 	bl	8002b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001378:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <MX_TIM1_Init+0x134>)
 8001384:	f005 fdea 	bl	8006f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800138e:	f001 fbb9 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001392:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <MX_TIM1_Init+0x134>)
 8001394:	f001 fdf4 	bl	8002f80 <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3758      	adds	r7, #88	@ 0x58
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002e0 	.word	0x200002e0
 80013a4:	40010000 	.word	0x40010000

080013a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	@ 0x30
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2224      	movs	r2, #36	@ 0x24
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00a fcc5 	bl	800bd46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c4:	4b21      	ldr	r3, [pc, #132]	@ (800144c <MX_TIM2_Init+0xa4>)
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <MX_TIM2_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <MX_TIM2_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <MX_TIM2_Init+0xa4>)
 80013da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_TIM2_Init+0xa4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <MX_TIM2_Init+0xa4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ec:	2303      	movs	r3, #3
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013fc:	230a      	movs	r3, #10
 80013fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001404:	2301      	movs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800140c:	230a      	movs	r3, #10
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	@ (800144c <MX_TIM2_Init+0xa4>)
 8001418:	f004 fc27 	bl	8005c6a <HAL_TIM_Encoder_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001422:	f001 fb6f 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	@ (800144c <MX_TIM2_Init+0xa4>)
 8001434:	f005 fd16 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800143e:	f001 fb61 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	@ 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000328 	.word	0x20000328

08001450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2224      	movs	r2, #36	@ 0x24
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f00a fc71 	bl	800bd46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 800146e:	4a21      	ldr	r2, [pc, #132]	@ (80014f4 <MX_TIM3_Init+0xa4>)
 8001470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001472:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 8001480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001492:	2303      	movs	r3, #3
 8001494:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800149a:	2301      	movs	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014a2:	230a      	movs	r3, #10
 80014a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80014b2:	230a      	movs	r3, #10
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 80014be:	f004 fbd4 	bl	8005c6a <HAL_TIM_Encoder_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f001 fb1c 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_TIM3_Init+0xa0>)
 80014da:	f005 fcc3 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014e4:	f001 fb0e 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	@ 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000370 	.word	0x20000370
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <MX_TIM4_Init+0xa0>)
 8001516:	4a21      	ldr	r2, [pc, #132]	@ (800159c <MX_TIM4_Init+0xa4>)
 8001518:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_TIM4_Init+0xa0>)
 800151c:	220f      	movs	r2, #15
 800151e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <MX_TIM4_Init+0xa0>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_TIM4_Init+0xa0>)
 8001528:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800152c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <MX_TIM4_Init+0xa0>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <MX_TIM4_Init+0xa0>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800153a:	4817      	ldr	r0, [pc, #92]	@ (8001598 <MX_TIM4_Init+0xa0>)
 800153c:	f004 fb46 	bl	8005bcc <HAL_TIM_IC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001546:	f001 fadd 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <MX_TIM4_Init+0xa0>)
 800155a:	f005 fc83 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001564:	f001 face 	bl	8002b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <MX_TIM4_Init+0xa0>)
 8001580:	f004 fd97 	bl	80060b2 <HAL_TIM_IC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800158a:	f001 fabb 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200003b8 	.word	0x200003b8
 800159c:	40000800 	.word	0x40000800

080015a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b096      	sub	sp, #88	@ 0x58
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00a fbb4 	bl	800bd46 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015de:	4b43      	ldr	r3, [pc, #268]	@ (80016ec <MX_TIM8_Init+0x14c>)
 80015e0:	4a43      	ldr	r2, [pc, #268]	@ (80016f0 <MX_TIM8_Init+0x150>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015e4:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <MX_TIM8_Init+0x14c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <MX_TIM8_Init+0x14c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80015f0:	4b3e      	ldr	r3, [pc, #248]	@ (80016ec <MX_TIM8_Init+0x14c>)
 80015f2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80015f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <MX_TIM8_Init+0x14c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <MX_TIM8_Init+0x14c>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <MX_TIM8_Init+0x14c>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800160a:	4838      	ldr	r0, [pc, #224]	@ (80016ec <MX_TIM8_Init+0x14c>)
 800160c:	f004 f96e 	bl	80058ec <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001616:	f001 fa75 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001624:	4619      	mov	r1, r3
 8001626:	4831      	ldr	r0, [pc, #196]	@ (80016ec <MX_TIM8_Init+0x14c>)
 8001628:	f004 fea2 	bl	8006370 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001632:	f001 fa67 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001636:	482d      	ldr	r0, [pc, #180]	@ (80016ec <MX_TIM8_Init+0x14c>)
 8001638:	f004 f9a7 	bl	800598a <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001642:	f001 fa5f 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800164e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001652:	4619      	mov	r1, r3
 8001654:	4825      	ldr	r0, [pc, #148]	@ (80016ec <MX_TIM8_Init+0x14c>)
 8001656:	f005 fc05 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001660:	f001 fa50 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	@ 0x60
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4818      	ldr	r0, [pc, #96]	@ (80016ec <MX_TIM8_Init+0x14c>)
 800168a:	f004 fdaf 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001694:	f001 fa36 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	2204      	movs	r2, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4812      	ldr	r0, [pc, #72]	@ (80016ec <MX_TIM8_Init+0x14c>)
 80016a2:	f004 fda3 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80016ac:	f001 fa2a 	bl	8002b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <MX_TIM8_Init+0x14c>)
 80016d4:	f005 fc42 	bl	8006f5c <HAL_TIMEx_ConfigBreakDeadTime>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80016de:	f001 fa11 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3758      	adds	r7, #88	@ 0x58
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000400 	.word	0x20000400
 80016f0:	40010400 	.word	0x40010400

080016f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <MX_USART3_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_USART3_UART_Init+0x4c>)
 800172c:	f005 fc7c 	bl	8007028 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f001 f9e5 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000448 	.word	0x20000448
 8001744:	40004800 	.word	0x40004800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	@ 0x30
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <MX_GPIO_Init+0x140>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a48      	ldr	r2, [pc, #288]	@ (8001888 <MX_GPIO_Init+0x140>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b46      	ldr	r3, [pc, #280]	@ (8001888 <MX_GPIO_Init+0x140>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	4b42      	ldr	r3, [pc, #264]	@ (8001888 <MX_GPIO_Init+0x140>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a41      	ldr	r2, [pc, #260]	@ (8001888 <MX_GPIO_Init+0x140>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <MX_GPIO_Init+0x140>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <MX_GPIO_Init+0x140>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a3a      	ldr	r2, [pc, #232]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b38      	ldr	r3, [pc, #224]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a33      	ldr	r2, [pc, #204]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a25      	ldr	r2, [pc, #148]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <MX_GPIO_Init+0x140>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 800180c:	481f      	ldr	r0, [pc, #124]	@ (800188c <MX_GPIO_Init+0x144>)
 800180e:	f002 fbbf 	bl	8003f90 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	213c      	movs	r1, #60	@ 0x3c
 8001816:	481e      	ldr	r0, [pc, #120]	@ (8001890 <MX_GPIO_Init+0x148>)
 8001818:	f002 fbba 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001822:	481c      	ldr	r0, [pc, #112]	@ (8001894 <MX_GPIO_Init+0x14c>)
 8001824:	f002 fbb4 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001828:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 800182c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4812      	ldr	r0, [pc, #72]	@ (800188c <MX_GPIO_Init+0x144>)
 8001842:	f002 fa09 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001846:	233c      	movs	r3, #60	@ 0x3c
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <MX_GPIO_Init+0x148>)
 800185e:	f002 f9fb 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8001862:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	@ (8001894 <MX_GPIO_Init+0x14c>)
 800187c:	f002 f9ec 	bl	8003c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	@ 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40021000 	.word	0x40021000
 8001890:	40020000 	.word	0x40020000
 8001894:	40020c00 	.word	0x40020c00

08001898 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning*/
	 UNUSED(huart);
	 receivedInstruction =1;
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <HAL_UART_RxCpltCallback+0x1c>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200004ac 	.word	0x200004ac

080018b8 <moveCarStraight>:


// movement
void moveCarStraight(double distance) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	ed87 0b00 	vstr	d0, [r7]

	distance = distance * 75;
 80018c2:	a344      	add	r3, pc, #272	@ (adr r3, 80019d4 <moveCarStraight+0x11c>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018cc:	f7fe fe94 	bl	80005f8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	e9c7 2300 	strd	r2, r3, [r7]
	  pwmVal_servo = SERVOCENTER;
 80018d8:	4b33      	ldr	r3, [pc, #204]	@ (80019a8 <moveCarStraight+0xf0>)
 80018da:	2292      	movs	r2, #146	@ 0x92
 80018dc:	801a      	strh	r2, [r3, #0]
	  osDelay(450);
 80018de:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80018e2:	f006 fddb 	bl	800849c <osDelay>
	  e_brake = 0;
 80018e6:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <moveCarStraight+0xf4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
	  times_acceptable = 0;
 80018ec:	4b30      	ldr	r3, [pc, #192]	@ (80019b0 <moveCarStraight+0xf8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
	  rightEncoderVal = 75000;
 80018f2:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <moveCarStraight+0xfc>)
 80018f4:	4a30      	ldr	r2, [pc, #192]	@ (80019b8 <moveCarStraight+0x100>)
 80018f6:	601a      	str	r2, [r3, #0]
	  leftEncoderVal = 75000;
 80018f8:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <moveCarStraight+0x104>)
 80018fa:	4a2f      	ldr	r2, [pc, #188]	@ (80019b8 <moveCarStraight+0x100>)
 80018fc:	601a      	str	r2, [r3, #0]
	  rightTarget = 75000;
 80018fe:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <moveCarStraight+0x108>)
 8001900:	4a2d      	ldr	r2, [pc, #180]	@ (80019b8 <moveCarStraight+0x100>)
 8001902:	601a      	str	r2, [r3, #0]
	  leftTarget = 75000;
 8001904:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <moveCarStraight+0x10c>)
 8001906:	4a2c      	ldr	r2, [pc, #176]	@ (80019b8 <moveCarStraight+0x100>)
 8001908:	601a      	str	r2, [r3, #0]
	  rightTarget += distance;
 800190a:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <moveCarStraight+0x108>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe08 	bl	8000524 <__aeabi_i2d>
 8001914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001918:	f7fe fcb8 	bl	800028c <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f918 	bl	8000b58 <__aeabi_d2iz>
 8001928:	4603      	mov	r3, r0
 800192a:	4a25      	ldr	r2, [pc, #148]	@ (80019c0 <moveCarStraight+0x108>)
 800192c:	6013      	str	r3, [r2, #0]
	  leftTarget += distance;
 800192e:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <moveCarStraight+0x10c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fdf6 	bl	8000524 <__aeabi_i2d>
 8001938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800193c:	f7fe fca6 	bl	800028c <__adddf3>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f906 	bl	8000b58 <__aeabi_d2iz>
 800194c:	4603      	mov	r3, r0
 800194e:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <moveCarStraight+0x10c>)
 8001950:	6013      	str	r3, [r2, #0]

	  while(finishCheck()) {
 8001952:	e01c      	b.n	800198e <moveCarStraight+0xd6>
	    // Check for obstacle during movement (for forward movement only)
	    if (distance > 0 && obstacle_detected) {
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001960:	f7ff f8da 	bl	8000b18 <__aeabi_dcmpgt>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d011      	beq.n	800198e <moveCarStraight+0xd6>
 800196a:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <moveCarStraight+0x110>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <moveCarStraight+0xd6>
	      e_brake = 1;  // Trigger emergency brake
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <moveCarStraight+0xf4>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
	      pwmVal_servo = SERVOCENTER;
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <moveCarStraight+0xf0>)
 800197a:	2292      	movs	r2, #146	@ 0x92
 800197c:	801a      	strh	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, (uint8_t*)"O\0", 2, 0xFFFF);  // Send obstacle alert
 800197e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001982:	2202      	movs	r2, #2
 8001984:	4911      	ldr	r1, [pc, #68]	@ (80019cc <moveCarStraight+0x114>)
 8001986:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <moveCarStraight+0x118>)
 8001988:	f005 fb9e 	bl	80070c8 <HAL_UART_Transmit>
	      break;  // Exit the loop
 800198c:	e005      	b.n	800199a <moveCarStraight+0xe2>
	  while(finishCheck()) {
 800198e:	f000 f98d 	bl	8001cac <finishCheck>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1dd      	bne.n	8001954 <moveCarStraight+0x9c>
	    }
	  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	f3af 8000 	nop.w
 80019a8:	20000000 	.word	0x20000000
 80019ac:	200004c8 	.word	0x200004c8
 80019b0:	200004c4 	.word	0x200004c4
 80019b4:	200004cc 	.word	0x200004cc
 80019b8:	000124f8 	.word	0x000124f8
 80019bc:	200004d0 	.word	0x200004d0
 80019c0:	200004d4 	.word	0x200004d4
 80019c4:	200004d8 	.word	0x200004d8
 80019c8:	20000520 	.word	0x20000520
 80019cc:	0800df4c 	.word	0x0800df4c
 80019d0:	20000448 	.word	0x20000448
 80019d4:	00000000 	.word	0x00000000
 80019d8:	4052c000 	.word	0x4052c000

080019dc <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(200);
}

void moveCarRight(double angle) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <moveCarRight+0x54>)
 80019e8:	22fa      	movs	r2, #250	@ 0xfa
 80019ea:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 80019ec:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80019f0:	f006 fd54 	bl	800849c <osDelay>
	e_brake = 0;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <moveCarRight+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <moveCarRight+0x5c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <moveCarRight+0x60>)
 8001a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0a:	f7fe fc3d 	bl	8000288 <__aeabi_dsub>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	490a      	ldr	r1, [pc, #40]	@ (8001a3c <moveCarRight+0x60>)
 8001a14:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001a18:	bf00      	nop
 8001a1a:	f000 f947 	bl	8001cac <finishCheck>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1fa      	bne.n	8001a1a <moveCarRight+0x3e>
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000000 	.word	0x20000000
 8001a34:	200004c8 	.word	0x200004c8
 8001a38:	200004c4 	.word	0x200004c4
 8001a3c:	200004e0 	.word	0x200004e0

08001a40 <moveCarLeft>:

void moveCarLeft(double angle) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <moveCarLeft+0x54>)
 8001a4c:	2254      	movs	r2, #84	@ 0x54
 8001a4e:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 8001a50:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001a54:	f006 fd22 	bl	800849c <osDelay>
	e_brake = 0;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <moveCarLeft+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <moveCarLeft+0x5c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <moveCarLeft+0x60>)
 8001a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a6e:	f7fe fc0d 	bl	800028c <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	490a      	ldr	r1, [pc, #40]	@ (8001aa0 <moveCarLeft+0x60>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001a7c:	bf00      	nop
 8001a7e:	f000 f915 	bl	8001cac <finishCheck>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1fa      	bne.n	8001a7e <moveCarLeft+0x3e>
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000
 8001a98:	200004c8 	.word	0x200004c8
 8001a9c:	200004c4 	.word	0x200004c4
 8001aa0:	200004e0 	.word	0x200004e0

08001aa4 <PID_Control>:



// error correction
int PID_Control(int error, int right) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d018      	beq.n	8001ae6 <PID_Control+0x42>
		if (error > 0) { //go forward
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	dd0a      	ble.n	8001ad0 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B (RIGHT)- FORWARD
 8001aba:	2201      	movs	r2, #1
 8001abc:	2110      	movs	r1, #16
 8001abe:	4835      	ldr	r0, [pc, #212]	@ (8001b94 <PID_Control+0xf0>)
 8001ac0:	f002 fa66 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	4832      	ldr	r0, [pc, #200]	@ (8001b94 <PID_Control+0xf0>)
 8001aca:	f002 fa61 	bl	8003f90 <HAL_GPIO_WritePin>
 8001ace:	e022      	b.n	8001b16 <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B (RIGHT)- BACKWARDS
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	482f      	ldr	r0, [pc, #188]	@ (8001b94 <PID_Control+0xf0>)
 8001ad6:	f002 fa5b 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2120      	movs	r1, #32
 8001ade:	482d      	ldr	r0, [pc, #180]	@ (8001b94 <PID_Control+0xf0>)
 8001ae0:	f002 fa56 	bl	8003f90 <HAL_GPIO_WritePin>
 8001ae4:	e017      	b.n	8001b16 <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	dd0a      	ble.n	8001b02 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A(LEFT) - FORWARD
 8001aec:	2201      	movs	r2, #1
 8001aee:	2108      	movs	r1, #8
 8001af0:	4828      	ldr	r0, [pc, #160]	@ (8001b94 <PID_Control+0xf0>)
 8001af2:	f002 fa4d 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2104      	movs	r1, #4
 8001afa:	4826      	ldr	r0, [pc, #152]	@ (8001b94 <PID_Control+0xf0>)
 8001afc:	f002 fa48 	bl	8003f90 <HAL_GPIO_WritePin>
 8001b00:	e009      	b.n	8001b16 <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A(LEFT) - BACKWARDS
 8001b02:	2200      	movs	r2, #0
 8001b04:	2108      	movs	r1, #8
 8001b06:	4823      	ldr	r0, [pc, #140]	@ (8001b94 <PID_Control+0xf0>)
 8001b08:	f002 fa42 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2104      	movs	r1, #4
 8001b10:	4820      	ldr	r0, [pc, #128]	@ (8001b94 <PID_Control+0xf0>)
 8001b12:	f002 fa3d 	bl	8003f90 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bfb8      	it	lt
 8001b1c:	425b      	neglt	r3, r3
 8001b1e:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b26:	dd02      	ble.n	8001b2e <PID_Control+0x8a>
		return 3000;
 8001b28:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b2c:	e02d      	b.n	8001b8a <PID_Control+0xe6>
	} else if (error > 500)     {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b34:	dd02      	ble.n	8001b3c <PID_Control+0x98>
		return 2000;
 8001b36:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b3a:	e026      	b.n	8001b8a <PID_Control+0xe6>
	 } else if (error > 200)  {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b40:	dd02      	ble.n	8001b48 <PID_Control+0xa4>
		return 1400;
 8001b42:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001b46:	e020      	b.n	8001b8a <PID_Control+0xe6>
	  } else if (error > 100)    {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b64      	cmp	r3, #100	@ 0x64
 8001b4c:	dd02      	ble.n	8001b54 <PID_Control+0xb0>
		return 1000;
 8001b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b52:	e01a      	b.n	8001b8a <PID_Control+0xe6>
	   } else if (error > 2)  {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	dd07      	ble.n	8001b6a <PID_Control+0xc6>
			times_acceptable++;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <PID_Control+0xf4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <PID_Control+0xf4>)
 8001b62:	6013      	str	r3, [r2, #0]
			return 500;
 8001b64:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b68:	e00f      	b.n	8001b8a <PID_Control+0xe6>
			} else if (error >= 1) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	dd06      	ble.n	8001b7e <PID_Control+0xda>
		times_acceptable++;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <PID_Control+0xf4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4a08      	ldr	r2, [pc, #32]	@ (8001b98 <PID_Control+0xf4>)
 8001b78:	6013      	str	r3, [r2, #0]
		return 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e005      	b.n	8001b8a <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <PID_Control+0xf4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <PID_Control+0xf4>)
 8001b86:	6013      	str	r3, [r2, #0]
		return 0;
 8001b88:	2300      	movs	r3, #0
	}
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40020000 	.word	0x40020000
 8001b98:	200004c4 	.word	0x200004c4

08001b9c <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ba6:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca0 <PID_Angle+0x104>)
 8001bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb2:	f7fe fd21 	bl	80005f8 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe ffcb 	bl	8000b58 <__aeabi_d2iz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor = WHEEL B
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d018      	beq.n	8001bfe <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	dd0a      	ble.n	8001be8 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // Direction of rotation- forward
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	4833      	ldr	r0, [pc, #204]	@ (8001ca4 <PID_Angle+0x108>)
 8001bd8:	f002 f9da 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2120      	movs	r1, #32
 8001be0:	4830      	ldr	r0, [pc, #192]	@ (8001ca4 <PID_Angle+0x108>)
 8001be2:	f002 f9d5 	bl	8003f90 <HAL_GPIO_WritePin>
 8001be6:	e022      	b.n	8001c2e <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // Direction of rotation - reverse
 8001be8:	2200      	movs	r2, #0
 8001bea:	2110      	movs	r1, #16
 8001bec:	482d      	ldr	r0, [pc, #180]	@ (8001ca4 <PID_Angle+0x108>)
 8001bee:	f002 f9cf 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	482b      	ldr	r0, [pc, #172]	@ (8001ca4 <PID_Angle+0x108>)
 8001bf8:	f002 f9ca 	bl	8003f90 <HAL_GPIO_WritePin>
 8001bfc:	e017      	b.n	8001c2e <PID_Angle+0x92>
		}
	} else { //leftMotor = WHEEL A
		if (error < 0) { //go forward
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da0a      	bge.n	8001c1a <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // Direction of rotation - forward
 8001c04:	2201      	movs	r2, #1
 8001c06:	2108      	movs	r1, #8
 8001c08:	4826      	ldr	r0, [pc, #152]	@ (8001ca4 <PID_Angle+0x108>)
 8001c0a:	f002 f9c1 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2104      	movs	r1, #4
 8001c12:	4824      	ldr	r0, [pc, #144]	@ (8001ca4 <PID_Angle+0x108>)
 8001c14:	f002 f9bc 	bl	8003f90 <HAL_GPIO_WritePin>
 8001c18:	e009      	b.n	8001c2e <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // Direction of rotation - reverse
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	4821      	ldr	r0, [pc, #132]	@ (8001ca4 <PID_Angle+0x108>)
 8001c20:	f002 f9b6 	bl	8003f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	2104      	movs	r1, #4
 8001c28:	481e      	ldr	r0, [pc, #120]	@ (8001ca4 <PID_Angle+0x108>)
 8001c2a:	f002 f9b1 	bl	8003f90 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bfb8      	it	lt
 8001c34:	425b      	neglt	r3, r3
 8001c36:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c3e:	dd02      	ble.n	8001c46 <PID_Angle+0xaa>
		return 3000;
 8001c40:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c44:	e028      	b.n	8001c98 <PID_Angle+0xfc>
	} else if (error > 200) {
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c4a:	dd02      	ble.n	8001c52 <PID_Angle+0xb6>
		return 2000;
 8001c4c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c50:	e022      	b.n	8001c98 <PID_Angle+0xfc>
	} else if (error > 150) {
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b96      	cmp	r3, #150	@ 0x96
 8001c56:	dd02      	ble.n	8001c5e <PID_Angle+0xc2>
		return 1600;
 8001c58:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001c5c:	e01c      	b.n	8001c98 <PID_Angle+0xfc>
	} else if (error > 100) {
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b64      	cmp	r3, #100	@ 0x64
 8001c62:	dd02      	ble.n	8001c6a <PID_Angle+0xce>
		return 1400;
 8001c64:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001c68:	e016      	b.n	8001c98 <PID_Angle+0xfc>
	} else if (error > 10) {
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b0a      	cmp	r3, #10
 8001c6e:	dd02      	ble.n	8001c76 <PID_Angle+0xda>
		return 1000;
 8001c70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c74:	e010      	b.n	8001c98 <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	dd07      	ble.n	8001c8c <PID_Angle+0xf0>
		times_acceptable++;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <PID_Angle+0x10c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	4a09      	ldr	r2, [pc, #36]	@ (8001ca8 <PID_Angle+0x10c>)
 8001c84:	6013      	str	r3, [r2, #0]
		return 600;
 8001c86:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001c8a:	e005      	b.n	8001c98 <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <PID_Angle+0x10c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <PID_Angle+0x10c>)
 8001c94:	6013      	str	r3, [r2, #0]
		return 0;
 8001c96:	2300      	movs	r3, #0
	}
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40240000 	.word	0x40240000
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	200004c4 	.word	0x200004c4

08001cac <finishCheck>:

int finishCheck() {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {		//break if deviating from path
 8001cb0:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <finishCheck+0x48>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b14      	cmp	r3, #20
 8001cb6:	dd1a      	ble.n	8001cee <finishCheck+0x42>
		e_brake = 1;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <finishCheck+0x4c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <finishCheck+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	801a      	strh	r2, [r3, #0]
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <finishCheck+0x50>)
 8001cc6:	881a      	ldrh	r2, [r3, #0]
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <finishCheck+0x54>)
 8001cca:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <finishCheck+0x58>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <finishCheck+0x5c>)
 8001cd2:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <finishCheck+0x60>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <finishCheck+0x64>)
 8001cda:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <finishCheck+0x48>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001ce2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ce6:	f006 fbd9 	bl	800849c <osDelay>
		return 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <finishCheck+0x44>
	}
	return 1;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200004c4 	.word	0x200004c4
 8001cf8:	200004c8 	.word	0x200004c8
 8001cfc:	200004c0 	.word	0x200004c0
 8001d00:	200004c2 	.word	0x200004c2
 8001d04:	200004d0 	.word	0x200004d0
 8001d08:	200004d8 	.word	0x200004d8
 8001d0c:	200004cc 	.word	0x200004cc
 8001d10:	200004d4 	.word	0x200004d4
 8001d14:	00000000 	.word	0x00000000

08001d18 <HAL_TIM_IC_CaptureCallback>:
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
	//osDelay(50);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

	//OLED_ShowString(0, 50, "hello pls work");

	if(htim->Channel ==HAL_TIM_ACTIVE_CHANNEL_1){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7f1b      	ldrb	r3, [r3, #28]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	f040 8084 	bne.w	8001e32 <HAL_TIM_IC_CaptureCallback+0x11a>
		if(u_CapturedTrig1 == 0){	// Ultrasonic Trigger first sent
 8001d2a:	4b47      	ldr	r3, [pc, #284]	@ (8001e48 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d11b      	bne.n	8001d6a <HAL_TIM_IC_CaptureCallback+0x52>
			trig1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001d32:	2100      	movs	r1, #0
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f004 fbe3 	bl	8006500 <HAL_TIM_ReadCapturedValue>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d40:	601a      	str	r2, [r3, #0]
			u_CapturedTrig1 =1;
 8001d42:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020a 	bic.w	r2, r2, #10
 8001d56:	621a      	str	r2, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a1a      	ldr	r2, [r3, #32]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0202 	orr.w	r2, r2, #2
 8001d66:	621a      	str	r2, [r3, #32]


		}

	}
}
 8001d68:	e063      	b.n	8001e32 <HAL_TIM_IC_CaptureCallback+0x11a>
		else if (u_CapturedTrig1 == 1){	//Ultrasonic Trigger 2nd sent
 8001d6a:	4b37      	ldr	r3, [pc, #220]	@ (8001e48 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d15f      	bne.n	8001e32 <HAL_TIM_IC_CaptureCallback+0x11a>
				trig2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001d72:	2100      	movs	r1, #0
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f004 fbc3 	bl	8006500 <HAL_TIM_ReadCapturedValue>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b34      	ldr	r3, [pc, #208]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d80:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim,0);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
				if (trig2 > trig1){
 8001d8a:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dd0d      	ble.n	8001db2 <HAL_TIM_IC_CaptureCallback+0x9a>
					echo_pulse = trig2-trig1;		//width of pulse
 8001d96:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e4c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbbf 	bl	8000524 <__aeabi_i2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	492a      	ldr	r1, [pc, #168]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001dac:	e9c1 2300 	strd	r2, r3, [r1]
 8001db0:	e00f      	b.n	8001dd2 <HAL_TIM_IC_CaptureCallback+0xba>
					echo_pulse = (65535-trig1)+trig2;	//if overflow, width of pulse
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001dba:	33ff      	adds	r3, #255	@ 0xff
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbae 	bl	8000524 <__aeabi_i2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4921      	ldr	r1, [pc, #132]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]
				echo_dist = echo_pulse * 0.0343/2; //echo_dist in cm
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd8:	a319      	add	r3, pc, #100	@ (adr r3, 8001e40 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fc0b 	bl	80005f8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001df2:	f7fe fd2b 	bl	800084c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4917      	ldr	r1, [pc, #92]	@ (8001e58 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001dfc:	e9c1 2300 	strd	r2, r3, [r1]
				u_CapturedTrig1 =0;
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 020a 	bic.w	r2, r2, #10
 8001e14:	621a      	str	r2, [r3, #32]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a12      	ldr	r2, [r2, #32]
 8001e20:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0202 	bic.w	r2, r2, #2
 8001e30:	60da      	str	r2, [r3, #12]
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	04816f00 	.word	0x04816f00
 8001e44:	3fa18fc5 	.word	0x3fa18fc5
 8001e48:	20000504 	.word	0x20000504
 8001e4c:	20000518 	.word	0x20000518
 8001e50:	2000051c 	.word	0x2000051c
 8001e54:	20000510 	.word	0x20000510
 8001e58:	20000508 	.word	0x20000508
 8001e5c:	200003b8 	.word	0x200003b8

08001e60 <readByte>:
//////////////////////////////////////////////////////////////



 //gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <readByte+0x48>)
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <readByte+0x4c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <readByte+0x48>)
 8001e82:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <readByte+0x50>)
 8001e84:	f002 f9fc 	bl	8004280 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <readByte+0x4c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	2314      	movs	r3, #20
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2302      	movs	r3, #2
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <readByte+0x50>)
 8001e9a:	f002 faef 	bl	800447c <HAL_I2C_Master_Receive>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200004f0 	.word	0x200004f0
 8001eac:	20000002 	.word	0x20000002
 8001eb0:	2000028c 	.word	0x2000028c

08001eb4 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <writeByte+0x3c>)
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001eca:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <writeByte+0x3c>)
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
 8001ece:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <writeByte+0x40>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	b299      	uxth	r1, r3
 8001ed8:	2314      	movs	r3, #20
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2302      	movs	r3, #2
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <writeByte+0x3c>)
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <writeByte+0x44>)
 8001ee2:	f002 f9cd 	bl	8004280 <HAL_I2C_Master_Transmit>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200004f0 	.word	0x200004f0
 8001ef4:	20000002 	.word	0x20000002
 8001ef8:	2000028c 	.word	0x2000028c

08001efc <gyroInit>:

void gyroInit() {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001f00:	2100      	movs	r1, #0
 8001f02:	2006      	movs	r0, #6
 8001f04:	f7ff ffd6 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f08:	200a      	movs	r0, #10
 8001f0a:	f006 fac7 	bl	800849c <osDelay>
	writeByte(0x03, 0x80);
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	2003      	movs	r0, #3
 8001f12:	f7ff ffcf 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f16:	200a      	movs	r0, #10
 8001f18:	f006 fac0 	bl	800849c <osDelay>
	writeByte(0x07, 0x07);
 8001f1c:	2107      	movs	r1, #7
 8001f1e:	2007      	movs	r0, #7
 8001f20:	f7ff ffc8 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f006 fab9 	bl	800849c <osDelay>
	writeByte(0x06, 0x01);
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	2006      	movs	r0, #6
 8001f2e:	f7ff ffc1 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f32:	200a      	movs	r0, #10
 8001f34:	f006 fab2 	bl	800849c <osDelay>
	writeByte(0x7F, 0x20);
 8001f38:	2120      	movs	r1, #32
 8001f3a:	207f      	movs	r0, #127	@ 0x7f
 8001f3c:	f7ff ffba 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f40:	200a      	movs	r0, #10
 8001f42:	f006 faab 	bl	800849c <osDelay>
	writeByte(0x01, 0x2F);
 8001f46:	212f      	movs	r1, #47	@ 0x2f
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff ffb3 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f4e:	200a      	movs	r0, #10
 8001f50:	f006 faa4 	bl	800849c <osDelay>
	writeByte(0x0, 0x00);
 8001f54:	2100      	movs	r1, #0
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff ffac 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f006 fa9d 	bl	800849c <osDelay>
	writeByte(0x7F, 0x00);
 8001f62:	2100      	movs	r1, #0
 8001f64:	207f      	movs	r0, #127	@ 0x7f
 8001f66:	f7ff ffa5 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f006 fa96 	bl	800849c <osDelay>
	writeByte(0x07, 0x00);
 8001f70:	2100      	movs	r1, #0
 8001f72:	2007      	movs	r0, #7
 8001f74:	f7ff ff9e 	bl	8001eb4 <writeByte>
	osDelay(10);
 8001f78:	200a      	movs	r0, #10
 8001f7a:	f006 fa8f 	bl	800849c <osDelay>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001f8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f90:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <StartDefaultTask+0x20>)
 8001f92:	f002 f816 	bl	8003fc2 <HAL_GPIO_TogglePin>
     osDelay(1000);
 8001f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f9a:	f006 fa7f 	bl	800849c <osDelay>
	 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001f9e:	bf00      	nop
 8001fa0:	e7f4      	b.n	8001f8c <StartDefaultTask+0x8>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <rightEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rightEncoder */
void rightEncoder(void *argument)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rightEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001fb0:	213c      	movs	r1, #60	@ 0x3c
 8001fb2:	481f      	ldr	r0, [pc, #124]	@ (8002030 <rightEncoder+0x88>)
 8001fb4:	f003 feff 	bl	8005db6 <HAL_TIM_Encoder_Start>
		int cnt1;
		int dirR = 1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
		int diff;
		uint32_t tick = HAL_GetTick();
 8001fbc:	f001 fa16 	bl	80033ec <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]
		/* Infinite loop */
		for (;;) {
			if (HAL_GetTick() - tick > 10L) {
 8001fc2:	f001 fa13 	bl	80033ec <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b0a      	cmp	r3, #10
 8001fce:	d92a      	bls.n	8002026 <rightEncoder+0x7e>
				cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <rightEncoder+0x88>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	60bb      	str	r3, [r7, #8]
				if (cnt1 > 32000) {
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001fde:	dd06      	ble.n	8001fee <rightEncoder+0x46>
					dirR = 1;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
					diff = (65536 - cnt1);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e004      	b.n	8001ff8 <rightEncoder+0x50>
				} else {
					dirR = -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	617b      	str	r3, [r7, #20]
					diff = cnt1;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	613b      	str	r3, [r7, #16]
				}
				if (dirR == 1) {
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d106      	bne.n	800200c <rightEncoder+0x64>
					rightEncoderVal -= diff;
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <rightEncoder+0x8c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4a0b      	ldr	r2, [pc, #44]	@ (8002034 <rightEncoder+0x8c>)
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e005      	b.n	8002018 <rightEncoder+0x70>
				} else {
					rightEncoderVal += diff;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <rightEncoder+0x8c>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	4a07      	ldr	r2, [pc, #28]	@ (8002034 <rightEncoder+0x8c>)
 8002016:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <rightEncoder+0x88>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24

				tick = HAL_GetTick();
 8002020:	f001 f9e4 	bl	80033ec <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]
			}
			osDelay(50);
 8002026:	2032      	movs	r0, #50	@ 0x32
 8002028:	f006 fa38 	bl	800849c <osDelay>
			if (HAL_GetTick() - tick > 10L) {
 800202c:	e7c9      	b.n	8001fc2 <rightEncoder+0x1a>
 800202e:	bf00      	nop
 8002030:	20000370 	.word	0x20000370
 8002034:	200004cc 	.word	0x200004cc

08002038 <leftEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leftEncoder */
void leftEncoder(void *argument)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leftEncoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002040:	213c      	movs	r1, #60	@ 0x3c
 8002042:	481f      	ldr	r0, [pc, #124]	@ (80020c0 <leftEncoder+0x88>)
 8002044:	f003 feb7 	bl	8005db6 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002048:	2301      	movs	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
	int diff;

	uint32_t tick = HAL_GetTick();
 800204c:	f001 f9ce 	bl	80033ec <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002052:	f001 f9cb 	bl	80033ec <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b0a      	cmp	r3, #10
 800205e:	d92a      	bls.n	80020b6 <leftEncoder+0x7e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002060:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <leftEncoder+0x88>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800206e:	dd06      	ble.n	800207e <leftEncoder+0x46>
				dirL = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	e004      	b.n	8002088 <leftEncoder+0x50>
			} else {
				dirL = -1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d106      	bne.n	800209c <leftEncoder+0x64>
				leftEncoderVal += diff;
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <leftEncoder+0x8c>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	4a0b      	ldr	r2, [pc, #44]	@ (80020c4 <leftEncoder+0x8c>)
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e005      	b.n	80020a8 <leftEncoder+0x70>
			} else {
				leftEncoderVal -= diff;
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <leftEncoder+0x8c>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <leftEncoder+0x8c>)
 80020a6:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <leftEncoder+0x88>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 80020b0:	f001 f99c 	bl	80033ec <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]
		}
		  osDelay(50);
 80020b6:	2032      	movs	r0, #50	@ 0x32
 80020b8:	f006 f9f0 	bl	800849c <osDelay>
		if (HAL_GetTick() - tick > 10L) {
 80020bc:	e7c9      	b.n	8002052 <leftEncoder+0x1a>
 80020be:	bf00      	nop
 80020c0:	20000328 	.word	0x20000328
 80020c4:	200004d0 	.word	0x200004d0

080020c8 <StartCommsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommsTask */
void StartCommsTask(void *argument)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommsTask */
  /* Infinite loop */

	  uint8_t ack[4] = "A\0";        // ACK
 80020d0:	2341      	movs	r3, #65	@ 0x41
 80020d2:	617b      	str	r3, [r7, #20]
	  uint8_t invalid[8] = "I\0";    // "INVALID
 80020d4:	2349      	movs	r3, #73	@ 0x49
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
	  uint8_t obstacle[2] = "O\0";   // Obstacle detected
 80020dc:	234f      	movs	r3, #79	@ 0x4f
 80020de:	813b      	strh	r3, [r7, #8]

	  strcpy((char *)aRxBuffer, "START");
 80020e0:	4baa      	ldr	r3, [pc, #680]	@ (800238c <StartCommsTask+0x2c4>)
 80020e2:	4aab      	ldr	r2, [pc, #684]	@ (8002390 <StartCommsTask+0x2c8>)
 80020e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020e8:	6018      	str	r0, [r3, #0]
 80020ea:	3304      	adds	r3, #4
 80020ec:	8019      	strh	r1, [r3, #0]

	  /* Infinite loop */
	  for(;;)
	  {
	    // Make sure UART is ready to receive
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 80020ee:	2205      	movs	r2, #5
 80020f0:	49a6      	ldr	r1, [pc, #664]	@ (800238c <StartCommsTask+0x2c4>)
 80020f2:	48a8      	ldr	r0, [pc, #672]	@ (8002394 <StartCommsTask+0x2cc>)
 80020f4:	f005 f873 	bl	80071de <HAL_UART_Receive_IT>

	    if(receivedInstruction == 1)
 80020f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002398 <StartCommsTask+0x2d0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	f040 812c 	bne.w	800235a <StartCommsTask+0x292>
	    {
	      amplitude = 0;
 8002102:	4ba6      	ldr	r3, [pc, #664]	@ (800239c <StartCommsTask+0x2d4>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

	      // Check valid command format
	      if ((aRxBuffer[0] == 'R' && aRxBuffer[1] == 'E' && aRxBuffer[2] == 'S' && aRxBuffer[3] == 'E' && aRxBuffer[4] == 'T')
 8002108:	4ba0      	ldr	r3, [pc, #640]	@ (800238c <StartCommsTask+0x2c4>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b52      	cmp	r3, #82	@ 0x52
 800210e:	d10f      	bne.n	8002130 <StartCommsTask+0x68>
 8002110:	4b9e      	ldr	r3, [pc, #632]	@ (800238c <StartCommsTask+0x2c4>)
 8002112:	785b      	ldrb	r3, [r3, #1]
 8002114:	2b45      	cmp	r3, #69	@ 0x45
 8002116:	d10b      	bne.n	8002130 <StartCommsTask+0x68>
 8002118:	4b9c      	ldr	r3, [pc, #624]	@ (800238c <StartCommsTask+0x2c4>)
 800211a:	789b      	ldrb	r3, [r3, #2]
 800211c:	2b53      	cmp	r3, #83	@ 0x53
 800211e:	d107      	bne.n	8002130 <StartCommsTask+0x68>
 8002120:	4b9a      	ldr	r3, [pc, #616]	@ (800238c <StartCommsTask+0x2c4>)
 8002122:	78db      	ldrb	r3, [r3, #3]
 8002124:	2b45      	cmp	r3, #69	@ 0x45
 8002126:	d103      	bne.n	8002130 <StartCommsTask+0x68>
 8002128:	4b98      	ldr	r3, [pc, #608]	@ (800238c <StartCommsTask+0x2c4>)
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	2b54      	cmp	r3, #84	@ 0x54
 800212e:	d033      	beq.n	8002198 <StartCommsTask+0xd0>
	          || ((aRxBuffer[0] == 'F' || aRxBuffer[0] == 'B')        // move Forward, Backwards
 8002130:	4b96      	ldr	r3, [pc, #600]	@ (800238c <StartCommsTask+0x2c4>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b46      	cmp	r3, #70	@ 0x46
 8002136:	d004      	beq.n	8002142 <StartCommsTask+0x7a>
 8002138:	4b94      	ldr	r3, [pc, #592]	@ (800238c <StartCommsTask+0x2c4>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b42      	cmp	r3, #66	@ 0x42
 800213e:	f040 80f5 	bne.w	800232c <StartCommsTask+0x264>
	          && (aRxBuffer[1] == 'S' || aRxBuffer[1] == 'R' || aRxBuffer[1] == 'L'))   // move straight, right, or left
 8002142:	4b92      	ldr	r3, [pc, #584]	@ (800238c <StartCommsTask+0x2c4>)
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	2b53      	cmp	r3, #83	@ 0x53
 8002148:	d008      	beq.n	800215c <StartCommsTask+0x94>
 800214a:	4b90      	ldr	r3, [pc, #576]	@ (800238c <StartCommsTask+0x2c4>)
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	2b52      	cmp	r3, #82	@ 0x52
 8002150:	d004      	beq.n	800215c <StartCommsTask+0x94>
 8002152:	4b8e      	ldr	r3, [pc, #568]	@ (800238c <StartCommsTask+0x2c4>)
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	2b4c      	cmp	r3, #76	@ 0x4c
 8002158:	f040 80e8 	bne.w	800232c <StartCommsTask+0x264>
	          && ((aRxBuffer[2] - '0') >= 0 && (aRxBuffer[2] - '0') <= 9)
 800215c:	4b8b      	ldr	r3, [pc, #556]	@ (800238c <StartCommsTask+0x2c4>)
 800215e:	789b      	ldrb	r3, [r3, #2]
 8002160:	2b2f      	cmp	r3, #47	@ 0x2f
 8002162:	f240 80e3 	bls.w	800232c <StartCommsTask+0x264>
 8002166:	4b89      	ldr	r3, [pc, #548]	@ (800238c <StartCommsTask+0x2c4>)
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	2b39      	cmp	r3, #57	@ 0x39
 800216c:	f200 80de 	bhi.w	800232c <StartCommsTask+0x264>
	          && ((aRxBuffer[3] - '0') >= 0 && (aRxBuffer[3] - '0') <= 9)
 8002170:	4b86      	ldr	r3, [pc, #536]	@ (800238c <StartCommsTask+0x2c4>)
 8002172:	78db      	ldrb	r3, [r3, #3]
 8002174:	2b2f      	cmp	r3, #47	@ 0x2f
 8002176:	f240 80d9 	bls.w	800232c <StartCommsTask+0x264>
 800217a:	4b84      	ldr	r3, [pc, #528]	@ (800238c <StartCommsTask+0x2c4>)
 800217c:	78db      	ldrb	r3, [r3, #3]
 800217e:	2b39      	cmp	r3, #57	@ 0x39
 8002180:	f200 80d4 	bhi.w	800232c <StartCommsTask+0x264>
	          && ((aRxBuffer[4] - '0') >= 0 && (aRxBuffer[4] - '0') <= 9))
 8002184:	4b81      	ldr	r3, [pc, #516]	@ (800238c <StartCommsTask+0x2c4>)
 8002186:	791b      	ldrb	r3, [r3, #4]
 8002188:	2b2f      	cmp	r3, #47	@ 0x2f
 800218a:	f240 80cf 	bls.w	800232c <StartCommsTask+0x264>
 800218e:	4b7f      	ldr	r3, [pc, #508]	@ (800238c <StartCommsTask+0x2c4>)
 8002190:	791b      	ldrb	r3, [r3, #4]
 8002192:	2b39      	cmp	r3, #57	@ 0x39
 8002194:	f200 80ca 	bhi.w	800232c <StartCommsTask+0x264>
	      {
	        // Check if we're trying to move forward and there's an obstacle
	        if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'S' && obstacle_detected) {
 8002198:	4b7c      	ldr	r3, [pc, #496]	@ (800238c <StartCommsTask+0x2c4>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b46      	cmp	r3, #70	@ 0x46
 800219e:	d11a      	bne.n	80021d6 <StartCommsTask+0x10e>
 80021a0:	4b7a      	ldr	r3, [pc, #488]	@ (800238c <StartCommsTask+0x2c4>)
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	2b53      	cmp	r3, #83	@ 0x53
 80021a6:	d116      	bne.n	80021d6 <StartCommsTask+0x10e>
 80021a8:	4b7d      	ldr	r3, [pc, #500]	@ (80023a0 <StartCommsTask+0x2d8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <StartCommsTask+0x10e>
	          // Don't execute the forward command if there's an obstacle
	          strcpy((char *)aRxBuffer, "OBST!");
 80021b0:	4b76      	ldr	r3, [pc, #472]	@ (800238c <StartCommsTask+0x2c4>)
 80021b2:	4a7c      	ldr	r2, [pc, #496]	@ (80023a4 <StartCommsTask+0x2dc>)
 80021b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021b8:	6018      	str	r0, [r3, #0]
 80021ba:	3304      	adds	r3, #4
 80021bc:	8019      	strh	r1, [r3, #0]
	          HAL_UART_Transmit(&huart3, (uint8_t*) obstacle, 2, 0xFFFF);  // Send obstacle alert
 80021be:	f107 0108 	add.w	r1, r7, #8
 80021c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021c6:	2202      	movs	r2, #2
 80021c8:	4872      	ldr	r0, [pc, #456]	@ (8002394 <StartCommsTask+0x2cc>)
 80021ca:	f004 ff7d 	bl	80070c8 <HAL_UART_Transmit>
	          receivedInstruction = 0;
 80021ce:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <StartCommsTask+0x2d0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e0a9      	b.n	800232a <StartCommsTask+0x262>
	        }
	        else {
	          // Process the command as usual
	          HAL_UART_AbortReceive_IT(&huart3);  // pause receiving from UART
 80021d6:	486f      	ldr	r0, [pc, #444]	@ (8002394 <StartCommsTask+0x2cc>)
 80021d8:	f005 f826 	bl	8007228 <HAL_UART_AbortReceive_IT>

	          amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 80021dc:	4b6b      	ldr	r3, [pc, #428]	@ (800238c <StartCommsTask+0x2c4>)
 80021de:	789b      	ldrb	r3, [r3, #2]
 80021e0:	3b30      	subs	r3, #48	@ 0x30
 80021e2:	2264      	movs	r2, #100	@ 0x64
 80021e4:	fb02 f103 	mul.w	r1, r2, r3
	                    + ((int) (aRxBuffer[3]) - 48) * 10
 80021e8:	4b68      	ldr	r3, [pc, #416]	@ (800238c <StartCommsTask+0x2c4>)
 80021ea:	78db      	ldrb	r3, [r3, #3]
 80021ec:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	18ca      	adds	r2, r1, r3
	                    + ((int) (aRxBuffer[4]) - 48);
 80021fa:	4b64      	ldr	r3, [pc, #400]	@ (800238c <StartCommsTask+0x2c4>)
 80021fc:	791b      	ldrb	r3, [r3, #4]
 80021fe:	3b30      	subs	r3, #48	@ 0x30
 8002200:	4413      	add	r3, r2
	          amplitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002202:	4a66      	ldr	r2, [pc, #408]	@ (800239c <StartCommsTask+0x2d4>)
 8002204:	6013      	str	r3, [r2, #0]

	          if (aRxBuffer[0] == 'B') {          // check Direction first
 8002206:	4b61      	ldr	r3, [pc, #388]	@ (800238c <StartCommsTask+0x2c4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b42      	cmp	r3, #66	@ 0x42
 800220c:	d104      	bne.n	8002218 <StartCommsTask+0x150>
	            amplitude *= -1;
 800220e:	4b63      	ldr	r3, [pc, #396]	@ (800239c <StartCommsTask+0x2d4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	425b      	negs	r3, r3
 8002214:	4a61      	ldr	r2, [pc, #388]	@ (800239c <StartCommsTask+0x2d4>)
 8002216:	6013      	str	r3, [r2, #0]
	          }

	          osDelay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f006 f93f 	bl	800849c <osDelay>
	          switch (aRxBuffer[1]) {
 800221e:	4b5b      	ldr	r3, [pc, #364]	@ (800238c <StartCommsTask+0x2c4>)
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	3b45      	subs	r3, #69	@ 0x45
 8002224:	2b0e      	cmp	r3, #14
 8002226:	f200 8097 	bhi.w	8002358 <StartCommsTask+0x290>
 800222a:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <StartCommsTask+0x168>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002303 	.word	0x08002303
 8002234:	08002359 	.word	0x08002359
 8002238:	08002359 	.word	0x08002359
 800223c:	08002359 	.word	0x08002359
 8002240:	08002359 	.word	0x08002359
 8002244:	08002359 	.word	0x08002359
 8002248:	08002359 	.word	0x08002359
 800224c:	080022d1 	.word	0x080022d1
 8002250:	08002359 	.word	0x08002359
 8002254:	08002359 	.word	0x08002359
 8002258:	08002359 	.word	0x08002359
 800225c:	08002359 	.word	0x08002359
 8002260:	08002359 	.word	0x08002359
 8002264:	0800229f 	.word	0x0800229f
 8002268:	0800226d 	.word	0x0800226d
	          case 'S':
	            moveCarStraight(amplitude);
 800226c:	4b4b      	ldr	r3, [pc, #300]	@ (800239c <StartCommsTask+0x2d4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f957 	bl	8000524 <__aeabi_i2d>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	ec43 2b10 	vmov	d0, r2, r3
 800227e:	f7ff fb1b 	bl	80018b8 <moveCarStraight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 8002282:	4b42      	ldr	r3, [pc, #264]	@ (800238c <StartCommsTask+0x2c4>)
 8002284:	4a48      	ldr	r2, [pc, #288]	@ (80023a8 <StartCommsTask+0x2e0>)
 8002286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228a:	6018      	str	r0, [r3, #0]
 800228c:	3304      	adds	r3, #4
 800228e:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <StartCommsTask+0x2e4>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 8002296:	200a      	movs	r0, #10
 8002298:	f006 f900 	bl	800849c <osDelay>
	            break;
 800229c:	e045      	b.n	800232a <StartCommsTask+0x262>
	          case 'R':
	            moveCarRight(amplitude);
 800229e:	4b3f      	ldr	r3, [pc, #252]	@ (800239c <StartCommsTask+0x2d4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f93e 	bl	8000524 <__aeabi_i2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	ec43 2b10 	vmov	d0, r2, r3
 80022b0:	f7ff fb94 	bl	80019dc <moveCarRight>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 80022b4:	4b35      	ldr	r3, [pc, #212]	@ (800238c <StartCommsTask+0x2c4>)
 80022b6:	4a3c      	ldr	r2, [pc, #240]	@ (80023a8 <StartCommsTask+0x2e0>)
 80022b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022bc:	6018      	str	r0, [r3, #0]
 80022be:	3304      	adds	r3, #4
 80022c0:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 80022c2:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <StartCommsTask+0x2e4>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 80022c8:	200a      	movs	r0, #10
 80022ca:	f006 f8e7 	bl	800849c <osDelay>
	            break;
 80022ce:	e02c      	b.n	800232a <StartCommsTask+0x262>
	          case 'L':
	            moveCarLeft(amplitude);
 80022d0:	4b32      	ldr	r3, [pc, #200]	@ (800239c <StartCommsTask+0x2d4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f925 	bl	8000524 <__aeabi_i2d>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	ec43 2b10 	vmov	d0, r2, r3
 80022e2:	f7ff fbad 	bl	8001a40 <moveCarLeft>
	            strcpy((char *)aRxBuffer, "DONE!");    // Display to ACK cmd on OLED
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <StartCommsTask+0x2c4>)
 80022e8:	4a2f      	ldr	r2, [pc, #188]	@ (80023a8 <StartCommsTask+0x2e0>)
 80022ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ee:	6018      	str	r0, [r3, #0]
 80022f0:	3304      	adds	r3, #4
 80022f2:	8019      	strh	r1, [r3, #0]
	            flagDone = 1;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <StartCommsTask+0x2e4>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
	            osDelay(10);
 80022fa:	200a      	movs	r0, #10
 80022fc:	f006 f8ce 	bl	800849c <osDelay>
	            break;
 8002300:	e013      	b.n	800232a <StartCommsTask+0x262>
	          case 'E':                   // reset whole system to recalibrate gyro
	            strcpy((char *)aRxBuffer, "RESET");
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <StartCommsTask+0x2c4>)
 8002304:	4a2a      	ldr	r2, [pc, #168]	@ (80023b0 <StartCommsTask+0x2e8>)
 8002306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230a:	6018      	str	r0, [r3, #0]
 800230c:	3304      	adds	r3, #4
 800230e:	8019      	strh	r1, [r3, #0]
	            HAL_UART_Transmit(&huart3, (uint8_t*) "R\0", 2, 0xFFFF);  // TRANSMITTING "RESET" TO RPI/PUTTY
 8002310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002314:	2202      	movs	r2, #2
 8002316:	4927      	ldr	r1, [pc, #156]	@ (80023b4 <StartCommsTask+0x2ec>)
 8002318:	481e      	ldr	r0, [pc, #120]	@ (8002394 <StartCommsTask+0x2cc>)
 800231a:	f004 fed5 	bl	80070c8 <HAL_UART_Transmit>
	            osDelay(500);
 800231e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002322:	f006 f8bb 	bl	800849c <osDelay>
	            NVIC_SystemReset();
 8002326:	f7fe fdd7 	bl	8000ed8 <__NVIC_SystemReset>
	        if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'S' && obstacle_detected) {
 800232a:	e015      	b.n	8002358 <StartCommsTask+0x290>
	          }
	        }
	      }
	      else      // INVALID CHOICE
	      {
	        strcpy((char *)aRxBuffer, "INVAL");
 800232c:	4b17      	ldr	r3, [pc, #92]	@ (800238c <StartCommsTask+0x2c4>)
 800232e:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <StartCommsTask+0x2f0>)
 8002330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002334:	6018      	str	r0, [r3, #0]
 8002336:	3304      	adds	r3, #4
 8002338:	8019      	strh	r1, [r3, #0]
	        osDelay(10);
 800233a:	200a      	movs	r0, #10
 800233c:	f006 f8ae 	bl	800849c <osDelay>
	        HAL_UART_Transmit(&huart3, (uint8_t*) &invalid, 8, 0xFFFF);  // TRANSMITTING "INVAL" TO RPI/PUTTY
 8002340:	f107 010c 	add.w	r1, r7, #12
 8002344:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002348:	2208      	movs	r2, #8
 800234a:	4812      	ldr	r0, [pc, #72]	@ (8002394 <StartCommsTask+0x2cc>)
 800234c:	f004 febc 	bl	80070c8 <HAL_UART_Transmit>
	        receivedInstruction = 0;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <StartCommsTask+0x2d0>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e000      	b.n	800235a <StartCommsTask+0x292>
	        if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'S' && obstacle_detected) {
 8002358:	bf00      	nop
	      }
	    }

	    if (flagDone == 1) {
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <StartCommsTask+0x2e4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d110      	bne.n	8002384 <StartCommsTask+0x2bc>
	      receivedInstruction = 0;
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <StartCommsTask+0x2d0>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
	      osDelay(10);
 8002368:	200a      	movs	r0, #10
 800236a:	f006 f897 	bl	800849c <osDelay>
	      HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 4, 0xFFFF);   // TRANSMITTING "ACK" TO RPI/PUTTY
 800236e:	f107 0114 	add.w	r1, r7, #20
 8002372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002376:	2204      	movs	r2, #4
 8002378:	4806      	ldr	r0, [pc, #24]	@ (8002394 <StartCommsTask+0x2cc>)
 800237a:	f004 fea5 	bl	80070c8 <HAL_UART_Transmit>
	      flagDone = 0;
 800237e:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <StartCommsTask+0x2e4>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
	    }

	    osDelay(10);
 8002384:	200a      	movs	r0, #10
 8002386:	f006 f889 	bl	800849c <osDelay>
	    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 800238a:	e6b0      	b.n	80020ee <StartCommsTask+0x26>
 800238c:	200004b0 	.word	0x200004b0
 8002390:	0800df50 	.word	0x0800df50
 8002394:	20000448 	.word	0x20000448
 8002398:	200004ac 	.word	0x200004ac
 800239c:	200004bc 	.word	0x200004bc
 80023a0:	20000520 	.word	0x20000520
 80023a4:	0800df58 	.word	0x0800df58
 80023a8:	0800df60 	.word	0x0800df60
 80023ac:	200004b8 	.word	0x200004b8
 80023b0:	0800df68 	.word	0x0800df68
 80023b4:	0800df70 	.word	0x0800df70
 80023b8:	0800df74 	.word	0x0800df74

080023bc <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b096      	sub	sp, #88	@ 0x58
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
  /* Infinite loop */
// aaa	uint8_t usVal[20] = { 0 };
	uint8_t gyroVal[20] = { 0 };
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80023c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	f107 0320 	add.w	r3, r7, #32
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
	uint8_t echo[20] = { 0 };
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]

	for (;;) {
		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 80023fa:	4b35      	ldr	r3, [pc, #212]	@ (80024d0 <StartOLEDTask+0x114>)
 80023fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002400:	4b33      	ldr	r3, [pc, #204]	@ (80024d0 <StartOLEDTask+0x114>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fba5 	bl	8000b58 <__aeabi_d2iz>
 800240e:	4603      	mov	r3, r0
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f887 	bl	8000524 <__aeabi_i2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4620      	mov	r0, r4
 800241c:	4629      	mov	r1, r5
 800241e:	f7fd ff33 	bl	8000288 <__aeabi_dsub>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <StartOLEDTask+0x118>)
 8002430:	f7fe f8e2 	bl	80005f8 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fb8c 	bl	8000b58 <__aeabi_d2iz>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	bfb8      	it	lt
 8002446:	425b      	neglt	r3, r3
 8002448:	647b      	str	r3, [r7, #68]	@ 0x44
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 800244a:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <StartOLEDTask+0x114>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fb80 	bl	8000b58 <__aeabi_d2iz>
 8002458:	4602      	mov	r2, r0
 800245a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800245e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002460:	491d      	ldr	r1, [pc, #116]	@ (80024d8 <StartOLEDTask+0x11c>)
 8002462:	f009 fc0d 	bl	800bc80 <siprintf>
		OLED_ShowString(0, 10, gyroVal);
 8002466:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800246a:	461a      	mov	r2, r3
 800246c:	210a      	movs	r1, #10
 800246e:	2000      	movs	r0, #0
 8002470:	f008 fe2e 	bl	800b0d0 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <StartOLEDTask+0x120>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461c      	mov	r4, r3
 800247a:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <StartOLEDTask+0x120>)
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <StartOLEDTask+0x120>)
 8002482:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002484:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <StartOLEDTask+0x120>)
 8002488:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800248a:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <StartOLEDTask+0x120>)
 800248e:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002490:	f107 001c 	add.w	r0, r7, #28
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	9101      	str	r1, [sp, #4]
 8002498:	9200      	str	r2, [sp, #0]
 800249a:	462b      	mov	r3, r5
 800249c:	4622      	mov	r2, r4
 800249e:	4910      	ldr	r1, [pc, #64]	@ (80024e0 <StartOLEDTask+0x124>)
 80024a0:	f009 fbee 	bl	800bc80 <siprintf>
		OLED_ShowString(0, 20, command);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	461a      	mov	r2, r3
 80024aa:	2114      	movs	r1, #20
 80024ac:	2000      	movs	r0, #0
 80024ae:	f008 fe0f 	bl	800b0d0 <OLED_ShowString>

		//uintPart = (int)echo_dist;
		//sprintf(echo, "E = %dcm \0", uintPart);

//		sprintf(echo, "UDist: %.2d \0", echo_dist);
				OLED_ShowString(0, 30, echo);
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	461a      	mov	r2, r3
 80024b8:	211e      	movs	r1, #30
 80024ba:	2000      	movs	r0, #0
 80024bc:	f008 fe08 	bl	800b0d0 <OLED_ShowString>


		OLED_Refresh_Gram();
 80024c0:	f008 fc92 	bl	800ade8 <OLED_Refresh_Gram>
		osDelay(100);
 80024c4:	2064      	movs	r0, #100	@ 0x64
 80024c6:	f005 ffe9 	bl	800849c <osDelay>
	for (;;) {
 80024ca:	bf00      	nop
 80024cc:	e795      	b.n	80023fa <StartOLEDTask+0x3e>
 80024ce:	bf00      	nop
 80024d0:	200004e8 	.word	0x200004e8
 80024d4:	408f4000 	.word	0x408f4000
 80024d8:	0800df7c 	.word	0x0800df7c
 80024dc:	200004b0 	.word	0x200004b0
 80024e0:	0800df8c 	.word	0x0800df8c
 80024e4:	00000000 	.word	0x00000000

080024e8 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
	pwmVal_R = 0;
 80024f0:	4baf      	ldr	r3, [pc, #700]	@ (80027b0 <StartMotorTask+0x2c8>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	801a      	strh	r2, [r3, #0]
	  pwmVal_L = 0;
 80024f6:	4baf      	ldr	r3, [pc, #700]	@ (80027b4 <StartMotorTask+0x2cc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	801a      	strh	r2, [r3, #0]
	  int straightCorrection = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002500:	2100      	movs	r1, #0
 8002502:	48ad      	ldr	r0, [pc, #692]	@ (80027b8 <StartMotorTask+0x2d0>)
 8002504:	f003 fa9a 	bl	8005a3c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002508:	2104      	movs	r1, #4
 800250a:	48ab      	ldr	r0, [pc, #684]	@ (80027b8 <StartMotorTask+0x2d0>)
 800250c:	f003 fa96 	bl	8005a3c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002510:	210c      	movs	r1, #12
 8002512:	48aa      	ldr	r0, [pc, #680]	@ (80027bc <StartMotorTask+0x2d4>)
 8002514:	f003 fa92 	bl	8005a3c <HAL_TIM_PWM_Start>
	  htim1.Instance->CCR4 = SERVOCENTER; 	//Centre
 8002518:	4ba8      	ldr	r3, [pc, #672]	@ (80027bc <StartMotorTask+0x2d4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2292      	movs	r2, #146	@ 0x92
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40

	  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // RIGHT WHEEL FORWARD
 8002520:	2201      	movs	r2, #1
 8002522:	2110      	movs	r1, #16
 8002524:	48a6      	ldr	r0, [pc, #664]	@ (80027c0 <StartMotorTask+0x2d8>)
 8002526:	f001 fd33 	bl	8003f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	2120      	movs	r1, #32
 800252e:	48a4      	ldr	r0, [pc, #656]	@ (80027c0 <StartMotorTask+0x2d8>)
 8002530:	f001 fd2e 	bl	8003f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // LEFT WHEEL FORWARD
 8002534:	2201      	movs	r2, #1
 8002536:	2108      	movs	r1, #8
 8002538:	48a1      	ldr	r0, [pc, #644]	@ (80027c0 <StartMotorTask+0x2d8>)
 800253a:	f001 fd29 	bl	8003f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	2104      	movs	r1, #4
 8002542:	489f      	ldr	r0, [pc, #636]	@ (80027c0 <StartMotorTask+0x2d8>)
 8002544:	f001 fd24 	bl	8003f90 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8002548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800254c:	f005 ffa6 	bl	800849c <osDelay>

	  /* Infinite loop */
	  for (;;) {
	    htim1.Instance->CCR4 = pwmVal_servo;
 8002550:	4b9c      	ldr	r3, [pc, #624]	@ (80027c4 <StartMotorTask+0x2dc>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b99      	ldr	r3, [pc, #612]	@ (80027bc <StartMotorTask+0x2d4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
	    double error_angle = target_angle - total_angle;	//100 - total ang
 800255a:	4b9b      	ldr	r3, [pc, #620]	@ (80027c8 <StartMotorTask+0x2e0>)
 800255c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002560:	4b9a      	ldr	r3, [pc, #616]	@ (80027cc <StartMotorTask+0x2e4>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fd fe8f 	bl	8000288 <__aeabi_dsub>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	    // Check if there's an obstacle and we're trying to move forward straight
	    if (obstacle_detected && (aRxBuffer[0] == 'F') && (aRxBuffer[1] == 'S')) {
 8002572:	4b97      	ldr	r3, [pc, #604]	@ (80027d0 <StartMotorTask+0x2e8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d011      	beq.n	800259e <StartMotorTask+0xb6>
 800257a:	4b96      	ldr	r3, [pc, #600]	@ (80027d4 <StartMotorTask+0x2ec>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b46      	cmp	r3, #70	@ 0x46
 8002580:	d10d      	bne.n	800259e <StartMotorTask+0xb6>
 8002582:	4b94      	ldr	r3, [pc, #592]	@ (80027d4 <StartMotorTask+0x2ec>)
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	2b53      	cmp	r3, #83	@ 0x53
 8002588:	d109      	bne.n	800259e <StartMotorTask+0xb6>
	      // Stop motors if obstacle detected and we're moving forward
	      pwmVal_L = 0;
 800258a:	4b8a      	ldr	r3, [pc, #552]	@ (80027b4 <StartMotorTask+0x2cc>)
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]
	      pwmVal_R = 0;
 8002590:	4b87      	ldr	r3, [pc, #540]	@ (80027b0 <StartMotorTask+0x2c8>)
 8002592:	2200      	movs	r2, #0
 8002594:	801a      	strh	r2, [r3, #0]
	      e_brake = 1;
 8002596:	4b90      	ldr	r3, [pc, #576]	@ (80027d8 <StartMotorTask+0x2f0>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e19a      	b.n	80028d4 <StartMotorTask+0x3ec>
	    } else {
	      // Normal operation - no obstacle or not moving forward
	      if (pwmVal_servo < 127) { //TURN LEFT
 800259e:	4b89      	ldr	r3, [pc, #548]	@ (80027c4 <StartMotorTask+0x2dc>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80025a4:	d84c      	bhi.n	8002640 <StartMotorTask+0x158>
	        pwmVal_R = PID_Angle(error_angle, 1) * 1.072;  //RIGHT = MASTER
 80025a6:	2001      	movs	r0, #1
 80025a8:	ed97 0b02 	vldr	d0, [r7, #8]
 80025ac:	f7ff faf6 	bl	8001b9c <PID_Angle>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffb6 	bl	8000524 <__aeabi_i2d>
 80025b8:	a379      	add	r3, pc, #484	@ (adr r3, 80027a0 <StartMotorTask+0x2b8>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fe f81b 	bl	80005f8 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe faed 	bl	8000ba8 <__aeabi_d2uiz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b77      	ldr	r3, [pc, #476]	@ (80027b0 <StartMotorTask+0x2c8>)
 80025d4:	801a      	strh	r2, [r3, #0]
	        pwmVal_L = pwmVal_R * (0.59); //LEFT = SLAVE
 80025d6:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <StartMotorTask+0x2c8>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ffa2 	bl	8000524 <__aeabi_i2d>
 80025e0:	a371      	add	r3, pc, #452	@ (adr r3, 80027a8 <StartMotorTask+0x2c0>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fe f807 	bl	80005f8 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe fad9 	bl	8000ba8 <__aeabi_d2uiz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b6e      	ldr	r3, [pc, #440]	@ (80027b4 <StartMotorTask+0x2cc>)
 80025fc:	801a      	strh	r2, [r3, #0]

	        if (error_angle > 0) {
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800260a:	f7fe fa85 	bl	8000b18 <__aeabi_dcmpgt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <StartMotorTask+0x142>
	          // LEFT WHEEL GO FORWARD
	          HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002614:	2201      	movs	r2, #1
 8002616:	2108      	movs	r1, #8
 8002618:	4869      	ldr	r0, [pc, #420]	@ (80027c0 <StartMotorTask+0x2d8>)
 800261a:	f001 fcb9 	bl	8003f90 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800261e:	2200      	movs	r2, #0
 8002620:	2104      	movs	r1, #4
 8002622:	4867      	ldr	r0, [pc, #412]	@ (80027c0 <StartMotorTask+0x2d8>)
 8002624:	f001 fcb4 	bl	8003f90 <HAL_GPIO_WritePin>
 8002628:	e154      	b.n	80028d4 <StartMotorTask+0x3ec>
	        } else {
	          //// LEFT WHEEL GO BACKWARD
	          HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	2108      	movs	r1, #8
 800262e:	4864      	ldr	r0, [pc, #400]	@ (80027c0 <StartMotorTask+0x2d8>)
 8002630:	f001 fcae 	bl	8003f90 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002634:	2201      	movs	r2, #1
 8002636:	2104      	movs	r1, #4
 8002638:	4861      	ldr	r0, [pc, #388]	@ (80027c0 <StartMotorTask+0x2d8>)
 800263a:	f001 fca9 	bl	8003f90 <HAL_GPIO_WritePin>
 800263e:	e149      	b.n	80028d4 <StartMotorTask+0x3ec>
	        }
	      }

	      else if (pwmVal_servo > 189) { //TURN RIGHT
 8002640:	4b60      	ldr	r3, [pc, #384]	@ (80027c4 <StartMotorTask+0x2dc>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	2bbd      	cmp	r3, #189	@ 0xbd
 8002646:	d93d      	bls.n	80026c4 <StartMotorTask+0x1dc>
	        pwmVal_L = PID_Angle(error_angle, 0);
 8002648:	2000      	movs	r0, #0
 800264a:	ed97 0b02 	vldr	d0, [r7, #8]
 800264e:	f7ff faa5 	bl	8001b9c <PID_Angle>
 8002652:	4603      	mov	r3, r0
 8002654:	b29a      	uxth	r2, r3
 8002656:	4b57      	ldr	r3, [pc, #348]	@ (80027b4 <StartMotorTask+0x2cc>)
 8002658:	801a      	strh	r2, [r3, #0]
	        pwmVal_R = pwmVal_L * (0.59); //RIGHT = SLAVE
 800265a:	4b56      	ldr	r3, [pc, #344]	@ (80027b4 <StartMotorTask+0x2cc>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff60 	bl	8000524 <__aeabi_i2d>
 8002664:	a350      	add	r3, pc, #320	@ (adr r3, 80027a8 <StartMotorTask+0x2c0>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffc5 	bl	80005f8 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fe fa97 	bl	8000ba8 <__aeabi_d2uiz>
 800267a:	4603      	mov	r3, r0
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b4c      	ldr	r3, [pc, #304]	@ (80027b0 <StartMotorTask+0x2c8>)
 8002680:	801a      	strh	r2, [r3, #0]

	        if (error_angle < 0) {
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800268e:	f7fe fa25 	bl	8000adc <__aeabi_dcmplt>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <StartMotorTask+0x1c6>
	          //RIGHT (WHEEL B) FORWARD
	          HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	2110      	movs	r1, #16
 800269c:	4848      	ldr	r0, [pc, #288]	@ (80027c0 <StartMotorTask+0x2d8>)
 800269e:	f001 fc77 	bl	8003f90 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2120      	movs	r1, #32
 80026a6:	4846      	ldr	r0, [pc, #280]	@ (80027c0 <StartMotorTask+0x2d8>)
 80026a8:	f001 fc72 	bl	8003f90 <HAL_GPIO_WritePin>
 80026ac:	e112      	b.n	80028d4 <StartMotorTask+0x3ec>
	        } else {
	          //RIGHT (WHEEL B) BACKWARD
	          HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2110      	movs	r1, #16
 80026b2:	4843      	ldr	r0, [pc, #268]	@ (80027c0 <StartMotorTask+0x2d8>)
 80026b4:	f001 fc6c 	bl	8003f90 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80026b8:	2201      	movs	r2, #1
 80026ba:	2120      	movs	r1, #32
 80026bc:	4840      	ldr	r0, [pc, #256]	@ (80027c0 <StartMotorTask+0x2d8>)
 80026be:	f001 fc67 	bl	8003f90 <HAL_GPIO_WritePin>
 80026c2:	e107      	b.n	80028d4 <StartMotorTask+0x3ec>
	        }
	      }

	      else {
	        pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 80026c4:	4b45      	ldr	r3, [pc, #276]	@ (80027dc <StartMotorTask+0x2f4>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b45      	ldr	r3, [pc, #276]	@ (80027e0 <StartMotorTask+0x2f8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f9e7 	bl	8001aa4 <PID_Control>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff23 	bl	8000524 <__aeabi_i2d>
 80026de:	a330      	add	r3, pc, #192	@ (adr r3, 80027a0 <StartMotorTask+0x2b8>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fd ff88 	bl	80005f8 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7fe fa5a 	bl	8000ba8 <__aeabi_d2uiz>
 80026f4:	4603      	mov	r3, r0
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <StartMotorTask+0x2c8>)
 80026fa:	801a      	strh	r2, [r3, #0]
	        if (labs(leftTarget - leftEncoderVal)> labs(rightTarget - rightEncoderVal)) {
 80026fc:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <StartMotorTask+0x2f4>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b37      	ldr	r3, [pc, #220]	@ (80027e0 <StartMotorTask+0x2f8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800270a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800270e:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <StartMotorTask+0x2fc>)
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	4b35      	ldr	r3, [pc, #212]	@ (80027e8 <StartMotorTask+0x300>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	1acb      	subs	r3, r1, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	bfb8      	it	lt
 800271c:	425b      	neglt	r3, r3
 800271e:	429a      	cmp	r2, r3
 8002720:	dd03      	ble.n	800272a <StartMotorTask+0x242>
	          straightCorrection++;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e002      	b.n	8002730 <StartMotorTask+0x248>
	        } else {
	          straightCorrection--;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3b01      	subs	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
	        }
	        if (labs(leftTarget - leftEncoderVal) < 100) {
 8002730:	4b2a      	ldr	r3, [pc, #168]	@ (80027dc <StartMotorTask+0x2f4>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <StartMotorTask+0x2f8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 800273e:	db08      	blt.n	8002752 <StartMotorTask+0x26a>
 8002740:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <StartMotorTask+0x2f4>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <StartMotorTask+0x2f8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b63      	cmp	r3, #99	@ 0x63
 800274c:	dc01      	bgt.n	8002752 <StartMotorTask+0x26a>
	          straightCorrection = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
	        }
	        pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <StartMotorTask+0x2fc>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <StartMotorTask+0x300>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff f9a0 	bl	8001aa4 <PID_Control>
 8002764:	4603      	mov	r3, r0
	                + straightCorrection;
 8002766:	b29a      	uxth	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4413      	add	r3, r2
 800276e:	b29a      	uxth	r2, r3
	        pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 8002770:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <StartMotorTask+0x2cc>)
 8002772:	801a      	strh	r2, [r3, #0]

	        if ((leftTarget - leftEncoderVal) < 0) {
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <StartMotorTask+0x2f4>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <StartMotorTask+0x2f8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	da67      	bge.n	8002852 <StartMotorTask+0x36a>
	          if (error_angle > 2) { // left +. right -.
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800278a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800278e:	f7fe f9c3 	bl	8000b18 <__aeabi_dcmpgt>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d029      	beq.n	80027ec <StartMotorTask+0x304>
	            pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <StartMotorTask+0x2dc>)
 800279a:	22a5      	movs	r2, #165	@ 0xa5
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	e099      	b.n	80028d4 <StartMotorTask+0x3ec>
 80027a0:	78d4fdf4 	.word	0x78d4fdf4
 80027a4:	3ff126e9 	.word	0x3ff126e9
 80027a8:	ae147ae1 	.word	0xae147ae1
 80027ac:	3fe2e147 	.word	0x3fe2e147
 80027b0:	200004c0 	.word	0x200004c0
 80027b4:	200004c2 	.word	0x200004c2
 80027b8:	20000400 	.word	0x20000400
 80027bc:	200002e0 	.word	0x200002e0
 80027c0:	40020000 	.word	0x40020000
 80027c4:	20000000 	.word	0x20000000
 80027c8:	200004e0 	.word	0x200004e0
 80027cc:	200004e8 	.word	0x200004e8
 80027d0:	20000520 	.word	0x20000520
 80027d4:	200004b0 	.word	0x200004b0
 80027d8:	200004c8 	.word	0x200004c8
 80027dc:	200004d8 	.word	0x200004d8
 80027e0:	200004d0 	.word	0x200004d0
 80027e4:	200004d4 	.word	0x200004d4
 80027e8:	200004cc 	.word	0x200004cc
	          } else if (error_angle < -2) {
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80027f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027f8:	f7fe f970 	bl	8000adc <__aeabi_dcmplt>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <StartMotorTask+0x322>
	            pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002802:	4b4a      	ldr	r3, [pc, #296]	@ (800292c <StartMotorTask+0x444>)
 8002804:	227f      	movs	r2, #127	@ 0x7f
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	e064      	b.n	80028d4 <StartMotorTask+0x3ec>
	          } else {
	            pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b48      	ldr	r3, [pc, #288]	@ (8002930 <StartMotorTask+0x448>)
 8002810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002814:	f7fd fef0 	bl	80005f8 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4b43      	ldr	r3, [pc, #268]	@ (8002934 <StartMotorTask+0x44c>)
 8002826:	f7fe f811 	bl	800084c <__aeabi_ddiv>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	4b40      	ldr	r3, [pc, #256]	@ (8002938 <StartMotorTask+0x450>)
 8002838:	f7fd fd28 	bl	800028c <__adddf3>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe f9b0 	bl	8000ba8 <__aeabi_d2uiz>
 8002848:	4603      	mov	r3, r0
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b37      	ldr	r3, [pc, #220]	@ (800292c <StartMotorTask+0x444>)
 800284e:	801a      	strh	r2, [r3, #0]
 8002850:	e040      	b.n	80028d4 <StartMotorTask+0x3ec>
	          }
	        } else {
	          if (error_angle > 2) { // left +. right -.
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800285a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800285e:	f7fe f95b 	bl	8000b18 <__aeabi_dcmpgt>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <StartMotorTask+0x388>
	            pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002868:	4b30      	ldr	r3, [pc, #192]	@ (800292c <StartMotorTask+0x444>)
 800286a:	227f      	movs	r2, #127	@ 0x7f
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	e031      	b.n	80028d4 <StartMotorTask+0x3ec>
	          } else if (error_angle < -2) {
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002878:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800287c:	f7fe f92e 	bl	8000adc <__aeabi_dcmplt>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <StartMotorTask+0x3a6>
	            pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002886:	4b29      	ldr	r3, [pc, #164]	@ (800292c <StartMotorTask+0x444>)
 8002888:	22a5      	movs	r2, #165	@ 0xa5
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e022      	b.n	80028d4 <StartMotorTask+0x3ec>
	          } else {
	            pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <StartMotorTask+0x454>)
 8002894:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002898:	f7fd feae 	bl	80005f8 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <StartMotorTask+0x44c>)
 80028aa:	f7fd ffcf 	bl	800084c <__aeabi_ddiv>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <StartMotorTask+0x450>)
 80028bc:	f7fd fce6 	bl	800028c <__adddf3>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe f96e 	bl	8000ba8 <__aeabi_d2uiz>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b16      	ldr	r3, [pc, #88]	@ (800292c <StartMotorTask+0x444>)
 80028d2:	801a      	strh	r2, [r3, #0]
	          }
	        }
	      }
	    }

	    if (e_brake) {
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <StartMotorTask+0x458>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00e      	beq.n	80028fa <StartMotorTask+0x412>
	      pwmVal_L = pwmVal_R = 0;
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <StartMotorTask+0x45c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <StartMotorTask+0x45c>)
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <StartMotorTask+0x460>)
 80028e8:	801a      	strh	r2, [r3, #0]
	      leftTarget = leftEncoderVal;
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <StartMotorTask+0x464>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <StartMotorTask+0x468>)
 80028f0:	6013      	str	r3, [r2, #0]
	      rightTarget = rightEncoderVal;
 80028f2:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <StartMotorTask+0x46c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <StartMotorTask+0x470>)
 80028f8:	6013      	str	r3, [r2, #0]
	    }

	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 80028fa:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <StartMotorTask+0x460>)
 80028fc:	881a      	ldrh	r2, [r3, #0]
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <StartMotorTask+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 8002904:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <StartMotorTask+0x45c>)
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	4b14      	ldr	r3, [pc, #80]	@ (800295c <StartMotorTask+0x474>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	639a      	str	r2, [r3, #56]	@ 0x38
	    osDelay(10);//too small?
 800290e:	200a      	movs	r0, #10
 8002910:	f005 fdc4 	bl	800849c <osDelay>

	    if (times_acceptable > 1000) {
 8002914:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <StartMotorTask+0x478>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800291c:	f77f ae18 	ble.w	8002550 <StartMotorTask+0x68>
	      times_acceptable = 1001;
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <StartMotorTask+0x478>)
 8002922:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8002926:	601a      	str	r2, [r3, #0]
	  for (;;) {
 8002928:	e612      	b.n	8002550 <StartMotorTask+0x68>
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000
 8002930:	40330000 	.word	0x40330000
 8002934:	40140000 	.word	0x40140000
 8002938:	40624000 	.word	0x40624000
 800293c:	c0330000 	.word	0xc0330000
 8002940:	200004c8 	.word	0x200004c8
 8002944:	200004c0 	.word	0x200004c0
 8002948:	200004c2 	.word	0x200004c2
 800294c:	200004d0 	.word	0x200004d0
 8002950:	200004d8 	.word	0x200004d8
 8002954:	200004cc 	.word	0x200004cc
 8002958:	200004d4 	.word	0x200004d4
 800295c:	20000400 	.word	0x20000400
 8002960:	200004c4 	.word	0x200004c4
 8002964:	00000000 	.word	0x00000000

08002968 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b08a      	sub	sp, #40	@ 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
  /* Infinite loop */

			gyroInit();
 8002970:	f7ff fac4 	bl	8001efc <gyroInit>
			uint8_t val[2] = { 0, 0 };
 8002974:	2300      	movs	r3, #0
 8002976:	813b      	strh	r3, [r7, #8]

			int16_t angularSpeed = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	817b      	strh	r3, [r7, #10]

			uint32_t tick = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
			double offset = 0;
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double garbage = 0;
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9c7 2304 	strd	r2, r3, [r7, #16]
			int i = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
			osDelay(50);
 800299c:	2032      	movs	r0, #50	@ 0x32
 800299e:	f005 fd7d 	bl	800849c <osDelay>
			while (i < 1000) {					//sample 1000 for calibration
 80029a2:	e048      	b.n	8002a36 <StartGyroTask+0xce>
				osDelay(1);
 80029a4:	2001      	movs	r0, #1
 80029a6:	f005 fd79 	bl	800849c <osDelay>
				readByte(0x37, val);
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	4619      	mov	r1, r3
 80029b0:	2037      	movs	r0, #55	@ 0x37
 80029b2:	f7ff fa55 	bl	8001e60 <readByte>
				angularSpeed =  val[1] | (val[0] << 8);
 80029b6:	7a7b      	ldrb	r3, [r7, #9]
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	7a3b      	ldrb	r3, [r7, #8]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	817b      	strh	r3, [r7, #10]

				garbage = garbage + (double) ((double) angularSpeed)
 80029c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fdab 	bl	8000524 <__aeabi_i2d>
 80029ce:	4604      	mov	r4, r0
 80029d0:	460d      	mov	r5, r1
						* ((HAL_GetTick() - tick) / 16400.0);
 80029d2:	f000 fd0b 	bl	80033ec <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fd91 	bl	8000504 <__aeabi_ui2d>
 80029e2:	a346      	add	r3, pc, #280	@ (adr r3, 8002afc <StartGyroTask+0x194>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd ff30 	bl	800084c <__aeabi_ddiv>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4620      	mov	r0, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	f7fd fe00 	bl	80005f8 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
				garbage = garbage + (double) ((double) angularSpeed)
 80029fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a00:	f7fd fc44 	bl	800028c <__adddf3>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	e9c7 2304 	strd	r2, r3, [r7, #16]
				offset = offset + angularSpeed;		//CALIBRATION OFFSET
 8002a0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fd87 	bl	8000524 <__aeabi_i2d>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a1e:	f7fd fc35 	bl	800028c <__adddf3>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	e9c7 2306 	strd	r2, r3, [r7, #24]
				tick = HAL_GetTick();
 8002a2a:	f000 fcdf 	bl	80033ec <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	@ 0x24
				i++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3301      	adds	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
			while (i < 1000) {					//sample 1000 for calibration
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a3c:	dbb2      	blt.n	80029a4 <StartGyroTask+0x3c>
			}
			offset = offset / i;
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7fd fd70 	bl	8000524 <__aeabi_i2d>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a4c:	f7fd fefe 	bl	800084c <__aeabi_ddiv>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	e9c7 2306 	strd	r2, r3, [r7, #24]

			tick = HAL_GetTick();
 8002a58:	f000 fcc8 	bl	80033ec <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	@ 0x24
			/* Infinite loop */
			for (;;) {

				osDelay(100);
 8002a5e:	2064      	movs	r0, #100	@ 0x64
 8002a60:	f005 fd1c 	bl	800849c <osDelay>
				readByte(0x37, val);
 8002a64:	f107 0308 	add.w	r3, r7, #8
 8002a68:	4619      	mov	r1, r3
 8002a6a:	2037      	movs	r0, #55	@ 0x37
 8002a6c:	f7ff f9f8 	bl	8001e60 <readByte>
				angularSpeed = val[1] | (val[0] << 8);
 8002a70:	7a7b      	ldrb	r3, [r7, #9]
 8002a72:	b21a      	sxth	r2, r3
 8002a74:	7a3b      	ldrb	r3, [r7, #8]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	817b      	strh	r3, [r7, #10]
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 8002a7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd4e 	bl	8000524 <__aeabi_i2d>
 8002a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8c:	f7fd fbfc 	bl	8000288 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0);	//calculate angle change by time diff
 8002a98:	f000 fca8 	bl	80033ec <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fd2e 	bl	8000504 <__aeabi_ui2d>
 8002aa8:	a314      	add	r3, pc, #80	@ (adr r3, 8002afc <StartGyroTask+0x194>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd fecd 	bl	800084c <__aeabi_ddiv>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f7fd fd9d 	bl	80005f8 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
				total_angle = total_angle + (double) ((double) angularSpeed - offset)
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <StartGyroTask+0x190>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fbde 	bl	800028c <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4908      	ldr	r1, [pc, #32]	@ (8002af8 <StartGyroTask+0x190>)
 8002ad6:	e9c1 2300 	strd	r2, r3, [r1]
				i = i- angularSpeed;
 8002ada:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
				i++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
				tick = HAL_GetTick();
 8002aea:	f000 fc7f 	bl	80033ec <HAL_GetTick>
 8002aee:	6278      	str	r0, [r7, #36]	@ 0x24
				osDelay(100);
 8002af0:	bf00      	nop
 8002af2:	e7b4      	b.n	8002a5e <StartGyroTask+0xf6>
 8002af4:	f3af 8000 	nop.w
 8002af8:	200004e8 	.word	0x200004e8
 8002afc:	00000000 	.word	0x00000000
 8002b00:	40d00400 	.word	0x40d00400

08002b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b08:	b672      	cpsid	i
}
 8002b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <Error_Handler+0x8>

08002b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_MspInit+0x64>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <HAL_MspInit+0x64>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_MspInit+0x64>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <HAL_MspInit+0x64>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <HAL_MspInit+0x64>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_MspInit+0x64>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	210f      	movs	r1, #15
 8002b52:	f06f 0001 	mvn.w	r0, #1
 8002b56:	f000 ffb6 	bl	8003ac6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	2005      	movs	r0, #5
 8002b60:	f000 ffb1 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002b64:	2005      	movs	r0, #5
 8002b66:	f000 ffca 	bl	8003afe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800

08002b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	@ 0x30
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2e      	ldr	r2, [pc, #184]	@ (8002c50 <HAL_ADC_MspInit+0xd8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d128      	bne.n	8002bec <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	4b26      	ldr	r3, [pc, #152]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a25      	ldr	r2, [pc, #148]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = left_IR_Pin;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(left_IR_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	481c      	ldr	r0, [pc, #112]	@ (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002be6:	f001 f837 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002bea:	e02c      	b.n	8002c46 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c5c <HAL_ADC_MspInit+0xe4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d127      	bne.n	8002c46 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b16      	ldr	r3, [pc, #88]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	4a15      	ldr	r2, [pc, #84]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002c00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c06:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <HAL_ADC_MspInit+0xdc>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = right_IR_Pin;
 8002c2e:	2304      	movs	r3, #4
 8002c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c32:	2303      	movs	r3, #3
 8002c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(right_IR_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <HAL_ADC_MspInit+0xe0>)
 8002c42:	f001 f809 	bl	8003c58 <HAL_GPIO_Init>
}
 8002c46:	bf00      	nop
 8002c48:	3730      	adds	r7, #48	@ 0x30
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40012000 	.word	0x40012000
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40012100 	.word	0x40012100

08002c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	@ 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ce4 <HAL_I2C_MspInit+0x84>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12c      	bne.n	8002cdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	4b18      	ldr	r3, [pc, #96]	@ (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca4:	2312      	movs	r3, #18
 8002ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480c      	ldr	r0, [pc, #48]	@ (8002cec <HAL_I2C_MspInit+0x8c>)
 8002cbc:	f000 ffcc 	bl	8003c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	4a07      	ldr	r2, [pc, #28]	@ (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002cca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_I2C_MspInit+0x88>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cdc:	bf00      	nop
 8002cde:	3728      	adds	r7, #40	@ 0x28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40005400 	.word	0x40005400
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020400 	.word	0x40020400

08002cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	@ (8002d9c <HAL_TIM_Base_MspInit+0xac>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	4b22      	ldr	r3, [pc, #136]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	4a21      	ldr	r2, [pc, #132]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d22:	4b1f      	ldr	r3, [pc, #124]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d2e:	e030      	b.n	8002d92 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1b      	ldr	r2, [pc, #108]	@ (8002da4 <HAL_TIM_Base_MspInit+0xb4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d12b      	bne.n	8002d92 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	4a17      	ldr	r2, [pc, #92]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	4a10      	ldr	r2, [pc, #64]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d66:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <HAL_TIM_Base_MspInit+0xb0>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002d72:	23c0      	movs	r3, #192	@ 0xc0
 8002d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d82:	2303      	movs	r3, #3
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4806      	ldr	r0, [pc, #24]	@ (8002da8 <HAL_TIM_Base_MspInit+0xb8>)
 8002d8e:	f000 ff63 	bl	8003c58 <HAL_GPIO_Init>
}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	@ 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40010400 	.word	0x40010400
 8002da8:	40020800 	.word	0x40020800

08002dac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	@ 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dcc:	d14b      	bne.n	8002e66 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	4b38      	ldr	r3, [pc, #224]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a37      	ldr	r2, [pc, #220]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b35      	ldr	r3, [pc, #212]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e34:	2301      	movs	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4825      	ldr	r0, [pc, #148]	@ (8002ed4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002e40:	f000 ff0a 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e44:	2308      	movs	r3, #8
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e54:	2301      	movs	r3, #1
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	481e      	ldr	r0, [pc, #120]	@ (8002ed8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002e60:	f000 fefa 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e64:	e030      	b.n	8002ec8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002edc <HAL_TIM_Encoder_MspInit+0x130>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d12b      	bne.n	8002ec8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	4b16      	ldr	r3, [pc, #88]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ea8:	23c0      	movs	r3, #192	@ 0xc0
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4804      	ldr	r0, [pc, #16]	@ (8002ed4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002ec4:	f000 fec8 	bl	8003c58 <HAL_GPIO_Init>
}
 8002ec8:	bf00      	nop
 8002eca:	3730      	adds	r7, #48	@ 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40000400 	.word	0x40000400

08002ee0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f74 <HAL_TIM_IC_MspInit+0x94>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d134      	bne.n	8002f6c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <HAL_TIM_IC_MspInit+0x98>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f78 <HAL_TIM_IC_MspInit+0x98>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_TIM_IC_MspInit+0x98>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <HAL_TIM_IC_MspInit+0x98>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a14      	ldr	r2, [pc, #80]	@ (8002f78 <HAL_TIM_IC_MspInit+0x98>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_TIM_IC_MspInit+0x98>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8002f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4809      	ldr	r0, [pc, #36]	@ (8002f7c <HAL_TIM_IC_MspInit+0x9c>)
 8002f58:	f000 fe7e 	bl	8003c58 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2105      	movs	r1, #5
 8002f60:	201e      	movs	r0, #30
 8002f62:	f000 fdb0 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f66:	201e      	movs	r0, #30
 8002f68:	f000 fdc9 	bl	8003afe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002f6c:	bf00      	nop
 8002f6e:	3728      	adds	r7, #40	@ 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020c00 	.word	0x40020c00

08002f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <HAL_TIM_MspPostInit+0x68>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d11e      	bne.n	8002fe0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_TIM_MspPostInit+0x6c>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	4a10      	ldr	r2, [pc, #64]	@ (8002fec <HAL_TIM_MspPostInit+0x6c>)
 8002fac:	f043 0310 	orr.w	r3, r3, #16
 8002fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <HAL_TIM_MspPostInit+0x6c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4805      	ldr	r0, [pc, #20]	@ (8002ff0 <HAL_TIM_MspPostInit+0x70>)
 8002fdc:	f000 fe3c 	bl	8003c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002fe0:	bf00      	nop
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	@ 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <HAL_UART_MspInit+0x94>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d134      	bne.n	8003080 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b1c      	ldr	r3, [pc, #112]	@ (800308c <HAL_UART_MspInit+0x98>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <HAL_UART_MspInit+0x98>)
 8003020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003024:	6413      	str	r3, [r2, #64]	@ 0x40
 8003026:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_UART_MspInit+0x98>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <HAL_UART_MspInit+0x98>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a14      	ldr	r2, [pc, #80]	@ (800308c <HAL_UART_MspInit+0x98>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_UART_MspInit+0x98>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800304e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003060:	2307      	movs	r3, #7
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4619      	mov	r1, r3
 800306a:	4809      	ldr	r0, [pc, #36]	@ (8003090 <HAL_UART_MspInit+0x9c>)
 800306c:	f000 fdf4 	bl	8003c58 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2105      	movs	r1, #5
 8003074:	2027      	movs	r0, #39	@ 0x27
 8003076:	f000 fd26 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800307a:	2027      	movs	r0, #39	@ 0x27
 800307c:	f000 fd3f 	bl	8003afe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003080:	bf00      	nop
 8003082:	3728      	adds	r7, #40	@ 0x28
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40004800 	.word	0x40004800
 800308c:	40023800 	.word	0x40023800
 8003090:	40020800 	.word	0x40020800

08003094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <NMI_Handler+0x4>

0800309c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//int count =0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <HardFault_Handler+0x4>

080030a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <MemManage_Handler+0x4>

080030ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <UsageFault_Handler+0x4>

080030bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ce:	f000 f979 	bl	80033c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80030d2:	f006 fe0b 	bl	8009cec <xTaskGetSchedulerState>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80030dc:	f007 fc04 	bl	800a8e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030f8:	4802      	ldr	r0, [pc, #8]	@ (8003104 <TIM4_IRQHandler+0x10>)
 80030fa:	f002 feea 	bl	8005ed2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200003b8 	.word	0x200003b8

08003108 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <USART3_IRQHandler+0x10>)
 800310e:	f004 f93d 	bl	800738c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000448 	.word	0x20000448

0800311c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return 1;
 8003120:	2301      	movs	r3, #1
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_kill>:

int _kill(int pid, int sig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003136:	f008 fe59 	bl	800bdec <__errno>
 800313a:	4603      	mov	r3, r0
 800313c:	2216      	movs	r2, #22
 800313e:	601a      	str	r2, [r3, #0]
  return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_exit>:

void _exit (int status)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ffe7 	bl	800312c <_kill>
  while (1) {}    /* Make sure we hang here */
 800315e:	bf00      	nop
 8003160:	e7fd      	b.n	800315e <_exit+0x12>

08003162 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e00a      	b.n	800318a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003174:	f3af 8000 	nop.w
 8003178:	4601      	mov	r1, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	60ba      	str	r2, [r7, #8]
 8003180:	b2ca      	uxtb	r2, r1
 8003182:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	dbf0      	blt.n	8003174 <_read+0x12>
  }

  return len;
 8003192:	687b      	ldr	r3, [r7, #4]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e009      	b.n	80031c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	60ba      	str	r2, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3301      	adds	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	dbf1      	blt.n	80031ae <_write+0x12>
  }
  return len;
 80031ca:	687b      	ldr	r3, [r7, #4]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <_close>:

int _close(int file)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031fc:	605a      	str	r2, [r3, #4]
  return 0;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_isatty>:

int _isatty(int file)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003244:	4a14      	ldr	r2, [pc, #80]	@ (8003298 <_sbrk+0x5c>)
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <_sbrk+0x60>)
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <_sbrk+0x64>)
 800325a:	4a12      	ldr	r2, [pc, #72]	@ (80032a4 <_sbrk+0x68>)
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325e:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <_sbrk+0x64>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d207      	bcs.n	800327c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800326c:	f008 fdbe 	bl	800bdec <__errno>
 8003270:	4603      	mov	r3, r0
 8003272:	220c      	movs	r2, #12
 8003274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e009      	b.n	8003290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800327c:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <_sbrk+0x64>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003282:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <_sbrk+0x64>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <_sbrk+0x64>)
 800328c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20020000 	.word	0x20020000
 800329c:	00000400 	.word	0x00000400
 80032a0:	20000524 	.word	0x20000524
 80032a4:	200053c8 	.word	0x200053c8

080032a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <SystemInit+0x20>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <SystemInit+0x20>)
 80032b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032d0:	f7ff ffea 	bl	80032a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032d4:	480c      	ldr	r0, [pc, #48]	@ (8003308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032d6:	490d      	ldr	r1, [pc, #52]	@ (800330c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032dc:	e002      	b.n	80032e4 <LoopCopyDataInit>

080032de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032e2:	3304      	adds	r3, #4

080032e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e8:	d3f9      	bcc.n	80032de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f0:	e001      	b.n	80032f6 <LoopFillZerobss>

080032f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f4:	3204      	adds	r2, #4

080032f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f8:	d3fb      	bcc.n	80032f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032fa:	f008 fd7d 	bl	800bdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fe:	f7fd fe01 	bl	8000f04 <main>
  bx  lr    
 8003302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003310:	0800eeb0 	.word	0x0800eeb0
  ldr r2, =_sbss
 8003314:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003318:	200053c8 	.word	0x200053c8

0800331c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC_IRQHandler>
	...

08003320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003324:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0d      	ldr	r2, [pc, #52]	@ (8003360 <HAL_Init+0x40>)
 800332a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800332e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003330:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	@ (8003360 <HAL_Init+0x40>)
 8003336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800333a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800333c:	4b08      	ldr	r3, [pc, #32]	@ (8003360 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a07      	ldr	r2, [pc, #28]	@ (8003360 <HAL_Init+0x40>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003348:	2003      	movs	r0, #3
 800334a:	f000 fbb1 	bl	8003ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334e:	200f      	movs	r0, #15
 8003350:	f000 f808 	bl	8003364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003354:	f7ff fbdc 	bl	8002b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800336c:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <HAL_InitTick+0x54>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_InitTick+0x58>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800337a:	fbb3 f3f1 	udiv	r3, r3, r1
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fbc9 	bl	8003b1a <HAL_SYSTICK_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00e      	b.n	80033b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d80a      	bhi.n	80033ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003398:	2200      	movs	r2, #0
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f000 fb91 	bl	8003ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a4:	4a06      	ldr	r2, [pc, #24]	@ (80033c0 <HAL_InitTick+0x5c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000004 	.word	0x20000004
 80033bc:	2000000c 	.word	0x2000000c
 80033c0:	20000008 	.word	0x20000008

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	@ (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000000c 	.word	0x2000000c
 80033e8:	20000528 	.word	0x20000528

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	@ (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000528 	.word	0x20000528

08003404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7ff ffee 	bl	80033ec <HAL_GetTick>
 8003410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d005      	beq.n	800342a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341e:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_Delay+0x44>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800342a:	bf00      	nop
 800342c:	f7ff ffde 	bl	80033ec <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	d8f7      	bhi.n	800342c <HAL_Delay+0x28>
  {
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000000c 	.word	0x2000000c

0800344c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e033      	b.n	80034ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fb84 	bl	8002b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003492:	f023 0302 	bic.w	r3, r3, #2
 8003496:	f043 0202 	orr.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f93a 	bl	8003718 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80034ba:	e001      	b.n	80034c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e105      	b.n	80036fc <HAL_ADC_ConfigChannel+0x228>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d925      	bls.n	800354c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68d9      	ldr	r1, [r3, #12]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	3b1e      	subs	r3, #30
 8003516:	2207      	movs	r2, #7
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43da      	mvns	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	400a      	ands	r2, r1
 8003524:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68d9      	ldr	r1, [r3, #12]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	4603      	mov	r3, r0
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4403      	add	r3, r0
 800353e:	3b1e      	subs	r3, #30
 8003540:	409a      	lsls	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	e022      	b.n	8003592 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6919      	ldr	r1, [r3, #16]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	4613      	mov	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	2207      	movs	r2, #7
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	400a      	ands	r2, r1
 800356e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6919      	ldr	r1, [r3, #16]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	4618      	mov	r0, r3
 8003582:	4603      	mov	r3, r0
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4403      	add	r3, r0
 8003588:	409a      	lsls	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d824      	bhi.n	80035e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	3b05      	subs	r3, #5
 80035ac:	221f      	movs	r2, #31
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	400a      	ands	r2, r1
 80035ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4618      	mov	r0, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	3b05      	subs	r3, #5
 80035d6:	fa00 f203 	lsl.w	r2, r0, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035e2:	e04c      	b.n	800367e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d824      	bhi.n	8003636 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	3b23      	subs	r3, #35	@ 0x23
 80035fe:	221f      	movs	r2, #31
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43da      	mvns	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	400a      	ands	r2, r1
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	4618      	mov	r0, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	3b23      	subs	r3, #35	@ 0x23
 8003628:	fa00 f203 	lsl.w	r2, r0, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
 8003634:	e023      	b.n	800367e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	3b41      	subs	r3, #65	@ 0x41
 8003648:	221f      	movs	r2, #31
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43da      	mvns	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	400a      	ands	r2, r1
 8003656:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	4618      	mov	r0, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	3b41      	subs	r3, #65	@ 0x41
 8003672:	fa00 f203 	lsl.w	r2, r0, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800367e:	4b22      	ldr	r3, [pc, #136]	@ (8003708 <HAL_ADC_ConfigChannel+0x234>)
 8003680:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a21      	ldr	r2, [pc, #132]	@ (800370c <HAL_ADC_ConfigChannel+0x238>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d109      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x1cc>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b12      	cmp	r3, #18
 8003692:	d105      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	@ (800370c <HAL_ADC_ConfigChannel+0x238>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d123      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x21e>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d003      	beq.n	80036ba <HAL_ADC_ConfigChannel+0x1e6>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b11      	cmp	r3, #17
 80036b8:	d11b      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d111      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ce:	4b10      	ldr	r3, [pc, #64]	@ (8003710 <HAL_ADC_ConfigChannel+0x23c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <HAL_ADC_ConfigChannel+0x240>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	0c9a      	lsrs	r2, r3, #18
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036e4:	e002      	b.n	80036ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f9      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40012300 	.word	0x40012300
 800370c:	40012000 	.word	0x40012000
 8003710:	20000004 	.word	0x20000004
 8003714:	431bde83 	.word	0x431bde83

08003718 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003720:	4b79      	ldr	r3, [pc, #484]	@ (8003908 <ADC_Init+0x1f0>)
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800374c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	021a      	lsls	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	4a58      	ldr	r2, [pc, #352]	@ (800390c <ADC_Init+0x1f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	e00f      	b.n	8003816 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003814:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0202 	bic.w	r2, r2, #2
 8003824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7e1b      	ldrb	r3, [r3, #24]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003852:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003862:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	3b01      	subs	r3, #1
 8003870:	035a      	lsls	r2, r3, #13
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e007      	b.n	800388c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800389a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	051a      	lsls	r2, r3, #20
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038ce:	025a      	lsls	r2, r3, #9
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	029a      	lsls	r2, r3, #10
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40012300 	.word	0x40012300
 800390c:	0f000001 	.word	0x0f000001

08003910 <__NVIC_SetPriorityGrouping>:
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	@ (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_SetPriority>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	db0a      	blt.n	80039da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	490c      	ldr	r1, [pc, #48]	@ (80039fc <__NVIC_SetPriority+0x4c>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	440b      	add	r3, r1
 80039d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039d8:	e00a      	b.n	80039f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4908      	ldr	r1, [pc, #32]	@ (8003a00 <__NVIC_SetPriority+0x50>)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3b04      	subs	r3, #4
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	761a      	strb	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <NVIC_EncodePriority>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	@ 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f1c3 0307 	rsb	r3, r3, #7
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf28      	it	cs
 8003a22:	2304      	movcs	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d902      	bls.n	8003a34 <NVIC_EncodePriority+0x30>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3b03      	subs	r3, #3
 8003a32:	e000      	b.n	8003a36 <NVIC_EncodePriority+0x32>
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43d9      	mvns	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	4313      	orrs	r3, r2
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	@ 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7c:	d301      	bcc.n	8003a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00f      	b.n	8003aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <SysTick_Config+0x40>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f7ff ff8e 	bl	80039b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <SysTick_Config+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9a:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <SysTick_Config+0x40>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010

08003ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff29 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad8:	f7ff ff3e 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff8e 	bl	8003a04 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5d 	bl	80039b0 <__NVIC_SetPriority>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff31 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffa2 	bl	8003a6c <SysTick_Config>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff fc54 	bl	80033ec <HAL_GetTick>
 8003b44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d008      	beq.n	8003b64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2280      	movs	r2, #128	@ 0x80
 8003b56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e052      	b.n	8003c0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0216 	bic.w	r2, r2, #22
 8003b72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d103      	bne.n	8003b94 <HAL_DMA_Abort+0x62>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0208 	bic.w	r2, r2, #8
 8003ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb4:	e013      	b.n	8003bde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bb6:	f7ff fc19 	bl	80033ec <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d90c      	bls.n	8003bde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e015      	b.n	8003c0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e4      	bne.n	8003bb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf0:	223f      	movs	r2, #63	@ 0x3f
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d004      	beq.n	8003c30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2280      	movs	r2, #128	@ 0x80
 8003c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e00c      	b.n	8003c4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2205      	movs	r2, #5
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e16b      	b.n	8003f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c74:	2201      	movs	r2, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f040 815a 	bne.w	8003f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d005      	beq.n	8003caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d130      	bne.n	8003d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 0201 	and.w	r2, r3, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d017      	beq.n	8003d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d123      	bne.n	8003d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80b4 	beq.w	8003f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b60      	ldr	r3, [pc, #384]	@ (8003f64 <HAL_GPIO_Init+0x30c>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f64 <HAL_GPIO_Init+0x30c>)
 8003de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dee:	4b5d      	ldr	r3, [pc, #372]	@ (8003f64 <HAL_GPIO_Init+0x30c>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003f68 <HAL_GPIO_Init+0x310>)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a52      	ldr	r2, [pc, #328]	@ (8003f6c <HAL_GPIO_Init+0x314>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02b      	beq.n	8003e7e <HAL_GPIO_Init+0x226>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a51      	ldr	r2, [pc, #324]	@ (8003f70 <HAL_GPIO_Init+0x318>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d025      	beq.n	8003e7a <HAL_GPIO_Init+0x222>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a50      	ldr	r2, [pc, #320]	@ (8003f74 <HAL_GPIO_Init+0x31c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01f      	beq.n	8003e76 <HAL_GPIO_Init+0x21e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4f      	ldr	r2, [pc, #316]	@ (8003f78 <HAL_GPIO_Init+0x320>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d019      	beq.n	8003e72 <HAL_GPIO_Init+0x21a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4e      	ldr	r2, [pc, #312]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_GPIO_Init+0x216>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4d      	ldr	r2, [pc, #308]	@ (8003f80 <HAL_GPIO_Init+0x328>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00d      	beq.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4c      	ldr	r2, [pc, #304]	@ (8003f84 <HAL_GPIO_Init+0x32c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <HAL_GPIO_Init+0x20e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4b      	ldr	r2, [pc, #300]	@ (8003f88 <HAL_GPIO_Init+0x330>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_GPIO_Init+0x20a>
 8003e5e:	2307      	movs	r3, #7
 8003e60:	e00e      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e62:	2308      	movs	r3, #8
 8003e64:	e00c      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e66:	2306      	movs	r3, #6
 8003e68:	e00a      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e90:	4935      	ldr	r1, [pc, #212]	@ (8003f68 <HAL_GPIO_Init+0x310>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ec2:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ec8:	4b30      	ldr	r3, [pc, #192]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eec:	4a27      	ldr	r2, [pc, #156]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ef2:	4b26      	ldr	r3, [pc, #152]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f16:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f40:	4a12      	ldr	r2, [pc, #72]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	f67f ae90 	bls.w	8003c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	@ 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40021400 	.word	0x40021400
 8003f84:	40021800 	.word	0x40021800
 8003f88:	40021c00 	.word	0x40021c00
 8003f8c:	40013c00 	.word	0x40013c00

08003f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa0:	787b      	ldrb	r3, [r7, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fac:	e003      	b.n	8003fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	041a      	lsls	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	041a      	lsls	r2, r3, #16
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	43d9      	mvns	r1, r3
 8003fe0:	887b      	ldrh	r3, [r7, #2]
 8003fe2:	400b      	ands	r3, r1
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e12b      	b.n	8004262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fe fe1e 	bl	8002c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	@ 0x24
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800404a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800405a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800405c:	f001 fc1e 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8004060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4a81      	ldr	r2, [pc, #516]	@ (800426c <HAL_I2C_Init+0x274>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d807      	bhi.n	800407c <HAL_I2C_Init+0x84>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a80      	ldr	r2, [pc, #512]	@ (8004270 <HAL_I2C_Init+0x278>)
 8004070:	4293      	cmp	r3, r2
 8004072:	bf94      	ite	ls
 8004074:	2301      	movls	r3, #1
 8004076:	2300      	movhi	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e006      	b.n	800408a <HAL_I2C_Init+0x92>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a7d      	ldr	r2, [pc, #500]	@ (8004274 <HAL_I2C_Init+0x27c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0e7      	b.n	8004262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a78      	ldr	r2, [pc, #480]	@ (8004278 <HAL_I2C_Init+0x280>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0c9b      	lsrs	r3, r3, #18
 800409c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a6a      	ldr	r2, [pc, #424]	@ (800426c <HAL_I2C_Init+0x274>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d802      	bhi.n	80040cc <HAL_I2C_Init+0xd4>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	3301      	adds	r3, #1
 80040ca:	e009      	b.n	80040e0 <HAL_I2C_Init+0xe8>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	4a69      	ldr	r2, [pc, #420]	@ (800427c <HAL_I2C_Init+0x284>)
 80040d8:	fba2 2303 	umull	r2, r3, r2, r3
 80040dc:	099b      	lsrs	r3, r3, #6
 80040de:	3301      	adds	r3, #1
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	495c      	ldr	r1, [pc, #368]	@ (800426c <HAL_I2C_Init+0x274>)
 80040fc:	428b      	cmp	r3, r1
 80040fe:	d819      	bhi.n	8004134 <HAL_I2C_Init+0x13c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e59      	subs	r1, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fbb1 f3f3 	udiv	r3, r1, r3
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004114:	400b      	ands	r3, r1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_I2C_Init+0x138>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1e59      	subs	r1, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fbb1 f3f3 	udiv	r3, r1, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	e051      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 8004130:	2304      	movs	r3, #4
 8004132:	e04f      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d111      	bne.n	8004160 <HAL_I2C_Init+0x168>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e58      	subs	r0, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	440b      	add	r3, r1
 800414a:	fbb0 f3f3 	udiv	r3, r0, r3
 800414e:	3301      	adds	r3, #1
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e012      	b.n	8004186 <HAL_I2C_Init+0x18e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	0099      	lsls	r1, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Init+0x196>
 800418a:	2301      	movs	r3, #1
 800418c:	e022      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <HAL_I2C_Init+0x1bc>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e58      	subs	r0, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	440b      	add	r3, r1
 80041a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041b2:	e00f      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1e58      	subs	r0, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	0099      	lsls	r1, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ca:	3301      	adds	r3, #1
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6809      	ldr	r1, [r1, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004202:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6911      	ldr	r1, [r2, #16]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	430b      	orrs	r3, r1
 8004216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	000186a0 	.word	0x000186a0
 8004270:	001e847f 	.word	0x001e847f
 8004274:	003d08ff 	.word	0x003d08ff
 8004278:	431bde83 	.word	0x431bde83
 800427c:	10624dd3 	.word	0x10624dd3

08004280 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	460b      	mov	r3, r1
 800428e:	817b      	strh	r3, [r7, #10]
 8004290:	4613      	mov	r3, r2
 8004292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff f8aa 	bl	80033ec <HAL_GetTick>
 8004298:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	f040 80e0 	bne.w	8004468 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2319      	movs	r3, #25
 80042ae:	2201      	movs	r2, #1
 80042b0:	4970      	ldr	r1, [pc, #448]	@ (8004474 <HAL_I2C_Master_Transmit+0x1f4>)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fc64 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	e0d3      	b.n	800446a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_I2C_Master_Transmit+0x50>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0cc      	b.n	800446a <HAL_I2C_Master_Transmit+0x1ea>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d007      	beq.n	80042f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2221      	movs	r2, #33	@ 0x21
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2210      	movs	r2, #16
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	893a      	ldrh	r2, [r7, #8]
 8004326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a50      	ldr	r2, [pc, #320]	@ (8004478 <HAL_I2C_Master_Transmit+0x1f8>)
 8004336:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004338:	8979      	ldrh	r1, [r7, #10]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 face 	bl	80048e0 <I2C_MasterRequestWrite>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e08d      	b.n	800446a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004364:	e066      	b.n	8004434 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fd22 	bl	8004db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e06b      	b.n	800446a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11b      	bne.n	8004408 <HAL_I2C_Master_Transmit+0x188>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	6a39      	ldr	r1, [r7, #32]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fd19 	bl	8004e44 <I2C_WaitOnBTFFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	2b04      	cmp	r3, #4
 800441e:	d107      	bne.n	8004430 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e01a      	b.n	800446a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d194      	bne.n	8004366 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	00100002 	.word	0x00100002
 8004478:	ffff0000 	.word	0xffff0000

0800447c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08c      	sub	sp, #48	@ 0x30
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	817b      	strh	r3, [r7, #10]
 800448c:	4613      	mov	r3, r2
 800448e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7fe ffac 	bl	80033ec <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	f040 8217 	bne.w	80048d2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2319      	movs	r3, #25
 80044aa:	2201      	movs	r2, #1
 80044ac:	497c      	ldr	r1, [pc, #496]	@ (80046a0 <HAL_I2C_Master_Receive+0x224>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fb66 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
 80044bc:	e20a      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_I2C_Master_Receive+0x50>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e203      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d007      	beq.n	80044f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2222      	movs	r2, #34	@ 0x22
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2210      	movs	r2, #16
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a5c      	ldr	r2, [pc, #368]	@ (80046a4 <HAL_I2C_Master_Receive+0x228>)
 8004532:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004534:	8979      	ldrh	r1, [r7, #10]
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fa52 	bl	80049e4 <I2C_MasterRequestRead>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e1c4      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d113      	bne.n	800457a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	623b      	str	r3, [r7, #32]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e198      	b.n	80048ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457e:	2b01      	cmp	r3, #1
 8004580:	d11b      	bne.n	80045ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e178      	b.n	80048ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d11b      	bne.n	80045fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	e158      	b.n	80048ac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004620:	e144      	b.n	80048ac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	2b03      	cmp	r3, #3
 8004628:	f200 80f1 	bhi.w	800480e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	2b01      	cmp	r3, #1
 8004632:	d123      	bne.n	800467c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004636:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fc4b 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e145      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800467a:	e117      	b.n	80048ac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004680:	2b02      	cmp	r3, #2
 8004682:	d14e      	bne.n	8004722 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	2200      	movs	r2, #0
 800468c:	4906      	ldr	r1, [pc, #24]	@ (80046a8 <HAL_I2C_Master_Receive+0x22c>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fa76 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e11a      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
 800469e:	bf00      	nop
 80046a0:	00100002 	.word	0x00100002
 80046a4:	ffff0000 	.word	0xffff0000
 80046a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004720:	e0c4      	b.n	80048ac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	2200      	movs	r2, #0
 800472a:	496c      	ldr	r1, [pc, #432]	@ (80048dc <HAL_I2C_Master_Receive+0x460>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa27 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0cb      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	2200      	movs	r2, #0
 8004786:	4955      	ldr	r1, [pc, #340]	@ (80048dc <HAL_I2C_Master_Receive+0x460>)
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f9f9 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e09d      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800480c:	e04e      	b.n	80048ac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004810:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fb5e 	bl	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e058      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b04      	cmp	r3, #4
 8004860:	d124      	bne.n	80048ac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004878:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f aeb6 	bne.w	8004622 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	@ 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	00010004 	.word	0x00010004

080048e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	460b      	mov	r3, r1
 80048ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d006      	beq.n	800490a <I2C_MasterRequestWrite+0x2a>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d003      	beq.n	800490a <I2C_MasterRequestWrite+0x2a>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004908:	d108      	bne.n	800491c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e00b      	b.n	8004934 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004920:	2b12      	cmp	r3, #18
 8004922:	d107      	bne.n	8004934 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004932:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f91d 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00d      	beq.n	8004968 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800495a:	d103      	bne.n	8004964 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e035      	b.n	80049d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004970:	d108      	bne.n	8004984 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004980:	611a      	str	r2, [r3, #16]
 8004982:	e01b      	b.n	80049bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004984:	897b      	ldrh	r3, [r7, #10]
 8004986:	11db      	asrs	r3, r3, #7
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f003 0306 	and.w	r3, r3, #6
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f063 030f 	orn	r3, r3, #15
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	490e      	ldr	r1, [pc, #56]	@ (80049dc <I2C_MasterRequestWrite+0xfc>)
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f966 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e010      	b.n	80049d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	4907      	ldr	r1, [pc, #28]	@ (80049e0 <I2C_MasterRequestWrite+0x100>)
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f956 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	00010008 	.word	0x00010008
 80049e0:	00010002 	.word	0x00010002

080049e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	460b      	mov	r3, r1
 80049f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d006      	beq.n	8004a1e <I2C_MasterRequestRead+0x3a>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d003      	beq.n	8004a1e <I2C_MasterRequestRead+0x3a>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a1c:	d108      	bne.n	8004a30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e00b      	b.n	8004a48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	2b11      	cmp	r3, #17
 8004a36:	d107      	bne.n	8004a48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f893 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a6e:	d103      	bne.n	8004a78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e079      	b.n	8004b70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a84:	d108      	bne.n	8004a98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a86:	897b      	ldrh	r3, [r7, #10]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	611a      	str	r2, [r3, #16]
 8004a96:	e05f      	b.n	8004b58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a98:	897b      	ldrh	r3, [r7, #10]
 8004a9a:	11db      	asrs	r3, r3, #7
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f003 0306 	and.w	r3, r3, #6
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f063 030f 	orn	r3, r3, #15
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4930      	ldr	r1, [pc, #192]	@ (8004b78 <I2C_MasterRequestRead+0x194>)
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f8dc 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e054      	b.n	8004b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4929      	ldr	r1, [pc, #164]	@ (8004b7c <I2C_MasterRequestRead+0x198>)
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f8cc 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e044      	b.n	8004b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f831 	bl	8004b80 <I2C_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b32:	d103      	bne.n	8004b3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b3a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e017      	b.n	8004b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b40:	897b      	ldrh	r3, [r7, #10]
 8004b42:	11db      	asrs	r3, r3, #7
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0306 	and.w	r3, r3, #6
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f063 030e 	orn	r3, r3, #14
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4907      	ldr	r1, [pc, #28]	@ (8004b7c <I2C_MasterRequestRead+0x198>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f888 	bl	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	00010008 	.word	0x00010008
 8004b7c:	00010002 	.word	0x00010002

08004b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b90:	e048      	b.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d044      	beq.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fe fc27 	bl	80033ec <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d139      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d10d      	bne.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	e00c      	b.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d116      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e023      	b.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10d      	bne.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	e00c      	b.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	43da      	mvns	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d093      	beq.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c82:	e071      	b.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c92:	d123      	bne.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f043 0204 	orr.w	r2, r3, #4
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e067      	b.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d041      	beq.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce4:	f7fe fb82 	bl	80033ec <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d302      	bcc.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d136      	bne.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10c      	bne.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e00b      	b.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e021      	b.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10c      	bne.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e00b      	b.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	43da      	mvns	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f47f af6d 	bne.w	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc0:	e034      	b.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f8e3 	bl	8004f8e <I2C_IsAcknowledgeFailed>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e034      	b.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d028      	beq.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fe fb07 	bl	80033ec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11d      	bne.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b80      	cmp	r3, #128	@ 0x80
 8004dfc:	d016      	beq.n	8004e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e007      	b.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d1c3      	bne.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e50:	e034      	b.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f89b 	bl	8004f8e <I2C_IsAcknowledgeFailed>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e034      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d028      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fe fabf 	bl	80033ec <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11d      	bne.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d016      	beq.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d1c3      	bne.n	8004e52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee0:	e049      	b.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d119      	bne.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0210 	mvn.w	r2, #16
 8004ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e030      	b.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fe fa62 	bl	80033ec <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11d      	bne.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b40      	cmp	r3, #64	@ 0x40
 8004f46:	d016      	beq.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e007      	b.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d1ae      	bne.n	8004ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa4:	d11b      	bne.n	8004fde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_PWR_EnableBkUpAccess+0x20>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004ffe:	687b      	ldr	r3, [r7, #4]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	420e0020 	.word	0x420e0020
 8005010:	40007000 	.word	0x40007000

08005014 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800501a:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <HAL_PWR_DisableBkUpAccess+0x20>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005026:	687b      	ldr	r3, [r7, #4]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	420e0020 	.word	0x420e0020
 8005038:	40007000 	.word	0x40007000

0800503c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e267      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d075      	beq.n	8005146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800505a:	4b88      	ldr	r3, [pc, #544]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b04      	cmp	r3, #4
 8005064:	d00c      	beq.n	8005080 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005066:	4b85      	ldr	r3, [pc, #532]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800506e:	2b08      	cmp	r3, #8
 8005070:	d112      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005072:	4b82      	ldr	r3, [pc, #520]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507e:	d10b      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	4b7e      	ldr	r3, [pc, #504]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d05b      	beq.n	8005144 <HAL_RCC_OscConfig+0x108>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d157      	bne.n	8005144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e242      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCC_OscConfig+0x74>
 80050a2:	4b76      	ldr	r3, [pc, #472]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a75      	ldr	r2, [pc, #468]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e01d      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x98>
 80050ba:	4b70      	ldr	r3, [pc, #448]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6f      	ldr	r2, [pc, #444]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b6d      	ldr	r3, [pc, #436]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a6c      	ldr	r2, [pc, #432]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e00b      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050d4:	4b69      	ldr	r3, [pc, #420]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a68      	ldr	r2, [pc, #416]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b66      	ldr	r3, [pc, #408]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a65      	ldr	r2, [pc, #404]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80050e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d013      	beq.n	800511c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fe f97a 	bl	80033ec <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fe f976 	bl	80033ec <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	@ 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e207      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	4b5b      	ldr	r3, [pc, #364]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0xc0>
 800511a:	e014      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fe f966 	bl	80033ec <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005124:	f7fe f962 	bl	80033ec <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	@ 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e1f3      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	4b51      	ldr	r3, [pc, #324]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0xe8>
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d063      	beq.n	800521a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005152:	4b4a      	ldr	r3, [pc, #296]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515e:	4b47      	ldr	r3, [pc, #284]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516a:	4b44      	ldr	r3, [pc, #272]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d116      	bne.n	80051a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	4b41      	ldr	r3, [pc, #260]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_RCC_OscConfig+0x152>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e1c7      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518e:	4b3b      	ldr	r3, [pc, #236]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4937      	ldr	r1, [pc, #220]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a2:	e03a      	b.n	800521a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ac:	4b34      	ldr	r3, [pc, #208]	@ (8005280 <HAL_RCC_OscConfig+0x244>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fe f91b 	bl	80033ec <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fe f917 	bl	80033ec <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e1a8      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d8:	4b28      	ldr	r3, [pc, #160]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4925      	ldr	r1, [pc, #148]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]
 80051ec:	e015      	b.n	800521a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <HAL_RCC_OscConfig+0x244>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fe f8fa 	bl	80033ec <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fe f8f6 	bl	80033ec <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e187      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d036      	beq.n	8005294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522e:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <HAL_RCC_OscConfig+0x248>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fe f8da 	bl	80033ec <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523c:	f7fe f8d6 	bl	80033ec <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e167      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <HAL_RCC_OscConfig+0x240>)
 8005250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f0      	beq.n	800523c <HAL_RCC_OscConfig+0x200>
 800525a:	e01b      	b.n	8005294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525c:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <HAL_RCC_OscConfig+0x248>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005262:	f7fe f8c3 	bl	80033ec <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	e00e      	b.n	8005288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526a:	f7fe f8bf 	bl	80033ec <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d907      	bls.n	8005288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e150      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
 800527c:	40023800 	.word	0x40023800
 8005280:	42470000 	.word	0x42470000
 8005284:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005288:	4b88      	ldr	r3, [pc, #544]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 800528a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ea      	bne.n	800526a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8097 	beq.w	80053d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a6:	4b81      	ldr	r3, [pc, #516]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	4b7d      	ldr	r3, [pc, #500]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	4a7c      	ldr	r2, [pc, #496]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052c2:	4b7a      	ldr	r3, [pc, #488]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b77      	ldr	r3, [pc, #476]	@ (80054b0 <HAL_RCC_OscConfig+0x474>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b74      	ldr	r3, [pc, #464]	@ (80054b0 <HAL_RCC_OscConfig+0x474>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a73      	ldr	r2, [pc, #460]	@ (80054b0 <HAL_RCC_OscConfig+0x474>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fe f87f 	bl	80033ec <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fe f87b 	bl	80033ec <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e10c      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b6a      	ldr	r3, [pc, #424]	@ (80054b0 <HAL_RCC_OscConfig+0x474>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x2ea>
 8005318:	4b64      	ldr	r3, [pc, #400]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a63      	ldr	r2, [pc, #396]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
 8005324:	e01c      	b.n	8005360 <HAL_RCC_OscConfig+0x324>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b05      	cmp	r3, #5
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x30c>
 800532e:	4b5f      	ldr	r3, [pc, #380]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	4a5e      	ldr	r2, [pc, #376]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	6713      	str	r3, [r2, #112]	@ 0x70
 800533a:	4b5c      	ldr	r3, [pc, #368]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	4a5b      	ldr	r2, [pc, #364]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6713      	str	r3, [r2, #112]	@ 0x70
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0x324>
 8005348:	4b58      	ldr	r3, [pc, #352]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534c:	4a57      	ldr	r2, [pc, #348]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	6713      	str	r3, [r2, #112]	@ 0x70
 8005354:	4b55      	ldr	r3, [pc, #340]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	4a54      	ldr	r2, [pc, #336]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 800535a:	f023 0304 	bic.w	r3, r3, #4
 800535e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fe f840 	bl	80033ec <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fe f83c 	bl	80033ec <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0cb      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	4b49      	ldr	r3, [pc, #292]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ee      	beq.n	8005370 <HAL_RCC_OscConfig+0x334>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005394:	f7fe f82a 	bl	80033ec <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe f826 	bl	80033ec <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0b5      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	4b3e      	ldr	r3, [pc, #248]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1ee      	bne.n	800539c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c4:	4b39      	ldr	r3, [pc, #228]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	4a38      	ldr	r2, [pc, #224]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80053ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a1 	beq.w	800551c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053da:	4b34      	ldr	r3, [pc, #208]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d05c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d141      	bne.n	8005472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ee:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <HAL_RCC_OscConfig+0x478>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f4:	f7fd fffa 	bl	80033ec <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fc:	f7fd fff6 	bl	80033ec <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e087      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	4b27      	ldr	r3, [pc, #156]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	019b      	lsls	r3, r3, #6
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	3b01      	subs	r3, #1
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	491b      	ldr	r1, [pc, #108]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005444:	4b1b      	ldr	r3, [pc, #108]	@ (80054b4 <HAL_RCC_OscConfig+0x478>)
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fd ffcf 	bl	80033ec <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005452:	f7fd ffcb 	bl	80033ec <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e05c      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005464:	4b11      	ldr	r3, [pc, #68]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x416>
 8005470:	e054      	b.n	800551c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005472:	4b10      	ldr	r3, [pc, #64]	@ (80054b4 <HAL_RCC_OscConfig+0x478>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fd ffb8 	bl	80033ec <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005480:	f7fd ffb4 	bl	80033ec <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e045      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005492:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <HAL_RCC_OscConfig+0x470>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x444>
 800549e:	e03d      	b.n	800551c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e038      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
 80054ac:	40023800 	.word	0x40023800
 80054b0:	40007000 	.word	0x40007000
 80054b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005528 <HAL_RCC_OscConfig+0x4ec>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d028      	beq.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d121      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d11a      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d111      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	3b01      	subs	r3, #1
 8005502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d107      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800

0800552c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0cc      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005540:	4b68      	ldr	r3, [pc, #416]	@ (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d90c      	bls.n	8005568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554e:	4b65      	ldr	r3, [pc, #404]	@ (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005556:	4b63      	ldr	r3, [pc, #396]	@ (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d001      	beq.n	8005568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0b8      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d020      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005580:	4b59      	ldr	r3, [pc, #356]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4a58      	ldr	r2, [pc, #352]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800558a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005598:	4b53      	ldr	r3, [pc, #332]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a52      	ldr	r2, [pc, #328]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a4:	4b50      	ldr	r3, [pc, #320]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	494d      	ldr	r1, [pc, #308]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d044      	beq.n	800564c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	4b47      	ldr	r3, [pc, #284]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d119      	bne.n	800560a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e07f      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ea:	4b3f      	ldr	r3, [pc, #252]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e06f      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fa:	4b3b      	ldr	r3, [pc, #236]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e067      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800560a:	4b37      	ldr	r3, [pc, #220]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f023 0203 	bic.w	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4934      	ldr	r1, [pc, #208]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	4313      	orrs	r3, r2
 800561a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800561c:	f7fd fee6 	bl	80033ec <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005622:	e00a      	b.n	800563a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005624:	f7fd fee2 	bl	80033ec <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e04f      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563a:	4b2b      	ldr	r3, [pc, #172]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 020c 	and.w	r2, r3, #12
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	429a      	cmp	r2, r3
 800564a:	d1eb      	bne.n	8005624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800564c:	4b25      	ldr	r3, [pc, #148]	@ (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d20c      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565a:	4b22      	ldr	r3, [pc, #136]	@ (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	4b20      	ldr	r3, [pc, #128]	@ (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d001      	beq.n	8005674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e032      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005680:	4b19      	ldr	r3, [pc, #100]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4916      	ldr	r1, [pc, #88]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	490e      	ldr	r1, [pc, #56]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056b2:	f000 f821 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 80056b6:	4602      	mov	r2, r0
 80056b8:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	490a      	ldr	r1, [pc, #40]	@ (80056ec <HAL_RCC_ClockConfig+0x1c0>)
 80056c4:	5ccb      	ldrb	r3, [r1, r3]
 80056c6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ca:	4a09      	ldr	r2, [pc, #36]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c4>)
 80056cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056ce:	4b09      	ldr	r3, [pc, #36]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fd fe46 	bl	8003364 <HAL_InitTick>

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023c00 	.word	0x40023c00
 80056e8:	40023800 	.word	0x40023800
 80056ec:	0800e0b0 	.word	0x0800e0b0
 80056f0:	20000004 	.word	0x20000004
 80056f4:	20000008 	.word	0x20000008

080056f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056fc:	b090      	sub	sp, #64	@ 0x40
 80056fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005710:	4b59      	ldr	r3, [pc, #356]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	d00d      	beq.n	8005738 <HAL_RCC_GetSysClockFreq+0x40>
 800571c:	2b08      	cmp	r3, #8
 800571e:	f200 80a1 	bhi.w	8005864 <HAL_RCC_GetSysClockFreq+0x16c>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x34>
 8005726:	2b04      	cmp	r3, #4
 8005728:	d003      	beq.n	8005732 <HAL_RCC_GetSysClockFreq+0x3a>
 800572a:	e09b      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800572c:	4b53      	ldr	r3, [pc, #332]	@ (800587c <HAL_RCC_GetSysClockFreq+0x184>)
 800572e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005730:	e09b      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005732:	4b53      	ldr	r3, [pc, #332]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x188>)
 8005734:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005736:	e098      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005738:	4b4f      	ldr	r3, [pc, #316]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005740:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005742:	4b4d      	ldr	r3, [pc, #308]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d028      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574e:	4b4a      	ldr	r3, [pc, #296]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	099b      	lsrs	r3, r3, #6
 8005754:	2200      	movs	r2, #0
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	627a      	str	r2, [r7, #36]	@ 0x24
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005760:	2100      	movs	r1, #0
 8005762:	4b47      	ldr	r3, [pc, #284]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x188>)
 8005764:	fb03 f201 	mul.w	r2, r3, r1
 8005768:	2300      	movs	r3, #0
 800576a:	fb00 f303 	mul.w	r3, r0, r3
 800576e:	4413      	add	r3, r2
 8005770:	4a43      	ldr	r2, [pc, #268]	@ (8005880 <HAL_RCC_GetSysClockFreq+0x188>)
 8005772:	fba0 1202 	umull	r1, r2, r0, r2
 8005776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005778:	460a      	mov	r2, r1
 800577a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800577c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800577e:	4413      	add	r3, r2
 8005780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005784:	2200      	movs	r2, #0
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	61fa      	str	r2, [r7, #28]
 800578a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800578e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005792:	f7fb fa29 	bl	8000be8 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4613      	mov	r3, r2
 800579c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800579e:	e053      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a0:	4b35      	ldr	r3, [pc, #212]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	099b      	lsrs	r3, r3, #6
 80057a6:	2200      	movs	r2, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	617a      	str	r2, [r7, #20]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057b2:	f04f 0b00 	mov.w	fp, #0
 80057b6:	4652      	mov	r2, sl
 80057b8:	465b      	mov	r3, fp
 80057ba:	f04f 0000 	mov.w	r0, #0
 80057be:	f04f 0100 	mov.w	r1, #0
 80057c2:	0159      	lsls	r1, r3, #5
 80057c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c8:	0150      	lsls	r0, r2, #5
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	ebb2 080a 	subs.w	r8, r2, sl
 80057d2:	eb63 090b 	sbc.w	r9, r3, fp
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057ea:	ebb2 0408 	subs.w	r4, r2, r8
 80057ee:	eb63 0509 	sbc.w	r5, r3, r9
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	00eb      	lsls	r3, r5, #3
 80057fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005800:	00e2      	lsls	r2, r4, #3
 8005802:	4614      	mov	r4, r2
 8005804:	461d      	mov	r5, r3
 8005806:	eb14 030a 	adds.w	r3, r4, sl
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	eb45 030b 	adc.w	r3, r5, fp
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800581e:	4629      	mov	r1, r5
 8005820:	028b      	lsls	r3, r1, #10
 8005822:	4621      	mov	r1, r4
 8005824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005828:	4621      	mov	r1, r4
 800582a:	028a      	lsls	r2, r1, #10
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	2200      	movs	r2, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	60fa      	str	r2, [r7, #12]
 8005838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800583c:	f7fb f9d4 	bl	8000be8 <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4613      	mov	r3, r2
 8005846:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005848:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	3301      	adds	r3, #1
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005858:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005862:	e002      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <HAL_RCC_GetSysClockFreq+0x184>)
 8005866:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800586c:	4618      	mov	r0, r3
 800586e:	3740      	adds	r7, #64	@ 0x40
 8005870:	46bd      	mov	sp, r7
 8005872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	00f42400 	.word	0x00f42400
 8005880:	017d7840 	.word	0x017d7840

08005884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005888:	4b03      	ldr	r3, [pc, #12]	@ (8005898 <HAL_RCC_GetHCLKFreq+0x14>)
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000004 	.word	0x20000004

0800589c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058a0:	f7ff fff0 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	0a9b      	lsrs	r3, r3, #10
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4903      	ldr	r1, [pc, #12]	@ (80058c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40023800 	.word	0x40023800
 80058c0:	0800e0c0 	.word	0x0800e0c0

080058c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058c8:	f7ff ffdc 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	0b5b      	lsrs	r3, r3, #13
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	4903      	ldr	r1, [pc, #12]	@ (80058e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058da:	5ccb      	ldrb	r3, [r1, r3]
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40023800 	.word	0x40023800
 80058e8:	0800e0c0 	.word	0x0800e0c0

080058ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e041      	b.n	8005982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fd f9ec 	bl	8002cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f000 fe54 	bl	80065d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e041      	b.n	8005a20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f839 	bl	8005a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f000 fe05 	bl	80065d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x24>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e022      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d109      	bne.n	8005a7a <HAL_TIM_PWM_Start+0x3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e015      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x58>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e008      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07c      	b.n	8005ba8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start+0x82>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005abc:	e013      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start+0x92>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005acc:	e00b      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_PWM_Start+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005adc:	e003      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2201      	movs	r2, #1
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 f992 	bl	8006e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2d      	ldr	r2, [pc, #180]	@ (8005bb0 <HAL_TIM_PWM_Start+0x174>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_PWM_Start+0xcc>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb4 <HAL_TIM_PWM_Start+0x178>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_PWM_Start+0xd0>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_PWM_Start+0xd2>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a22      	ldr	r2, [pc, #136]	@ (8005bb0 <HAL_TIM_PWM_Start+0x174>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d022      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b34:	d01d      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb8 <HAL_TIM_PWM_Start+0x17c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d018      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <HAL_TIM_PWM_Start+0x180>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_TIM_PWM_Start+0x184>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a16      	ldr	r2, [pc, #88]	@ (8005bb4 <HAL_TIM_PWM_Start+0x178>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a18      	ldr	r2, [pc, #96]	@ (8005bc4 <HAL_TIM_PWM_Start+0x188>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a16      	ldr	r2, [pc, #88]	@ (8005bc8 <HAL_TIM_PWM_Start+0x18c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d111      	bne.n	8005b96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d010      	beq.n	8005ba6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b94:	e007      	b.n	8005ba6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40001800 	.word	0x40001800

08005bcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e041      	b.n	8005c62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fd f974 	bl	8002ee0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 fce4 	bl	80065d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e097      	b.n	8005dae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fd f88a 	bl	8002dac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cae:	f023 0307 	bic.w	r3, r3, #7
 8005cb2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 fc8a 	bl	80065d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cec:	f023 0303 	bic.w	r3, r3, #3
 8005cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d0a:	f023 030c 	bic.w	r3, r3, #12
 8005d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	4313      	orrs	r3, r2
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	011a      	lsls	r2, r3, #4
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	031b      	lsls	r3, r3, #12
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dc6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005dce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dd6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dde:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d110      	bne.n	8005e08 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d102      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dec:	7b7b      	ldrb	r3, [r7, #13]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d001      	beq.n	8005df6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e069      	b.n	8005eca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e06:	e031      	b.n	8005e6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d110      	bne.n	8005e30 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0e:	7bbb      	ldrb	r3, [r7, #14]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d102      	bne.n	8005e1a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e14:	7b3b      	ldrb	r3, [r7, #12]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d001      	beq.n	8005e1e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e055      	b.n	8005eca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e2e:	e01d      	b.n	8005e6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d108      	bne.n	8005e48 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d105      	bne.n	8005e48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e3c:	7b7b      	ldrb	r3, [r7, #13]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d102      	bne.n	8005e48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e42:	7b3b      	ldrb	r3, [r7, #12]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d001      	beq.n	8005e4c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e03e      	b.n	8005eca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_TIM_Encoder_Start+0xc4>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d008      	beq.n	8005e8a <HAL_TIM_Encoder_Start+0xd4>
 8005e78:	e00f      	b.n	8005e9a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	2100      	movs	r1, #0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 ffc8 	bl	8006e18 <TIM_CCxChannelCmd>
      break;
 8005e88:	e016      	b.n	8005eb8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	2104      	movs	r1, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 ffc0 	bl	8006e18 <TIM_CCxChannelCmd>
      break;
 8005e98:	e00e      	b.n	8005eb8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 ffb8 	bl	8006e18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	2104      	movs	r1, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 ffb1 	bl	8006e18 <TIM_CCxChannelCmd>
      break;
 8005eb6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d020      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01b      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f06f 0202 	mvn.w	r2, #2
 8005f06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7fb fefb 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8005f22:	e005      	b.n	8005f30 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fb39 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fb40 	bl	80065b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d020      	beq.n	8005f82 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01b      	beq.n	8005f82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f06f 0204 	mvn.w	r2, #4
 8005f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fb fed5 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8005f6e:	e005      	b.n	8005f7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fb13 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fb1a 	bl	80065b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01b      	beq.n	8005fce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0208 	mvn.w	r2, #8
 8005f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fb feaf 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8005fba:	e005      	b.n	8005fc8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 faed 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 faf4 	bl	80065b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d020      	beq.n	800601a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01b      	beq.n	800601a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f06f 0210 	mvn.w	r2, #16
 8005fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2208      	movs	r2, #8
 8005ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7fb fe89 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8006006:	e005      	b.n	8006014 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fac7 	bl	800659c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 face 	bl	80065b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00c      	beq.n	800603e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0201 	mvn.w	r2, #1
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 faa5 	bl	8006588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 ffd9 	bl	8007014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fa9f 	bl	80065c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f06f 0220 	mvn.w	r2, #32
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 ffab 	bl	8007000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e088      	b.n	80061e2 <HAL_TIM_IC_ConfigChannel+0x130>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d11b      	bne.n	8006116 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80060ee:	f000 fccf 	bl	8006a90 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699a      	ldr	r2, [r3, #24]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 020c 	bic.w	r2, r2, #12
 8006100:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6999      	ldr	r1, [r3, #24]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	619a      	str	r2, [r3, #24]
 8006114:	e060      	b.n	80061d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b04      	cmp	r3, #4
 800611a:	d11c      	bne.n	8006156 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800612c:	f000 fd53 	bl	8006bd6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800613e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6999      	ldr	r1, [r3, #24]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	619a      	str	r2, [r3, #24]
 8006154:	e040      	b.n	80061d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b08      	cmp	r3, #8
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800616c:	f000 fda0 	bl	8006cb0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69da      	ldr	r2, [r3, #28]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 020c 	bic.w	r2, r2, #12
 800617e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69d9      	ldr	r1, [r3, #28]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	61da      	str	r2, [r3, #28]
 8006192:	e021      	b.n	80061d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d11c      	bne.n	80061d4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80061aa:	f000 fdbd 	bl	8006d28 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80061bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	021a      	lsls	r2, r3, #8
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	61da      	str	r2, [r3, #28]
 80061d2:	e001      	b.n	80061d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006206:	2302      	movs	r3, #2
 8006208:	e0ae      	b.n	8006368 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	f200 809f 	bhi.w	8006358 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800621a:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006255 	.word	0x08006255
 8006224:	08006359 	.word	0x08006359
 8006228:	08006359 	.word	0x08006359
 800622c:	08006359 	.word	0x08006359
 8006230:	08006295 	.word	0x08006295
 8006234:	08006359 	.word	0x08006359
 8006238:	08006359 	.word	0x08006359
 800623c:	08006359 	.word	0x08006359
 8006240:	080062d7 	.word	0x080062d7
 8006244:	08006359 	.word	0x08006359
 8006248:	08006359 	.word	0x08006359
 800624c:	08006359 	.word	0x08006359
 8006250:	08006317 	.word	0x08006317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fa68 	bl	8006730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0208 	orr.w	r2, r2, #8
 800626e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0204 	bic.w	r2, r2, #4
 800627e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6999      	ldr	r1, [r3, #24]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	619a      	str	r2, [r3, #24]
      break;
 8006292:	e064      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fab8 	bl	8006810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6999      	ldr	r1, [r3, #24]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	021a      	lsls	r2, r3, #8
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	619a      	str	r2, [r3, #24]
      break;
 80062d4:	e043      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fb0d 	bl	80068fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0208 	orr.w	r2, r2, #8
 80062f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0204 	bic.w	r2, r2, #4
 8006300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69d9      	ldr	r1, [r3, #28]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	61da      	str	r2, [r3, #28]
      break;
 8006314:	e023      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fb61 	bl	80069e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69d9      	ldr	r1, [r3, #28]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	021a      	lsls	r2, r3, #8
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	61da      	str	r2, [r3, #28]
      break;
 8006356:	e002      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	75fb      	strb	r3, [r7, #23]
      break;
 800635c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006366:	7dfb      	ldrb	r3, [r7, #23]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_TIM_ConfigClockSource+0x1c>
 8006388:	2302      	movs	r3, #2
 800638a:	e0b4      	b.n	80064f6 <HAL_TIM_ConfigClockSource+0x186>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c4:	d03e      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0xd4>
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ca:	f200 8087 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d2:	f000 8086 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x172>
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063da:	d87f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 80063dc:	2b70      	cmp	r3, #112	@ 0x70
 80063de:	d01a      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0xa6>
 80063e0:	2b70      	cmp	r3, #112	@ 0x70
 80063e2:	d87b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 80063e4:	2b60      	cmp	r3, #96	@ 0x60
 80063e6:	d050      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x11a>
 80063e8:	2b60      	cmp	r3, #96	@ 0x60
 80063ea:	d877      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 80063ec:	2b50      	cmp	r3, #80	@ 0x50
 80063ee:	d03c      	beq.n	800646a <HAL_TIM_ConfigClockSource+0xfa>
 80063f0:	2b50      	cmp	r3, #80	@ 0x50
 80063f2:	d873      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 80063f4:	2b40      	cmp	r3, #64	@ 0x40
 80063f6:	d058      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x13a>
 80063f8:	2b40      	cmp	r3, #64	@ 0x40
 80063fa:	d86f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 80063fc:	2b30      	cmp	r3, #48	@ 0x30
 80063fe:	d064      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15a>
 8006400:	2b30      	cmp	r3, #48	@ 0x30
 8006402:	d86b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d060      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15a>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d867      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d05c      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15a>
 8006410:	2b10      	cmp	r3, #16
 8006412:	d05a      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15a>
 8006414:	e062      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006426:	f000 fcd7 	bl	8006dd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	609a      	str	r2, [r3, #8]
      break;
 8006442:	e04f      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006454:	f000 fcc0 	bl	8006dd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006466:	609a      	str	r2, [r3, #8]
      break;
 8006468:	e03c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006476:	461a      	mov	r2, r3
 8006478:	f000 fb7e 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2150      	movs	r1, #80	@ 0x50
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fc8d 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006488:	e02c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006496:	461a      	mov	r2, r3
 8006498:	f000 fbda 	bl	8006c50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2160      	movs	r1, #96	@ 0x60
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fc7d 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80064a8:	e01c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 fb5e 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2140      	movs	r1, #64	@ 0x40
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fc6d 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80064c8:	e00c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f000 fc64 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80064da:	e003      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
      break;
 80064e0:	e000      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b0c      	cmp	r3, #12
 8006512:	d831      	bhi.n	8006578 <HAL_TIM_ReadCapturedValue+0x78>
 8006514:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006551 	.word	0x08006551
 8006520:	08006579 	.word	0x08006579
 8006524:	08006579 	.word	0x08006579
 8006528:	08006579 	.word	0x08006579
 800652c:	0800655b 	.word	0x0800655b
 8006530:	08006579 	.word	0x08006579
 8006534:	08006579 	.word	0x08006579
 8006538:	08006579 	.word	0x08006579
 800653c:	08006565 	.word	0x08006565
 8006540:	08006579 	.word	0x08006579
 8006544:	08006579 	.word	0x08006579
 8006548:	08006579 	.word	0x08006579
 800654c:	0800656f 	.word	0x0800656f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006556:	60fb      	str	r3, [r7, #12]

      break;
 8006558:	e00f      	b.n	800657a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	60fb      	str	r3, [r7, #12]

      break;
 8006562:	e00a      	b.n	800657a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656a:	60fb      	str	r3, [r7, #12]

      break;
 800656c:	e005      	b.n	800657a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006574:	60fb      	str	r3, [r7, #12]

      break;
 8006576:	e000      	b.n	800657a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006578:	bf00      	nop
  }

  return tmpreg;
 800657a:	68fb      	ldr	r3, [r7, #12]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a46      	ldr	r2, [pc, #280]	@ (8006704 <TIM_Base_SetConfig+0x12c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f6:	d00f      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a43      	ldr	r2, [pc, #268]	@ (8006708 <TIM_Base_SetConfig+0x130>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00b      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a42      	ldr	r2, [pc, #264]	@ (800670c <TIM_Base_SetConfig+0x134>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d007      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a41      	ldr	r2, [pc, #260]	@ (8006710 <TIM_Base_SetConfig+0x138>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_Base_SetConfig+0x40>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a40      	ldr	r2, [pc, #256]	@ (8006714 <TIM_Base_SetConfig+0x13c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d108      	bne.n	800662a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a35      	ldr	r2, [pc, #212]	@ (8006704 <TIM_Base_SetConfig+0x12c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d02b      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006638:	d027      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a32      	ldr	r2, [pc, #200]	@ (8006708 <TIM_Base_SetConfig+0x130>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d023      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a31      	ldr	r2, [pc, #196]	@ (800670c <TIM_Base_SetConfig+0x134>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01f      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a30      	ldr	r2, [pc, #192]	@ (8006710 <TIM_Base_SetConfig+0x138>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01b      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a2f      	ldr	r2, [pc, #188]	@ (8006714 <TIM_Base_SetConfig+0x13c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d017      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2e      	ldr	r2, [pc, #184]	@ (8006718 <TIM_Base_SetConfig+0x140>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2d      	ldr	r2, [pc, #180]	@ (800671c <TIM_Base_SetConfig+0x144>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a2c      	ldr	r2, [pc, #176]	@ (8006720 <TIM_Base_SetConfig+0x148>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a2b      	ldr	r2, [pc, #172]	@ (8006724 <TIM_Base_SetConfig+0x14c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2a      	ldr	r2, [pc, #168]	@ (8006728 <TIM_Base_SetConfig+0x150>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a29      	ldr	r2, [pc, #164]	@ (800672c <TIM_Base_SetConfig+0x154>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a10      	ldr	r2, [pc, #64]	@ (8006704 <TIM_Base_SetConfig+0x12c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0xf8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a12      	ldr	r2, [pc, #72]	@ (8006714 <TIM_Base_SetConfig+0x13c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d103      	bne.n	80066d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d105      	bne.n	80066f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f023 0201 	bic.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	611a      	str	r2, [r3, #16]
  }
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40010000 	.word	0x40010000
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40000c00 	.word	0x40000c00
 8006714:	40010400 	.word	0x40010400
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800
 8006724:	40001800 	.word	0x40001800
 8006728:	40001c00 	.word	0x40001c00
 800672c:	40002000 	.word	0x40002000

08006730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f023 0201 	bic.w	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f023 0302 	bic.w	r3, r3, #2
 8006778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a20      	ldr	r2, [pc, #128]	@ (8006808 <TIM_OC1_SetConfig+0xd8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_OC1_SetConfig+0x64>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a1f      	ldr	r2, [pc, #124]	@ (800680c <TIM_OC1_SetConfig+0xdc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d10c      	bne.n	80067ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0308 	bic.w	r3, r3, #8
 800679a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 0304 	bic.w	r3, r3, #4
 80067ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a15      	ldr	r2, [pc, #84]	@ (8006808 <TIM_OC1_SetConfig+0xd8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC1_SetConfig+0x8e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a14      	ldr	r2, [pc, #80]	@ (800680c <TIM_OC1_SetConfig+0xdc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d111      	bne.n	80067e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40010000 	.word	0x40010000
 800680c:	40010400 	.word	0x40010400

08006810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f023 0210 	bic.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0320 	bic.w	r3, r3, #32
 800685a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a22      	ldr	r2, [pc, #136]	@ (80068f4 <TIM_OC2_SetConfig+0xe4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC2_SetConfig+0x68>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a21      	ldr	r2, [pc, #132]	@ (80068f8 <TIM_OC2_SetConfig+0xe8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d10d      	bne.n	8006894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <TIM_OC2_SetConfig+0xe4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_OC2_SetConfig+0x94>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a16      	ldr	r2, [pc, #88]	@ (80068f8 <TIM_OC2_SetConfig+0xe8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d113      	bne.n	80068cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40010400 	.word	0x40010400

080068fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a21      	ldr	r2, [pc, #132]	@ (80069dc <TIM_OC3_SetConfig+0xe0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_OC3_SetConfig+0x66>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a20      	ldr	r2, [pc, #128]	@ (80069e0 <TIM_OC3_SetConfig+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10d      	bne.n	800697e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800697c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <TIM_OC3_SetConfig+0xe0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_OC3_SetConfig+0x92>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a15      	ldr	r2, [pc, #84]	@ (80069e0 <TIM_OC3_SetConfig+0xe4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d113      	bne.n	80069b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800699c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40010400 	.word	0x40010400

080069e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a12      	ldr	r2, [pc, #72]	@ (8006a88 <TIM_OC4_SetConfig+0xa4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC4_SetConfig+0x68>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a11      	ldr	r2, [pc, #68]	@ (8006a8c <TIM_OC4_SetConfig+0xa8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d109      	bne.n	8006a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40010400 	.word	0x40010400

08006a90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f023 0201 	bic.w	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a28      	ldr	r2, [pc, #160]	@ (8006b5c <TIM_TI1_SetConfig+0xcc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01b      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac4:	d017      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a25      	ldr	r2, [pc, #148]	@ (8006b60 <TIM_TI1_SetConfig+0xd0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a24      	ldr	r2, [pc, #144]	@ (8006b64 <TIM_TI1_SetConfig+0xd4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4a23      	ldr	r2, [pc, #140]	@ (8006b68 <TIM_TI1_SetConfig+0xd8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00b      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a22      	ldr	r2, [pc, #136]	@ (8006b6c <TIM_TI1_SetConfig+0xdc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a21      	ldr	r2, [pc, #132]	@ (8006b70 <TIM_TI1_SetConfig+0xe0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_TI1_SetConfig+0x66>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4a20      	ldr	r2, [pc, #128]	@ (8006b74 <TIM_TI1_SetConfig+0xe4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d101      	bne.n	8006afa <TIM_TI1_SetConfig+0x6a>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <TIM_TI1_SetConfig+0x6c>
 8006afa:	2300      	movs	r3, #0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	e003      	b.n	8006b1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f023 030a 	bic.w	r3, r3, #10
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 030a 	and.w	r3, r3, #10
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40001800 	.word	0x40001800

08006b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 030a 	bic.w	r3, r3, #10
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f023 0210 	bic.w	r2, r3, #16
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	031b      	lsls	r3, r3, #12
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	621a      	str	r2, [r3, #32]
}
 8006c44:	bf00      	nop
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f023 0210 	bic.w	r2, r3, #16
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	031b      	lsls	r3, r3, #12
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f023 0303 	bic.w	r3, r3, #3
 8006cdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006d00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	031b      	lsls	r3, r3, #12
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	031b      	lsls	r3, r3, #12
 8006d80:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f043 0307 	orr.w	r3, r3, #7
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
	...

08006e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e05a      	b.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a21      	ldr	r2, [pc, #132]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d022      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec8:	d01d      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1d      	ldr	r2, [pc, #116]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a18      	ldr	r2, [pc, #96]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a15      	ldr	r2, [pc, #84]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d10c      	bne.n	8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40001800 	.word	0x40001800

08006f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e03d      	b.n	8006ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e042      	b.n	80070c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fb ffd0 	bl	8002ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	@ 0x24
 8007058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800706a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fe91 	bl	8007d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	@ 0x28
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	4613      	mov	r3, r2
 80070d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d175      	bne.n	80071d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <HAL_UART_Transmit+0x2c>
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e06e      	b.n	80071d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2221      	movs	r2, #33	@ 0x21
 8007102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007106:	f7fc f971 	bl	80033ec <HAL_GetTick>
 800710a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	88fa      	ldrh	r2, [r7, #6]
 8007110:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007120:	d108      	bne.n	8007134 <HAL_UART_Transmit+0x6c>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d104      	bne.n	8007134 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	e003      	b.n	800713c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800713c:	e02e      	b.n	800719c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	2180      	movs	r1, #128	@ 0x80
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fbdb 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e03a      	b.n	80071d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10b      	bne.n	800717e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3302      	adds	r3, #2
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	e007      	b.n	800718e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	3301      	adds	r3, #1
 800718c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1cb      	bne.n	800713e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2200      	movs	r2, #0
 80071ae:	2140      	movs	r1, #64	@ 0x40
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 fba7 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e006      	b.n	80071d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	e000      	b.n	80071d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071d4:	2302      	movs	r3, #2
  }
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3720      	adds	r7, #32
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d112      	bne.n	800721e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_UART_Receive_IT+0x26>
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e00b      	b.n	8007220 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	461a      	mov	r2, r3
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fbce 	bl	80079b6 <UART_Start_Receive_IT>
 800721a:	4603      	mov	r3, r0
 800721c:	e000      	b.n	8007220 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800721e:	2302      	movs	r3, #2
  }
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b09a      	sub	sp, #104	@ 0x68
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007246:	667b      	str	r3, [r7, #100]	@ 0x64
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007250:	657a      	str	r2, [r7, #84]	@ 0x54
 8007252:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007256:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800725e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e5      	bne.n	8007230 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3314      	adds	r3, #20
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f023 0301 	bic.w	r3, r3, #1
 800727a:	663b      	str	r3, [r7, #96]	@ 0x60
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3314      	adds	r3, #20
 8007282:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007284:	643a      	str	r2, [r7, #64]	@ 0x40
 8007286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800728a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e5      	bne.n	8007264 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729c:	2b01      	cmp	r3, #1
 800729e:	d119      	bne.n	80072d4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f023 0310 	bic.w	r3, r3, #16
 80072b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80072c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e5      	bne.n	80072a0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072de:	2b40      	cmp	r3, #64	@ 0x40
 80072e0:	d13f      	bne.n	8007362 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3314      	adds	r3, #20
 8007300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007302:	61ba      	str	r2, [r7, #24]
 8007304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6979      	ldr	r1, [r7, #20]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	613b      	str	r3, [r7, #16]
   return(result);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d013      	beq.n	8007346 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007322:	4a19      	ldr	r2, [pc, #100]	@ (8007388 <HAL_UART_AbortReceive_IT+0x160>)
 8007324:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732a:	4618      	mov	r0, r3
 800732c:	f7fc fc71 	bl	8003c12 <HAL_DMA_Abort_IT>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d022      	beq.n	800737c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007340:	4610      	mov	r0, r2
 8007342:	4798      	blx	r3
 8007344:	e01a      	b.n	800737c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fabc 	bl	80078d8 <HAL_UART_AbortReceiveCpltCallback>
 8007360:	e00c      	b.n	800737c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 faae 	bl	80078d8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3768      	adds	r7, #104	@ 0x68
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	08007b19 	.word	0x08007b19

0800738c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b0ba      	sub	sp, #232	@ 0xe8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10f      	bne.n	80073f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d009      	beq.n	80073f2 <HAL_UART_IRQHandler+0x66>
 80073de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fc14 	bl	8007c18 <UART_Receive_IT>
      return;
 80073f0:	e25b      	b.n	80078aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 80de 	beq.w	80075b8 <HAL_UART_IRQHandler+0x22c>
 80073fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80d1 	beq.w	80075b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <HAL_UART_IRQHandler+0xae>
 8007422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007432:	f043 0201 	orr.w	r2, r3, #1
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800743a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_UART_IRQHandler+0xd2>
 8007446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007456:	f043 0202 	orr.w	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <HAL_UART_IRQHandler+0xf6>
 800746a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747a:	f043 0204 	orr.w	r2, r3, #4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d011      	beq.n	80074b2 <HAL_UART_IRQHandler+0x126>
 800748e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d105      	bne.n	80074a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800749a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074aa:	f043 0208 	orr.w	r2, r3, #8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 81f2 	beq.w	80078a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d008      	beq.n	80074da <HAL_UART_IRQHandler+0x14e>
 80074c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb9f 	bl	8007c18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e4:	2b40      	cmp	r3, #64	@ 0x40
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <HAL_UART_IRQHandler+0x17a>
 80074fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d04f      	beq.n	80075a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa8f 	bl	8007a2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d141      	bne.n	800759e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3314      	adds	r3, #20
 8007520:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007538:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3314      	adds	r3, #20
 8007542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007546:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800754a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800755e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1d9      	bne.n	800751a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d013      	beq.n	8007596 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007572:	4a7e      	ldr	r2, [pc, #504]	@ (800776c <HAL_UART_IRQHandler+0x3e0>)
 8007574:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757a:	4618      	mov	r0, r3
 800757c:	f7fc fb49 	bl	8003c12 <HAL_DMA_Abort_IT>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d016      	beq.n	80075b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007594:	e00e      	b.n	80075b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f994 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	e00a      	b.n	80075b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f990 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a4:	e006      	b.n	80075b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f98c 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80075b2:	e175      	b.n	80078a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	bf00      	nop
    return;
 80075b6:	e173      	b.n	80078a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075bc:	2b01      	cmp	r3, #1
 80075be:	f040 814f 	bne.w	8007860 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c6:	f003 0310 	and.w	r3, r3, #16
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 8148 	beq.w	8007860 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8141 	beq.w	8007860 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fe:	2b40      	cmp	r3, #64	@ 0x40
 8007600:	f040 80b6 	bne.w	8007770 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8145 	beq.w	80078a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800761e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007622:	429a      	cmp	r2, r3
 8007624:	f080 813e 	bcs.w	80078a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800762e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800763a:	f000 8088 	beq.w	800774e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	330c      	adds	r3, #12
 8007644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800765c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800766a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800766e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007676:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1d9      	bne.n	800763e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3314      	adds	r3, #20
 8007690:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800769a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3314      	adds	r3, #20
 80076aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e1      	bne.n	800768a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3314      	adds	r3, #20
 80076cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3314      	adds	r3, #20
 80076e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e3      	bne.n	80076c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800771c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800771e:	f023 0310 	bic.w	r3, r3, #16
 8007722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007730:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007732:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800773e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e3      	bne.n	800770c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007748:	4618      	mov	r0, r3
 800774a:	f7fc f9f2 	bl	8003b32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800775c:	b29b      	uxth	r3, r3
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	b29b      	uxth	r3, r3
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f8c1 	bl	80078ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800776a:	e09b      	b.n	80078a4 <HAL_UART_IRQHandler+0x518>
 800776c:	08007af1 	.word	0x08007af1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007778:	b29b      	uxth	r3, r3
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 808e 	beq.w	80078a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800778c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8089 	beq.w	80078a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	330c      	adds	r3, #12
 80077b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80077bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e3      	bne.n	8007796 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3314      	adds	r3, #20
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	623b      	str	r3, [r7, #32]
   return(result);
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	f023 0301 	bic.w	r3, r3, #1
 80077e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3314      	adds	r3, #20
 80077ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80077f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e3      	bne.n	80077ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60fb      	str	r3, [r7, #12]
   return(result);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	330c      	adds	r3, #12
 8007834:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007838:	61fa      	str	r2, [r7, #28]
 800783a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	69b9      	ldr	r1, [r7, #24]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	617b      	str	r3, [r7, #20]
   return(result);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e3      	bne.n	8007814 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007852:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f847 	bl	80078ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800785e:	e023      	b.n	80078a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007868:	2b00      	cmp	r3, #0
 800786a:	d009      	beq.n	8007880 <HAL_UART_IRQHandler+0x4f4>
 800786c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f965 	bl	8007b48 <UART_Transmit_IT>
    return;
 800787e:	e014      	b.n	80078aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <HAL_UART_IRQHandler+0x51e>
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9a5 	bl	8007be8 <UART_EndTransmit_IT>
    return;
 800789e:	e004      	b.n	80078aa <HAL_UART_IRQHandler+0x51e>
    return;
 80078a0:	bf00      	nop
 80078a2:	e002      	b.n	80078aa <HAL_UART_IRQHandler+0x51e>
      return;
 80078a4:	bf00      	nop
 80078a6:	e000      	b.n	80078aa <HAL_UART_IRQHandler+0x51e>
      return;
 80078a8:	bf00      	nop
  }
}
 80078aa:	37e8      	adds	r7, #232	@ 0xe8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007914:	e03b      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d037      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fb fd65 	bl	80033ec <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	6a3a      	ldr	r2, [r7, #32]
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <UART_WaitOnFlagUntilTimeout+0x30>
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e03a      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d023      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b80      	cmp	r3, #128	@ 0x80
 800794a:	d020      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0x8a>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d01d      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b08      	cmp	r3, #8
 800795e:	d116      	bne.n	800798e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f857 	bl	8007a2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2208      	movs	r2, #8
 8007980:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e00f      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4013      	ands	r3, r2
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	429a      	cmp	r2, r3
 800799c:	bf0c      	ite	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	2300      	movne	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d0b4      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	88fa      	ldrh	r2, [r7, #6]
 80079d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2222      	movs	r2, #34	@ 0x22
 80079e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0201 	orr.w	r2, r2, #1
 8007a0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0220 	orr.w	r2, r2, #32
 8007a1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b095      	sub	sp, #84	@ 0x54
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	330c      	adds	r3, #12
 8007a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a52:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e5      	bne.n	8007a32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3314      	adds	r3, #20
 8007a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3314      	adds	r3, #20
 8007a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e5      	bne.n	8007a66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d119      	bne.n	8007ad6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f023 0310 	bic.w	r3, r3, #16
 8007ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ac2:	61ba      	str	r2, [r7, #24]
 8007ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6979      	ldr	r1, [r7, #20]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ae4:	bf00      	nop
 8007ae6:	3754      	adds	r7, #84	@ 0x54
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7ff feda 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff fecc 	bl	80078d8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b21      	cmp	r3, #33	@ 0x21
 8007b5a:	d13e      	bne.n	8007bda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b64:	d114      	bne.n	8007b90 <UART_Transmit_IT+0x48>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d110      	bne.n	8007b90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]
 8007b8e:	e008      	b.n	8007ba2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	1c59      	adds	r1, r3, #1
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6211      	str	r1, [r2, #32]
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10f      	bne.n	8007bd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e000      	b.n	8007bdc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bda:	2302      	movs	r3, #2
  }
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fe51 	bl	80078b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08c      	sub	sp, #48	@ 0x30
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b22      	cmp	r3, #34	@ 0x22
 8007c2a:	f040 80ae 	bne.w	8007d8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c36:	d117      	bne.n	8007c68 <UART_Receive_IT+0x50>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d113      	bne.n	8007c68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	1c9a      	adds	r2, r3, #2
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c66:	e026      	b.n	8007cb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c7a:	d007      	beq.n	8007c8c <UART_Receive_IT+0x74>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <UART_Receive_IT+0x82>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	e008      	b.n	8007cac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d15d      	bne.n	8007d86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0220 	bic.w	r2, r2, #32
 8007cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ce8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695a      	ldr	r2, [r3, #20]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0201 	bic.w	r2, r2, #1
 8007cf8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d135      	bne.n	8007d7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	330c      	adds	r3, #12
 8007d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	613b      	str	r3, [r7, #16]
   return(result);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f023 0310 	bic.w	r3, r3, #16
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	330c      	adds	r3, #12
 8007d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d36:	623a      	str	r2, [r7, #32]
 8007d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	69f9      	ldr	r1, [r7, #28]
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e5      	bne.n	8007d16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b10      	cmp	r3, #16
 8007d56:	d10a      	bne.n	8007d6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff fdb9 	bl	80078ec <HAL_UARTEx_RxEventCallback>
 8007d7a:	e002      	b.n	8007d82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7f9 fd8b 	bl	8001898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e002      	b.n	8007d8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e000      	b.n	8007d8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d8a:	2302      	movs	r3, #2
  }
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3730      	adds	r7, #48	@ 0x30
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d98:	b0c0      	sub	sp, #256	@ 0x100
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db0:	68d9      	ldr	r1, [r3, #12]
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	ea40 0301 	orr.w	r3, r0, r1
 8007dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007dec:	f021 010c 	bic.w	r1, r1, #12
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e0e:	6999      	ldr	r1, [r3, #24]
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	ea40 0301 	orr.w	r3, r0, r1
 8007e1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4b8f      	ldr	r3, [pc, #572]	@ (8008060 <UART_SetConfig+0x2cc>)
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d005      	beq.n	8007e34 <UART_SetConfig+0xa0>
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8008064 <UART_SetConfig+0x2d0>)
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d104      	bne.n	8007e3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e34:	f7fd fd46 	bl	80058c4 <HAL_RCC_GetPCLK2Freq>
 8007e38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e3c:	e003      	b.n	8007e46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e3e:	f7fd fd2d 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8007e42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e50:	f040 810c 	bne.w	800806c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e66:	4622      	mov	r2, r4
 8007e68:	462b      	mov	r3, r5
 8007e6a:	1891      	adds	r1, r2, r2
 8007e6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e6e:	415b      	adcs	r3, r3
 8007e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e76:	4621      	mov	r1, r4
 8007e78:	eb12 0801 	adds.w	r8, r2, r1
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	eb43 0901 	adc.w	r9, r3, r1
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e96:	4690      	mov	r8, r2
 8007e98:	4699      	mov	r9, r3
 8007e9a:	4623      	mov	r3, r4
 8007e9c:	eb18 0303 	adds.w	r3, r8, r3
 8007ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	eb49 0303 	adc.w	r3, r9, r3
 8007eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007eba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	18db      	adds	r3, r3, r3
 8007ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ec8:	4613      	mov	r3, r2
 8007eca:	eb42 0303 	adc.w	r3, r2, r3
 8007ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ed4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ed8:	f7f8 fe86 	bl	8000be8 <__aeabi_uldivmod>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4b61      	ldr	r3, [pc, #388]	@ (8008068 <UART_SetConfig+0x2d4>)
 8007ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	011c      	lsls	r4, r3, #4
 8007eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ef4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ef8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007efc:	4642      	mov	r2, r8
 8007efe:	464b      	mov	r3, r9
 8007f00:	1891      	adds	r1, r2, r2
 8007f02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f04:	415b      	adcs	r3, r3
 8007f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007f12:	4649      	mov	r1, r9
 8007f14:	eb43 0b01 	adc.w	fp, r3, r1
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f2c:	4692      	mov	sl, r2
 8007f2e:	469b      	mov	fp, r3
 8007f30:	4643      	mov	r3, r8
 8007f32:	eb1a 0303 	adds.w	r3, sl, r3
 8007f36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007f40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	18db      	adds	r3, r3, r3
 8007f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f5e:	4613      	mov	r3, r2
 8007f60:	eb42 0303 	adc.w	r3, r2, r3
 8007f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f6e:	f7f8 fe3b 	bl	8000be8 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	4b3b      	ldr	r3, [pc, #236]	@ (8008068 <UART_SetConfig+0x2d4>)
 8007f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	2264      	movs	r2, #100	@ 0x64
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	1acb      	subs	r3, r1, r3
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f8e:	4b36      	ldr	r3, [pc, #216]	@ (8008068 <UART_SetConfig+0x2d4>)
 8007f90:	fba3 2302 	umull	r2, r3, r3, r2
 8007f94:	095b      	lsrs	r3, r3, #5
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f9c:	441c      	add	r4, r3
 8007f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fa8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007fac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	1891      	adds	r1, r2, r2
 8007fb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007fb8:	415b      	adcs	r3, r3
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	1851      	adds	r1, r2, r1
 8007fc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	414b      	adcs	r3, r1
 8007fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007fd8:	4659      	mov	r1, fp
 8007fda:	00cb      	lsls	r3, r1, #3
 8007fdc:	4651      	mov	r1, sl
 8007fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	00ca      	lsls	r2, r1, #3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4603      	mov	r3, r0
 8007fec:	4642      	mov	r2, r8
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	eb42 0303 	adc.w	r3, r2, r3
 8007ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800800c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008014:	460b      	mov	r3, r1
 8008016:	18db      	adds	r3, r3, r3
 8008018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800801a:	4613      	mov	r3, r2
 800801c:	eb42 0303 	adc.w	r3, r2, r3
 8008020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008026:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800802a:	f7f8 fddd 	bl	8000be8 <__aeabi_uldivmod>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4b0d      	ldr	r3, [pc, #52]	@ (8008068 <UART_SetConfig+0x2d4>)
 8008034:	fba3 1302 	umull	r1, r3, r3, r2
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	2164      	movs	r1, #100	@ 0x64
 800803c:	fb01 f303 	mul.w	r3, r1, r3
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	3332      	adds	r3, #50	@ 0x32
 8008046:	4a08      	ldr	r2, [pc, #32]	@ (8008068 <UART_SetConfig+0x2d4>)
 8008048:	fba2 2303 	umull	r2, r3, r2, r3
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	f003 0207 	and.w	r2, r3, #7
 8008052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4422      	add	r2, r4
 800805a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800805c:	e106      	b.n	800826c <UART_SetConfig+0x4d8>
 800805e:	bf00      	nop
 8008060:	40011000 	.word	0x40011000
 8008064:	40011400 	.word	0x40011400
 8008068:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800806c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008070:	2200      	movs	r2, #0
 8008072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008076:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800807a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800807e:	4642      	mov	r2, r8
 8008080:	464b      	mov	r3, r9
 8008082:	1891      	adds	r1, r2, r2
 8008084:	6239      	str	r1, [r7, #32]
 8008086:	415b      	adcs	r3, r3
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
 800808a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800808e:	4641      	mov	r1, r8
 8008090:	1854      	adds	r4, r2, r1
 8008092:	4649      	mov	r1, r9
 8008094:	eb43 0501 	adc.w	r5, r3, r1
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	00eb      	lsls	r3, r5, #3
 80080a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080a6:	00e2      	lsls	r2, r4, #3
 80080a8:	4614      	mov	r4, r2
 80080aa:	461d      	mov	r5, r3
 80080ac:	4643      	mov	r3, r8
 80080ae:	18e3      	adds	r3, r4, r3
 80080b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080b4:	464b      	mov	r3, r9
 80080b6:	eb45 0303 	adc.w	r3, r5, r3
 80080ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80080da:	4629      	mov	r1, r5
 80080dc:	008b      	lsls	r3, r1, #2
 80080de:	4621      	mov	r1, r4
 80080e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080e4:	4621      	mov	r1, r4
 80080e6:	008a      	lsls	r2, r1, #2
 80080e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80080ec:	f7f8 fd7c 	bl	8000be8 <__aeabi_uldivmod>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4b60      	ldr	r3, [pc, #384]	@ (8008278 <UART_SetConfig+0x4e4>)
 80080f6:	fba3 2302 	umull	r2, r3, r3, r2
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	011c      	lsls	r4, r3, #4
 80080fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008102:	2200      	movs	r2, #0
 8008104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008108:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800810c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008110:	4642      	mov	r2, r8
 8008112:	464b      	mov	r3, r9
 8008114:	1891      	adds	r1, r2, r2
 8008116:	61b9      	str	r1, [r7, #24]
 8008118:	415b      	adcs	r3, r3
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008120:	4641      	mov	r1, r8
 8008122:	1851      	adds	r1, r2, r1
 8008124:	6139      	str	r1, [r7, #16]
 8008126:	4649      	mov	r1, r9
 8008128:	414b      	adcs	r3, r1
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008138:	4659      	mov	r1, fp
 800813a:	00cb      	lsls	r3, r1, #3
 800813c:	4651      	mov	r1, sl
 800813e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008142:	4651      	mov	r1, sl
 8008144:	00ca      	lsls	r2, r1, #3
 8008146:	4610      	mov	r0, r2
 8008148:	4619      	mov	r1, r3
 800814a:	4603      	mov	r3, r0
 800814c:	4642      	mov	r2, r8
 800814e:	189b      	adds	r3, r3, r2
 8008150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008154:	464b      	mov	r3, r9
 8008156:	460a      	mov	r2, r1
 8008158:	eb42 0303 	adc.w	r3, r2, r3
 800815c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	67bb      	str	r3, [r7, #120]	@ 0x78
 800816a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008178:	4649      	mov	r1, r9
 800817a:	008b      	lsls	r3, r1, #2
 800817c:	4641      	mov	r1, r8
 800817e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008182:	4641      	mov	r1, r8
 8008184:	008a      	lsls	r2, r1, #2
 8008186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800818a:	f7f8 fd2d 	bl	8000be8 <__aeabi_uldivmod>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4611      	mov	r1, r2
 8008194:	4b38      	ldr	r3, [pc, #224]	@ (8008278 <UART_SetConfig+0x4e4>)
 8008196:	fba3 2301 	umull	r2, r3, r3, r1
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	2264      	movs	r2, #100	@ 0x64
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	1acb      	subs	r3, r1, r3
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	3332      	adds	r3, #50	@ 0x32
 80081a8:	4a33      	ldr	r2, [pc, #204]	@ (8008278 <UART_SetConfig+0x4e4>)
 80081aa:	fba2 2303 	umull	r2, r3, r2, r3
 80081ae:	095b      	lsrs	r3, r3, #5
 80081b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081b4:	441c      	add	r4, r3
 80081b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ba:	2200      	movs	r2, #0
 80081bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80081be:	677a      	str	r2, [r7, #116]	@ 0x74
 80081c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	1891      	adds	r1, r2, r2
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	415b      	adcs	r3, r3
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081d4:	4641      	mov	r1, r8
 80081d6:	1851      	adds	r1, r2, r1
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	4649      	mov	r1, r9
 80081dc:	414b      	adcs	r3, r1
 80081de:	607b      	str	r3, [r7, #4]
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081ec:	4659      	mov	r1, fp
 80081ee:	00cb      	lsls	r3, r1, #3
 80081f0:	4651      	mov	r1, sl
 80081f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081f6:	4651      	mov	r1, sl
 80081f8:	00ca      	lsls	r2, r1, #3
 80081fa:	4610      	mov	r0, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	4642      	mov	r2, r8
 8008202:	189b      	adds	r3, r3, r2
 8008204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008206:	464b      	mov	r3, r9
 8008208:	460a      	mov	r2, r1
 800820a:	eb42 0303 	adc.w	r3, r2, r3
 800820e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	663b      	str	r3, [r7, #96]	@ 0x60
 800821a:	667a      	str	r2, [r7, #100]	@ 0x64
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008228:	4649      	mov	r1, r9
 800822a:	008b      	lsls	r3, r1, #2
 800822c:	4641      	mov	r1, r8
 800822e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008232:	4641      	mov	r1, r8
 8008234:	008a      	lsls	r2, r1, #2
 8008236:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800823a:	f7f8 fcd5 	bl	8000be8 <__aeabi_uldivmod>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4b0d      	ldr	r3, [pc, #52]	@ (8008278 <UART_SetConfig+0x4e4>)
 8008244:	fba3 1302 	umull	r1, r3, r3, r2
 8008248:	095b      	lsrs	r3, r3, #5
 800824a:	2164      	movs	r1, #100	@ 0x64
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	3332      	adds	r3, #50	@ 0x32
 8008256:	4a08      	ldr	r2, [pc, #32]	@ (8008278 <UART_SetConfig+0x4e4>)
 8008258:	fba2 2303 	umull	r2, r3, r2, r3
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	f003 020f 	and.w	r2, r3, #15
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4422      	add	r2, r4
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008272:	46bd      	mov	sp, r7
 8008274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008278:	51eb851f 	.word	0x51eb851f

0800827c <__NVIC_SetPriority>:
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800828c:	2b00      	cmp	r3, #0
 800828e:	db0a      	blt.n	80082a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	490c      	ldr	r1, [pc, #48]	@ (80082c8 <__NVIC_SetPriority+0x4c>)
 8008296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800829a:	0112      	lsls	r2, r2, #4
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	440b      	add	r3, r1
 80082a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80082a4:	e00a      	b.n	80082bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4908      	ldr	r1, [pc, #32]	@ (80082cc <__NVIC_SetPriority+0x50>)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	3b04      	subs	r3, #4
 80082b4:	0112      	lsls	r2, r2, #4
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	440b      	add	r3, r1
 80082ba:	761a      	strb	r2, [r3, #24]
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	e000e100 	.word	0xe000e100
 80082cc:	e000ed00 	.word	0xe000ed00

080082d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80082d4:	2100      	movs	r1, #0
 80082d6:	f06f 0004 	mvn.w	r0, #4
 80082da:	f7ff ffcf 	bl	800827c <__NVIC_SetPriority>
#endif
}
 80082de:	bf00      	nop
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ea:	f3ef 8305 	mrs	r3, IPSR
 80082ee:	603b      	str	r3, [r7, #0]
  return(result);
 80082f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082f6:	f06f 0305 	mvn.w	r3, #5
 80082fa:	607b      	str	r3, [r7, #4]
 80082fc:	e00c      	b.n	8008318 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008328 <osKernelInitialize+0x44>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d105      	bne.n	8008312 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008306:	4b08      	ldr	r3, [pc, #32]	@ (8008328 <osKernelInitialize+0x44>)
 8008308:	2201      	movs	r2, #1
 800830a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800830c:	2300      	movs	r3, #0
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	e002      	b.n	8008318 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008312:	f04f 33ff 	mov.w	r3, #4294967295
 8008316:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008318:	687b      	ldr	r3, [r7, #4]
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	2000052c 	.word	0x2000052c

0800832c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008332:	f3ef 8305 	mrs	r3, IPSR
 8008336:	603b      	str	r3, [r7, #0]
  return(result);
 8008338:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <osKernelStart+0x1a>
    stat = osErrorISR;
 800833e:	f06f 0305 	mvn.w	r3, #5
 8008342:	607b      	str	r3, [r7, #4]
 8008344:	e010      	b.n	8008368 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008346:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <osKernelStart+0x48>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d109      	bne.n	8008362 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800834e:	f7ff ffbf 	bl	80082d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008352:	4b08      	ldr	r3, [pc, #32]	@ (8008374 <osKernelStart+0x48>)
 8008354:	2202      	movs	r2, #2
 8008356:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008358:	f001 f87a 	bl	8009450 <vTaskStartScheduler>
      stat = osOK;
 800835c:	2300      	movs	r3, #0
 800835e:	607b      	str	r3, [r7, #4]
 8008360:	e002      	b.n	8008368 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008362:	f04f 33ff 	mov.w	r3, #4294967295
 8008366:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008368:	687b      	ldr	r3, [r7, #4]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	2000052c 	.word	0x2000052c

08008378 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b08e      	sub	sp, #56	@ 0x38
 800837c:	af04      	add	r7, sp, #16
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008384:	2300      	movs	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008388:	f3ef 8305 	mrs	r3, IPSR
 800838c:	617b      	str	r3, [r7, #20]
  return(result);
 800838e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008390:	2b00      	cmp	r3, #0
 8008392:	d17e      	bne.n	8008492 <osThreadNew+0x11a>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d07b      	beq.n	8008492 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800839a:	2380      	movs	r3, #128	@ 0x80
 800839c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800839e:	2318      	movs	r3, #24
 80083a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80083a6:	f04f 33ff 	mov.w	r3, #4294967295
 80083aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d045      	beq.n	800843e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <osThreadNew+0x48>
        name = attr->name;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d008      	beq.n	80083e6 <osThreadNew+0x6e>
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b38      	cmp	r3, #56	@ 0x38
 80083d8:	d805      	bhi.n	80083e6 <osThreadNew+0x6e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <osThreadNew+0x72>
        return (NULL);
 80083e6:	2300      	movs	r3, #0
 80083e8:	e054      	b.n	8008494 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	089b      	lsrs	r3, r3, #2
 80083f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00e      	beq.n	8008420 <osThreadNew+0xa8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b5b      	cmp	r3, #91	@ 0x5b
 8008408:	d90a      	bls.n	8008420 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800840e:	2b00      	cmp	r3, #0
 8008410:	d006      	beq.n	8008420 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <osThreadNew+0xa8>
        mem = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	e010      	b.n	8008442 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10c      	bne.n	8008442 <osThreadNew+0xca>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d108      	bne.n	8008442 <osThreadNew+0xca>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <osThreadNew+0xca>
          mem = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	e001      	b.n	8008442 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d110      	bne.n	800846a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008450:	9202      	str	r2, [sp, #8]
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6a3a      	ldr	r2, [r7, #32]
 800845c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fe1a 	bl	8009098 <xTaskCreateStatic>
 8008464:	4603      	mov	r3, r0
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	e013      	b.n	8008492 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d110      	bne.n	8008492 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	b29a      	uxth	r2, r3
 8008474:	f107 0310 	add.w	r3, r7, #16
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fe68 	bl	8009158 <xTaskCreate>
 8008488:	4603      	mov	r3, r0
 800848a:	2b01      	cmp	r3, #1
 800848c:	d001      	beq.n	8008492 <osThreadNew+0x11a>
            hTask = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008492:	693b      	ldr	r3, [r7, #16]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3728      	adds	r7, #40	@ 0x28
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a4:	f3ef 8305 	mrs	r3, IPSR
 80084a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80084aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <osDelay+0x1c>
    stat = osErrorISR;
 80084b0:	f06f 0305 	mvn.w	r3, #5
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e007      	b.n	80084c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 ff8e 	bl	80093e4 <vTaskDelay>
    }
  }

  return (stat);
 80084c8:	68fb      	ldr	r3, [r7, #12]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a07      	ldr	r2, [pc, #28]	@ (8008500 <vApplicationGetIdleTaskMemory+0x2c>)
 80084e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	4a06      	ldr	r2, [pc, #24]	@ (8008504 <vApplicationGetIdleTaskMemory+0x30>)
 80084ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2280      	movs	r2, #128	@ 0x80
 80084f0:	601a      	str	r2, [r3, #0]
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	20000530 	.word	0x20000530
 8008504:	2000058c 	.word	0x2000058c

08008508 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4a07      	ldr	r2, [pc, #28]	@ (8008534 <vApplicationGetTimerTaskMemory+0x2c>)
 8008518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4a06      	ldr	r2, [pc, #24]	@ (8008538 <vApplicationGetTimerTaskMemory+0x30>)
 800851e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008526:	601a      	str	r2, [r3, #0]
}
 8008528:	bf00      	nop
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	2000078c 	.word	0x2000078c
 8008538:	200007e8 	.word	0x200007e8

0800853c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f103 0208 	add.w	r2, r3, #8
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f04f 32ff 	mov.w	r2, #4294967295
 8008554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f103 0208 	add.w	r2, r3, #8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f103 0208 	add.w	r2, r3, #8
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085de:	b480      	push	{r7}
 80085e0:	b085      	sub	sp, #20
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f4:	d103      	bne.n	80085fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e00c      	b.n	8008618 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3308      	adds	r3, #8
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e002      	b.n	800860c <vListInsert+0x2e>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d2f6      	bcs.n	8008606 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6892      	ldr	r2, [r2, #8]
 8008666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6852      	ldr	r2, [r2, #4]
 8008670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	429a      	cmp	r2, r3
 800867a:	d103      	bne.n	8008684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	1e5a      	subs	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10b      	bne.n	80086d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	e7fd      	b.n	80086cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086d0:	f002 f87a 	bl	800a7c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008700:	3b01      	subs	r3, #1
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008706:	fb01 f303 	mul.w	r3, r1, r3
 800870a:	441a      	add	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	22ff      	movs	r2, #255	@ 0xff
 8008714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	22ff      	movs	r2, #255	@ 0xff
 800871c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d114      	bne.n	8008750 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01a      	beq.n	8008764 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3310      	adds	r3, #16
 8008732:	4618      	mov	r0, r3
 8008734:	f001 f91a 	bl	800996c <xTaskRemoveFromEventList>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d012      	beq.n	8008764 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800873e:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <xQueueGenericReset+0xd0>)
 8008740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	e009      	b.n	8008764 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3310      	adds	r3, #16
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fef1 	bl	800853c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3324      	adds	r3, #36	@ 0x24
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff feec 	bl	800853c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008764:	f002 f862 	bl	800a82c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008768:	2301      	movs	r3, #1
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08e      	sub	sp, #56	@ 0x38
 800877c:	af02      	add	r7, sp, #8
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	e7fd      	b.n	80087be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <xQueueGenericCreateStatic+0x56>
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <xQueueGenericCreateStatic+0x5a>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <xQueueGenericCreateStatic+0x5c>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10b      	bne.n	80087f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	623b      	str	r3, [r7, #32]
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	e7fd      	b.n	80087ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d102      	bne.n	80087fc <xQueueGenericCreateStatic+0x84>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <xQueueGenericCreateStatic+0x88>
 80087fc:	2301      	movs	r3, #1
 80087fe:	e000      	b.n	8008802 <xQueueGenericCreateStatic+0x8a>
 8008800:	2300      	movs	r3, #0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	61fb      	str	r3, [r7, #28]
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	e7fd      	b.n	800881a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800881e:	2350      	movs	r3, #80	@ 0x50
 8008820:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b50      	cmp	r3, #80	@ 0x50
 8008826:	d00b      	beq.n	8008840 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	61bb      	str	r3, [r7, #24]
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008840:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00d      	beq.n	8008868 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800884c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008854:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f805 	bl	8008872 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800886a:	4618      	mov	r0, r3
 800886c:	3730      	adds	r7, #48	@ 0x30
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	e002      	b.n	8008894 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088a0:	2101      	movs	r1, #1
 80088a2:	69b8      	ldr	r0, [r7, #24]
 80088a4:	f7ff fefe 	bl	80086a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08e      	sub	sp, #56	@ 0x38
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088c6:	2300      	movs	r3, #0
 80088c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <xQueueGenericSend+0x34>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	e7fd      	b.n	80088e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d103      	bne.n	80088fa <xQueueGenericSend+0x42>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <xQueueGenericSend+0x46>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <xQueueGenericSend+0x48>
 80088fe:	2300      	movs	r3, #0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10b      	bne.n	800891c <xQueueGenericSend+0x64>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	e7fd      	b.n	8008918 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d103      	bne.n	800892a <xQueueGenericSend+0x72>
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008926:	2b01      	cmp	r3, #1
 8008928:	d101      	bne.n	800892e <xQueueGenericSend+0x76>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <xQueueGenericSend+0x78>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10b      	bne.n	800894c <xQueueGenericSend+0x94>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	623b      	str	r3, [r7, #32]
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800894c:	f001 f9ce 	bl	8009cec <xTaskGetSchedulerState>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <xQueueGenericSend+0xa4>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <xQueueGenericSend+0xa8>
 800895c:	2301      	movs	r3, #1
 800895e:	e000      	b.n	8008962 <xQueueGenericSend+0xaa>
 8008960:	2300      	movs	r3, #0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <xQueueGenericSend+0xc6>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	61fb      	str	r3, [r7, #28]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800897e:	f001 ff23 	bl	800a7c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898a:	429a      	cmp	r2, r3
 800898c:	d302      	bcc.n	8008994 <xQueueGenericSend+0xdc>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d129      	bne.n	80089e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800899a:	f000 fa0f 	bl	8008dbc <prvCopyDataToQueue>
 800899e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d010      	beq.n	80089ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	3324      	adds	r3, #36	@ 0x24
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 ffdd 	bl	800996c <xTaskRemoveFromEventList>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d013      	beq.n	80089e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089b8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ab8 <xQueueGenericSend+0x200>)
 80089ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	e00a      	b.n	80089e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d007      	beq.n	80089e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089d0:	4b39      	ldr	r3, [pc, #228]	@ (8008ab8 <xQueueGenericSend+0x200>)
 80089d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089e0:	f001 ff24 	bl	800a82c <vPortExitCritical>
				return pdPASS;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e063      	b.n	8008ab0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d103      	bne.n	80089f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ee:	f001 ff1d 	bl	800a82c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e05c      	b.n	8008ab0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d106      	bne.n	8008a0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 f817 	bl	8009a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a06:	2301      	movs	r3, #1
 8008a08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a0a:	f001 ff0f 	bl	800a82c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a0e:	f000 fd87 	bl	8009520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a12:	f001 fed9 	bl	800a7c8 <vPortEnterCritical>
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a1c:	b25b      	sxtb	r3, r3
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d103      	bne.n	8008a2c <xQueueGenericSend+0x174>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a32:	b25b      	sxtb	r3, r3
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d103      	bne.n	8008a42 <xQueueGenericSend+0x18a>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a42:	f001 fef3 	bl	800a82c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a46:	1d3a      	adds	r2, r7, #4
 8008a48:	f107 0314 	add.w	r3, r7, #20
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 f806 	bl	8009a60 <xTaskCheckForTimeOut>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d124      	bne.n	8008aa4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a5c:	f000 faa6 	bl	8008fac <prvIsQueueFull>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d018      	beq.n	8008a98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	3310      	adds	r3, #16
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 ff2a 	bl	80098c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a76:	f000 fa31 	bl	8008edc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a7a:	f000 fd5f 	bl	800953c <xTaskResumeAll>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f47f af7c 	bne.w	800897e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a86:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab8 <xQueueGenericSend+0x200>)
 8008a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	e772      	b.n	800897e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a9a:	f000 fa1f 	bl	8008edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a9e:	f000 fd4d 	bl	800953c <xTaskResumeAll>
 8008aa2:	e76c      	b.n	800897e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aa6:	f000 fa19 	bl	8008edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aaa:	f000 fd47 	bl	800953c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008aae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3738      	adds	r7, #56	@ 0x38
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b090      	sub	sp, #64	@ 0x40
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10b      	bne.n	8008aec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	e7fd      	b.n	8008ae8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <xQueueGenericSendFromISR+0x3e>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <xQueueGenericSendFromISR+0x42>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <xQueueGenericSendFromISR+0x44>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10b      	bne.n	8008b1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	e7fd      	b.n	8008b18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d103      	bne.n	8008b2a <xQueueGenericSendFromISR+0x6e>
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d101      	bne.n	8008b2e <xQueueGenericSendFromISR+0x72>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <xQueueGenericSendFromISR+0x74>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10b      	bne.n	8008b4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	623b      	str	r3, [r7, #32]
}
 8008b46:	bf00      	nop
 8008b48:	bf00      	nop
 8008b4a:	e7fd      	b.n	8008b48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b4c:	f001 ff1c 	bl	800a988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b50:	f3ef 8211 	mrs	r2, BASEPRI
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	61fa      	str	r2, [r7, #28]
 8008b66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d302      	bcc.n	8008b7e <xQueueGenericSendFromISR+0xc2>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d12f      	bne.n	8008bde <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b94:	f000 f912 	bl	8008dbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d112      	bne.n	8008bc8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d016      	beq.n	8008bd8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bac:	3324      	adds	r3, #36	@ 0x24
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fedc 	bl	800996c <xTaskRemoveFromEventList>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00e      	beq.n	8008bd8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	e007      	b.n	8008bd8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008bcc:	3301      	adds	r3, #1
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	b25a      	sxtb	r2, r3
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008bdc:	e001      	b.n	8008be2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3740      	adds	r7, #64	@ 0x40
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08c      	sub	sp, #48	@ 0x30
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10b      	bne.n	8008c2a <xQueueReceive+0x32>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	623b      	str	r3, [r7, #32]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d103      	bne.n	8008c38 <xQueueReceive+0x40>
 8008c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <xQueueReceive+0x44>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e000      	b.n	8008c3e <xQueueReceive+0x46>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10b      	bne.n	8008c5a <xQueueReceive+0x62>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	61fb      	str	r3, [r7, #28]
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	e7fd      	b.n	8008c56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c5a:	f001 f847 	bl	8009cec <xTaskGetSchedulerState>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d102      	bne.n	8008c6a <xQueueReceive+0x72>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <xQueueReceive+0x76>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <xQueueReceive+0x78>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xQueueReceive+0x94>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	61bb      	str	r3, [r7, #24]
}
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	e7fd      	b.n	8008c88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c8c:	f001 fd9c 	bl	800a7c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d01f      	beq.n	8008cdc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ca0:	f000 f8f6 	bl	8008e90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	1e5a      	subs	r2, r3, #1
 8008ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008caa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00f      	beq.n	8008cd4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb6:	3310      	adds	r3, #16
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fe57 	bl	800996c <xTaskRemoveFromEventList>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8008db8 <xQueueReceive+0x1c0>)
 8008cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cd4:	f001 fdaa 	bl	800a82c <vPortExitCritical>
				return pdPASS;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e069      	b.n	8008db0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ce2:	f001 fda3 	bl	800a82c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e062      	b.n	8008db0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fe9d 	bl	8009a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cfe:	f001 fd95 	bl	800a82c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d02:	f000 fc0d 	bl	8009520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d06:	f001 fd5f 	bl	800a7c8 <vPortEnterCritical>
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d10:	b25b      	sxtb	r3, r3
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d103      	bne.n	8008d20 <xQueueReceive+0x128>
 8008d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d26:	b25b      	sxtb	r3, r3
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d103      	bne.n	8008d36 <xQueueReceive+0x13e>
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d36:	f001 fd79 	bl	800a82c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d3a:	1d3a      	adds	r2, r7, #4
 8008d3c:	f107 0310 	add.w	r3, r7, #16
 8008d40:	4611      	mov	r1, r2
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fe8c 	bl	8009a60 <xTaskCheckForTimeOut>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d123      	bne.n	8008d96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d50:	f000 f916 	bl	8008f80 <prvIsQueueEmpty>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d017      	beq.n	8008d8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5c:	3324      	adds	r3, #36	@ 0x24
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fdb0 	bl	80098c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d6a:	f000 f8b7 	bl	8008edc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d6e:	f000 fbe5 	bl	800953c <xTaskResumeAll>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d189      	bne.n	8008c8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008d78:	4b0f      	ldr	r3, [pc, #60]	@ (8008db8 <xQueueReceive+0x1c0>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	e780      	b.n	8008c8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d8c:	f000 f8a6 	bl	8008edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d90:	f000 fbd4 	bl	800953c <xTaskResumeAll>
 8008d94:	e77a      	b.n	8008c8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d98:	f000 f8a0 	bl	8008edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d9c:	f000 fbce 	bl	800953c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008da2:	f000 f8ed 	bl	8008f80 <prvIsQueueEmpty>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f43f af6f 	beq.w	8008c8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3730      	adds	r7, #48	@ 0x30
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10d      	bne.n	8008df6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d14d      	bne.n	8008e7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 ff9e 	bl	8009d28 <xTaskPriorityDisinherit>
 8008dec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	609a      	str	r2, [r3, #8]
 8008df4:	e043      	b.n	8008e7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d119      	bne.n	8008e30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6858      	ldr	r0, [r3, #4]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e04:	461a      	mov	r2, r3
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	f003 f81d 	bl	800be46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e14:	441a      	add	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d32b      	bcc.n	8008e7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]
 8008e2e:	e026      	b.n	8008e7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68d8      	ldr	r0, [r3, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	f003 f803 	bl	800be46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e48:	425b      	negs	r3, r3
 8008e4a:	441a      	add	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d207      	bcs.n	8008e6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e64:	425b      	negs	r3, r3
 8008e66:	441a      	add	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d105      	bne.n	8008e7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008e86:	697b      	ldr	r3, [r7, #20]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d018      	beq.n	8008ed4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eaa:	441a      	add	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d303      	bcc.n	8008ec4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68d9      	ldr	r1, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6838      	ldr	r0, [r7, #0]
 8008ed0:	f002 ffb9 	bl	800be46 <memcpy>
	}
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ee4:	f001 fc70 	bl	800a7c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ef0:	e011      	b.n	8008f16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d012      	beq.n	8008f20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3324      	adds	r3, #36	@ 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fd34 	bl	800996c <xTaskRemoveFromEventList>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f0a:	f000 fe0d 	bl	8009b28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dce9      	bgt.n	8008ef2 <prvUnlockQueue+0x16>
 8008f1e:	e000      	b.n	8008f22 <prvUnlockQueue+0x46>
					break;
 8008f20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	22ff      	movs	r2, #255	@ 0xff
 8008f26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008f2a:	f001 fc7f 	bl	800a82c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f2e:	f001 fc4b 	bl	800a7c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f3a:	e011      	b.n	8008f60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d012      	beq.n	8008f6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3310      	adds	r3, #16
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fd0f 	bl	800996c <xTaskRemoveFromEventList>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f54:	f000 fde8 	bl	8009b28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dce9      	bgt.n	8008f3c <prvUnlockQueue+0x60>
 8008f68:	e000      	b.n	8008f6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	22ff      	movs	r2, #255	@ 0xff
 8008f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008f74:	f001 fc5a 	bl	800a82c <vPortExitCritical>
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f88:	f001 fc1e 	bl	800a7c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d102      	bne.n	8008f9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f94:	2301      	movs	r3, #1
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	e001      	b.n	8008f9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f9e:	f001 fc45 	bl	800a82c <vPortExitCritical>

	return xReturn;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fb4:	f001 fc08 	bl	800a7c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d102      	bne.n	8008fca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	e001      	b.n	8008fce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fce:	f001 fc2d 	bl	800a82c <vPortExitCritical>

	return xReturn;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	e014      	b.n	8009016 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fec:	4a0f      	ldr	r2, [pc, #60]	@ (800902c <vQueueAddToRegistry+0x50>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10b      	bne.n	8009010 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ff8:	490c      	ldr	r1, [pc, #48]	@ (800902c <vQueueAddToRegistry+0x50>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009002:	4a0a      	ldr	r2, [pc, #40]	@ (800902c <vQueueAddToRegistry+0x50>)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	4413      	add	r3, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800900e:	e006      	b.n	800901e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3301      	adds	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b07      	cmp	r3, #7
 800901a:	d9e7      	bls.n	8008fec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20000be8 	.word	0x20000be8

08009030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009040:	f001 fbc2 	bl	800a7c8 <vPortEnterCritical>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800904a:	b25b      	sxtb	r3, r3
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009050:	d103      	bne.n	800905a <vQueueWaitForMessageRestricted+0x2a>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009060:	b25b      	sxtb	r3, r3
 8009062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009066:	d103      	bne.n	8009070 <vQueueWaitForMessageRestricted+0x40>
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009070:	f001 fbdc 	bl	800a82c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	3324      	adds	r3, #36	@ 0x24
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fc45 	bl	8009914 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800908a:	6978      	ldr	r0, [r7, #20]
 800908c:	f7ff ff26 	bl	8008edc <prvUnlockQueue>
	}
 8009090:	bf00      	nop
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08e      	sub	sp, #56	@ 0x38
 800909c:	af04      	add	r7, sp, #16
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10b      	bne.n	80090c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	623b      	str	r3, [r7, #32]
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	61fb      	str	r3, [r7, #28]
}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	e7fd      	b.n	80090de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090e2:	235c      	movs	r3, #92	@ 0x5c
 80090e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80090ea:	d00b      	beq.n	8009104 <xTaskCreateStatic+0x6c>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	61bb      	str	r3, [r7, #24]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009104:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01e      	beq.n	800914a <xTaskCreateStatic+0xb2>
 800910c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01b      	beq.n	800914a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800911a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800911c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911e:	2202      	movs	r2, #2
 8009120:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009124:	2300      	movs	r3, #0
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912a:	9302      	str	r3, [sp, #8]
 800912c:	f107 0314 	add.w	r3, r7, #20
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f850 	bl	80091e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009142:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009144:	f000 f8de 	bl	8009304 <prvAddNewTaskToReadyList>
 8009148:	e001      	b.n	800914e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800914e:	697b      	ldr	r3, [r7, #20]
	}
 8009150:	4618      	mov	r0, r3
 8009152:	3728      	adds	r7, #40	@ 0x28
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08c      	sub	sp, #48	@ 0x30
 800915c:	af04      	add	r7, sp, #16
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	4613      	mov	r3, r2
 8009166:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009168:	88fb      	ldrh	r3, [r7, #6]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4618      	mov	r0, r3
 800916e:	f001 fc4d 	bl	800aa0c <pvPortMalloc>
 8009172:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00e      	beq.n	8009198 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800917a:	205c      	movs	r0, #92	@ 0x5c
 800917c:	f001 fc46 	bl	800aa0c <pvPortMalloc>
 8009180:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	631a      	str	r2, [r3, #48]	@ 0x30
 800918e:	e005      	b.n	800919c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009190:	6978      	ldr	r0, [r7, #20]
 8009192:	f001 fd09 	bl	800aba8 <vPortFree>
 8009196:	e001      	b.n	800919c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009198:	2300      	movs	r3, #0
 800919a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d017      	beq.n	80091d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	2300      	movs	r3, #0
 80091ae:	9303      	str	r3, [sp, #12]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	9302      	str	r3, [sp, #8]
 80091b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68b9      	ldr	r1, [r7, #8]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 f80e 	bl	80091e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091c6:	69f8      	ldr	r0, [r7, #28]
 80091c8:	f000 f89c 	bl	8009304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091cc:	2301      	movs	r3, #1
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	e002      	b.n	80091d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091d8:	69bb      	ldr	r3, [r7, #24]
	}
 80091da:	4618      	mov	r0, r3
 80091dc:	3720      	adds	r7, #32
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b088      	sub	sp, #32
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	461a      	mov	r2, r3
 80091fa:	21a5      	movs	r1, #165	@ 0xa5
 80091fc:	f002 fda3 	bl	800bd46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800920a:	3b01      	subs	r3, #1
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	f023 0307 	bic.w	r3, r3, #7
 8009218:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	617b      	str	r3, [r7, #20]
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d01f      	beq.n	8009282 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
 8009246:	e012      	b.n	800926e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	7819      	ldrb	r1, [r3, #0]
 8009250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	3334      	adds	r3, #52	@ 0x34
 8009258:	460a      	mov	r2, r1
 800925a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d006      	beq.n	8009276 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	3301      	adds	r3, #1
 800926c:	61fb      	str	r3, [r7, #28]
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	2b0f      	cmp	r3, #15
 8009272:	d9e9      	bls.n	8009248 <prvInitialiseNewTask+0x66>
 8009274:	e000      	b.n	8009278 <prvInitialiseNewTask+0x96>
			{
				break;
 8009276:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009280:	e003      	b.n	800928a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	2b37      	cmp	r3, #55	@ 0x37
 800928e:	d901      	bls.n	8009294 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009290:	2337      	movs	r3, #55	@ 0x37
 8009292:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009298:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800929e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	2200      	movs	r2, #0
 80092a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff f966 	bl	800857c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	3318      	adds	r3, #24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff f961 	bl	800857c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	2200      	movs	r2, #0
 80092d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	68f9      	ldr	r1, [r7, #12]
 80092e2:	69b8      	ldr	r0, [r7, #24]
 80092e4:	f001 f93e 	bl	800a564 <pxPortInitialiseStack>
 80092e8:	4602      	mov	r2, r0
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092fa:	bf00      	nop
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800930c:	f001 fa5c 	bl	800a7c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009310:	4b2d      	ldr	r3, [pc, #180]	@ (80093c8 <prvAddNewTaskToReadyList+0xc4>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	4a2c      	ldr	r2, [pc, #176]	@ (80093c8 <prvAddNewTaskToReadyList+0xc4>)
 8009318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800931a:	4b2c      	ldr	r3, [pc, #176]	@ (80093cc <prvAddNewTaskToReadyList+0xc8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009322:	4a2a      	ldr	r2, [pc, #168]	@ (80093cc <prvAddNewTaskToReadyList+0xc8>)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009328:	4b27      	ldr	r3, [pc, #156]	@ (80093c8 <prvAddNewTaskToReadyList+0xc4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d110      	bne.n	8009352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009330:	f000 fc1e 	bl	8009b70 <prvInitialiseTaskLists>
 8009334:	e00d      	b.n	8009352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009336:	4b26      	ldr	r3, [pc, #152]	@ (80093d0 <prvAddNewTaskToReadyList+0xcc>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800933e:	4b23      	ldr	r3, [pc, #140]	@ (80093cc <prvAddNewTaskToReadyList+0xc8>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009348:	429a      	cmp	r2, r3
 800934a:	d802      	bhi.n	8009352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800934c:	4a1f      	ldr	r2, [pc, #124]	@ (80093cc <prvAddNewTaskToReadyList+0xc8>)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009352:	4b20      	ldr	r3, [pc, #128]	@ (80093d4 <prvAddNewTaskToReadyList+0xd0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3301      	adds	r3, #1
 8009358:	4a1e      	ldr	r2, [pc, #120]	@ (80093d4 <prvAddNewTaskToReadyList+0xd0>)
 800935a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800935c:	4b1d      	ldr	r3, [pc, #116]	@ (80093d4 <prvAddNewTaskToReadyList+0xd0>)
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009368:	4b1b      	ldr	r3, [pc, #108]	@ (80093d8 <prvAddNewTaskToReadyList+0xd4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d903      	bls.n	8009378 <prvAddNewTaskToReadyList+0x74>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009374:	4a18      	ldr	r2, [pc, #96]	@ (80093d8 <prvAddNewTaskToReadyList+0xd4>)
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937c:	4613      	mov	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4a15      	ldr	r2, [pc, #84]	@ (80093dc <prvAddNewTaskToReadyList+0xd8>)
 8009386:	441a      	add	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7ff f901 	bl	8008596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009394:	f001 fa4a 	bl	800a82c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009398:	4b0d      	ldr	r3, [pc, #52]	@ (80093d0 <prvAddNewTaskToReadyList+0xcc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00e      	beq.n	80093be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093a0:	4b0a      	ldr	r3, [pc, #40]	@ (80093cc <prvAddNewTaskToReadyList+0xc8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d207      	bcs.n	80093be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093ae:	4b0c      	ldr	r3, [pc, #48]	@ (80093e0 <prvAddNewTaskToReadyList+0xdc>)
 80093b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	200010fc 	.word	0x200010fc
 80093cc:	20000c28 	.word	0x20000c28
 80093d0:	20001108 	.word	0x20001108
 80093d4:	20001118 	.word	0x20001118
 80093d8:	20001104 	.word	0x20001104
 80093dc:	20000c2c 	.word	0x20000c2c
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d018      	beq.n	8009428 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093f6:	4b14      	ldr	r3, [pc, #80]	@ (8009448 <vTaskDelay+0x64>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <vTaskDelay+0x32>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	60bb      	str	r3, [r7, #8]
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	e7fd      	b.n	8009412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009416:	f000 f883 	bl	8009520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fcf3 	bl	8009e08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009422:	f000 f88b 	bl	800953c <xTaskResumeAll>
 8009426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d107      	bne.n	800943e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800942e:	4b07      	ldr	r3, [pc, #28]	@ (800944c <vTaskDelay+0x68>)
 8009430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20001124 	.word	0x20001124
 800944c:	e000ed04 	.word	0xe000ed04

08009450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08a      	sub	sp, #40	@ 0x28
 8009454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800945a:	2300      	movs	r3, #0
 800945c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800945e:	463a      	mov	r2, r7
 8009460:	1d39      	adds	r1, r7, #4
 8009462:	f107 0308 	add.w	r3, r7, #8
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff f834 	bl	80084d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	9202      	str	r2, [sp, #8]
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	2300      	movs	r3, #0
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	460a      	mov	r2, r1
 800947e:	4922      	ldr	r1, [pc, #136]	@ (8009508 <vTaskStartScheduler+0xb8>)
 8009480:	4822      	ldr	r0, [pc, #136]	@ (800950c <vTaskStartScheduler+0xbc>)
 8009482:	f7ff fe09 	bl	8009098 <xTaskCreateStatic>
 8009486:	4603      	mov	r3, r0
 8009488:	4a21      	ldr	r2, [pc, #132]	@ (8009510 <vTaskStartScheduler+0xc0>)
 800948a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800948c:	4b20      	ldr	r3, [pc, #128]	@ (8009510 <vTaskStartScheduler+0xc0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009494:	2301      	movs	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	e001      	b.n	800949e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d102      	bne.n	80094aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80094a4:	f000 fd04 	bl	8009eb0 <xTimerCreateTimerTask>
 80094a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d116      	bne.n	80094de <vTaskStartScheduler+0x8e>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	613b      	str	r3, [r7, #16]
}
 80094c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094c4:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <vTaskStartScheduler+0xc4>)
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094cc:	4b12      	ldr	r3, [pc, #72]	@ (8009518 <vTaskStartScheduler+0xc8>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094d2:	4b12      	ldr	r3, [pc, #72]	@ (800951c <vTaskStartScheduler+0xcc>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094d8:	f001 f8d2 	bl	800a680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094dc:	e00f      	b.n	80094fe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d10b      	bne.n	80094fe <vTaskStartScheduler+0xae>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60fb      	str	r3, [r7, #12]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vTaskStartScheduler+0xaa>
}
 80094fe:	bf00      	nop
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	0800df9c 	.word	0x0800df9c
 800950c:	08009b41 	.word	0x08009b41
 8009510:	20001120 	.word	0x20001120
 8009514:	2000111c 	.word	0x2000111c
 8009518:	20001108 	.word	0x20001108
 800951c:	20001100 	.word	0x20001100

08009520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009524:	4b04      	ldr	r3, [pc, #16]	@ (8009538 <vTaskSuspendAll+0x18>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3301      	adds	r3, #1
 800952a:	4a03      	ldr	r2, [pc, #12]	@ (8009538 <vTaskSuspendAll+0x18>)
 800952c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800952e:	bf00      	nop
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	20001124 	.word	0x20001124

0800953c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009546:	2300      	movs	r3, #0
 8009548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800954a:	4b42      	ldr	r3, [pc, #264]	@ (8009654 <xTaskResumeAll+0x118>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <xTaskResumeAll+0x2e>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	603b      	str	r3, [r7, #0]
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	e7fd      	b.n	8009566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800956a:	f001 f92d 	bl	800a7c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800956e:	4b39      	ldr	r3, [pc, #228]	@ (8009654 <xTaskResumeAll+0x118>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3b01      	subs	r3, #1
 8009574:	4a37      	ldr	r2, [pc, #220]	@ (8009654 <xTaskResumeAll+0x118>)
 8009576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009578:	4b36      	ldr	r3, [pc, #216]	@ (8009654 <xTaskResumeAll+0x118>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d162      	bne.n	8009646 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009580:	4b35      	ldr	r3, [pc, #212]	@ (8009658 <xTaskResumeAll+0x11c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d05e      	beq.n	8009646 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009588:	e02f      	b.n	80095ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800958a:	4b34      	ldr	r3, [pc, #208]	@ (800965c <xTaskResumeAll+0x120>)
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3318      	adds	r3, #24
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff f85a 	bl	8008650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3304      	adds	r3, #4
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff f855 	bl	8008650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095aa:	4b2d      	ldr	r3, [pc, #180]	@ (8009660 <xTaskResumeAll+0x124>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d903      	bls.n	80095ba <xTaskResumeAll+0x7e>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009660 <xTaskResumeAll+0x124>)
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4a27      	ldr	r2, [pc, #156]	@ (8009664 <xTaskResumeAll+0x128>)
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3304      	adds	r3, #4
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f7fe ffe0 	bl	8008596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095da:	4b23      	ldr	r3, [pc, #140]	@ (8009668 <xTaskResumeAll+0x12c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d302      	bcc.n	80095ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80095e4:	4b21      	ldr	r3, [pc, #132]	@ (800966c <xTaskResumeAll+0x130>)
 80095e6:	2201      	movs	r2, #1
 80095e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095ea:	4b1c      	ldr	r3, [pc, #112]	@ (800965c <xTaskResumeAll+0x120>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1cb      	bne.n	800958a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095f8:	f000 fb58 	bl	8009cac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009670 <xTaskResumeAll+0x134>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d010      	beq.n	800962a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009608:	f000 f846 	bl	8009698 <xTaskIncrementTick>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009612:	4b16      	ldr	r3, [pc, #88]	@ (800966c <xTaskResumeAll+0x130>)
 8009614:	2201      	movs	r2, #1
 8009616:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3b01      	subs	r3, #1
 800961c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1f1      	bne.n	8009608 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009624:	4b12      	ldr	r3, [pc, #72]	@ (8009670 <xTaskResumeAll+0x134>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800962a:	4b10      	ldr	r3, [pc, #64]	@ (800966c <xTaskResumeAll+0x130>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009632:	2301      	movs	r3, #1
 8009634:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009636:	4b0f      	ldr	r3, [pc, #60]	@ (8009674 <xTaskResumeAll+0x138>)
 8009638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009646:	f001 f8f1 	bl	800a82c <vPortExitCritical>

	return xAlreadyYielded;
 800964a:	68bb      	ldr	r3, [r7, #8]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20001124 	.word	0x20001124
 8009658:	200010fc 	.word	0x200010fc
 800965c:	200010bc 	.word	0x200010bc
 8009660:	20001104 	.word	0x20001104
 8009664:	20000c2c 	.word	0x20000c2c
 8009668:	20000c28 	.word	0x20000c28
 800966c:	20001110 	.word	0x20001110
 8009670:	2000110c 	.word	0x2000110c
 8009674:	e000ed04 	.word	0xe000ed04

08009678 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800967e:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <xTaskGetTickCount+0x1c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009684:	687b      	ldr	r3, [r7, #4]
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20001100 	.word	0x20001100

08009698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096a2:	4b4f      	ldr	r3, [pc, #316]	@ (80097e0 <xTaskIncrementTick+0x148>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f040 8090 	bne.w	80097cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096ac:	4b4d      	ldr	r3, [pc, #308]	@ (80097e4 <xTaskIncrementTick+0x14c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096b4:	4a4b      	ldr	r2, [pc, #300]	@ (80097e4 <xTaskIncrementTick+0x14c>)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d121      	bne.n	8009704 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80096c0:	4b49      	ldr	r3, [pc, #292]	@ (80097e8 <xTaskIncrementTick+0x150>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00b      	beq.n	80096e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	603b      	str	r3, [r7, #0]
}
 80096dc:	bf00      	nop
 80096de:	bf00      	nop
 80096e0:	e7fd      	b.n	80096de <xTaskIncrementTick+0x46>
 80096e2:	4b41      	ldr	r3, [pc, #260]	@ (80097e8 <xTaskIncrementTick+0x150>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	4b40      	ldr	r3, [pc, #256]	@ (80097ec <xTaskIncrementTick+0x154>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a3e      	ldr	r2, [pc, #248]	@ (80097e8 <xTaskIncrementTick+0x150>)
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	4a3e      	ldr	r2, [pc, #248]	@ (80097ec <xTaskIncrementTick+0x154>)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	4b3e      	ldr	r3, [pc, #248]	@ (80097f0 <xTaskIncrementTick+0x158>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	4a3c      	ldr	r2, [pc, #240]	@ (80097f0 <xTaskIncrementTick+0x158>)
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	f000 fad4 	bl	8009cac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009704:	4b3b      	ldr	r3, [pc, #236]	@ (80097f4 <xTaskIncrementTick+0x15c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	429a      	cmp	r2, r3
 800970c:	d349      	bcc.n	80097a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800970e:	4b36      	ldr	r3, [pc, #216]	@ (80097e8 <xTaskIncrementTick+0x150>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009718:	4b36      	ldr	r3, [pc, #216]	@ (80097f4 <xTaskIncrementTick+0x15c>)
 800971a:	f04f 32ff 	mov.w	r2, #4294967295
 800971e:	601a      	str	r2, [r3, #0]
					break;
 8009720:	e03f      	b.n	80097a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009722:	4b31      	ldr	r3, [pc, #196]	@ (80097e8 <xTaskIncrementTick+0x150>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	429a      	cmp	r2, r3
 8009738:	d203      	bcs.n	8009742 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800973a:	4a2e      	ldr	r2, [pc, #184]	@ (80097f4 <xTaskIncrementTick+0x15c>)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009740:	e02f      	b.n	80097a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	3304      	adds	r3, #4
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe ff82 	bl	8008650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	3318      	adds	r3, #24
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe ff79 	bl	8008650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009762:	4b25      	ldr	r3, [pc, #148]	@ (80097f8 <xTaskIncrementTick+0x160>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d903      	bls.n	8009772 <xTaskIncrementTick+0xda>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976e:	4a22      	ldr	r2, [pc, #136]	@ (80097f8 <xTaskIncrementTick+0x160>)
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4a1f      	ldr	r2, [pc, #124]	@ (80097fc <xTaskIncrementTick+0x164>)
 8009780:	441a      	add	r2, r3
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3304      	adds	r3, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7fe ff04 	bl	8008596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009792:	4b1b      	ldr	r3, [pc, #108]	@ (8009800 <xTaskIncrementTick+0x168>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009798:	429a      	cmp	r2, r3
 800979a:	d3b8      	bcc.n	800970e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800979c:	2301      	movs	r3, #1
 800979e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097a0:	e7b5      	b.n	800970e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097a2:	4b17      	ldr	r3, [pc, #92]	@ (8009800 <xTaskIncrementTick+0x168>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a8:	4914      	ldr	r1, [pc, #80]	@ (80097fc <xTaskIncrementTick+0x164>)
 80097aa:	4613      	mov	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	440b      	add	r3, r1
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d901      	bls.n	80097be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80097ba:	2301      	movs	r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80097be:	4b11      	ldr	r3, [pc, #68]	@ (8009804 <xTaskIncrementTick+0x16c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80097c6:	2301      	movs	r3, #1
 80097c8:	617b      	str	r3, [r7, #20]
 80097ca:	e004      	b.n	80097d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80097cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <xTaskIncrementTick+0x170>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3301      	adds	r3, #1
 80097d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009808 <xTaskIncrementTick+0x170>)
 80097d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80097d6:	697b      	ldr	r3, [r7, #20]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20001124 	.word	0x20001124
 80097e4:	20001100 	.word	0x20001100
 80097e8:	200010b4 	.word	0x200010b4
 80097ec:	200010b8 	.word	0x200010b8
 80097f0:	20001114 	.word	0x20001114
 80097f4:	2000111c 	.word	0x2000111c
 80097f8:	20001104 	.word	0x20001104
 80097fc:	20000c2c 	.word	0x20000c2c
 8009800:	20000c28 	.word	0x20000c28
 8009804:	20001110 	.word	0x20001110
 8009808:	2000110c 	.word	0x2000110c

0800980c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009812:	4b28      	ldr	r3, [pc, #160]	@ (80098b4 <vTaskSwitchContext+0xa8>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800981a:	4b27      	ldr	r3, [pc, #156]	@ (80098b8 <vTaskSwitchContext+0xac>)
 800981c:	2201      	movs	r2, #1
 800981e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009820:	e042      	b.n	80098a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009822:	4b25      	ldr	r3, [pc, #148]	@ (80098b8 <vTaskSwitchContext+0xac>)
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009828:	4b24      	ldr	r3, [pc, #144]	@ (80098bc <vTaskSwitchContext+0xb0>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	e011      	b.n	8009854 <vTaskSwitchContext+0x48>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <vTaskSwitchContext+0x42>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	607b      	str	r3, [r7, #4]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <vTaskSwitchContext+0x3e>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3b01      	subs	r3, #1
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	491a      	ldr	r1, [pc, #104]	@ (80098c0 <vTaskSwitchContext+0xb4>)
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	440b      	add	r3, r1
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0e3      	beq.n	8009830 <vTaskSwitchContext+0x24>
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4a13      	ldr	r2, [pc, #76]	@ (80098c0 <vTaskSwitchContext+0xb4>)
 8009874:	4413      	add	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	605a      	str	r2, [r3, #4]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	3308      	adds	r3, #8
 800988a:	429a      	cmp	r2, r3
 800988c:	d104      	bne.n	8009898 <vTaskSwitchContext+0x8c>
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	605a      	str	r2, [r3, #4]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	4a09      	ldr	r2, [pc, #36]	@ (80098c4 <vTaskSwitchContext+0xb8>)
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	4a06      	ldr	r2, [pc, #24]	@ (80098bc <vTaskSwitchContext+0xb0>)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6013      	str	r3, [r2, #0]
}
 80098a8:	bf00      	nop
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20001124 	.word	0x20001124
 80098b8:	20001110 	.word	0x20001110
 80098bc:	20001104 	.word	0x20001104
 80098c0:	20000c2c 	.word	0x20000c2c
 80098c4:	20000c28 	.word	0x20000c28

080098c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10b      	bne.n	80098f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	60fb      	str	r3, [r7, #12]
}
 80098ea:	bf00      	nop
 80098ec:	bf00      	nop
 80098ee:	e7fd      	b.n	80098ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098f0:	4b07      	ldr	r3, [pc, #28]	@ (8009910 <vTaskPlaceOnEventList+0x48>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3318      	adds	r3, #24
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7fe fe70 	bl	80085de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098fe:	2101      	movs	r1, #1
 8009900:	6838      	ldr	r0, [r7, #0]
 8009902:	f000 fa81 	bl	8009e08 <prvAddCurrentTaskToDelayedList>
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000c28 	.word	0x20000c28

08009914 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10b      	bne.n	800993e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	617b      	str	r3, [r7, #20]
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	e7fd      	b.n	800993a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800993e:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <vTaskPlaceOnEventListRestricted+0x54>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3318      	adds	r3, #24
 8009944:	4619      	mov	r1, r3
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7fe fe25 	bl	8008596 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009952:	f04f 33ff 	mov.w	r3, #4294967295
 8009956:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	68b8      	ldr	r0, [r7, #8]
 800995c:	f000 fa54 	bl	8009e08 <prvAddCurrentTaskToDelayedList>
	}
 8009960:	bf00      	nop
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20000c28 	.word	0x20000c28

0800996c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10b      	bne.n	800999a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	60fb      	str	r3, [r7, #12]
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	e7fd      	b.n	8009996 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3318      	adds	r3, #24
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fe56 	bl	8008650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099a4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a1c <xTaskRemoveFromEventList+0xb0>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11d      	bne.n	80099e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe fe4d 	bl	8008650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ba:	4b19      	ldr	r3, [pc, #100]	@ (8009a20 <xTaskRemoveFromEventList+0xb4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d903      	bls.n	80099ca <xTaskRemoveFromEventList+0x5e>
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c6:	4a16      	ldr	r2, [pc, #88]	@ (8009a20 <xTaskRemoveFromEventList+0xb4>)
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a13      	ldr	r2, [pc, #76]	@ (8009a24 <xTaskRemoveFromEventList+0xb8>)
 80099d8:	441a      	add	r2, r3
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	3304      	adds	r3, #4
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7fe fdd8 	bl	8008596 <vListInsertEnd>
 80099e6:	e005      	b.n	80099f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	3318      	adds	r3, #24
 80099ec:	4619      	mov	r1, r3
 80099ee:	480e      	ldr	r0, [pc, #56]	@ (8009a28 <xTaskRemoveFromEventList+0xbc>)
 80099f0:	f7fe fdd1 	bl	8008596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f8:	4b0c      	ldr	r3, [pc, #48]	@ (8009a2c <xTaskRemoveFromEventList+0xc0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d905      	bls.n	8009a0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a06:	4b0a      	ldr	r3, [pc, #40]	@ (8009a30 <xTaskRemoveFromEventList+0xc4>)
 8009a08:	2201      	movs	r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	e001      	b.n	8009a12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a12:	697b      	ldr	r3, [r7, #20]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20001124 	.word	0x20001124
 8009a20:	20001104 	.word	0x20001104
 8009a24:	20000c2c 	.word	0x20000c2c
 8009a28:	200010bc 	.word	0x200010bc
 8009a2c:	20000c28 	.word	0x20000c28
 8009a30:	20001110 	.word	0x20001110

08009a34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a3c:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <vTaskInternalSetTimeOutState+0x24>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a44:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <vTaskInternalSetTimeOutState+0x28>)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	605a      	str	r2, [r3, #4]
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	20001114 	.word	0x20001114
 8009a5c:	20001100 	.word	0x20001100

08009a60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10b      	bne.n	8009a88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	613b      	str	r3, [r7, #16]
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	e7fd      	b.n	8009a84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10b      	bne.n	8009aa6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60fb      	str	r3, [r7, #12]
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	e7fd      	b.n	8009aa2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009aa6:	f000 fe8f 	bl	800a7c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8009b20 <xTaskCheckForTimeOut+0xc0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac2:	d102      	bne.n	8009aca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
 8009ac8:	e023      	b.n	8009b12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b15      	ldr	r3, [pc, #84]	@ (8009b24 <xTaskCheckForTimeOut+0xc4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d007      	beq.n	8009ae6 <xTaskCheckForTimeOut+0x86>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d302      	bcc.n	8009ae6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	61fb      	str	r3, [r7, #28]
 8009ae4:	e015      	b.n	8009b12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d20b      	bcs.n	8009b08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	1ad2      	subs	r2, r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff ff99 	bl	8009a34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
 8009b06:	e004      	b.n	8009b12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b12:	f000 fe8b 	bl	800a82c <vPortExitCritical>

	return xReturn;
 8009b16:	69fb      	ldr	r3, [r7, #28]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20001100 	.word	0x20001100
 8009b24:	20001114 	.word	0x20001114

08009b28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b2c:	4b03      	ldr	r3, [pc, #12]	@ (8009b3c <vTaskMissedYield+0x14>)
 8009b2e:	2201      	movs	r2, #1
 8009b30:	601a      	str	r2, [r3, #0]
}
 8009b32:	bf00      	nop
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	20001110 	.word	0x20001110

08009b40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b48:	f000 f852 	bl	8009bf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b4c:	4b06      	ldr	r3, [pc, #24]	@ (8009b68 <prvIdleTask+0x28>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d9f9      	bls.n	8009b48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b54:	4b05      	ldr	r3, [pc, #20]	@ (8009b6c <prvIdleTask+0x2c>)
 8009b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b64:	e7f0      	b.n	8009b48 <prvIdleTask+0x8>
 8009b66:	bf00      	nop
 8009b68:	20000c2c 	.word	0x20000c2c
 8009b6c:	e000ed04 	.word	0xe000ed04

08009b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b76:	2300      	movs	r3, #0
 8009b78:	607b      	str	r3, [r7, #4]
 8009b7a:	e00c      	b.n	8009b96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4a12      	ldr	r2, [pc, #72]	@ (8009bd0 <prvInitialiseTaskLists+0x60>)
 8009b88:	4413      	add	r3, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fcd6 	bl	800853c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3301      	adds	r3, #1
 8009b94:	607b      	str	r3, [r7, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b37      	cmp	r3, #55	@ 0x37
 8009b9a:	d9ef      	bls.n	8009b7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b9c:	480d      	ldr	r0, [pc, #52]	@ (8009bd4 <prvInitialiseTaskLists+0x64>)
 8009b9e:	f7fe fccd 	bl	800853c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ba2:	480d      	ldr	r0, [pc, #52]	@ (8009bd8 <prvInitialiseTaskLists+0x68>)
 8009ba4:	f7fe fcca 	bl	800853c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ba8:	480c      	ldr	r0, [pc, #48]	@ (8009bdc <prvInitialiseTaskLists+0x6c>)
 8009baa:	f7fe fcc7 	bl	800853c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bae:	480c      	ldr	r0, [pc, #48]	@ (8009be0 <prvInitialiseTaskLists+0x70>)
 8009bb0:	f7fe fcc4 	bl	800853c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009bb4:	480b      	ldr	r0, [pc, #44]	@ (8009be4 <prvInitialiseTaskLists+0x74>)
 8009bb6:	f7fe fcc1 	bl	800853c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009bba:	4b0b      	ldr	r3, [pc, #44]	@ (8009be8 <prvInitialiseTaskLists+0x78>)
 8009bbc:	4a05      	ldr	r2, [pc, #20]	@ (8009bd4 <prvInitialiseTaskLists+0x64>)
 8009bbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bec <prvInitialiseTaskLists+0x7c>)
 8009bc2:	4a05      	ldr	r2, [pc, #20]	@ (8009bd8 <prvInitialiseTaskLists+0x68>)
 8009bc4:	601a      	str	r2, [r3, #0]
}
 8009bc6:	bf00      	nop
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	20000c2c 	.word	0x20000c2c
 8009bd4:	2000108c 	.word	0x2000108c
 8009bd8:	200010a0 	.word	0x200010a0
 8009bdc:	200010bc 	.word	0x200010bc
 8009be0:	200010d0 	.word	0x200010d0
 8009be4:	200010e8 	.word	0x200010e8
 8009be8:	200010b4 	.word	0x200010b4
 8009bec:	200010b8 	.word	0x200010b8

08009bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bf6:	e019      	b.n	8009c2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009bf8:	f000 fde6 	bl	800a7c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bfc:	4b10      	ldr	r3, [pc, #64]	@ (8009c40 <prvCheckTasksWaitingTermination+0x50>)
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fd21 	bl	8008650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c44 <prvCheckTasksWaitingTermination+0x54>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4a0b      	ldr	r2, [pc, #44]	@ (8009c44 <prvCheckTasksWaitingTermination+0x54>)
 8009c16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c18:	4b0b      	ldr	r3, [pc, #44]	@ (8009c48 <prvCheckTasksWaitingTermination+0x58>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8009c48 <prvCheckTasksWaitingTermination+0x58>)
 8009c20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c22:	f000 fe03 	bl	800a82c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f810 	bl	8009c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c2c:	4b06      	ldr	r3, [pc, #24]	@ (8009c48 <prvCheckTasksWaitingTermination+0x58>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e1      	bne.n	8009bf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	200010d0 	.word	0x200010d0
 8009c44:	200010fc 	.word	0x200010fc
 8009c48:	200010e4 	.word	0x200010e4

08009c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d108      	bne.n	8009c70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 ffa0 	bl	800aba8 <vPortFree>
				vPortFree( pxTCB );
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 ff9d 	bl	800aba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c6e:	e019      	b.n	8009ca4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d103      	bne.n	8009c82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 ff94 	bl	800aba8 <vPortFree>
	}
 8009c80:	e010      	b.n	8009ca4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d00b      	beq.n	8009ca4 <prvDeleteTCB+0x58>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	60fb      	str	r3, [r7, #12]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <prvDeleteTCB+0x54>
	}
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce4 <prvResetNextTaskUnblockTime+0x38>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d104      	bne.n	8009cc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8009cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009cc4:	e008      	b.n	8009cd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc6:	4b07      	ldr	r3, [pc, #28]	@ (8009ce4 <prvResetNextTaskUnblockTime+0x38>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	4a04      	ldr	r2, [pc, #16]	@ (8009ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8009cd6:	6013      	str	r3, [r2, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	200010b4 	.word	0x200010b4
 8009ce8:	2000111c 	.word	0x2000111c

08009cec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d20 <xTaskGetSchedulerState+0x34>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	607b      	str	r3, [r7, #4]
 8009cfe:	e008      	b.n	8009d12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d00:	4b08      	ldr	r3, [pc, #32]	@ (8009d24 <xTaskGetSchedulerState+0x38>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d08:	2302      	movs	r3, #2
 8009d0a:	607b      	str	r3, [r7, #4]
 8009d0c:	e001      	b.n	8009d12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d12:	687b      	ldr	r3, [r7, #4]
	}
 8009d14:	4618      	mov	r0, r3
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	20001108 	.word	0x20001108
 8009d24:	20001124 	.word	0x20001124

08009d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d058      	beq.n	8009df0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009dfc <xTaskPriorityDisinherit+0xd4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d00b      	beq.n	8009d60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	60fb      	str	r3, [r7, #12]
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	e7fd      	b.n	8009d5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10b      	bne.n	8009d80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	60bb      	str	r3, [r7, #8]
}
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
 8009d7e:	e7fd      	b.n	8009d7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d84:	1e5a      	subs	r2, r3, #1
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d02c      	beq.n	8009df0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d128      	bne.n	8009df0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	3304      	adds	r3, #4
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fc54 	bl	8008650 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e00 <xTaskPriorityDisinherit+0xd8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d903      	bls.n	8009dd0 <xTaskPriorityDisinherit+0xa8>
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8009e00 <xTaskPriorityDisinherit+0xd8>)
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4a09      	ldr	r2, [pc, #36]	@ (8009e04 <xTaskPriorityDisinherit+0xdc>)
 8009dde:	441a      	add	r2, r3
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	3304      	adds	r3, #4
 8009de4:	4619      	mov	r1, r3
 8009de6:	4610      	mov	r0, r2
 8009de8:	f7fe fbd5 	bl	8008596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009dec:	2301      	movs	r3, #1
 8009dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009df0:	697b      	ldr	r3, [r7, #20]
	}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000c28 	.word	0x20000c28
 8009e00:	20001104 	.word	0x20001104
 8009e04:	20000c2c 	.word	0x20000c2c

08009e08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e12:	4b21      	ldr	r3, [pc, #132]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e18:	4b20      	ldr	r3, [pc, #128]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fc16 	bl	8008650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2a:	d10a      	bne.n	8009e42 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e32:	4b1a      	ldr	r3, [pc, #104]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4819      	ldr	r0, [pc, #100]	@ (8009ea0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e3c:	f7fe fbab 	bl	8008596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e40:	e026      	b.n	8009e90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4413      	add	r3, r2
 8009e48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e4a:	4b14      	ldr	r3, [pc, #80]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d209      	bcs.n	8009e6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e5a:	4b12      	ldr	r3, [pc, #72]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe fbb9 	bl	80085de <vListInsert>
}
 8009e6c:	e010      	b.n	8009e90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f7fe fbaf 	bl	80085de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e80:	4b0a      	ldr	r3, [pc, #40]	@ (8009eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d202      	bcs.n	8009e90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e8a:	4a08      	ldr	r2, [pc, #32]	@ (8009eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6013      	str	r3, [r2, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20001100 	.word	0x20001100
 8009e9c:	20000c28 	.word	0x20000c28
 8009ea0:	200010e8 	.word	0x200010e8
 8009ea4:	200010b8 	.word	0x200010b8
 8009ea8:	200010b4 	.word	0x200010b4
 8009eac:	2000111c 	.word	0x2000111c

08009eb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08a      	sub	sp, #40	@ 0x28
 8009eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009eba:	f000 fb13 	bl	800a4e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8009f34 <xTimerCreateTimerTask+0x84>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d021      	beq.n	8009f0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ece:	1d3a      	adds	r2, r7, #4
 8009ed0:	f107 0108 	add.w	r1, r7, #8
 8009ed4:	f107 030c 	add.w	r3, r7, #12
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe fb15 	bl	8008508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	9202      	str	r2, [sp, #8]
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	2302      	movs	r3, #2
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	2300      	movs	r3, #0
 8009eee:	460a      	mov	r2, r1
 8009ef0:	4911      	ldr	r1, [pc, #68]	@ (8009f38 <xTimerCreateTimerTask+0x88>)
 8009ef2:	4812      	ldr	r0, [pc, #72]	@ (8009f3c <xTimerCreateTimerTask+0x8c>)
 8009ef4:	f7ff f8d0 	bl	8009098 <xTaskCreateStatic>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	4a11      	ldr	r2, [pc, #68]	@ (8009f40 <xTimerCreateTimerTask+0x90>)
 8009efc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009efe:	4b10      	ldr	r3, [pc, #64]	@ (8009f40 <xTimerCreateTimerTask+0x90>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f06:	2301      	movs	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f28:	697b      	ldr	r3, [r7, #20]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20001158 	.word	0x20001158
 8009f38:	0800dfa4 	.word	0x0800dfa4
 8009f3c:	0800a07d 	.word	0x0800a07d
 8009f40:	2000115c 	.word	0x2000115c

08009f44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08a      	sub	sp, #40	@ 0x28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <xTimerGenericCommand+0x30>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	623b      	str	r3, [r7, #32]
}
 8009f6e:	bf00      	nop
 8009f70:	bf00      	nop
 8009f72:	e7fd      	b.n	8009f70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f74:	4b19      	ldr	r3, [pc, #100]	@ (8009fdc <xTimerGenericCommand+0x98>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d02a      	beq.n	8009fd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	dc18      	bgt.n	8009fc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f8e:	f7ff fead 	bl	8009cec <xTaskGetSchedulerState>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d109      	bne.n	8009fac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f98:	4b10      	ldr	r3, [pc, #64]	@ (8009fdc <xTimerGenericCommand+0x98>)
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	f107 0110 	add.w	r1, r7, #16
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa4:	f7fe fc88 	bl	80088b8 <xQueueGenericSend>
 8009fa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009faa:	e012      	b.n	8009fd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fac:	4b0b      	ldr	r3, [pc, #44]	@ (8009fdc <xTimerGenericCommand+0x98>)
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	f107 0110 	add.w	r1, r7, #16
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f7fe fc7e 	bl	80088b8 <xQueueGenericSend>
 8009fbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fbe:	e008      	b.n	8009fd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fc0:	4b06      	ldr	r3, [pc, #24]	@ (8009fdc <xTimerGenericCommand+0x98>)
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	f107 0110 	add.w	r1, r7, #16
 8009fc8:	2300      	movs	r3, #0
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	f7fe fd76 	bl	8008abc <xQueueGenericSendFromISR>
 8009fd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3728      	adds	r7, #40	@ 0x28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20001158 	.word	0x20001158

08009fe0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fea:	4b23      	ldr	r3, [pc, #140]	@ (800a078 <prvProcessExpiredTimer+0x98>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fe fb29 	bl	8008650 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d023      	beq.n	800a054 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	699a      	ldr	r2, [r3, #24]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	18d1      	adds	r1, r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	6978      	ldr	r0, [r7, #20]
 800a01a:	f000 f8d5 	bl	800a1c8 <prvInsertTimerInActiveList>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d020      	beq.n	800a066 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a024:	2300      	movs	r3, #0
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	2300      	movs	r3, #0
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	2100      	movs	r1, #0
 800a02e:	6978      	ldr	r0, [r7, #20]
 800a030:	f7ff ff88 	bl	8009f44 <xTimerGenericCommand>
 800a034:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d114      	bne.n	800a066 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	60fb      	str	r3, [r7, #12]
}
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	e7fd      	b.n	800a050 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	6978      	ldr	r0, [r7, #20]
 800a06c:	4798      	blx	r3
}
 800a06e:	bf00      	nop
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20001150 	.word	0x20001150

0800a07c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a084:	f107 0308 	add.w	r3, r7, #8
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 f859 	bl	800a140 <prvGetNextExpireTime>
 800a08e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	4619      	mov	r1, r3
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 f805 	bl	800a0a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a09a:	f000 f8d7 	bl	800a24c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a09e:	bf00      	nop
 800a0a0:	e7f0      	b.n	800a084 <prvTimerTask+0x8>
	...

0800a0a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0ae:	f7ff fa37 	bl	8009520 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0b2:	f107 0308 	add.w	r3, r7, #8
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 f866 	bl	800a188 <prvSampleTimeNow>
 800a0bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d130      	bne.n	800a126 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <prvProcessTimerOrBlockTask+0x3c>
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d806      	bhi.n	800a0e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0d2:	f7ff fa33 	bl	800953c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff ff81 	bl	8009fe0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0de:	e024      	b.n	800a12a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d008      	beq.n	800a0f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0e6:	4b13      	ldr	r3, [pc, #76]	@ (800a134 <prvProcessTimerOrBlockTask+0x90>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <prvProcessTimerOrBlockTask+0x50>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e000      	b.n	800a0f6 <prvProcessTimerOrBlockTask+0x52>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a138 <prvProcessTimerOrBlockTask+0x94>)
 800a0fa:	6818      	ldr	r0, [r3, #0]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4619      	mov	r1, r3
 800a106:	f7fe ff93 	bl	8009030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a10a:	f7ff fa17 	bl	800953c <xTaskResumeAll>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a114:	4b09      	ldr	r3, [pc, #36]	@ (800a13c <prvProcessTimerOrBlockTask+0x98>)
 800a116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	f3bf 8f6f 	isb	sy
}
 800a124:	e001      	b.n	800a12a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a126:	f7ff fa09 	bl	800953c <xTaskResumeAll>
}
 800a12a:	bf00      	nop
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20001154 	.word	0x20001154
 800a138:	20001158 	.word	0x20001158
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a148:	4b0e      	ldr	r3, [pc, #56]	@ (800a184 <prvGetNextExpireTime+0x44>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <prvGetNextExpireTime+0x16>
 800a152:	2201      	movs	r2, #1
 800a154:	e000      	b.n	800a158 <prvGetNextExpireTime+0x18>
 800a156:	2200      	movs	r2, #0
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d105      	bne.n	800a170 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a164:	4b07      	ldr	r3, [pc, #28]	@ (800a184 <prvGetNextExpireTime+0x44>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	e001      	b.n	800a174 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a174:	68fb      	ldr	r3, [r7, #12]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20001150 	.word	0x20001150

0800a188 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a190:	f7ff fa72 	bl	8009678 <xTaskGetTickCount>
 800a194:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a196:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <prvSampleTimeNow+0x3c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d205      	bcs.n	800a1ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1a0:	f000 f93a 	bl	800a418 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	e002      	b.n	800a1b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1b2:	4a04      	ldr	r2, [pc, #16]	@ (800a1c4 <prvSampleTimeNow+0x3c>)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20001160 	.word	0x20001160

0800a1c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d812      	bhi.n	800a214 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	1ad2      	subs	r2, r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d302      	bcc.n	800a202 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	e01b      	b.n	800a23a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a202:	4b10      	ldr	r3, [pc, #64]	@ (800a244 <prvInsertTimerInActiveList+0x7c>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3304      	adds	r3, #4
 800a20a:	4619      	mov	r1, r3
 800a20c:	4610      	mov	r0, r2
 800a20e:	f7fe f9e6 	bl	80085de <vListInsert>
 800a212:	e012      	b.n	800a23a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d206      	bcs.n	800a22a <prvInsertTimerInActiveList+0x62>
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d302      	bcc.n	800a22a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a224:	2301      	movs	r3, #1
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e007      	b.n	800a23a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a22a:	4b07      	ldr	r3, [pc, #28]	@ (800a248 <prvInsertTimerInActiveList+0x80>)
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3304      	adds	r3, #4
 800a232:	4619      	mov	r1, r3
 800a234:	4610      	mov	r0, r2
 800a236:	f7fe f9d2 	bl	80085de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a23a:	697b      	ldr	r3, [r7, #20]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20001154 	.word	0x20001154
 800a248:	20001150 	.word	0x20001150

0800a24c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08e      	sub	sp, #56	@ 0x38
 800a250:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a252:	e0ce      	b.n	800a3f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	da19      	bge.n	800a28e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a25a:	1d3b      	adds	r3, r7, #4
 800a25c:	3304      	adds	r3, #4
 800a25e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	61fb      	str	r3, [r7, #28]
}
 800a278:	bf00      	nop
 800a27a:	bf00      	nop
 800a27c:	e7fd      	b.n	800a27a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a284:	6850      	ldr	r0, [r2, #4]
 800a286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a288:	6892      	ldr	r2, [r2, #8]
 800a28a:	4611      	mov	r1, r2
 800a28c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	f2c0 80ae 	blt.w	800a3f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d004      	beq.n	800a2ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe f9d2 	bl	8008650 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff ff6a 	bl	800a188 <prvSampleTimeNow>
 800a2b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b09      	cmp	r3, #9
 800a2ba:	f200 8097 	bhi.w	800a3ec <prvProcessReceivedCommands+0x1a0>
 800a2be:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c4 <prvProcessReceivedCommands+0x78>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2ed 	.word	0x0800a2ed
 800a2c8:	0800a2ed 	.word	0x0800a2ed
 800a2cc:	0800a2ed 	.word	0x0800a2ed
 800a2d0:	0800a363 	.word	0x0800a363
 800a2d4:	0800a377 	.word	0x0800a377
 800a2d8:	0800a3c3 	.word	0x0800a3c3
 800a2dc:	0800a2ed 	.word	0x0800a2ed
 800a2e0:	0800a2ed 	.word	0x0800a2ed
 800a2e4:	0800a363 	.word	0x0800a363
 800a2e8:	0800a377 	.word	0x0800a377
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2f2:	f043 0301 	orr.w	r3, r3, #1
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	18d1      	adds	r1, r2, r3
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a30a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a30c:	f7ff ff5c 	bl	800a1c8 <prvInsertTimerInActiveList>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d06c      	beq.n	800a3f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a31c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d061      	beq.n	800a3f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	441a      	add	r2, r3
 800a334:	2300      	movs	r3, #0
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	2300      	movs	r3, #0
 800a33a:	2100      	movs	r1, #0
 800a33c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a33e:	f7ff fe01 	bl	8009f44 <xTimerGenericCommand>
 800a342:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d152      	bne.n	800a3f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	61bb      	str	r3, [r7, #24]
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	e7fd      	b.n	800a35e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a370:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a374:	e03d      	b.n	800a3f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	b2da      	uxtb	r2, r3
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	617b      	str	r3, [r7, #20]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	699a      	ldr	r2, [r3, #24]
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b4:	18d1      	adds	r1, r2, r3
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3bc:	f7ff ff04 	bl	800a1c8 <prvInsertTimerInActiveList>
					break;
 800a3c0:	e017      	b.n	800a3f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d103      	bne.n	800a3d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a3d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3d2:	f000 fbe9 	bl	800aba8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3d6:	e00c      	b.n	800a3f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3de:	f023 0301 	bic.w	r3, r3, #1
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a3ea:	e002      	b.n	800a3f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a3ec:	bf00      	nop
 800a3ee:	e000      	b.n	800a3f2 <prvProcessReceivedCommands+0x1a6>
					break;
 800a3f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3f2:	4b08      	ldr	r3, [pc, #32]	@ (800a414 <prvProcessReceivedCommands+0x1c8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	1d39      	adds	r1, r7, #4
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe fbfc 	bl	8008bf8 <xQueueReceive>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	f47f af26 	bne.w	800a254 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	3730      	adds	r7, #48	@ 0x30
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20001158 	.word	0x20001158

0800a418 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a41e:	e049      	b.n	800a4b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a420:	4b2e      	ldr	r3, [pc, #184]	@ (800a4dc <prvSwitchTimerLists+0xc4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a42a:	4b2c      	ldr	r3, [pc, #176]	@ (800a4dc <prvSwitchTimerLists+0xc4>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3304      	adds	r3, #4
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe f909 	bl	8008650 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b00      	cmp	r3, #0
 800a452:	d02f      	beq.n	800a4b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4413      	add	r3, r2
 800a45c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	429a      	cmp	r2, r3
 800a464:	d90e      	bls.n	800a484 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a472:	4b1a      	ldr	r3, [pc, #104]	@ (800a4dc <prvSwitchTimerLists+0xc4>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3304      	adds	r3, #4
 800a47a:	4619      	mov	r1, r3
 800a47c:	4610      	mov	r0, r2
 800a47e:	f7fe f8ae 	bl	80085de <vListInsert>
 800a482:	e017      	b.n	800a4b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a484:	2300      	movs	r3, #0
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	2300      	movs	r3, #0
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	2100      	movs	r1, #0
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff fd58 	bl	8009f44 <xTimerGenericCommand>
 800a494:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10b      	bne.n	800a4b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	603b      	str	r3, [r7, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	e7fd      	b.n	800a4b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4b4:	4b09      	ldr	r3, [pc, #36]	@ (800a4dc <prvSwitchTimerLists+0xc4>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1b0      	bne.n	800a420 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4be:	4b07      	ldr	r3, [pc, #28]	@ (800a4dc <prvSwitchTimerLists+0xc4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4c4:	4b06      	ldr	r3, [pc, #24]	@ (800a4e0 <prvSwitchTimerLists+0xc8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a04      	ldr	r2, [pc, #16]	@ (800a4dc <prvSwitchTimerLists+0xc4>)
 800a4ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4cc:	4a04      	ldr	r2, [pc, #16]	@ (800a4e0 <prvSwitchTimerLists+0xc8>)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	6013      	str	r3, [r2, #0]
}
 800a4d2:	bf00      	nop
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20001150 	.word	0x20001150
 800a4e0:	20001154 	.word	0x20001154

0800a4e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4ea:	f000 f96d 	bl	800a7c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4ee:	4b15      	ldr	r3, [pc, #84]	@ (800a544 <prvCheckForValidListAndQueue+0x60>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d120      	bne.n	800a538 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4f6:	4814      	ldr	r0, [pc, #80]	@ (800a548 <prvCheckForValidListAndQueue+0x64>)
 800a4f8:	f7fe f820 	bl	800853c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4fc:	4813      	ldr	r0, [pc, #76]	@ (800a54c <prvCheckForValidListAndQueue+0x68>)
 800a4fe:	f7fe f81d 	bl	800853c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a502:	4b13      	ldr	r3, [pc, #76]	@ (800a550 <prvCheckForValidListAndQueue+0x6c>)
 800a504:	4a10      	ldr	r2, [pc, #64]	@ (800a548 <prvCheckForValidListAndQueue+0x64>)
 800a506:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a508:	4b12      	ldr	r3, [pc, #72]	@ (800a554 <prvCheckForValidListAndQueue+0x70>)
 800a50a:	4a10      	ldr	r2, [pc, #64]	@ (800a54c <prvCheckForValidListAndQueue+0x68>)
 800a50c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a50e:	2300      	movs	r3, #0
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	4b11      	ldr	r3, [pc, #68]	@ (800a558 <prvCheckForValidListAndQueue+0x74>)
 800a514:	4a11      	ldr	r2, [pc, #68]	@ (800a55c <prvCheckForValidListAndQueue+0x78>)
 800a516:	2110      	movs	r1, #16
 800a518:	200a      	movs	r0, #10
 800a51a:	f7fe f92d 	bl	8008778 <xQueueGenericCreateStatic>
 800a51e:	4603      	mov	r3, r0
 800a520:	4a08      	ldr	r2, [pc, #32]	@ (800a544 <prvCheckForValidListAndQueue+0x60>)
 800a522:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a524:	4b07      	ldr	r3, [pc, #28]	@ (800a544 <prvCheckForValidListAndQueue+0x60>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d005      	beq.n	800a538 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a52c:	4b05      	ldr	r3, [pc, #20]	@ (800a544 <prvCheckForValidListAndQueue+0x60>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	490b      	ldr	r1, [pc, #44]	@ (800a560 <prvCheckForValidListAndQueue+0x7c>)
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fd52 	bl	8008fdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a538:	f000 f978 	bl	800a82c <vPortExitCritical>
}
 800a53c:	bf00      	nop
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20001158 	.word	0x20001158
 800a548:	20001128 	.word	0x20001128
 800a54c:	2000113c 	.word	0x2000113c
 800a550:	20001150 	.word	0x20001150
 800a554:	20001154 	.word	0x20001154
 800a558:	20001204 	.word	0x20001204
 800a55c:	20001164 	.word	0x20001164
 800a560:	0800dfac 	.word	0x0800dfac

0800a564 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3b04      	subs	r3, #4
 800a574:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a57c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3b04      	subs	r3, #4
 800a582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f023 0201 	bic.w	r2, r3, #1
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3b04      	subs	r3, #4
 800a592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a594:	4a0c      	ldr	r2, [pc, #48]	@ (800a5c8 <pxPortInitialiseStack+0x64>)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3b14      	subs	r3, #20
 800a59e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3b04      	subs	r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f06f 0202 	mvn.w	r2, #2
 800a5b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3b20      	subs	r3, #32
 800a5b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	0800a5cd 	.word	0x0800a5cd

0800a5cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5d6:	4b13      	ldr	r3, [pc, #76]	@ (800a624 <prvTaskExitError+0x58>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d00b      	beq.n	800a5f8 <prvTaskExitError+0x2c>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	60fb      	str	r3, [r7, #12]
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	e7fd      	b.n	800a5f4 <prvTaskExitError+0x28>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	60bb      	str	r3, [r7, #8]
}
 800a60a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a60c:	bf00      	nop
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0fc      	beq.n	800a60e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20000010 	.word	0x20000010
	...

0800a630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a630:	4b07      	ldr	r3, [pc, #28]	@ (800a650 <pxCurrentTCBConst2>)
 800a632:	6819      	ldr	r1, [r3, #0]
 800a634:	6808      	ldr	r0, [r1, #0]
 800a636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63a:	f380 8809 	msr	PSP, r0
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f04f 0000 	mov.w	r0, #0
 800a646:	f380 8811 	msr	BASEPRI, r0
 800a64a:	4770      	bx	lr
 800a64c:	f3af 8000 	nop.w

0800a650 <pxCurrentTCBConst2>:
 800a650:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop

0800a658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a658:	4808      	ldr	r0, [pc, #32]	@ (800a67c <prvPortStartFirstTask+0x24>)
 800a65a:	6800      	ldr	r0, [r0, #0]
 800a65c:	6800      	ldr	r0, [r0, #0]
 800a65e:	f380 8808 	msr	MSP, r0
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8814 	msr	CONTROL, r0
 800a66a:	b662      	cpsie	i
 800a66c:	b661      	cpsie	f
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	df00      	svc	0
 800a678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a67a:	bf00      	nop
 800a67c:	e000ed08 	.word	0xe000ed08

0800a680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a686:	4b47      	ldr	r3, [pc, #284]	@ (800a7a4 <xPortStartScheduler+0x124>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a47      	ldr	r2, [pc, #284]	@ (800a7a8 <xPortStartScheduler+0x128>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d10b      	bne.n	800a6a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	613b      	str	r3, [r7, #16]
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	e7fd      	b.n	800a6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7a4 <xPortStartScheduler+0x124>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a3f      	ldr	r2, [pc, #252]	@ (800a7ac <xPortStartScheduler+0x12c>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d10b      	bne.n	800a6ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	60fb      	str	r3, [r7, #12]
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6ca:	4b39      	ldr	r3, [pc, #228]	@ (800a7b0 <xPortStartScheduler+0x130>)
 800a6cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	22ff      	movs	r2, #255	@ 0xff
 800a6da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6e4:	78fb      	ldrb	r3, [r7, #3]
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	4b31      	ldr	r3, [pc, #196]	@ (800a7b4 <xPortStartScheduler+0x134>)
 800a6f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6f2:	4b31      	ldr	r3, [pc, #196]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a6f4:	2207      	movs	r2, #7
 800a6f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6f8:	e009      	b.n	800a70e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a6fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	4a2d      	ldr	r2, [pc, #180]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a70e:	78fb      	ldrb	r3, [r7, #3]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a716:	2b80      	cmp	r3, #128	@ 0x80
 800a718:	d0ef      	beq.n	800a6fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a71a:	4b27      	ldr	r3, [pc, #156]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f1c3 0307 	rsb	r3, r3, #7
 800a722:	2b04      	cmp	r3, #4
 800a724:	d00b      	beq.n	800a73e <xPortStartScheduler+0xbe>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	60bb      	str	r3, [r7, #8]
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	e7fd      	b.n	800a73a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a73e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	021b      	lsls	r3, r3, #8
 800a744:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a748:	4b1b      	ldr	r3, [pc, #108]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a750:	4a19      	ldr	r2, [pc, #100]	@ (800a7b8 <xPortStartScheduler+0x138>)
 800a752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	b2da      	uxtb	r2, r3
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a75c:	4b17      	ldr	r3, [pc, #92]	@ (800a7bc <xPortStartScheduler+0x13c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a16      	ldr	r2, [pc, #88]	@ (800a7bc <xPortStartScheduler+0x13c>)
 800a762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a768:	4b14      	ldr	r3, [pc, #80]	@ (800a7bc <xPortStartScheduler+0x13c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a13      	ldr	r2, [pc, #76]	@ (800a7bc <xPortStartScheduler+0x13c>)
 800a76e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a774:	f000 f8da 	bl	800a92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a778:	4b11      	ldr	r3, [pc, #68]	@ (800a7c0 <xPortStartScheduler+0x140>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a77e:	f000 f8f9 	bl	800a974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a782:	4b10      	ldr	r3, [pc, #64]	@ (800a7c4 <xPortStartScheduler+0x144>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a0f      	ldr	r2, [pc, #60]	@ (800a7c4 <xPortStartScheduler+0x144>)
 800a788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a78c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a78e:	f7ff ff63 	bl	800a658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a792:	f7ff f83b 	bl	800980c <vTaskSwitchContext>
	prvTaskExitError();
 800a796:	f7ff ff19 	bl	800a5cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	e000ed00 	.word	0xe000ed00
 800a7a8:	410fc271 	.word	0x410fc271
 800a7ac:	410fc270 	.word	0x410fc270
 800a7b0:	e000e400 	.word	0xe000e400
 800a7b4:	20001254 	.word	0x20001254
 800a7b8:	20001258 	.word	0x20001258
 800a7bc:	e000ed20 	.word	0xe000ed20
 800a7c0:	20000010 	.word	0x20000010
 800a7c4:	e000ef34 	.word	0xe000ef34

0800a7c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	607b      	str	r3, [r7, #4]
}
 800a7e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7e2:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <vPortEnterCritical+0x5c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a824 <vPortEnterCritical+0x5c>)
 800a7ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a824 <vPortEnterCritical+0x5c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d110      	bne.n	800a816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <vPortEnterCritical+0x60>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <vPortEnterCritical+0x4e>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	603b      	str	r3, [r7, #0]
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <vPortEnterCritical+0x4a>
	}
}
 800a816:	bf00      	nop
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	20000010 	.word	0x20000010
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a832:	4b12      	ldr	r3, [pc, #72]	@ (800a87c <vPortExitCritical+0x50>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10b      	bne.n	800a852 <vPortExitCritical+0x26>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	607b      	str	r3, [r7, #4]
}
 800a84c:	bf00      	nop
 800a84e:	bf00      	nop
 800a850:	e7fd      	b.n	800a84e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a852:	4b0a      	ldr	r3, [pc, #40]	@ (800a87c <vPortExitCritical+0x50>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3b01      	subs	r3, #1
 800a858:	4a08      	ldr	r2, [pc, #32]	@ (800a87c <vPortExitCritical+0x50>)
 800a85a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a85c:	4b07      	ldr	r3, [pc, #28]	@ (800a87c <vPortExitCritical+0x50>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <vPortExitCritical+0x44>
 800a864:	2300      	movs	r3, #0
 800a866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	f383 8811 	msr	BASEPRI, r3
}
 800a86e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	20000010 	.word	0x20000010

0800a880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a880:	f3ef 8009 	mrs	r0, PSP
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	4b15      	ldr	r3, [pc, #84]	@ (800a8e0 <pxCurrentTCBConst>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	f01e 0f10 	tst.w	lr, #16
 800a890:	bf08      	it	eq
 800a892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89a:	6010      	str	r0, [r2, #0]
 800a89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8a4:	f380 8811 	msr	BASEPRI, r0
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f7fe ffac 	bl	800980c <vTaskSwitchContext>
 800a8b4:	f04f 0000 	mov.w	r0, #0
 800a8b8:	f380 8811 	msr	BASEPRI, r0
 800a8bc:	bc09      	pop	{r0, r3}
 800a8be:	6819      	ldr	r1, [r3, #0]
 800a8c0:	6808      	ldr	r0, [r1, #0]
 800a8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c6:	f01e 0f10 	tst.w	lr, #16
 800a8ca:	bf08      	it	eq
 800a8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8d0:	f380 8809 	msr	PSP, r0
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	f3af 8000 	nop.w

0800a8e0 <pxCurrentTCBConst>:
 800a8e0:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop

0800a8e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	607b      	str	r3, [r7, #4]
}
 800a900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a902:	f7fe fec9 	bl	8009698 <xTaskIncrementTick>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a90c:	4b06      	ldr	r3, [pc, #24]	@ (800a928 <xPortSysTickHandler+0x40>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	f383 8811 	msr	BASEPRI, r3
}
 800a91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	e000ed04 	.word	0xe000ed04

0800a92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a930:	4b0b      	ldr	r3, [pc, #44]	@ (800a960 <vPortSetupTimerInterrupt+0x34>)
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a936:	4b0b      	ldr	r3, [pc, #44]	@ (800a964 <vPortSetupTimerInterrupt+0x38>)
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a93c:	4b0a      	ldr	r3, [pc, #40]	@ (800a968 <vPortSetupTimerInterrupt+0x3c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a0a      	ldr	r2, [pc, #40]	@ (800a96c <vPortSetupTimerInterrupt+0x40>)
 800a942:	fba2 2303 	umull	r2, r3, r2, r3
 800a946:	099b      	lsrs	r3, r3, #6
 800a948:	4a09      	ldr	r2, [pc, #36]	@ (800a970 <vPortSetupTimerInterrupt+0x44>)
 800a94a:	3b01      	subs	r3, #1
 800a94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a94e:	4b04      	ldr	r3, [pc, #16]	@ (800a960 <vPortSetupTimerInterrupt+0x34>)
 800a950:	2207      	movs	r2, #7
 800a952:	601a      	str	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	e000e010 	.word	0xe000e010
 800a964:	e000e018 	.word	0xe000e018
 800a968:	20000004 	.word	0x20000004
 800a96c:	10624dd3 	.word	0x10624dd3
 800a970:	e000e014 	.word	0xe000e014

0800a974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a984 <vPortEnableVFP+0x10>
 800a978:	6801      	ldr	r1, [r0, #0]
 800a97a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a97e:	6001      	str	r1, [r0, #0]
 800a980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a982:	bf00      	nop
 800a984:	e000ed88 	.word	0xe000ed88

0800a988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a98e:	f3ef 8305 	mrs	r3, IPSR
 800a992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b0f      	cmp	r3, #15
 800a998:	d915      	bls.n	800a9c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a99a:	4a18      	ldr	r2, [pc, #96]	@ (800a9fc <vPortValidateInterruptPriority+0x74>)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9a4:	4b16      	ldr	r3, [pc, #88]	@ (800aa00 <vPortValidateInterruptPriority+0x78>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	7afa      	ldrb	r2, [r7, #11]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d20b      	bcs.n	800a9c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	607b      	str	r3, [r7, #4]
}
 800a9c0:	bf00      	nop
 800a9c2:	bf00      	nop
 800a9c4:	e7fd      	b.n	800a9c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <vPortValidateInterruptPriority+0x7c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800aa08 <vPortValidateInterruptPriority+0x80>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d90b      	bls.n	800a9ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	603b      	str	r3, [r7, #0]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <vPortValidateInterruptPriority+0x62>
	}
 800a9ee:	bf00      	nop
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	e000e3f0 	.word	0xe000e3f0
 800aa00:	20001254 	.word	0x20001254
 800aa04:	e000ed0c 	.word	0xe000ed0c
 800aa08:	20001258 	.word	0x20001258

0800aa0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08a      	sub	sp, #40	@ 0x28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa14:	2300      	movs	r3, #0
 800aa16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa18:	f7fe fd82 	bl	8009520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ab90 <pvPortMalloc+0x184>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa24:	f000 f924 	bl	800ac70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa28:	4b5a      	ldr	r3, [pc, #360]	@ (800ab94 <pvPortMalloc+0x188>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4013      	ands	r3, r2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f040 8095 	bne.w	800ab60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01e      	beq.n	800aa7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aa3c:	2208      	movs	r2, #8
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4413      	add	r3, r2
 800aa42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d015      	beq.n	800aa7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f023 0307 	bic.w	r3, r3, #7
 800aa54:	3308      	adds	r3, #8
 800aa56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00b      	beq.n	800aa7a <pvPortMalloc+0x6e>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	617b      	str	r3, [r7, #20]
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	e7fd      	b.n	800aa76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d06f      	beq.n	800ab60 <pvPortMalloc+0x154>
 800aa80:	4b45      	ldr	r3, [pc, #276]	@ (800ab98 <pvPortMalloc+0x18c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d86a      	bhi.n	800ab60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa8a:	4b44      	ldr	r3, [pc, #272]	@ (800ab9c <pvPortMalloc+0x190>)
 800aa8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa8e:	4b43      	ldr	r3, [pc, #268]	@ (800ab9c <pvPortMalloc+0x190>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa94:	e004      	b.n	800aaa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d903      	bls.n	800aab2 <pvPortMalloc+0xa6>
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1f1      	bne.n	800aa96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aab2:	4b37      	ldr	r3, [pc, #220]	@ (800ab90 <pvPortMalloc+0x184>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d051      	beq.n	800ab60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2208      	movs	r2, #8
 800aac2:	4413      	add	r3, r2
 800aac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	1ad2      	subs	r2, r2, r3
 800aad6:	2308      	movs	r3, #8
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	429a      	cmp	r2, r3
 800aadc:	d920      	bls.n	800ab20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4413      	add	r3, r2
 800aae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	f003 0307 	and.w	r3, r3, #7
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <pvPortMalloc+0xfc>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	613b      	str	r3, [r7, #16]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab1a:	69b8      	ldr	r0, [r7, #24]
 800ab1c:	f000 f90a 	bl	800ad34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab20:	4b1d      	ldr	r3, [pc, #116]	@ (800ab98 <pvPortMalloc+0x18c>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ab98 <pvPortMalloc+0x18c>)
 800ab2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ab98 <pvPortMalloc+0x18c>)
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	4b1b      	ldr	r3, [pc, #108]	@ (800aba0 <pvPortMalloc+0x194>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d203      	bcs.n	800ab42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab3a:	4b17      	ldr	r3, [pc, #92]	@ (800ab98 <pvPortMalloc+0x18c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a18      	ldr	r2, [pc, #96]	@ (800aba0 <pvPortMalloc+0x194>)
 800ab40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	4b13      	ldr	r3, [pc, #76]	@ (800ab94 <pvPortMalloc+0x188>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	2200      	movs	r2, #0
 800ab54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab56:	4b13      	ldr	r3, [pc, #76]	@ (800aba4 <pvPortMalloc+0x198>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	4a11      	ldr	r2, [pc, #68]	@ (800aba4 <pvPortMalloc+0x198>)
 800ab5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab60:	f7fe fcec 	bl	800953c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00b      	beq.n	800ab86 <pvPortMalloc+0x17a>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	60fb      	str	r3, [r7, #12]
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <pvPortMalloc+0x176>
	return pvReturn;
 800ab86:	69fb      	ldr	r3, [r7, #28]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3728      	adds	r7, #40	@ 0x28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20004e64 	.word	0x20004e64
 800ab94:	20004e78 	.word	0x20004e78
 800ab98:	20004e68 	.word	0x20004e68
 800ab9c:	20004e5c 	.word	0x20004e5c
 800aba0:	20004e6c 	.word	0x20004e6c
 800aba4:	20004e70 	.word	0x20004e70

0800aba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d04f      	beq.n	800ac5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abba:	2308      	movs	r3, #8
 800abbc:	425b      	negs	r3, r3
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4413      	add	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	4b25      	ldr	r3, [pc, #148]	@ (800ac64 <vPortFree+0xbc>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4013      	ands	r3, r2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10b      	bne.n	800abee <vPortFree+0x46>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	60fb      	str	r3, [r7, #12]
}
 800abe8:	bf00      	nop
 800abea:	bf00      	nop
 800abec:	e7fd      	b.n	800abea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00b      	beq.n	800ac0e <vPortFree+0x66>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	60bb      	str	r3, [r7, #8]
}
 800ac08:	bf00      	nop
 800ac0a:	bf00      	nop
 800ac0c:	e7fd      	b.n	800ac0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	4b14      	ldr	r3, [pc, #80]	@ (800ac64 <vPortFree+0xbc>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4013      	ands	r3, r2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d01e      	beq.n	800ac5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d11a      	bne.n	800ac5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	4b0e      	ldr	r3, [pc, #56]	@ (800ac64 <vPortFree+0xbc>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	43db      	mvns	r3, r3
 800ac2e:	401a      	ands	r2, r3
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac34:	f7fe fc74 	bl	8009520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac68 <vPortFree+0xc0>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4413      	add	r3, r2
 800ac42:	4a09      	ldr	r2, [pc, #36]	@ (800ac68 <vPortFree+0xc0>)
 800ac44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac46:	6938      	ldr	r0, [r7, #16]
 800ac48:	f000 f874 	bl	800ad34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac4c:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <vPortFree+0xc4>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3301      	adds	r3, #1
 800ac52:	4a06      	ldr	r2, [pc, #24]	@ (800ac6c <vPortFree+0xc4>)
 800ac54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac56:	f7fe fc71 	bl	800953c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac5a:	bf00      	nop
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20004e78 	.word	0x20004e78
 800ac68:	20004e68 	.word	0x20004e68
 800ac6c:	20004e74 	.word	0x20004e74

0800ac70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ac7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac7c:	4b27      	ldr	r3, [pc, #156]	@ (800ad1c <prvHeapInit+0xac>)
 800ac7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00c      	beq.n	800aca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3307      	adds	r3, #7
 800ac8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f023 0307 	bic.w	r3, r3, #7
 800ac96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	4a1f      	ldr	r2, [pc, #124]	@ (800ad1c <prvHeapInit+0xac>)
 800aca0:	4413      	add	r3, r2
 800aca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aca8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad20 <prvHeapInit+0xb0>)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acae:	4b1c      	ldr	r3, [pc, #112]	@ (800ad20 <prvHeapInit+0xb0>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	4413      	add	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acbc:	2208      	movs	r2, #8
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	1a9b      	subs	r3, r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f023 0307 	bic.w	r3, r3, #7
 800acca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4a15      	ldr	r2, [pc, #84]	@ (800ad24 <prvHeapInit+0xb4>)
 800acd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acd2:	4b14      	ldr	r3, [pc, #80]	@ (800ad24 <prvHeapInit+0xb4>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2200      	movs	r2, #0
 800acd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acda:	4b12      	ldr	r3, [pc, #72]	@ (800ad24 <prvHeapInit+0xb4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	1ad2      	subs	r2, r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad24 <prvHeapInit+0xb4>)
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ad28 <prvHeapInit+0xb8>)
 800acfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	4a09      	ldr	r2, [pc, #36]	@ (800ad2c <prvHeapInit+0xbc>)
 800ad06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad08:	4b09      	ldr	r3, [pc, #36]	@ (800ad30 <prvHeapInit+0xc0>)
 800ad0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ad0e:	601a      	str	r2, [r3, #0]
}
 800ad10:	bf00      	nop
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	2000125c 	.word	0x2000125c
 800ad20:	20004e5c 	.word	0x20004e5c
 800ad24:	20004e64 	.word	0x20004e64
 800ad28:	20004e6c 	.word	0x20004e6c
 800ad2c:	20004e68 	.word	0x20004e68
 800ad30:	20004e78 	.word	0x20004e78

0800ad34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad3c:	4b28      	ldr	r3, [pc, #160]	@ (800ade0 <prvInsertBlockIntoFreeList+0xac>)
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	e002      	b.n	800ad48 <prvInsertBlockIntoFreeList+0x14>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d8f7      	bhi.n	800ad42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d108      	bne.n	800ad76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	441a      	add	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	441a      	add	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d118      	bne.n	800adbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4b15      	ldr	r3, [pc, #84]	@ (800ade4 <prvInsertBlockIntoFreeList+0xb0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d00d      	beq.n	800adb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	441a      	add	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	e008      	b.n	800adc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ade4 <prvInsertBlockIntoFreeList+0xb0>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	e003      	b.n	800adc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d002      	beq.n	800add2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	20004e5c 	.word	0x20004e5c
 800ade4:	20004e64 	.word	0x20004e64

0800ade8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800adee:	2300      	movs	r3, #0
 800adf0:	71fb      	strb	r3, [r7, #7]
 800adf2:	e026      	b.n	800ae42 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800adf4:	79fb      	ldrb	r3, [r7, #7]
 800adf6:	3b50      	subs	r3, #80	@ 0x50
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2100      	movs	r1, #0
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f82b 	bl	800ae58 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800ae02:	2100      	movs	r1, #0
 800ae04:	2000      	movs	r0, #0
 800ae06:	f000 f827 	bl	800ae58 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	2010      	movs	r0, #16
 800ae0e:	f000 f823 	bl	800ae58 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800ae12:	2300      	movs	r3, #0
 800ae14:	71bb      	strb	r3, [r7, #6]
 800ae16:	e00d      	b.n	800ae34 <OLED_Refresh_Gram+0x4c>
 800ae18:	79ba      	ldrb	r2, [r7, #6]
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	490d      	ldr	r1, [pc, #52]	@ (800ae54 <OLED_Refresh_Gram+0x6c>)
 800ae1e:	00d2      	lsls	r2, r2, #3
 800ae20:	440a      	add	r2, r1
 800ae22:	4413      	add	r3, r2
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2101      	movs	r1, #1
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 f815 	bl	800ae58 <OLED_WR_Byte>
 800ae2e:	79bb      	ldrb	r3, [r7, #6]
 800ae30:	3301      	adds	r3, #1
 800ae32:	71bb      	strb	r3, [r7, #6]
 800ae34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	daed      	bge.n	800ae18 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	71fb      	strb	r3, [r7, #7]
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	2b07      	cmp	r3, #7
 800ae46:	d9d5      	bls.n	800adf4 <OLED_Refresh_Gram+0xc>
	}   
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	20004e7c 	.word	0x20004e7c

0800ae58 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	460a      	mov	r2, r1
 800ae62:	71fb      	strb	r3, [r7, #7]
 800ae64:	4613      	mov	r3, r2
 800ae66:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800ae68:	79bb      	ldrb	r3, [r7, #6]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d006      	beq.n	800ae7c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ae74:	481c      	ldr	r0, [pc, #112]	@ (800aee8 <OLED_WR_Byte+0x90>)
 800ae76:	f7f9 f88b 	bl	8003f90 <HAL_GPIO_WritePin>
 800ae7a:	e005      	b.n	800ae88 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ae82:	4819      	ldr	r0, [pc, #100]	@ (800aee8 <OLED_WR_Byte+0x90>)
 800ae84:	f7f9 f884 	bl	8003f90 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73fb      	strb	r3, [r7, #15]
 800ae8c:	e01e      	b.n	800aecc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2120      	movs	r1, #32
 800ae92:	4815      	ldr	r0, [pc, #84]	@ (800aee8 <OLED_WR_Byte+0x90>)
 800ae94:	f7f9 f87c 	bl	8003f90 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800ae98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	da05      	bge.n	800aeac <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800aea0:	2201      	movs	r2, #1
 800aea2:	2140      	movs	r1, #64	@ 0x40
 800aea4:	4810      	ldr	r0, [pc, #64]	@ (800aee8 <OLED_WR_Byte+0x90>)
 800aea6:	f7f9 f873 	bl	8003f90 <HAL_GPIO_WritePin>
 800aeaa:	e004      	b.n	800aeb6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800aeac:	2200      	movs	r2, #0
 800aeae:	2140      	movs	r1, #64	@ 0x40
 800aeb0:	480d      	ldr	r0, [pc, #52]	@ (800aee8 <OLED_WR_Byte+0x90>)
 800aeb2:	f7f9 f86d 	bl	8003f90 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	2120      	movs	r1, #32
 800aeba:	480b      	ldr	r0, [pc, #44]	@ (800aee8 <OLED_WR_Byte+0x90>)
 800aebc:	f7f9 f868 	bl	8003f90 <HAL_GPIO_WritePin>
		dat<<=1;   
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
 800aec8:	3301      	adds	r3, #1
 800aeca:	73fb      	strb	r3, [r7, #15]
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	2b07      	cmp	r3, #7
 800aed0:	d9dd      	bls.n	800ae8e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800aed2:	2201      	movs	r2, #1
 800aed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aed8:	4803      	ldr	r0, [pc, #12]	@ (800aee8 <OLED_WR_Byte+0x90>)
 800aeda:	f7f9 f859 	bl	8003f90 <HAL_GPIO_WritePin>
} 
 800aede:	bf00      	nop
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	40021000 	.word	0x40021000

0800aeec <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800aef2:	2300      	movs	r3, #0
 800aef4:	71fb      	strb	r3, [r7, #7]
 800aef6:	e014      	b.n	800af22 <OLED_Clear+0x36>
 800aef8:	2300      	movs	r3, #0
 800aefa:	71bb      	strb	r3, [r7, #6]
 800aefc:	e00a      	b.n	800af14 <OLED_Clear+0x28>
 800aefe:	79ba      	ldrb	r2, [r7, #6]
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	490c      	ldr	r1, [pc, #48]	@ (800af34 <OLED_Clear+0x48>)
 800af04:	00d2      	lsls	r2, r2, #3
 800af06:	440a      	add	r2, r1
 800af08:	4413      	add	r3, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	79bb      	ldrb	r3, [r7, #6]
 800af10:	3301      	adds	r3, #1
 800af12:	71bb      	strb	r3, [r7, #6]
 800af14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	daf0      	bge.n	800aefe <OLED_Clear+0x12>
 800af1c:	79fb      	ldrb	r3, [r7, #7]
 800af1e:	3301      	adds	r3, #1
 800af20:	71fb      	strb	r3, [r7, #7]
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	2b07      	cmp	r3, #7
 800af26:	d9e7      	bls.n	800aef8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800af28:	f7ff ff5e 	bl	800ade8 <OLED_Refresh_Gram>
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	20004e7c 	.word	0x20004e7c

0800af38 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	4603      	mov	r3, r0
 800af40:	71fb      	strb	r3, [r7, #7]
 800af42:	460b      	mov	r3, r1
 800af44:	71bb      	strb	r3, [r7, #6]
 800af46:	4613      	mov	r3, r2
 800af48:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800af4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af52:	2b00      	cmp	r3, #0
 800af54:	db41      	blt.n	800afda <OLED_DrawPoint+0xa2>
 800af56:	79bb      	ldrb	r3, [r7, #6]
 800af58:	2b3f      	cmp	r3, #63	@ 0x3f
 800af5a:	d83e      	bhi.n	800afda <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800af5c:	79bb      	ldrb	r3, [r7, #6]
 800af5e:	08db      	lsrs	r3, r3, #3
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f1c3 0307 	rsb	r3, r3, #7
 800af66:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800af68:	79bb      	ldrb	r3, [r7, #6]
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800af70:	7b7b      	ldrb	r3, [r7, #13]
 800af72:	f1c3 0307 	rsb	r3, r3, #7
 800af76:	2201      	movs	r2, #1
 800af78:	fa02 f303 	lsl.w	r3, r2, r3
 800af7c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800af7e:	797b      	ldrb	r3, [r7, #5]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d012      	beq.n	800afaa <OLED_DrawPoint+0x72>
 800af84:	79fa      	ldrb	r2, [r7, #7]
 800af86:	7bbb      	ldrb	r3, [r7, #14]
 800af88:	4917      	ldr	r1, [pc, #92]	@ (800afe8 <OLED_DrawPoint+0xb0>)
 800af8a:	00d2      	lsls	r2, r2, #3
 800af8c:	440a      	add	r2, r1
 800af8e:	4413      	add	r3, r2
 800af90:	7818      	ldrb	r0, [r3, #0]
 800af92:	79fa      	ldrb	r2, [r7, #7]
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	7bf9      	ldrb	r1, [r7, #15]
 800af98:	4301      	orrs	r1, r0
 800af9a:	b2c8      	uxtb	r0, r1
 800af9c:	4912      	ldr	r1, [pc, #72]	@ (800afe8 <OLED_DrawPoint+0xb0>)
 800af9e:	00d2      	lsls	r2, r2, #3
 800afa0:	440a      	add	r2, r1
 800afa2:	4413      	add	r3, r2
 800afa4:	4602      	mov	r2, r0
 800afa6:	701a      	strb	r2, [r3, #0]
 800afa8:	e018      	b.n	800afdc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800afaa:	79fa      	ldrb	r2, [r7, #7]
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	490e      	ldr	r1, [pc, #56]	@ (800afe8 <OLED_DrawPoint+0xb0>)
 800afb0:	00d2      	lsls	r2, r2, #3
 800afb2:	440a      	add	r2, r1
 800afb4:	4413      	add	r3, r2
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	b25a      	sxtb	r2, r3
 800afba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afbe:	43db      	mvns	r3, r3
 800afc0:	b25b      	sxtb	r3, r3
 800afc2:	4013      	ands	r3, r2
 800afc4:	b259      	sxtb	r1, r3
 800afc6:	79fa      	ldrb	r2, [r7, #7]
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	b2c8      	uxtb	r0, r1
 800afcc:	4906      	ldr	r1, [pc, #24]	@ (800afe8 <OLED_DrawPoint+0xb0>)
 800afce:	00d2      	lsls	r2, r2, #3
 800afd0:	440a      	add	r2, r1
 800afd2:	4413      	add	r3, r2
 800afd4:	4602      	mov	r2, r0
 800afd6:	701a      	strb	r2, [r3, #0]
 800afd8:	e000      	b.n	800afdc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800afda:	bf00      	nop
}
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20004e7c 	.word	0x20004e7c

0800afec <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800afec:	b590      	push	{r4, r7, lr}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	4623      	mov	r3, r4
 800affc:	71fb      	strb	r3, [r7, #7]
 800affe:	4603      	mov	r3, r0
 800b000:	71bb      	strb	r3, [r7, #6]
 800b002:	460b      	mov	r3, r1
 800b004:	717b      	strb	r3, [r7, #5]
 800b006:	4613      	mov	r3, r2
 800b008:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b00a:	79bb      	ldrb	r3, [r7, #6]
 800b00c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b00e:	797b      	ldrb	r3, [r7, #5]
 800b010:	3b20      	subs	r3, #32
 800b012:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b014:	2300      	movs	r3, #0
 800b016:	73bb      	strb	r3, [r7, #14]
 800b018:	e04d      	b.n	800b0b6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b01a:	793b      	ldrb	r3, [r7, #4]
 800b01c:	2b0c      	cmp	r3, #12
 800b01e:	d10b      	bne.n	800b038 <OLED_ShowChar+0x4c>
 800b020:	797a      	ldrb	r2, [r7, #5]
 800b022:	7bb9      	ldrb	r1, [r7, #14]
 800b024:	4828      	ldr	r0, [pc, #160]	@ (800b0c8 <OLED_ShowChar+0xdc>)
 800b026:	4613      	mov	r3, r2
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4403      	add	r3, r0
 800b030:	440b      	add	r3, r1
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	73fb      	strb	r3, [r7, #15]
 800b036:	e007      	b.n	800b048 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800b038:	797a      	ldrb	r2, [r7, #5]
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	4923      	ldr	r1, [pc, #140]	@ (800b0cc <OLED_ShowChar+0xe0>)
 800b03e:	0112      	lsls	r2, r2, #4
 800b040:	440a      	add	r2, r1
 800b042:	4413      	add	r3, r2
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800b048:	2300      	movs	r3, #0
 800b04a:	737b      	strb	r3, [r7, #13]
 800b04c:	e02d      	b.n	800b0aa <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800b04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b052:	2b00      	cmp	r3, #0
 800b054:	da07      	bge.n	800b066 <OLED_ShowChar+0x7a>
 800b056:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b05a:	79b9      	ldrb	r1, [r7, #6]
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff ff6a 	bl	800af38 <OLED_DrawPoint>
 800b064:	e00c      	b.n	800b080 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b066:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	bf0c      	ite	eq
 800b06e:	2301      	moveq	r3, #1
 800b070:	2300      	movne	r3, #0
 800b072:	b2db      	uxtb	r3, r3
 800b074:	461a      	mov	r2, r3
 800b076:	79b9      	ldrb	r1, [r7, #6]
 800b078:	79fb      	ldrb	r3, [r7, #7]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff ff5c 	bl	800af38 <OLED_DrawPoint>
			temp<<=1;
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	73fb      	strb	r3, [r7, #15]
			y++;
 800b086:	79bb      	ldrb	r3, [r7, #6]
 800b088:	3301      	adds	r3, #1
 800b08a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b08c:	79ba      	ldrb	r2, [r7, #6]
 800b08e:	7b3b      	ldrb	r3, [r7, #12]
 800b090:	1ad2      	subs	r2, r2, r3
 800b092:	793b      	ldrb	r3, [r7, #4]
 800b094:	429a      	cmp	r2, r3
 800b096:	d105      	bne.n	800b0a4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b098:	7b3b      	ldrb	r3, [r7, #12]
 800b09a:	71bb      	strb	r3, [r7, #6]
				x++;
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	71fb      	strb	r3, [r7, #7]
				break;
 800b0a2:	e005      	b.n	800b0b0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b0a4:	7b7b      	ldrb	r3, [r7, #13]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	737b      	strb	r3, [r7, #13]
 800b0aa:	7b7b      	ldrb	r3, [r7, #13]
 800b0ac:	2b07      	cmp	r3, #7
 800b0ae:	d9ce      	bls.n	800b04e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	73bb      	strb	r3, [r7, #14]
 800b0b6:	7bba      	ldrb	r2, [r7, #14]
 800b0b8:	793b      	ldrb	r3, [r7, #4]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d3ad      	bcc.n	800b01a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b0be:	bf00      	nop
 800b0c0:	bf00      	nop
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd90      	pop	{r4, r7, pc}
 800b0c8:	0800e0c8 	.word	0x0800e0c8
 800b0cc:	0800e53c 	.word	0x0800e53c

0800b0d0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	603a      	str	r2, [r7, #0]
 800b0da:	71fb      	strb	r3, [r7, #7]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b0e0:	e01f      	b.n	800b122 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	2b7a      	cmp	r3, #122	@ 0x7a
 800b0e6:	d904      	bls.n	800b0f2 <OLED_ShowString+0x22>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	71fb      	strb	r3, [r7, #7]
 800b0ec:	79bb      	ldrb	r3, [r7, #6]
 800b0ee:	3310      	adds	r3, #16
 800b0f0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b0f2:	79bb      	ldrb	r3, [r7, #6]
 800b0f4:	2b3a      	cmp	r3, #58	@ 0x3a
 800b0f6:	d905      	bls.n	800b104 <OLED_ShowString+0x34>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	71bb      	strb	r3, [r7, #6]
 800b100:	f7ff fef4 	bl	800aeec <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781a      	ldrb	r2, [r3, #0]
 800b108:	79b9      	ldrb	r1, [r7, #6]
 800b10a:	79f8      	ldrb	r0, [r7, #7]
 800b10c:	2301      	movs	r3, #1
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	230c      	movs	r3, #12
 800b112:	f7ff ff6b 	bl	800afec <OLED_ShowChar>
        x+=8;
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	3308      	adds	r3, #8
 800b11a:	71fb      	strb	r3, [r7, #7]
        p++;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	3301      	adds	r3, #1
 800b120:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1db      	bne.n	800b0e2 <OLED_ShowString+0x12>
    }  
}	 
 800b12a:	bf00      	nop
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <OLED_Init>:

void OLED_Init(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b138:	f7f9 ff58 	bl	8004fec <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b13c:	4b41      	ldr	r3, [pc, #260]	@ (800b244 <OLED_Init+0x110>)
 800b13e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b140:	4a40      	ldr	r2, [pc, #256]	@ (800b244 <OLED_Init+0x110>)
 800b142:	f023 0301 	bic.w	r3, r3, #1
 800b146:	6713      	str	r3, [r2, #112]	@ 0x70
 800b148:	4b3e      	ldr	r3, [pc, #248]	@ (800b244 <OLED_Init+0x110>)
 800b14a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b14c:	4a3d      	ldr	r2, [pc, #244]	@ (800b244 <OLED_Init+0x110>)
 800b14e:	f023 0304 	bic.w	r3, r3, #4
 800b152:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b154:	f7f9 ff5e 	bl	8005014 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b158:	2200      	movs	r2, #0
 800b15a:	2180      	movs	r1, #128	@ 0x80
 800b15c:	483a      	ldr	r0, [pc, #232]	@ (800b248 <OLED_Init+0x114>)
 800b15e:	f7f8 ff17 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b162:	2064      	movs	r0, #100	@ 0x64
 800b164:	f7f8 f94e 	bl	8003404 <HAL_Delay>
	OLED_RST_Set();
 800b168:	2201      	movs	r2, #1
 800b16a:	2180      	movs	r1, #128	@ 0x80
 800b16c:	4836      	ldr	r0, [pc, #216]	@ (800b248 <OLED_Init+0x114>)
 800b16e:	f7f8 ff0f 	bl	8003f90 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b172:	2100      	movs	r1, #0
 800b174:	20ae      	movs	r0, #174	@ 0xae
 800b176:	f7ff fe6f 	bl	800ae58 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b17a:	2100      	movs	r1, #0
 800b17c:	20d5      	movs	r0, #213	@ 0xd5
 800b17e:	f7ff fe6b 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b182:	2100      	movs	r1, #0
 800b184:	2050      	movs	r0, #80	@ 0x50
 800b186:	f7ff fe67 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b18a:	2100      	movs	r1, #0
 800b18c:	20a8      	movs	r0, #168	@ 0xa8
 800b18e:	f7ff fe63 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b192:	2100      	movs	r1, #0
 800b194:	203f      	movs	r0, #63	@ 0x3f
 800b196:	f7ff fe5f 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800b19a:	2100      	movs	r1, #0
 800b19c:	20d3      	movs	r0, #211	@ 0xd3
 800b19e:	f7ff fe5b 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	f7ff fe57 	bl	800ae58 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	2040      	movs	r0, #64	@ 0x40
 800b1ae:	f7ff fe53 	bl	800ae58 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	208d      	movs	r0, #141	@ 0x8d
 800b1b6:	f7ff fe4f 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	2014      	movs	r0, #20
 800b1be:	f7ff fe4b 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	2020      	movs	r0, #32
 800b1c6:	f7ff fe47 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	2002      	movs	r0, #2
 800b1ce:	f7ff fe43 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	20a1      	movs	r0, #161	@ 0xa1
 800b1d6:	f7ff fe3f 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b1da:	2100      	movs	r1, #0
 800b1dc:	20c0      	movs	r0, #192	@ 0xc0
 800b1de:	f7ff fe3b 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	20da      	movs	r0, #218	@ 0xda
 800b1e6:	f7ff fe37 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	2012      	movs	r0, #18
 800b1ee:	f7ff fe33 	bl	800ae58 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	2081      	movs	r0, #129	@ 0x81
 800b1f6:	f7ff fe2f 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	20ef      	movs	r0, #239	@ 0xef
 800b1fe:	f7ff fe2b 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b202:	2100      	movs	r1, #0
 800b204:	20d9      	movs	r0, #217	@ 0xd9
 800b206:	f7ff fe27 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b20a:	2100      	movs	r1, #0
 800b20c:	20f1      	movs	r0, #241	@ 0xf1
 800b20e:	f7ff fe23 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b212:	2100      	movs	r1, #0
 800b214:	20db      	movs	r0, #219	@ 0xdb
 800b216:	f7ff fe1f 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b21a:	2100      	movs	r1, #0
 800b21c:	2030      	movs	r0, #48	@ 0x30
 800b21e:	f7ff fe1b 	bl	800ae58 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b222:	2100      	movs	r1, #0
 800b224:	20a4      	movs	r0, #164	@ 0xa4
 800b226:	f7ff fe17 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b22a:	2100      	movs	r1, #0
 800b22c:	20a6      	movs	r0, #166	@ 0xa6
 800b22e:	f7ff fe13 	bl	800ae58 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b232:	2100      	movs	r1, #0
 800b234:	20af      	movs	r0, #175	@ 0xaf
 800b236:	f7ff fe0f 	bl	800ae58 <OLED_WR_Byte>
	OLED_Clear(); 
 800b23a:	f7ff fe57 	bl	800aeec <OLED_Clear>
 800b23e:	bf00      	nop
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	40023800 	.word	0x40023800
 800b248:	40021000 	.word	0x40021000

0800b24c <__cvt>:
 800b24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	ec57 6b10 	vmov	r6, r7, d0
 800b254:	2f00      	cmp	r7, #0
 800b256:	460c      	mov	r4, r1
 800b258:	4619      	mov	r1, r3
 800b25a:	463b      	mov	r3, r7
 800b25c:	bfbb      	ittet	lt
 800b25e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b262:	461f      	movlt	r7, r3
 800b264:	2300      	movge	r3, #0
 800b266:	232d      	movlt	r3, #45	@ 0x2d
 800b268:	700b      	strb	r3, [r1, #0]
 800b26a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b26c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b270:	4691      	mov	r9, r2
 800b272:	f023 0820 	bic.w	r8, r3, #32
 800b276:	bfbc      	itt	lt
 800b278:	4632      	movlt	r2, r6
 800b27a:	4616      	movlt	r6, r2
 800b27c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b280:	d005      	beq.n	800b28e <__cvt+0x42>
 800b282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b286:	d100      	bne.n	800b28a <__cvt+0x3e>
 800b288:	3401      	adds	r4, #1
 800b28a:	2102      	movs	r1, #2
 800b28c:	e000      	b.n	800b290 <__cvt+0x44>
 800b28e:	2103      	movs	r1, #3
 800b290:	ab03      	add	r3, sp, #12
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	ab02      	add	r3, sp, #8
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	ec47 6b10 	vmov	d0, r6, r7
 800b29c:	4653      	mov	r3, sl
 800b29e:	4622      	mov	r2, r4
 800b2a0:	f000 fe6a 	bl	800bf78 <_dtoa_r>
 800b2a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	d119      	bne.n	800b2e0 <__cvt+0x94>
 800b2ac:	f019 0f01 	tst.w	r9, #1
 800b2b0:	d00e      	beq.n	800b2d0 <__cvt+0x84>
 800b2b2:	eb00 0904 	add.w	r9, r0, r4
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	f7f5 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c2:	b108      	cbz	r0, 800b2c8 <__cvt+0x7c>
 800b2c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2c8:	2230      	movs	r2, #48	@ 0x30
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	454b      	cmp	r3, r9
 800b2ce:	d31e      	bcc.n	800b30e <__cvt+0xc2>
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2d4:	1b5b      	subs	r3, r3, r5
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	b004      	add	sp, #16
 800b2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2e4:	eb00 0904 	add.w	r9, r0, r4
 800b2e8:	d1e5      	bne.n	800b2b6 <__cvt+0x6a>
 800b2ea:	7803      	ldrb	r3, [r0, #0]
 800b2ec:	2b30      	cmp	r3, #48	@ 0x30
 800b2ee:	d10a      	bne.n	800b306 <__cvt+0xba>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	f7f5 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2fc:	b918      	cbnz	r0, 800b306 <__cvt+0xba>
 800b2fe:	f1c4 0401 	rsb	r4, r4, #1
 800b302:	f8ca 4000 	str.w	r4, [sl]
 800b306:	f8da 3000 	ldr.w	r3, [sl]
 800b30a:	4499      	add	r9, r3
 800b30c:	e7d3      	b.n	800b2b6 <__cvt+0x6a>
 800b30e:	1c59      	adds	r1, r3, #1
 800b310:	9103      	str	r1, [sp, #12]
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	e7d9      	b.n	800b2ca <__cvt+0x7e>

0800b316 <__exponent>:
 800b316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b318:	2900      	cmp	r1, #0
 800b31a:	bfba      	itte	lt
 800b31c:	4249      	neglt	r1, r1
 800b31e:	232d      	movlt	r3, #45	@ 0x2d
 800b320:	232b      	movge	r3, #43	@ 0x2b
 800b322:	2909      	cmp	r1, #9
 800b324:	7002      	strb	r2, [r0, #0]
 800b326:	7043      	strb	r3, [r0, #1]
 800b328:	dd29      	ble.n	800b37e <__exponent+0x68>
 800b32a:	f10d 0307 	add.w	r3, sp, #7
 800b32e:	461d      	mov	r5, r3
 800b330:	270a      	movs	r7, #10
 800b332:	461a      	mov	r2, r3
 800b334:	fbb1 f6f7 	udiv	r6, r1, r7
 800b338:	fb07 1416 	mls	r4, r7, r6, r1
 800b33c:	3430      	adds	r4, #48	@ 0x30
 800b33e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b342:	460c      	mov	r4, r1
 800b344:	2c63      	cmp	r4, #99	@ 0x63
 800b346:	f103 33ff 	add.w	r3, r3, #4294967295
 800b34a:	4631      	mov	r1, r6
 800b34c:	dcf1      	bgt.n	800b332 <__exponent+0x1c>
 800b34e:	3130      	adds	r1, #48	@ 0x30
 800b350:	1e94      	subs	r4, r2, #2
 800b352:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b356:	1c41      	adds	r1, r0, #1
 800b358:	4623      	mov	r3, r4
 800b35a:	42ab      	cmp	r3, r5
 800b35c:	d30a      	bcc.n	800b374 <__exponent+0x5e>
 800b35e:	f10d 0309 	add.w	r3, sp, #9
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	42ac      	cmp	r4, r5
 800b366:	bf88      	it	hi
 800b368:	2300      	movhi	r3, #0
 800b36a:	3302      	adds	r3, #2
 800b36c:	4403      	add	r3, r0
 800b36e:	1a18      	subs	r0, r3, r0
 800b370:	b003      	add	sp, #12
 800b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b374:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b378:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b37c:	e7ed      	b.n	800b35a <__exponent+0x44>
 800b37e:	2330      	movs	r3, #48	@ 0x30
 800b380:	3130      	adds	r1, #48	@ 0x30
 800b382:	7083      	strb	r3, [r0, #2]
 800b384:	70c1      	strb	r1, [r0, #3]
 800b386:	1d03      	adds	r3, r0, #4
 800b388:	e7f1      	b.n	800b36e <__exponent+0x58>
	...

0800b38c <_printf_float>:
 800b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	b08d      	sub	sp, #52	@ 0x34
 800b392:	460c      	mov	r4, r1
 800b394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b398:	4616      	mov	r6, r2
 800b39a:	461f      	mov	r7, r3
 800b39c:	4605      	mov	r5, r0
 800b39e:	f000 fcdb 	bl	800bd58 <_localeconv_r>
 800b3a2:	6803      	ldr	r3, [r0, #0]
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f4 ff62 	bl	8000270 <strlen>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3b4:	9005      	str	r0, [sp, #20]
 800b3b6:	3307      	adds	r3, #7
 800b3b8:	f023 0307 	bic.w	r3, r3, #7
 800b3bc:	f103 0208 	add.w	r2, r3, #8
 800b3c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3c4:	f8d4 b000 	ldr.w	fp, [r4]
 800b3c8:	f8c8 2000 	str.w	r2, [r8]
 800b3cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3d4:	9307      	str	r3, [sp, #28]
 800b3d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b3de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3e2:	4b9c      	ldr	r3, [pc, #624]	@ (800b654 <_printf_float+0x2c8>)
 800b3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e8:	f7f5 fba0 	bl	8000b2c <__aeabi_dcmpun>
 800b3ec:	bb70      	cbnz	r0, 800b44c <_printf_float+0xc0>
 800b3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3f2:	4b98      	ldr	r3, [pc, #608]	@ (800b654 <_printf_float+0x2c8>)
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	f7f5 fb7a 	bl	8000af0 <__aeabi_dcmple>
 800b3fc:	bb30      	cbnz	r0, 800b44c <_printf_float+0xc0>
 800b3fe:	2200      	movs	r2, #0
 800b400:	2300      	movs	r3, #0
 800b402:	4640      	mov	r0, r8
 800b404:	4649      	mov	r1, r9
 800b406:	f7f5 fb69 	bl	8000adc <__aeabi_dcmplt>
 800b40a:	b110      	cbz	r0, 800b412 <_printf_float+0x86>
 800b40c:	232d      	movs	r3, #45	@ 0x2d
 800b40e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b412:	4a91      	ldr	r2, [pc, #580]	@ (800b658 <_printf_float+0x2cc>)
 800b414:	4b91      	ldr	r3, [pc, #580]	@ (800b65c <_printf_float+0x2d0>)
 800b416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b41a:	bf94      	ite	ls
 800b41c:	4690      	movls	r8, r2
 800b41e:	4698      	movhi	r8, r3
 800b420:	2303      	movs	r3, #3
 800b422:	6123      	str	r3, [r4, #16]
 800b424:	f02b 0304 	bic.w	r3, fp, #4
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	f04f 0900 	mov.w	r9, #0
 800b42e:	9700      	str	r7, [sp, #0]
 800b430:	4633      	mov	r3, r6
 800b432:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b434:	4621      	mov	r1, r4
 800b436:	4628      	mov	r0, r5
 800b438:	f000 f9d2 	bl	800b7e0 <_printf_common>
 800b43c:	3001      	adds	r0, #1
 800b43e:	f040 808d 	bne.w	800b55c <_printf_float+0x1d0>
 800b442:	f04f 30ff 	mov.w	r0, #4294967295
 800b446:	b00d      	add	sp, #52	@ 0x34
 800b448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44c:	4642      	mov	r2, r8
 800b44e:	464b      	mov	r3, r9
 800b450:	4640      	mov	r0, r8
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 fb6a 	bl	8000b2c <__aeabi_dcmpun>
 800b458:	b140      	cbz	r0, 800b46c <_printf_float+0xe0>
 800b45a:	464b      	mov	r3, r9
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	bfbc      	itt	lt
 800b460:	232d      	movlt	r3, #45	@ 0x2d
 800b462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b466:	4a7e      	ldr	r2, [pc, #504]	@ (800b660 <_printf_float+0x2d4>)
 800b468:	4b7e      	ldr	r3, [pc, #504]	@ (800b664 <_printf_float+0x2d8>)
 800b46a:	e7d4      	b.n	800b416 <_printf_float+0x8a>
 800b46c:	6863      	ldr	r3, [r4, #4]
 800b46e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b472:	9206      	str	r2, [sp, #24]
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	d13b      	bne.n	800b4f0 <_printf_float+0x164>
 800b478:	2306      	movs	r3, #6
 800b47a:	6063      	str	r3, [r4, #4]
 800b47c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b480:	2300      	movs	r3, #0
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	9303      	str	r3, [sp, #12]
 800b486:	ab0a      	add	r3, sp, #40	@ 0x28
 800b488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b48c:	ab09      	add	r3, sp, #36	@ 0x24
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	6861      	ldr	r1, [r4, #4]
 800b492:	ec49 8b10 	vmov	d0, r8, r9
 800b496:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b49a:	4628      	mov	r0, r5
 800b49c:	f7ff fed6 	bl	800b24c <__cvt>
 800b4a0:	9b06      	ldr	r3, [sp, #24]
 800b4a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4a4:	2b47      	cmp	r3, #71	@ 0x47
 800b4a6:	4680      	mov	r8, r0
 800b4a8:	d129      	bne.n	800b4fe <_printf_float+0x172>
 800b4aa:	1cc8      	adds	r0, r1, #3
 800b4ac:	db02      	blt.n	800b4b4 <_printf_float+0x128>
 800b4ae:	6863      	ldr	r3, [r4, #4]
 800b4b0:	4299      	cmp	r1, r3
 800b4b2:	dd41      	ble.n	800b538 <_printf_float+0x1ac>
 800b4b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4b8:	fa5f fa8a 	uxtb.w	sl, sl
 800b4bc:	3901      	subs	r1, #1
 800b4be:	4652      	mov	r2, sl
 800b4c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4c6:	f7ff ff26 	bl	800b316 <__exponent>
 800b4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4cc:	1813      	adds	r3, r2, r0
 800b4ce:	2a01      	cmp	r2, #1
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	dc02      	bgt.n	800b4dc <_printf_float+0x150>
 800b4d6:	6822      	ldr	r2, [r4, #0]
 800b4d8:	07d2      	lsls	r2, r2, #31
 800b4da:	d501      	bpl.n	800b4e0 <_printf_float+0x154>
 800b4dc:	3301      	adds	r3, #1
 800b4de:	6123      	str	r3, [r4, #16]
 800b4e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d0a2      	beq.n	800b42e <_printf_float+0xa2>
 800b4e8:	232d      	movs	r3, #45	@ 0x2d
 800b4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4ee:	e79e      	b.n	800b42e <_printf_float+0xa2>
 800b4f0:	9a06      	ldr	r2, [sp, #24]
 800b4f2:	2a47      	cmp	r2, #71	@ 0x47
 800b4f4:	d1c2      	bne.n	800b47c <_printf_float+0xf0>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1c0      	bne.n	800b47c <_printf_float+0xf0>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e7bd      	b.n	800b47a <_printf_float+0xee>
 800b4fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b502:	d9db      	bls.n	800b4bc <_printf_float+0x130>
 800b504:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b508:	d118      	bne.n	800b53c <_printf_float+0x1b0>
 800b50a:	2900      	cmp	r1, #0
 800b50c:	6863      	ldr	r3, [r4, #4]
 800b50e:	dd0b      	ble.n	800b528 <_printf_float+0x19c>
 800b510:	6121      	str	r1, [r4, #16]
 800b512:	b913      	cbnz	r3, 800b51a <_printf_float+0x18e>
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	07d0      	lsls	r0, r2, #31
 800b518:	d502      	bpl.n	800b520 <_printf_float+0x194>
 800b51a:	3301      	adds	r3, #1
 800b51c:	440b      	add	r3, r1
 800b51e:	6123      	str	r3, [r4, #16]
 800b520:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b522:	f04f 0900 	mov.w	r9, #0
 800b526:	e7db      	b.n	800b4e0 <_printf_float+0x154>
 800b528:	b913      	cbnz	r3, 800b530 <_printf_float+0x1a4>
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	07d2      	lsls	r2, r2, #31
 800b52e:	d501      	bpl.n	800b534 <_printf_float+0x1a8>
 800b530:	3302      	adds	r3, #2
 800b532:	e7f4      	b.n	800b51e <_printf_float+0x192>
 800b534:	2301      	movs	r3, #1
 800b536:	e7f2      	b.n	800b51e <_printf_float+0x192>
 800b538:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53e:	4299      	cmp	r1, r3
 800b540:	db05      	blt.n	800b54e <_printf_float+0x1c2>
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	6121      	str	r1, [r4, #16]
 800b546:	07d8      	lsls	r0, r3, #31
 800b548:	d5ea      	bpl.n	800b520 <_printf_float+0x194>
 800b54a:	1c4b      	adds	r3, r1, #1
 800b54c:	e7e7      	b.n	800b51e <_printf_float+0x192>
 800b54e:	2900      	cmp	r1, #0
 800b550:	bfd4      	ite	le
 800b552:	f1c1 0202 	rsble	r2, r1, #2
 800b556:	2201      	movgt	r2, #1
 800b558:	4413      	add	r3, r2
 800b55a:	e7e0      	b.n	800b51e <_printf_float+0x192>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	055a      	lsls	r2, r3, #21
 800b560:	d407      	bmi.n	800b572 <_printf_float+0x1e6>
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	4642      	mov	r2, r8
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	d12b      	bne.n	800b5c8 <_printf_float+0x23c>
 800b570:	e767      	b.n	800b442 <_printf_float+0xb6>
 800b572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b576:	f240 80dd 	bls.w	800b734 <_printf_float+0x3a8>
 800b57a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b57e:	2200      	movs	r2, #0
 800b580:	2300      	movs	r3, #0
 800b582:	f7f5 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b586:	2800      	cmp	r0, #0
 800b588:	d033      	beq.n	800b5f2 <_printf_float+0x266>
 800b58a:	4a37      	ldr	r2, [pc, #220]	@ (800b668 <_printf_float+0x2dc>)
 800b58c:	2301      	movs	r3, #1
 800b58e:	4631      	mov	r1, r6
 800b590:	4628      	mov	r0, r5
 800b592:	47b8      	blx	r7
 800b594:	3001      	adds	r0, #1
 800b596:	f43f af54 	beq.w	800b442 <_printf_float+0xb6>
 800b59a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b59e:	4543      	cmp	r3, r8
 800b5a0:	db02      	blt.n	800b5a8 <_printf_float+0x21c>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	07d8      	lsls	r0, r3, #31
 800b5a6:	d50f      	bpl.n	800b5c8 <_printf_float+0x23c>
 800b5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b8      	blx	r7
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	f43f af45 	beq.w	800b442 <_printf_float+0xb6>
 800b5b8:	f04f 0900 	mov.w	r9, #0
 800b5bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5c0:	f104 0a1a 	add.w	sl, r4, #26
 800b5c4:	45c8      	cmp	r8, r9
 800b5c6:	dc09      	bgt.n	800b5dc <_printf_float+0x250>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	079b      	lsls	r3, r3, #30
 800b5cc:	f100 8103 	bmi.w	800b7d6 <_printf_float+0x44a>
 800b5d0:	68e0      	ldr	r0, [r4, #12]
 800b5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5d4:	4298      	cmp	r0, r3
 800b5d6:	bfb8      	it	lt
 800b5d8:	4618      	movlt	r0, r3
 800b5da:	e734      	b.n	800b446 <_printf_float+0xba>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4652      	mov	r2, sl
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	47b8      	blx	r7
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f43f af2b 	beq.w	800b442 <_printf_float+0xb6>
 800b5ec:	f109 0901 	add.w	r9, r9, #1
 800b5f0:	e7e8      	b.n	800b5c4 <_printf_float+0x238>
 800b5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	dc39      	bgt.n	800b66c <_printf_float+0x2e0>
 800b5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800b668 <_printf_float+0x2dc>)
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4628      	mov	r0, r5
 800b600:	47b8      	blx	r7
 800b602:	3001      	adds	r0, #1
 800b604:	f43f af1d 	beq.w	800b442 <_printf_float+0xb6>
 800b608:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b60c:	ea59 0303 	orrs.w	r3, r9, r3
 800b610:	d102      	bne.n	800b618 <_printf_float+0x28c>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	07d9      	lsls	r1, r3, #31
 800b616:	d5d7      	bpl.n	800b5c8 <_printf_float+0x23c>
 800b618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b61c:	4631      	mov	r1, r6
 800b61e:	4628      	mov	r0, r5
 800b620:	47b8      	blx	r7
 800b622:	3001      	adds	r0, #1
 800b624:	f43f af0d 	beq.w	800b442 <_printf_float+0xb6>
 800b628:	f04f 0a00 	mov.w	sl, #0
 800b62c:	f104 0b1a 	add.w	fp, r4, #26
 800b630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b632:	425b      	negs	r3, r3
 800b634:	4553      	cmp	r3, sl
 800b636:	dc01      	bgt.n	800b63c <_printf_float+0x2b0>
 800b638:	464b      	mov	r3, r9
 800b63a:	e793      	b.n	800b564 <_printf_float+0x1d8>
 800b63c:	2301      	movs	r3, #1
 800b63e:	465a      	mov	r2, fp
 800b640:	4631      	mov	r1, r6
 800b642:	4628      	mov	r0, r5
 800b644:	47b8      	blx	r7
 800b646:	3001      	adds	r0, #1
 800b648:	f43f aefb 	beq.w	800b442 <_printf_float+0xb6>
 800b64c:	f10a 0a01 	add.w	sl, sl, #1
 800b650:	e7ee      	b.n	800b630 <_printf_float+0x2a4>
 800b652:	bf00      	nop
 800b654:	7fefffff 	.word	0x7fefffff
 800b658:	0800eb2c 	.word	0x0800eb2c
 800b65c:	0800eb30 	.word	0x0800eb30
 800b660:	0800eb34 	.word	0x0800eb34
 800b664:	0800eb38 	.word	0x0800eb38
 800b668:	0800eb3c 	.word	0x0800eb3c
 800b66c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b66e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b672:	4553      	cmp	r3, sl
 800b674:	bfa8      	it	ge
 800b676:	4653      	movge	r3, sl
 800b678:	2b00      	cmp	r3, #0
 800b67a:	4699      	mov	r9, r3
 800b67c:	dc36      	bgt.n	800b6ec <_printf_float+0x360>
 800b67e:	f04f 0b00 	mov.w	fp, #0
 800b682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b686:	f104 021a 	add.w	r2, r4, #26
 800b68a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b68c:	9306      	str	r3, [sp, #24]
 800b68e:	eba3 0309 	sub.w	r3, r3, r9
 800b692:	455b      	cmp	r3, fp
 800b694:	dc31      	bgt.n	800b6fa <_printf_float+0x36e>
 800b696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b698:	459a      	cmp	sl, r3
 800b69a:	dc3a      	bgt.n	800b712 <_printf_float+0x386>
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	07da      	lsls	r2, r3, #31
 800b6a0:	d437      	bmi.n	800b712 <_printf_float+0x386>
 800b6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a4:	ebaa 0903 	sub.w	r9, sl, r3
 800b6a8:	9b06      	ldr	r3, [sp, #24]
 800b6aa:	ebaa 0303 	sub.w	r3, sl, r3
 800b6ae:	4599      	cmp	r9, r3
 800b6b0:	bfa8      	it	ge
 800b6b2:	4699      	movge	r9, r3
 800b6b4:	f1b9 0f00 	cmp.w	r9, #0
 800b6b8:	dc33      	bgt.n	800b722 <_printf_float+0x396>
 800b6ba:	f04f 0800 	mov.w	r8, #0
 800b6be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6c2:	f104 0b1a 	add.w	fp, r4, #26
 800b6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c8:	ebaa 0303 	sub.w	r3, sl, r3
 800b6cc:	eba3 0309 	sub.w	r3, r3, r9
 800b6d0:	4543      	cmp	r3, r8
 800b6d2:	f77f af79 	ble.w	800b5c8 <_printf_float+0x23c>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	465a      	mov	r2, fp
 800b6da:	4631      	mov	r1, r6
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b8      	blx	r7
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	f43f aeae 	beq.w	800b442 <_printf_float+0xb6>
 800b6e6:	f108 0801 	add.w	r8, r8, #1
 800b6ea:	e7ec      	b.n	800b6c6 <_printf_float+0x33a>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b8      	blx	r7
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d1c2      	bne.n	800b67e <_printf_float+0x2f2>
 800b6f8:	e6a3      	b.n	800b442 <_printf_float+0xb6>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	9206      	str	r2, [sp, #24]
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f ae9c 	beq.w	800b442 <_printf_float+0xb6>
 800b70a:	9a06      	ldr	r2, [sp, #24]
 800b70c:	f10b 0b01 	add.w	fp, fp, #1
 800b710:	e7bb      	b.n	800b68a <_printf_float+0x2fe>
 800b712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b716:	4631      	mov	r1, r6
 800b718:	4628      	mov	r0, r5
 800b71a:	47b8      	blx	r7
 800b71c:	3001      	adds	r0, #1
 800b71e:	d1c0      	bne.n	800b6a2 <_printf_float+0x316>
 800b720:	e68f      	b.n	800b442 <_printf_float+0xb6>
 800b722:	9a06      	ldr	r2, [sp, #24]
 800b724:	464b      	mov	r3, r9
 800b726:	4442      	add	r2, r8
 800b728:	4631      	mov	r1, r6
 800b72a:	4628      	mov	r0, r5
 800b72c:	47b8      	blx	r7
 800b72e:	3001      	adds	r0, #1
 800b730:	d1c3      	bne.n	800b6ba <_printf_float+0x32e>
 800b732:	e686      	b.n	800b442 <_printf_float+0xb6>
 800b734:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b738:	f1ba 0f01 	cmp.w	sl, #1
 800b73c:	dc01      	bgt.n	800b742 <_printf_float+0x3b6>
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d536      	bpl.n	800b7b0 <_printf_float+0x424>
 800b742:	2301      	movs	r3, #1
 800b744:	4642      	mov	r2, r8
 800b746:	4631      	mov	r1, r6
 800b748:	4628      	mov	r0, r5
 800b74a:	47b8      	blx	r7
 800b74c:	3001      	adds	r0, #1
 800b74e:	f43f ae78 	beq.w	800b442 <_printf_float+0xb6>
 800b752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	f43f ae70 	beq.w	800b442 <_printf_float+0xb6>
 800b762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b766:	2200      	movs	r2, #0
 800b768:	2300      	movs	r3, #0
 800b76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b76e:	f7f5 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800b772:	b9c0      	cbnz	r0, 800b7a6 <_printf_float+0x41a>
 800b774:	4653      	mov	r3, sl
 800b776:	f108 0201 	add.w	r2, r8, #1
 800b77a:	4631      	mov	r1, r6
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	d10c      	bne.n	800b79e <_printf_float+0x412>
 800b784:	e65d      	b.n	800b442 <_printf_float+0xb6>
 800b786:	2301      	movs	r3, #1
 800b788:	465a      	mov	r2, fp
 800b78a:	4631      	mov	r1, r6
 800b78c:	4628      	mov	r0, r5
 800b78e:	47b8      	blx	r7
 800b790:	3001      	adds	r0, #1
 800b792:	f43f ae56 	beq.w	800b442 <_printf_float+0xb6>
 800b796:	f108 0801 	add.w	r8, r8, #1
 800b79a:	45d0      	cmp	r8, sl
 800b79c:	dbf3      	blt.n	800b786 <_printf_float+0x3fa>
 800b79e:	464b      	mov	r3, r9
 800b7a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b7a4:	e6df      	b.n	800b566 <_printf_float+0x1da>
 800b7a6:	f04f 0800 	mov.w	r8, #0
 800b7aa:	f104 0b1a 	add.w	fp, r4, #26
 800b7ae:	e7f4      	b.n	800b79a <_printf_float+0x40e>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	4642      	mov	r2, r8
 800b7b4:	e7e1      	b.n	800b77a <_printf_float+0x3ee>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	464a      	mov	r2, r9
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b8      	blx	r7
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	f43f ae3e 	beq.w	800b442 <_printf_float+0xb6>
 800b7c6:	f108 0801 	add.w	r8, r8, #1
 800b7ca:	68e3      	ldr	r3, [r4, #12]
 800b7cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7ce:	1a5b      	subs	r3, r3, r1
 800b7d0:	4543      	cmp	r3, r8
 800b7d2:	dcf0      	bgt.n	800b7b6 <_printf_float+0x42a>
 800b7d4:	e6fc      	b.n	800b5d0 <_printf_float+0x244>
 800b7d6:	f04f 0800 	mov.w	r8, #0
 800b7da:	f104 0919 	add.w	r9, r4, #25
 800b7de:	e7f4      	b.n	800b7ca <_printf_float+0x43e>

0800b7e0 <_printf_common>:
 800b7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e4:	4616      	mov	r6, r2
 800b7e6:	4698      	mov	r8, r3
 800b7e8:	688a      	ldr	r2, [r1, #8]
 800b7ea:	690b      	ldr	r3, [r1, #16]
 800b7ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	bfb8      	it	lt
 800b7f4:	4613      	movlt	r3, r2
 800b7f6:	6033      	str	r3, [r6, #0]
 800b7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7fc:	4607      	mov	r7, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	b10a      	cbz	r2, 800b806 <_printf_common+0x26>
 800b802:	3301      	adds	r3, #1
 800b804:	6033      	str	r3, [r6, #0]
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	0699      	lsls	r1, r3, #26
 800b80a:	bf42      	ittt	mi
 800b80c:	6833      	ldrmi	r3, [r6, #0]
 800b80e:	3302      	addmi	r3, #2
 800b810:	6033      	strmi	r3, [r6, #0]
 800b812:	6825      	ldr	r5, [r4, #0]
 800b814:	f015 0506 	ands.w	r5, r5, #6
 800b818:	d106      	bne.n	800b828 <_printf_common+0x48>
 800b81a:	f104 0a19 	add.w	sl, r4, #25
 800b81e:	68e3      	ldr	r3, [r4, #12]
 800b820:	6832      	ldr	r2, [r6, #0]
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	42ab      	cmp	r3, r5
 800b826:	dc26      	bgt.n	800b876 <_printf_common+0x96>
 800b828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	3b00      	subs	r3, #0
 800b830:	bf18      	it	ne
 800b832:	2301      	movne	r3, #1
 800b834:	0692      	lsls	r2, r2, #26
 800b836:	d42b      	bmi.n	800b890 <_printf_common+0xb0>
 800b838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b83c:	4641      	mov	r1, r8
 800b83e:	4638      	mov	r0, r7
 800b840:	47c8      	blx	r9
 800b842:	3001      	adds	r0, #1
 800b844:	d01e      	beq.n	800b884 <_printf_common+0xa4>
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	6922      	ldr	r2, [r4, #16]
 800b84a:	f003 0306 	and.w	r3, r3, #6
 800b84e:	2b04      	cmp	r3, #4
 800b850:	bf02      	ittt	eq
 800b852:	68e5      	ldreq	r5, [r4, #12]
 800b854:	6833      	ldreq	r3, [r6, #0]
 800b856:	1aed      	subeq	r5, r5, r3
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	bf0c      	ite	eq
 800b85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b860:	2500      	movne	r5, #0
 800b862:	4293      	cmp	r3, r2
 800b864:	bfc4      	itt	gt
 800b866:	1a9b      	subgt	r3, r3, r2
 800b868:	18ed      	addgt	r5, r5, r3
 800b86a:	2600      	movs	r6, #0
 800b86c:	341a      	adds	r4, #26
 800b86e:	42b5      	cmp	r5, r6
 800b870:	d11a      	bne.n	800b8a8 <_printf_common+0xc8>
 800b872:	2000      	movs	r0, #0
 800b874:	e008      	b.n	800b888 <_printf_common+0xa8>
 800b876:	2301      	movs	r3, #1
 800b878:	4652      	mov	r2, sl
 800b87a:	4641      	mov	r1, r8
 800b87c:	4638      	mov	r0, r7
 800b87e:	47c8      	blx	r9
 800b880:	3001      	adds	r0, #1
 800b882:	d103      	bne.n	800b88c <_printf_common+0xac>
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88c:	3501      	adds	r5, #1
 800b88e:	e7c6      	b.n	800b81e <_printf_common+0x3e>
 800b890:	18e1      	adds	r1, r4, r3
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	2030      	movs	r0, #48	@ 0x30
 800b896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b89a:	4422      	add	r2, r4
 800b89c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8a4:	3302      	adds	r3, #2
 800b8a6:	e7c7      	b.n	800b838 <_printf_common+0x58>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	4622      	mov	r2, r4
 800b8ac:	4641      	mov	r1, r8
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	47c8      	blx	r9
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	d0e6      	beq.n	800b884 <_printf_common+0xa4>
 800b8b6:	3601      	adds	r6, #1
 800b8b8:	e7d9      	b.n	800b86e <_printf_common+0x8e>
	...

0800b8bc <_printf_i>:
 800b8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c0:	7e0f      	ldrb	r7, [r1, #24]
 800b8c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8c4:	2f78      	cmp	r7, #120	@ 0x78
 800b8c6:	4691      	mov	r9, r2
 800b8c8:	4680      	mov	r8, r0
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	469a      	mov	sl, r3
 800b8ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8d2:	d807      	bhi.n	800b8e4 <_printf_i+0x28>
 800b8d4:	2f62      	cmp	r7, #98	@ 0x62
 800b8d6:	d80a      	bhi.n	800b8ee <_printf_i+0x32>
 800b8d8:	2f00      	cmp	r7, #0
 800b8da:	f000 80d2 	beq.w	800ba82 <_printf_i+0x1c6>
 800b8de:	2f58      	cmp	r7, #88	@ 0x58
 800b8e0:	f000 80b9 	beq.w	800ba56 <_printf_i+0x19a>
 800b8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8ec:	e03a      	b.n	800b964 <_printf_i+0xa8>
 800b8ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8f2:	2b15      	cmp	r3, #21
 800b8f4:	d8f6      	bhi.n	800b8e4 <_printf_i+0x28>
 800b8f6:	a101      	add	r1, pc, #4	@ (adr r1, 800b8fc <_printf_i+0x40>)
 800b8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8fc:	0800b955 	.word	0x0800b955
 800b900:	0800b969 	.word	0x0800b969
 800b904:	0800b8e5 	.word	0x0800b8e5
 800b908:	0800b8e5 	.word	0x0800b8e5
 800b90c:	0800b8e5 	.word	0x0800b8e5
 800b910:	0800b8e5 	.word	0x0800b8e5
 800b914:	0800b969 	.word	0x0800b969
 800b918:	0800b8e5 	.word	0x0800b8e5
 800b91c:	0800b8e5 	.word	0x0800b8e5
 800b920:	0800b8e5 	.word	0x0800b8e5
 800b924:	0800b8e5 	.word	0x0800b8e5
 800b928:	0800ba69 	.word	0x0800ba69
 800b92c:	0800b993 	.word	0x0800b993
 800b930:	0800ba23 	.word	0x0800ba23
 800b934:	0800b8e5 	.word	0x0800b8e5
 800b938:	0800b8e5 	.word	0x0800b8e5
 800b93c:	0800ba8b 	.word	0x0800ba8b
 800b940:	0800b8e5 	.word	0x0800b8e5
 800b944:	0800b993 	.word	0x0800b993
 800b948:	0800b8e5 	.word	0x0800b8e5
 800b94c:	0800b8e5 	.word	0x0800b8e5
 800b950:	0800ba2b 	.word	0x0800ba2b
 800b954:	6833      	ldr	r3, [r6, #0]
 800b956:	1d1a      	adds	r2, r3, #4
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6032      	str	r2, [r6, #0]
 800b95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b964:	2301      	movs	r3, #1
 800b966:	e09d      	b.n	800baa4 <_printf_i+0x1e8>
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	6820      	ldr	r0, [r4, #0]
 800b96c:	1d19      	adds	r1, r3, #4
 800b96e:	6031      	str	r1, [r6, #0]
 800b970:	0606      	lsls	r6, r0, #24
 800b972:	d501      	bpl.n	800b978 <_printf_i+0xbc>
 800b974:	681d      	ldr	r5, [r3, #0]
 800b976:	e003      	b.n	800b980 <_printf_i+0xc4>
 800b978:	0645      	lsls	r5, r0, #25
 800b97a:	d5fb      	bpl.n	800b974 <_printf_i+0xb8>
 800b97c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b980:	2d00      	cmp	r5, #0
 800b982:	da03      	bge.n	800b98c <_printf_i+0xd0>
 800b984:	232d      	movs	r3, #45	@ 0x2d
 800b986:	426d      	negs	r5, r5
 800b988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b98c:	4859      	ldr	r0, [pc, #356]	@ (800baf4 <_printf_i+0x238>)
 800b98e:	230a      	movs	r3, #10
 800b990:	e011      	b.n	800b9b6 <_printf_i+0xfa>
 800b992:	6821      	ldr	r1, [r4, #0]
 800b994:	6833      	ldr	r3, [r6, #0]
 800b996:	0608      	lsls	r0, r1, #24
 800b998:	f853 5b04 	ldr.w	r5, [r3], #4
 800b99c:	d402      	bmi.n	800b9a4 <_printf_i+0xe8>
 800b99e:	0649      	lsls	r1, r1, #25
 800b9a0:	bf48      	it	mi
 800b9a2:	b2ad      	uxthmi	r5, r5
 800b9a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9a6:	4853      	ldr	r0, [pc, #332]	@ (800baf4 <_printf_i+0x238>)
 800b9a8:	6033      	str	r3, [r6, #0]
 800b9aa:	bf14      	ite	ne
 800b9ac:	230a      	movne	r3, #10
 800b9ae:	2308      	moveq	r3, #8
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9b6:	6866      	ldr	r6, [r4, #4]
 800b9b8:	60a6      	str	r6, [r4, #8]
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	bfa2      	ittt	ge
 800b9be:	6821      	ldrge	r1, [r4, #0]
 800b9c0:	f021 0104 	bicge.w	r1, r1, #4
 800b9c4:	6021      	strge	r1, [r4, #0]
 800b9c6:	b90d      	cbnz	r5, 800b9cc <_printf_i+0x110>
 800b9c8:	2e00      	cmp	r6, #0
 800b9ca:	d04b      	beq.n	800ba64 <_printf_i+0x1a8>
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9d2:	fb03 5711 	mls	r7, r3, r1, r5
 800b9d6:	5dc7      	ldrb	r7, [r0, r7]
 800b9d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9dc:	462f      	mov	r7, r5
 800b9de:	42bb      	cmp	r3, r7
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	d9f4      	bls.n	800b9ce <_printf_i+0x112>
 800b9e4:	2b08      	cmp	r3, #8
 800b9e6:	d10b      	bne.n	800ba00 <_printf_i+0x144>
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	07df      	lsls	r7, r3, #31
 800b9ec:	d508      	bpl.n	800ba00 <_printf_i+0x144>
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	6861      	ldr	r1, [r4, #4]
 800b9f2:	4299      	cmp	r1, r3
 800b9f4:	bfde      	ittt	le
 800b9f6:	2330      	movle	r3, #48	@ 0x30
 800b9f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba00:	1b92      	subs	r2, r2, r6
 800ba02:	6122      	str	r2, [r4, #16]
 800ba04:	f8cd a000 	str.w	sl, [sp]
 800ba08:	464b      	mov	r3, r9
 800ba0a:	aa03      	add	r2, sp, #12
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4640      	mov	r0, r8
 800ba10:	f7ff fee6 	bl	800b7e0 <_printf_common>
 800ba14:	3001      	adds	r0, #1
 800ba16:	d14a      	bne.n	800baae <_printf_i+0x1f2>
 800ba18:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1c:	b004      	add	sp, #16
 800ba1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	f043 0320 	orr.w	r3, r3, #32
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	4833      	ldr	r0, [pc, #204]	@ (800baf8 <_printf_i+0x23c>)
 800ba2c:	2778      	movs	r7, #120	@ 0x78
 800ba2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	6831      	ldr	r1, [r6, #0]
 800ba36:	061f      	lsls	r7, r3, #24
 800ba38:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba3c:	d402      	bmi.n	800ba44 <_printf_i+0x188>
 800ba3e:	065f      	lsls	r7, r3, #25
 800ba40:	bf48      	it	mi
 800ba42:	b2ad      	uxthmi	r5, r5
 800ba44:	6031      	str	r1, [r6, #0]
 800ba46:	07d9      	lsls	r1, r3, #31
 800ba48:	bf44      	itt	mi
 800ba4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ba4e:	6023      	strmi	r3, [r4, #0]
 800ba50:	b11d      	cbz	r5, 800ba5a <_printf_i+0x19e>
 800ba52:	2310      	movs	r3, #16
 800ba54:	e7ac      	b.n	800b9b0 <_printf_i+0xf4>
 800ba56:	4827      	ldr	r0, [pc, #156]	@ (800baf4 <_printf_i+0x238>)
 800ba58:	e7e9      	b.n	800ba2e <_printf_i+0x172>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	f023 0320 	bic.w	r3, r3, #32
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	e7f6      	b.n	800ba52 <_printf_i+0x196>
 800ba64:	4616      	mov	r6, r2
 800ba66:	e7bd      	b.n	800b9e4 <_printf_i+0x128>
 800ba68:	6833      	ldr	r3, [r6, #0]
 800ba6a:	6825      	ldr	r5, [r4, #0]
 800ba6c:	6961      	ldr	r1, [r4, #20]
 800ba6e:	1d18      	adds	r0, r3, #4
 800ba70:	6030      	str	r0, [r6, #0]
 800ba72:	062e      	lsls	r6, r5, #24
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	d501      	bpl.n	800ba7c <_printf_i+0x1c0>
 800ba78:	6019      	str	r1, [r3, #0]
 800ba7a:	e002      	b.n	800ba82 <_printf_i+0x1c6>
 800ba7c:	0668      	lsls	r0, r5, #25
 800ba7e:	d5fb      	bpl.n	800ba78 <_printf_i+0x1bc>
 800ba80:	8019      	strh	r1, [r3, #0]
 800ba82:	2300      	movs	r3, #0
 800ba84:	6123      	str	r3, [r4, #16]
 800ba86:	4616      	mov	r6, r2
 800ba88:	e7bc      	b.n	800ba04 <_printf_i+0x148>
 800ba8a:	6833      	ldr	r3, [r6, #0]
 800ba8c:	1d1a      	adds	r2, r3, #4
 800ba8e:	6032      	str	r2, [r6, #0]
 800ba90:	681e      	ldr	r6, [r3, #0]
 800ba92:	6862      	ldr	r2, [r4, #4]
 800ba94:	2100      	movs	r1, #0
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7f4 fb9a 	bl	80001d0 <memchr>
 800ba9c:	b108      	cbz	r0, 800baa2 <_printf_i+0x1e6>
 800ba9e:	1b80      	subs	r0, r0, r6
 800baa0:	6060      	str	r0, [r4, #4]
 800baa2:	6863      	ldr	r3, [r4, #4]
 800baa4:	6123      	str	r3, [r4, #16]
 800baa6:	2300      	movs	r3, #0
 800baa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baac:	e7aa      	b.n	800ba04 <_printf_i+0x148>
 800baae:	6923      	ldr	r3, [r4, #16]
 800bab0:	4632      	mov	r2, r6
 800bab2:	4649      	mov	r1, r9
 800bab4:	4640      	mov	r0, r8
 800bab6:	47d0      	blx	sl
 800bab8:	3001      	adds	r0, #1
 800baba:	d0ad      	beq.n	800ba18 <_printf_i+0x15c>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	079b      	lsls	r3, r3, #30
 800bac0:	d413      	bmi.n	800baea <_printf_i+0x22e>
 800bac2:	68e0      	ldr	r0, [r4, #12]
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	4298      	cmp	r0, r3
 800bac8:	bfb8      	it	lt
 800baca:	4618      	movlt	r0, r3
 800bacc:	e7a6      	b.n	800ba1c <_printf_i+0x160>
 800bace:	2301      	movs	r3, #1
 800bad0:	4632      	mov	r2, r6
 800bad2:	4649      	mov	r1, r9
 800bad4:	4640      	mov	r0, r8
 800bad6:	47d0      	blx	sl
 800bad8:	3001      	adds	r0, #1
 800bada:	d09d      	beq.n	800ba18 <_printf_i+0x15c>
 800badc:	3501      	adds	r5, #1
 800bade:	68e3      	ldr	r3, [r4, #12]
 800bae0:	9903      	ldr	r1, [sp, #12]
 800bae2:	1a5b      	subs	r3, r3, r1
 800bae4:	42ab      	cmp	r3, r5
 800bae6:	dcf2      	bgt.n	800bace <_printf_i+0x212>
 800bae8:	e7eb      	b.n	800bac2 <_printf_i+0x206>
 800baea:	2500      	movs	r5, #0
 800baec:	f104 0619 	add.w	r6, r4, #25
 800baf0:	e7f5      	b.n	800bade <_printf_i+0x222>
 800baf2:	bf00      	nop
 800baf4:	0800eb3e 	.word	0x0800eb3e
 800baf8:	0800eb4f 	.word	0x0800eb4f

0800bafc <std>:
 800bafc:	2300      	movs	r3, #0
 800bafe:	b510      	push	{r4, lr}
 800bb00:	4604      	mov	r4, r0
 800bb02:	e9c0 3300 	strd	r3, r3, [r0]
 800bb06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb0a:	6083      	str	r3, [r0, #8]
 800bb0c:	8181      	strh	r1, [r0, #12]
 800bb0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb10:	81c2      	strh	r2, [r0, #14]
 800bb12:	6183      	str	r3, [r0, #24]
 800bb14:	4619      	mov	r1, r3
 800bb16:	2208      	movs	r2, #8
 800bb18:	305c      	adds	r0, #92	@ 0x5c
 800bb1a:	f000 f914 	bl	800bd46 <memset>
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb54 <std+0x58>)
 800bb20:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb22:	4b0d      	ldr	r3, [pc, #52]	@ (800bb58 <std+0x5c>)
 800bb24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb26:	4b0d      	ldr	r3, [pc, #52]	@ (800bb5c <std+0x60>)
 800bb28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb60 <std+0x64>)
 800bb2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb64 <std+0x68>)
 800bb30:	6224      	str	r4, [r4, #32]
 800bb32:	429c      	cmp	r4, r3
 800bb34:	d006      	beq.n	800bb44 <std+0x48>
 800bb36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb3a:	4294      	cmp	r4, r2
 800bb3c:	d002      	beq.n	800bb44 <std+0x48>
 800bb3e:	33d0      	adds	r3, #208	@ 0xd0
 800bb40:	429c      	cmp	r4, r3
 800bb42:	d105      	bne.n	800bb50 <std+0x54>
 800bb44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb4c:	f000 b978 	b.w	800be40 <__retarget_lock_init_recursive>
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	bf00      	nop
 800bb54:	0800bcc1 	.word	0x0800bcc1
 800bb58:	0800bce3 	.word	0x0800bce3
 800bb5c:	0800bd1b 	.word	0x0800bd1b
 800bb60:	0800bd3f 	.word	0x0800bd3f
 800bb64:	2000527c 	.word	0x2000527c

0800bb68 <stdio_exit_handler>:
 800bb68:	4a02      	ldr	r2, [pc, #8]	@ (800bb74 <stdio_exit_handler+0xc>)
 800bb6a:	4903      	ldr	r1, [pc, #12]	@ (800bb78 <stdio_exit_handler+0x10>)
 800bb6c:	4803      	ldr	r0, [pc, #12]	@ (800bb7c <stdio_exit_handler+0x14>)
 800bb6e:	f000 b869 	b.w	800bc44 <_fwalk_sglue>
 800bb72:	bf00      	nop
 800bb74:	20000014 	.word	0x20000014
 800bb78:	0800d7bd 	.word	0x0800d7bd
 800bb7c:	20000024 	.word	0x20000024

0800bb80 <cleanup_stdio>:
 800bb80:	6841      	ldr	r1, [r0, #4]
 800bb82:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb4 <cleanup_stdio+0x34>)
 800bb84:	4299      	cmp	r1, r3
 800bb86:	b510      	push	{r4, lr}
 800bb88:	4604      	mov	r4, r0
 800bb8a:	d001      	beq.n	800bb90 <cleanup_stdio+0x10>
 800bb8c:	f001 fe16 	bl	800d7bc <_fflush_r>
 800bb90:	68a1      	ldr	r1, [r4, #8]
 800bb92:	4b09      	ldr	r3, [pc, #36]	@ (800bbb8 <cleanup_stdio+0x38>)
 800bb94:	4299      	cmp	r1, r3
 800bb96:	d002      	beq.n	800bb9e <cleanup_stdio+0x1e>
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f001 fe0f 	bl	800d7bc <_fflush_r>
 800bb9e:	68e1      	ldr	r1, [r4, #12]
 800bba0:	4b06      	ldr	r3, [pc, #24]	@ (800bbbc <cleanup_stdio+0x3c>)
 800bba2:	4299      	cmp	r1, r3
 800bba4:	d004      	beq.n	800bbb0 <cleanup_stdio+0x30>
 800bba6:	4620      	mov	r0, r4
 800bba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbac:	f001 be06 	b.w	800d7bc <_fflush_r>
 800bbb0:	bd10      	pop	{r4, pc}
 800bbb2:	bf00      	nop
 800bbb4:	2000527c 	.word	0x2000527c
 800bbb8:	200052e4 	.word	0x200052e4
 800bbbc:	2000534c 	.word	0x2000534c

0800bbc0 <global_stdio_init.part.0>:
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	4b0b      	ldr	r3, [pc, #44]	@ (800bbf0 <global_stdio_init.part.0+0x30>)
 800bbc4:	4c0b      	ldr	r4, [pc, #44]	@ (800bbf4 <global_stdio_init.part.0+0x34>)
 800bbc6:	4a0c      	ldr	r2, [pc, #48]	@ (800bbf8 <global_stdio_init.part.0+0x38>)
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	4620      	mov	r0, r4
 800bbcc:	2200      	movs	r2, #0
 800bbce:	2104      	movs	r1, #4
 800bbd0:	f7ff ff94 	bl	800bafc <std>
 800bbd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbd8:	2201      	movs	r2, #1
 800bbda:	2109      	movs	r1, #9
 800bbdc:	f7ff ff8e 	bl	800bafc <std>
 800bbe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbea:	2112      	movs	r1, #18
 800bbec:	f7ff bf86 	b.w	800bafc <std>
 800bbf0:	200053b4 	.word	0x200053b4
 800bbf4:	2000527c 	.word	0x2000527c
 800bbf8:	0800bb69 	.word	0x0800bb69

0800bbfc <__sfp_lock_acquire>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	@ (800bc04 <__sfp_lock_acquire+0x8>)
 800bbfe:	f000 b920 	b.w	800be42 <__retarget_lock_acquire_recursive>
 800bc02:	bf00      	nop
 800bc04:	200053bd 	.word	0x200053bd

0800bc08 <__sfp_lock_release>:
 800bc08:	4801      	ldr	r0, [pc, #4]	@ (800bc10 <__sfp_lock_release+0x8>)
 800bc0a:	f000 b91b 	b.w	800be44 <__retarget_lock_release_recursive>
 800bc0e:	bf00      	nop
 800bc10:	200053bd 	.word	0x200053bd

0800bc14 <__sinit>:
 800bc14:	b510      	push	{r4, lr}
 800bc16:	4604      	mov	r4, r0
 800bc18:	f7ff fff0 	bl	800bbfc <__sfp_lock_acquire>
 800bc1c:	6a23      	ldr	r3, [r4, #32]
 800bc1e:	b11b      	cbz	r3, 800bc28 <__sinit+0x14>
 800bc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc24:	f7ff bff0 	b.w	800bc08 <__sfp_lock_release>
 800bc28:	4b04      	ldr	r3, [pc, #16]	@ (800bc3c <__sinit+0x28>)
 800bc2a:	6223      	str	r3, [r4, #32]
 800bc2c:	4b04      	ldr	r3, [pc, #16]	@ (800bc40 <__sinit+0x2c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1f5      	bne.n	800bc20 <__sinit+0xc>
 800bc34:	f7ff ffc4 	bl	800bbc0 <global_stdio_init.part.0>
 800bc38:	e7f2      	b.n	800bc20 <__sinit+0xc>
 800bc3a:	bf00      	nop
 800bc3c:	0800bb81 	.word	0x0800bb81
 800bc40:	200053b4 	.word	0x200053b4

0800bc44 <_fwalk_sglue>:
 800bc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc48:	4607      	mov	r7, r0
 800bc4a:	4688      	mov	r8, r1
 800bc4c:	4614      	mov	r4, r2
 800bc4e:	2600      	movs	r6, #0
 800bc50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc54:	f1b9 0901 	subs.w	r9, r9, #1
 800bc58:	d505      	bpl.n	800bc66 <_fwalk_sglue+0x22>
 800bc5a:	6824      	ldr	r4, [r4, #0]
 800bc5c:	2c00      	cmp	r4, #0
 800bc5e:	d1f7      	bne.n	800bc50 <_fwalk_sglue+0xc>
 800bc60:	4630      	mov	r0, r6
 800bc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc66:	89ab      	ldrh	r3, [r5, #12]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d907      	bls.n	800bc7c <_fwalk_sglue+0x38>
 800bc6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc70:	3301      	adds	r3, #1
 800bc72:	d003      	beq.n	800bc7c <_fwalk_sglue+0x38>
 800bc74:	4629      	mov	r1, r5
 800bc76:	4638      	mov	r0, r7
 800bc78:	47c0      	blx	r8
 800bc7a:	4306      	orrs	r6, r0
 800bc7c:	3568      	adds	r5, #104	@ 0x68
 800bc7e:	e7e9      	b.n	800bc54 <_fwalk_sglue+0x10>

0800bc80 <siprintf>:
 800bc80:	b40e      	push	{r1, r2, r3}
 800bc82:	b500      	push	{lr}
 800bc84:	b09c      	sub	sp, #112	@ 0x70
 800bc86:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc88:	9002      	str	r0, [sp, #8]
 800bc8a:	9006      	str	r0, [sp, #24]
 800bc8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc90:	4809      	ldr	r0, [pc, #36]	@ (800bcb8 <siprintf+0x38>)
 800bc92:	9107      	str	r1, [sp, #28]
 800bc94:	9104      	str	r1, [sp, #16]
 800bc96:	4909      	ldr	r1, [pc, #36]	@ (800bcbc <siprintf+0x3c>)
 800bc98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc9c:	9105      	str	r1, [sp, #20]
 800bc9e:	6800      	ldr	r0, [r0, #0]
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	a902      	add	r1, sp, #8
 800bca4:	f001 fc0a 	bl	800d4bc <_svfiprintf_r>
 800bca8:	9b02      	ldr	r3, [sp, #8]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	701a      	strb	r2, [r3, #0]
 800bcae:	b01c      	add	sp, #112	@ 0x70
 800bcb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcb4:	b003      	add	sp, #12
 800bcb6:	4770      	bx	lr
 800bcb8:	20000020 	.word	0x20000020
 800bcbc:	ffff0208 	.word	0xffff0208

0800bcc0 <__sread>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc8:	f000 f86c 	bl	800bda4 <_read_r>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	bfab      	itete	ge
 800bcd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcd4:	181b      	addge	r3, r3, r0
 800bcd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcda:	bfac      	ite	ge
 800bcdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcde:	81a3      	strhlt	r3, [r4, #12]
 800bce0:	bd10      	pop	{r4, pc}

0800bce2 <__swrite>:
 800bce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce6:	461f      	mov	r7, r3
 800bce8:	898b      	ldrh	r3, [r1, #12]
 800bcea:	05db      	lsls	r3, r3, #23
 800bcec:	4605      	mov	r5, r0
 800bcee:	460c      	mov	r4, r1
 800bcf0:	4616      	mov	r6, r2
 800bcf2:	d505      	bpl.n	800bd00 <__swrite+0x1e>
 800bcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f000 f840 	bl	800bd80 <_lseek_r>
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd0a:	81a3      	strh	r3, [r4, #12]
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	463b      	mov	r3, r7
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd16:	f000 b857 	b.w	800bdc8 <_write_r>

0800bd1a <__sseek>:
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd22:	f000 f82d 	bl	800bd80 <_lseek_r>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	bf15      	itete	ne
 800bd2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd36:	81a3      	strheq	r3, [r4, #12]
 800bd38:	bf18      	it	ne
 800bd3a:	81a3      	strhne	r3, [r4, #12]
 800bd3c:	bd10      	pop	{r4, pc}

0800bd3e <__sclose>:
 800bd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd42:	f000 b80d 	b.w	800bd60 <_close_r>

0800bd46 <memset>:
 800bd46:	4402      	add	r2, r0
 800bd48:	4603      	mov	r3, r0
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d100      	bne.n	800bd50 <memset+0xa>
 800bd4e:	4770      	bx	lr
 800bd50:	f803 1b01 	strb.w	r1, [r3], #1
 800bd54:	e7f9      	b.n	800bd4a <memset+0x4>
	...

0800bd58 <_localeconv_r>:
 800bd58:	4800      	ldr	r0, [pc, #0]	@ (800bd5c <_localeconv_r+0x4>)
 800bd5a:	4770      	bx	lr
 800bd5c:	20000160 	.word	0x20000160

0800bd60 <_close_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	@ (800bd7c <_close_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f7 fa32 	bl	80031d4 <_close>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_close_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_close_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	200053b8 	.word	0x200053b8

0800bd80 <_lseek_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d07      	ldr	r5, [pc, #28]	@ (800bda0 <_lseek_r+0x20>)
 800bd84:	4604      	mov	r4, r0
 800bd86:	4608      	mov	r0, r1
 800bd88:	4611      	mov	r1, r2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	602a      	str	r2, [r5, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f7f7 fa47 	bl	8003222 <_lseek>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	d102      	bne.n	800bd9e <_lseek_r+0x1e>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	b103      	cbz	r3, 800bd9e <_lseek_r+0x1e>
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	200053b8 	.word	0x200053b8

0800bda4 <_read_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	@ (800bdc4 <_read_r+0x20>)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4608      	mov	r0, r1
 800bdac:	4611      	mov	r1, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f7f7 f9d5 	bl	8003162 <_read>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_read_r+0x1e>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_read_r+0x1e>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	200053b8 	.word	0x200053b8

0800bdc8 <_write_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	@ (800bde8 <_write_r+0x20>)
 800bdcc:	4604      	mov	r4, r0
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	602a      	str	r2, [r5, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f7f7 f9e0 	bl	800319c <_write>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_write_r+0x1e>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_write_r+0x1e>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	200053b8 	.word	0x200053b8

0800bdec <__errno>:
 800bdec:	4b01      	ldr	r3, [pc, #4]	@ (800bdf4 <__errno+0x8>)
 800bdee:	6818      	ldr	r0, [r3, #0]
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20000020 	.word	0x20000020

0800bdf8 <__libc_init_array>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	4d0d      	ldr	r5, [pc, #52]	@ (800be30 <__libc_init_array+0x38>)
 800bdfc:	4c0d      	ldr	r4, [pc, #52]	@ (800be34 <__libc_init_array+0x3c>)
 800bdfe:	1b64      	subs	r4, r4, r5
 800be00:	10a4      	asrs	r4, r4, #2
 800be02:	2600      	movs	r6, #0
 800be04:	42a6      	cmp	r6, r4
 800be06:	d109      	bne.n	800be1c <__libc_init_array+0x24>
 800be08:	4d0b      	ldr	r5, [pc, #44]	@ (800be38 <__libc_init_array+0x40>)
 800be0a:	4c0c      	ldr	r4, [pc, #48]	@ (800be3c <__libc_init_array+0x44>)
 800be0c:	f002 f866 	bl	800dedc <_init>
 800be10:	1b64      	subs	r4, r4, r5
 800be12:	10a4      	asrs	r4, r4, #2
 800be14:	2600      	movs	r6, #0
 800be16:	42a6      	cmp	r6, r4
 800be18:	d105      	bne.n	800be26 <__libc_init_array+0x2e>
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be20:	4798      	blx	r3
 800be22:	3601      	adds	r6, #1
 800be24:	e7ee      	b.n	800be04 <__libc_init_array+0xc>
 800be26:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2a:	4798      	blx	r3
 800be2c:	3601      	adds	r6, #1
 800be2e:	e7f2      	b.n	800be16 <__libc_init_array+0x1e>
 800be30:	0800eea8 	.word	0x0800eea8
 800be34:	0800eea8 	.word	0x0800eea8
 800be38:	0800eea8 	.word	0x0800eea8
 800be3c:	0800eeac 	.word	0x0800eeac

0800be40 <__retarget_lock_init_recursive>:
 800be40:	4770      	bx	lr

0800be42 <__retarget_lock_acquire_recursive>:
 800be42:	4770      	bx	lr

0800be44 <__retarget_lock_release_recursive>:
 800be44:	4770      	bx	lr

0800be46 <memcpy>:
 800be46:	440a      	add	r2, r1
 800be48:	4291      	cmp	r1, r2
 800be4a:	f100 33ff 	add.w	r3, r0, #4294967295
 800be4e:	d100      	bne.n	800be52 <memcpy+0xc>
 800be50:	4770      	bx	lr
 800be52:	b510      	push	{r4, lr}
 800be54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be5c:	4291      	cmp	r1, r2
 800be5e:	d1f9      	bne.n	800be54 <memcpy+0xe>
 800be60:	bd10      	pop	{r4, pc}

0800be62 <quorem>:
 800be62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be66:	6903      	ldr	r3, [r0, #16]
 800be68:	690c      	ldr	r4, [r1, #16]
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	4607      	mov	r7, r0
 800be6e:	db7e      	blt.n	800bf6e <quorem+0x10c>
 800be70:	3c01      	subs	r4, #1
 800be72:	f101 0814 	add.w	r8, r1, #20
 800be76:	00a3      	lsls	r3, r4, #2
 800be78:	f100 0514 	add.w	r5, r0, #20
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be8c:	3301      	adds	r3, #1
 800be8e:	429a      	cmp	r2, r3
 800be90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be94:	fbb2 f6f3 	udiv	r6, r2, r3
 800be98:	d32e      	bcc.n	800bef8 <quorem+0x96>
 800be9a:	f04f 0a00 	mov.w	sl, #0
 800be9e:	46c4      	mov	ip, r8
 800bea0:	46ae      	mov	lr, r5
 800bea2:	46d3      	mov	fp, sl
 800bea4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bea8:	b298      	uxth	r0, r3
 800beaa:	fb06 a000 	mla	r0, r6, r0, sl
 800beae:	0c02      	lsrs	r2, r0, #16
 800beb0:	0c1b      	lsrs	r3, r3, #16
 800beb2:	fb06 2303 	mla	r3, r6, r3, r2
 800beb6:	f8de 2000 	ldr.w	r2, [lr]
 800beba:	b280      	uxth	r0, r0
 800bebc:	b292      	uxth	r2, r2
 800bebe:	1a12      	subs	r2, r2, r0
 800bec0:	445a      	add	r2, fp
 800bec2:	f8de 0000 	ldr.w	r0, [lr]
 800bec6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800beca:	b29b      	uxth	r3, r3
 800becc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bed0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bed4:	b292      	uxth	r2, r2
 800bed6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800beda:	45e1      	cmp	r9, ip
 800bedc:	f84e 2b04 	str.w	r2, [lr], #4
 800bee0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bee4:	d2de      	bcs.n	800bea4 <quorem+0x42>
 800bee6:	9b00      	ldr	r3, [sp, #0]
 800bee8:	58eb      	ldr	r3, [r5, r3]
 800beea:	b92b      	cbnz	r3, 800bef8 <quorem+0x96>
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	3b04      	subs	r3, #4
 800bef0:	429d      	cmp	r5, r3
 800bef2:	461a      	mov	r2, r3
 800bef4:	d32f      	bcc.n	800bf56 <quorem+0xf4>
 800bef6:	613c      	str	r4, [r7, #16]
 800bef8:	4638      	mov	r0, r7
 800befa:	f001 f97b 	bl	800d1f4 <__mcmp>
 800befe:	2800      	cmp	r0, #0
 800bf00:	db25      	blt.n	800bf4e <quorem+0xec>
 800bf02:	4629      	mov	r1, r5
 800bf04:	2000      	movs	r0, #0
 800bf06:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf0a:	f8d1 c000 	ldr.w	ip, [r1]
 800bf0e:	fa1f fe82 	uxth.w	lr, r2
 800bf12:	fa1f f38c 	uxth.w	r3, ip
 800bf16:	eba3 030e 	sub.w	r3, r3, lr
 800bf1a:	4403      	add	r3, r0
 800bf1c:	0c12      	lsrs	r2, r2, #16
 800bf1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf2c:	45c1      	cmp	r9, r8
 800bf2e:	f841 3b04 	str.w	r3, [r1], #4
 800bf32:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf36:	d2e6      	bcs.n	800bf06 <quorem+0xa4>
 800bf38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf40:	b922      	cbnz	r2, 800bf4c <quorem+0xea>
 800bf42:	3b04      	subs	r3, #4
 800bf44:	429d      	cmp	r5, r3
 800bf46:	461a      	mov	r2, r3
 800bf48:	d30b      	bcc.n	800bf62 <quorem+0x100>
 800bf4a:	613c      	str	r4, [r7, #16]
 800bf4c:	3601      	adds	r6, #1
 800bf4e:	4630      	mov	r0, r6
 800bf50:	b003      	add	sp, #12
 800bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	3b04      	subs	r3, #4
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	d1cb      	bne.n	800bef6 <quorem+0x94>
 800bf5e:	3c01      	subs	r4, #1
 800bf60:	e7c6      	b.n	800bef0 <quorem+0x8e>
 800bf62:	6812      	ldr	r2, [r2, #0]
 800bf64:	3b04      	subs	r3, #4
 800bf66:	2a00      	cmp	r2, #0
 800bf68:	d1ef      	bne.n	800bf4a <quorem+0xe8>
 800bf6a:	3c01      	subs	r4, #1
 800bf6c:	e7ea      	b.n	800bf44 <quorem+0xe2>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	e7ee      	b.n	800bf50 <quorem+0xee>
 800bf72:	0000      	movs	r0, r0
 800bf74:	0000      	movs	r0, r0
	...

0800bf78 <_dtoa_r>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	69c7      	ldr	r7, [r0, #28]
 800bf7e:	b099      	sub	sp, #100	@ 0x64
 800bf80:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bf84:	ec55 4b10 	vmov	r4, r5, d0
 800bf88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bf8a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf8c:	4683      	mov	fp, r0
 800bf8e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf92:	b97f      	cbnz	r7, 800bfb4 <_dtoa_r+0x3c>
 800bf94:	2010      	movs	r0, #16
 800bf96:	f000 fdfd 	bl	800cb94 <malloc>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bfa0:	b920      	cbnz	r0, 800bfac <_dtoa_r+0x34>
 800bfa2:	4ba7      	ldr	r3, [pc, #668]	@ (800c240 <_dtoa_r+0x2c8>)
 800bfa4:	21ef      	movs	r1, #239	@ 0xef
 800bfa6:	48a7      	ldr	r0, [pc, #668]	@ (800c244 <_dtoa_r+0x2cc>)
 800bfa8:	f001 fc5a 	bl	800d860 <__assert_func>
 800bfac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfb0:	6007      	str	r7, [r0, #0]
 800bfb2:	60c7      	str	r7, [r0, #12]
 800bfb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfb8:	6819      	ldr	r1, [r3, #0]
 800bfba:	b159      	cbz	r1, 800bfd4 <_dtoa_r+0x5c>
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	604a      	str	r2, [r1, #4]
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	4093      	lsls	r3, r2
 800bfc4:	608b      	str	r3, [r1, #8]
 800bfc6:	4658      	mov	r0, fp
 800bfc8:	f000 feda 	bl	800cd80 <_Bfree>
 800bfcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	1e2b      	subs	r3, r5, #0
 800bfd6:	bfb9      	ittee	lt
 800bfd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bfdc:	9303      	strlt	r3, [sp, #12]
 800bfde:	2300      	movge	r3, #0
 800bfe0:	6033      	strge	r3, [r6, #0]
 800bfe2:	9f03      	ldr	r7, [sp, #12]
 800bfe4:	4b98      	ldr	r3, [pc, #608]	@ (800c248 <_dtoa_r+0x2d0>)
 800bfe6:	bfbc      	itt	lt
 800bfe8:	2201      	movlt	r2, #1
 800bfea:	6032      	strlt	r2, [r6, #0]
 800bfec:	43bb      	bics	r3, r7
 800bfee:	d112      	bne.n	800c016 <_dtoa_r+0x9e>
 800bff0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bff2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bffc:	4323      	orrs	r3, r4
 800bffe:	f000 854d 	beq.w	800ca9c <_dtoa_r+0xb24>
 800c002:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c004:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c25c <_dtoa_r+0x2e4>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 854f 	beq.w	800caac <_dtoa_r+0xb34>
 800c00e:	f10a 0303 	add.w	r3, sl, #3
 800c012:	f000 bd49 	b.w	800caa8 <_dtoa_r+0xb30>
 800c016:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c01a:	2200      	movs	r2, #0
 800c01c:	ec51 0b17 	vmov	r0, r1, d7
 800c020:	2300      	movs	r3, #0
 800c022:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c026:	f7f4 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c02a:	4680      	mov	r8, r0
 800c02c:	b158      	cbz	r0, 800c046 <_dtoa_r+0xce>
 800c02e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c030:	2301      	movs	r3, #1
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c036:	b113      	cbz	r3, 800c03e <_dtoa_r+0xc6>
 800c038:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c03a:	4b84      	ldr	r3, [pc, #528]	@ (800c24c <_dtoa_r+0x2d4>)
 800c03c:	6013      	str	r3, [r2, #0]
 800c03e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c260 <_dtoa_r+0x2e8>
 800c042:	f000 bd33 	b.w	800caac <_dtoa_r+0xb34>
 800c046:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c04a:	aa16      	add	r2, sp, #88	@ 0x58
 800c04c:	a917      	add	r1, sp, #92	@ 0x5c
 800c04e:	4658      	mov	r0, fp
 800c050:	f001 f980 	bl	800d354 <__d2b>
 800c054:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c058:	4681      	mov	r9, r0
 800c05a:	2e00      	cmp	r6, #0
 800c05c:	d077      	beq.n	800c14e <_dtoa_r+0x1d6>
 800c05e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c060:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c06c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c070:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c074:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c078:	4619      	mov	r1, r3
 800c07a:	2200      	movs	r2, #0
 800c07c:	4b74      	ldr	r3, [pc, #464]	@ (800c250 <_dtoa_r+0x2d8>)
 800c07e:	f7f4 f903 	bl	8000288 <__aeabi_dsub>
 800c082:	a369      	add	r3, pc, #420	@ (adr r3, 800c228 <_dtoa_r+0x2b0>)
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	f7f4 fab6 	bl	80005f8 <__aeabi_dmul>
 800c08c:	a368      	add	r3, pc, #416	@ (adr r3, 800c230 <_dtoa_r+0x2b8>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f7f4 f8fb 	bl	800028c <__adddf3>
 800c096:	4604      	mov	r4, r0
 800c098:	4630      	mov	r0, r6
 800c09a:	460d      	mov	r5, r1
 800c09c:	f7f4 fa42 	bl	8000524 <__aeabi_i2d>
 800c0a0:	a365      	add	r3, pc, #404	@ (adr r3, 800c238 <_dtoa_r+0x2c0>)
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	f7f4 faa7 	bl	80005f8 <__aeabi_dmul>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7f4 f8eb 	bl	800028c <__adddf3>
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	460d      	mov	r5, r1
 800c0ba:	f7f4 fd4d 	bl	8000b58 <__aeabi_d2iz>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4607      	mov	r7, r0
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f7f4 fd08 	bl	8000adc <__aeabi_dcmplt>
 800c0cc:	b140      	cbz	r0, 800c0e0 <_dtoa_r+0x168>
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	f7f4 fa28 	bl	8000524 <__aeabi_i2d>
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	462b      	mov	r3, r5
 800c0d8:	f7f4 fcf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0dc:	b900      	cbnz	r0, 800c0e0 <_dtoa_r+0x168>
 800c0de:	3f01      	subs	r7, #1
 800c0e0:	2f16      	cmp	r7, #22
 800c0e2:	d851      	bhi.n	800c188 <_dtoa_r+0x210>
 800c0e4:	4b5b      	ldr	r3, [pc, #364]	@ (800c254 <_dtoa_r+0x2dc>)
 800c0e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0f2:	f7f4 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d048      	beq.n	800c18c <_dtoa_r+0x214>
 800c0fa:	3f01      	subs	r7, #1
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800c100:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c102:	1b9b      	subs	r3, r3, r6
 800c104:	1e5a      	subs	r2, r3, #1
 800c106:	bf44      	itt	mi
 800c108:	f1c3 0801 	rsbmi	r8, r3, #1
 800c10c:	2300      	movmi	r3, #0
 800c10e:	9208      	str	r2, [sp, #32]
 800c110:	bf54      	ite	pl
 800c112:	f04f 0800 	movpl.w	r8, #0
 800c116:	9308      	strmi	r3, [sp, #32]
 800c118:	2f00      	cmp	r7, #0
 800c11a:	db39      	blt.n	800c190 <_dtoa_r+0x218>
 800c11c:	9b08      	ldr	r3, [sp, #32]
 800c11e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c120:	443b      	add	r3, r7
 800c122:	9308      	str	r3, [sp, #32]
 800c124:	2300      	movs	r3, #0
 800c126:	930a      	str	r3, [sp, #40]	@ 0x28
 800c128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c12a:	2b09      	cmp	r3, #9
 800c12c:	d864      	bhi.n	800c1f8 <_dtoa_r+0x280>
 800c12e:	2b05      	cmp	r3, #5
 800c130:	bfc4      	itt	gt
 800c132:	3b04      	subgt	r3, #4
 800c134:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c138:	f1a3 0302 	sub.w	r3, r3, #2
 800c13c:	bfcc      	ite	gt
 800c13e:	2400      	movgt	r4, #0
 800c140:	2401      	movle	r4, #1
 800c142:	2b03      	cmp	r3, #3
 800c144:	d863      	bhi.n	800c20e <_dtoa_r+0x296>
 800c146:	e8df f003 	tbb	[pc, r3]
 800c14a:	372a      	.short	0x372a
 800c14c:	5535      	.short	0x5535
 800c14e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c152:	441e      	add	r6, r3
 800c154:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c158:	2b20      	cmp	r3, #32
 800c15a:	bfc1      	itttt	gt
 800c15c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c160:	409f      	lslgt	r7, r3
 800c162:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c166:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c16a:	bfd6      	itet	le
 800c16c:	f1c3 0320 	rsble	r3, r3, #32
 800c170:	ea47 0003 	orrgt.w	r0, r7, r3
 800c174:	fa04 f003 	lslle.w	r0, r4, r3
 800c178:	f7f4 f9c4 	bl	8000504 <__aeabi_ui2d>
 800c17c:	2201      	movs	r2, #1
 800c17e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c182:	3e01      	subs	r6, #1
 800c184:	9214      	str	r2, [sp, #80]	@ 0x50
 800c186:	e777      	b.n	800c078 <_dtoa_r+0x100>
 800c188:	2301      	movs	r3, #1
 800c18a:	e7b8      	b.n	800c0fe <_dtoa_r+0x186>
 800c18c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c18e:	e7b7      	b.n	800c100 <_dtoa_r+0x188>
 800c190:	427b      	negs	r3, r7
 800c192:	930a      	str	r3, [sp, #40]	@ 0x28
 800c194:	2300      	movs	r3, #0
 800c196:	eba8 0807 	sub.w	r8, r8, r7
 800c19a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c19c:	e7c4      	b.n	800c128 <_dtoa_r+0x1b0>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dc35      	bgt.n	800c214 <_dtoa_r+0x29c>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	9307      	str	r3, [sp, #28]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1b2:	e00b      	b.n	800c1cc <_dtoa_r+0x254>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e7f3      	b.n	800c1a0 <_dtoa_r+0x228>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1be:	18fb      	adds	r3, r7, r3
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	9307      	str	r3, [sp, #28]
 800c1c8:	bfb8      	it	lt
 800c1ca:	2301      	movlt	r3, #1
 800c1cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	2204      	movs	r2, #4
 800c1d4:	f102 0514 	add.w	r5, r2, #20
 800c1d8:	429d      	cmp	r5, r3
 800c1da:	d91f      	bls.n	800c21c <_dtoa_r+0x2a4>
 800c1dc:	6041      	str	r1, [r0, #4]
 800c1de:	4658      	mov	r0, fp
 800c1e0:	f000 fd8e 	bl	800cd00 <_Balloc>
 800c1e4:	4682      	mov	sl, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d13c      	bne.n	800c264 <_dtoa_r+0x2ec>
 800c1ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c258 <_dtoa_r+0x2e0>)
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800c1f2:	e6d8      	b.n	800bfa6 <_dtoa_r+0x2e>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e7e0      	b.n	800c1ba <_dtoa_r+0x242>
 800c1f8:	2401      	movs	r4, #1
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c200:	f04f 33ff 	mov.w	r3, #4294967295
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	9307      	str	r3, [sp, #28]
 800c208:	2200      	movs	r2, #0
 800c20a:	2312      	movs	r3, #18
 800c20c:	e7d0      	b.n	800c1b0 <_dtoa_r+0x238>
 800c20e:	2301      	movs	r3, #1
 800c210:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c212:	e7f5      	b.n	800c200 <_dtoa_r+0x288>
 800c214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	9307      	str	r3, [sp, #28]
 800c21a:	e7d7      	b.n	800c1cc <_dtoa_r+0x254>
 800c21c:	3101      	adds	r1, #1
 800c21e:	0052      	lsls	r2, r2, #1
 800c220:	e7d8      	b.n	800c1d4 <_dtoa_r+0x25c>
 800c222:	bf00      	nop
 800c224:	f3af 8000 	nop.w
 800c228:	636f4361 	.word	0x636f4361
 800c22c:	3fd287a7 	.word	0x3fd287a7
 800c230:	8b60c8b3 	.word	0x8b60c8b3
 800c234:	3fc68a28 	.word	0x3fc68a28
 800c238:	509f79fb 	.word	0x509f79fb
 800c23c:	3fd34413 	.word	0x3fd34413
 800c240:	0800eb6d 	.word	0x0800eb6d
 800c244:	0800eb84 	.word	0x0800eb84
 800c248:	7ff00000 	.word	0x7ff00000
 800c24c:	0800eb3d 	.word	0x0800eb3d
 800c250:	3ff80000 	.word	0x3ff80000
 800c254:	0800ec80 	.word	0x0800ec80
 800c258:	0800ebdc 	.word	0x0800ebdc
 800c25c:	0800eb69 	.word	0x0800eb69
 800c260:	0800eb3c 	.word	0x0800eb3c
 800c264:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c268:	6018      	str	r0, [r3, #0]
 800c26a:	9b07      	ldr	r3, [sp, #28]
 800c26c:	2b0e      	cmp	r3, #14
 800c26e:	f200 80a4 	bhi.w	800c3ba <_dtoa_r+0x442>
 800c272:	2c00      	cmp	r4, #0
 800c274:	f000 80a1 	beq.w	800c3ba <_dtoa_r+0x442>
 800c278:	2f00      	cmp	r7, #0
 800c27a:	dd33      	ble.n	800c2e4 <_dtoa_r+0x36c>
 800c27c:	4bad      	ldr	r3, [pc, #692]	@ (800c534 <_dtoa_r+0x5bc>)
 800c27e:	f007 020f 	and.w	r2, r7, #15
 800c282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c286:	ed93 7b00 	vldr	d7, [r3]
 800c28a:	05f8      	lsls	r0, r7, #23
 800c28c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c290:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c294:	d516      	bpl.n	800c2c4 <_dtoa_r+0x34c>
 800c296:	4ba8      	ldr	r3, [pc, #672]	@ (800c538 <_dtoa_r+0x5c0>)
 800c298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c29c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2a0:	f7f4 fad4 	bl	800084c <__aeabi_ddiv>
 800c2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2a8:	f004 040f 	and.w	r4, r4, #15
 800c2ac:	2603      	movs	r6, #3
 800c2ae:	4da2      	ldr	r5, [pc, #648]	@ (800c538 <_dtoa_r+0x5c0>)
 800c2b0:	b954      	cbnz	r4, 800c2c8 <_dtoa_r+0x350>
 800c2b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ba:	f7f4 fac7 	bl	800084c <__aeabi_ddiv>
 800c2be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2c2:	e028      	b.n	800c316 <_dtoa_r+0x39e>
 800c2c4:	2602      	movs	r6, #2
 800c2c6:	e7f2      	b.n	800c2ae <_dtoa_r+0x336>
 800c2c8:	07e1      	lsls	r1, r4, #31
 800c2ca:	d508      	bpl.n	800c2de <_dtoa_r+0x366>
 800c2cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2d4:	f7f4 f990 	bl	80005f8 <__aeabi_dmul>
 800c2d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2dc:	3601      	adds	r6, #1
 800c2de:	1064      	asrs	r4, r4, #1
 800c2e0:	3508      	adds	r5, #8
 800c2e2:	e7e5      	b.n	800c2b0 <_dtoa_r+0x338>
 800c2e4:	f000 80d2 	beq.w	800c48c <_dtoa_r+0x514>
 800c2e8:	427c      	negs	r4, r7
 800c2ea:	4b92      	ldr	r3, [pc, #584]	@ (800c534 <_dtoa_r+0x5bc>)
 800c2ec:	4d92      	ldr	r5, [pc, #584]	@ (800c538 <_dtoa_r+0x5c0>)
 800c2ee:	f004 020f 	and.w	r2, r4, #15
 800c2f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2fe:	f7f4 f97b 	bl	80005f8 <__aeabi_dmul>
 800c302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c306:	1124      	asrs	r4, r4, #4
 800c308:	2300      	movs	r3, #0
 800c30a:	2602      	movs	r6, #2
 800c30c:	2c00      	cmp	r4, #0
 800c30e:	f040 80b2 	bne.w	800c476 <_dtoa_r+0x4fe>
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1d3      	bne.n	800c2be <_dtoa_r+0x346>
 800c316:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c318:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f000 80b7 	beq.w	800c490 <_dtoa_r+0x518>
 800c322:	4b86      	ldr	r3, [pc, #536]	@ (800c53c <_dtoa_r+0x5c4>)
 800c324:	2200      	movs	r2, #0
 800c326:	4620      	mov	r0, r4
 800c328:	4629      	mov	r1, r5
 800c32a:	f7f4 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800c32e:	2800      	cmp	r0, #0
 800c330:	f000 80ae 	beq.w	800c490 <_dtoa_r+0x518>
 800c334:	9b07      	ldr	r3, [sp, #28]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 80aa 	beq.w	800c490 <_dtoa_r+0x518>
 800c33c:	9b00      	ldr	r3, [sp, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	dd37      	ble.n	800c3b2 <_dtoa_r+0x43a>
 800c342:	1e7b      	subs	r3, r7, #1
 800c344:	9304      	str	r3, [sp, #16]
 800c346:	4620      	mov	r0, r4
 800c348:	4b7d      	ldr	r3, [pc, #500]	@ (800c540 <_dtoa_r+0x5c8>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	4629      	mov	r1, r5
 800c34e:	f7f4 f953 	bl	80005f8 <__aeabi_dmul>
 800c352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c356:	9c00      	ldr	r4, [sp, #0]
 800c358:	3601      	adds	r6, #1
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7f4 f8e2 	bl	8000524 <__aeabi_i2d>
 800c360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c364:	f7f4 f948 	bl	80005f8 <__aeabi_dmul>
 800c368:	4b76      	ldr	r3, [pc, #472]	@ (800c544 <_dtoa_r+0x5cc>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	f7f3 ff8e 	bl	800028c <__adddf3>
 800c370:	4605      	mov	r5, r0
 800c372:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c376:	2c00      	cmp	r4, #0
 800c378:	f040 808d 	bne.w	800c496 <_dtoa_r+0x51e>
 800c37c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c380:	4b71      	ldr	r3, [pc, #452]	@ (800c548 <_dtoa_r+0x5d0>)
 800c382:	2200      	movs	r2, #0
 800c384:	f7f3 ff80 	bl	8000288 <__aeabi_dsub>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c390:	462a      	mov	r2, r5
 800c392:	4633      	mov	r3, r6
 800c394:	f7f4 fbc0 	bl	8000b18 <__aeabi_dcmpgt>
 800c398:	2800      	cmp	r0, #0
 800c39a:	f040 828b 	bne.w	800c8b4 <_dtoa_r+0x93c>
 800c39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3a2:	462a      	mov	r2, r5
 800c3a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c3a8:	f7f4 fb98 	bl	8000adc <__aeabi_dcmplt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 8128 	bne.w	800c602 <_dtoa_r+0x68a>
 800c3b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c3b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c3ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f2c0 815a 	blt.w	800c676 <_dtoa_r+0x6fe>
 800c3c2:	2f0e      	cmp	r7, #14
 800c3c4:	f300 8157 	bgt.w	800c676 <_dtoa_r+0x6fe>
 800c3c8:	4b5a      	ldr	r3, [pc, #360]	@ (800c534 <_dtoa_r+0x5bc>)
 800c3ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3ce:	ed93 7b00 	vldr	d7, [r3]
 800c3d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	ed8d 7b00 	vstr	d7, [sp]
 800c3da:	da03      	bge.n	800c3e4 <_dtoa_r+0x46c>
 800c3dc:	9b07      	ldr	r3, [sp, #28]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f340 8101 	ble.w	800c5e6 <_dtoa_r+0x66e>
 800c3e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3e8:	4656      	mov	r6, sl
 800c3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f4 fa2b 	bl	800084c <__aeabi_ddiv>
 800c3f6:	f7f4 fbaf 	bl	8000b58 <__aeabi_d2iz>
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	f7f4 f892 	bl	8000524 <__aeabi_i2d>
 800c400:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c404:	f7f4 f8f8 	bl	80005f8 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4620      	mov	r0, r4
 800c40e:	4629      	mov	r1, r5
 800c410:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c414:	f7f3 ff38 	bl	8000288 <__aeabi_dsub>
 800c418:	f806 4b01 	strb.w	r4, [r6], #1
 800c41c:	9d07      	ldr	r5, [sp, #28]
 800c41e:	eba6 040a 	sub.w	r4, r6, sl
 800c422:	42a5      	cmp	r5, r4
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	f040 8117 	bne.w	800c65a <_dtoa_r+0x6e2>
 800c42c:	f7f3 ff2e 	bl	800028c <__adddf3>
 800c430:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c434:	4604      	mov	r4, r0
 800c436:	460d      	mov	r5, r1
 800c438:	f7f4 fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f040 80f9 	bne.w	800c634 <_dtoa_r+0x6bc>
 800c442:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c446:	4620      	mov	r0, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	f7f4 fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c44e:	b118      	cbz	r0, 800c458 <_dtoa_r+0x4e0>
 800c450:	f018 0f01 	tst.w	r8, #1
 800c454:	f040 80ee 	bne.w	800c634 <_dtoa_r+0x6bc>
 800c458:	4649      	mov	r1, r9
 800c45a:	4658      	mov	r0, fp
 800c45c:	f000 fc90 	bl	800cd80 <_Bfree>
 800c460:	2300      	movs	r3, #0
 800c462:	7033      	strb	r3, [r6, #0]
 800c464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c466:	3701      	adds	r7, #1
 800c468:	601f      	str	r7, [r3, #0]
 800c46a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f000 831d 	beq.w	800caac <_dtoa_r+0xb34>
 800c472:	601e      	str	r6, [r3, #0]
 800c474:	e31a      	b.n	800caac <_dtoa_r+0xb34>
 800c476:	07e2      	lsls	r2, r4, #31
 800c478:	d505      	bpl.n	800c486 <_dtoa_r+0x50e>
 800c47a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c47e:	f7f4 f8bb 	bl	80005f8 <__aeabi_dmul>
 800c482:	3601      	adds	r6, #1
 800c484:	2301      	movs	r3, #1
 800c486:	1064      	asrs	r4, r4, #1
 800c488:	3508      	adds	r5, #8
 800c48a:	e73f      	b.n	800c30c <_dtoa_r+0x394>
 800c48c:	2602      	movs	r6, #2
 800c48e:	e742      	b.n	800c316 <_dtoa_r+0x39e>
 800c490:	9c07      	ldr	r4, [sp, #28]
 800c492:	9704      	str	r7, [sp, #16]
 800c494:	e761      	b.n	800c35a <_dtoa_r+0x3e2>
 800c496:	4b27      	ldr	r3, [pc, #156]	@ (800c534 <_dtoa_r+0x5bc>)
 800c498:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c49a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c49e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4a2:	4454      	add	r4, sl
 800c4a4:	2900      	cmp	r1, #0
 800c4a6:	d053      	beq.n	800c550 <_dtoa_r+0x5d8>
 800c4a8:	4928      	ldr	r1, [pc, #160]	@ (800c54c <_dtoa_r+0x5d4>)
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	f7f4 f9ce 	bl	800084c <__aeabi_ddiv>
 800c4b0:	4633      	mov	r3, r6
 800c4b2:	462a      	mov	r2, r5
 800c4b4:	f7f3 fee8 	bl	8000288 <__aeabi_dsub>
 800c4b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c4bc:	4656      	mov	r6, sl
 800c4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c2:	f7f4 fb49 	bl	8000b58 <__aeabi_d2iz>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	f7f4 f82c 	bl	8000524 <__aeabi_i2d>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4d4:	f7f3 fed8 	bl	8000288 <__aeabi_dsub>
 800c4d8:	3530      	adds	r5, #48	@ 0x30
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4e2:	f806 5b01 	strb.w	r5, [r6], #1
 800c4e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4ea:	f7f4 faf7 	bl	8000adc <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d171      	bne.n	800c5d6 <_dtoa_r+0x65e>
 800c4f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4f6:	4911      	ldr	r1, [pc, #68]	@ (800c53c <_dtoa_r+0x5c4>)
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	f7f3 fec5 	bl	8000288 <__aeabi_dsub>
 800c4fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c502:	f7f4 faeb 	bl	8000adc <__aeabi_dcmplt>
 800c506:	2800      	cmp	r0, #0
 800c508:	f040 8095 	bne.w	800c636 <_dtoa_r+0x6be>
 800c50c:	42a6      	cmp	r6, r4
 800c50e:	f43f af50 	beq.w	800c3b2 <_dtoa_r+0x43a>
 800c512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c516:	4b0a      	ldr	r3, [pc, #40]	@ (800c540 <_dtoa_r+0x5c8>)
 800c518:	2200      	movs	r2, #0
 800c51a:	f7f4 f86d 	bl	80005f8 <__aeabi_dmul>
 800c51e:	4b08      	ldr	r3, [pc, #32]	@ (800c540 <_dtoa_r+0x5c8>)
 800c520:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c524:	2200      	movs	r2, #0
 800c526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c52a:	f7f4 f865 	bl	80005f8 <__aeabi_dmul>
 800c52e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c532:	e7c4      	b.n	800c4be <_dtoa_r+0x546>
 800c534:	0800ec80 	.word	0x0800ec80
 800c538:	0800ec58 	.word	0x0800ec58
 800c53c:	3ff00000 	.word	0x3ff00000
 800c540:	40240000 	.word	0x40240000
 800c544:	401c0000 	.word	0x401c0000
 800c548:	40140000 	.word	0x40140000
 800c54c:	3fe00000 	.word	0x3fe00000
 800c550:	4631      	mov	r1, r6
 800c552:	4628      	mov	r0, r5
 800c554:	f7f4 f850 	bl	80005f8 <__aeabi_dmul>
 800c558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c55c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c55e:	4656      	mov	r6, sl
 800c560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c564:	f7f4 faf8 	bl	8000b58 <__aeabi_d2iz>
 800c568:	4605      	mov	r5, r0
 800c56a:	f7f3 ffdb 	bl	8000524 <__aeabi_i2d>
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c576:	f7f3 fe87 	bl	8000288 <__aeabi_dsub>
 800c57a:	3530      	adds	r5, #48	@ 0x30
 800c57c:	f806 5b01 	strb.w	r5, [r6], #1
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	42a6      	cmp	r6, r4
 800c586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c58a:	f04f 0200 	mov.w	r2, #0
 800c58e:	d124      	bne.n	800c5da <_dtoa_r+0x662>
 800c590:	4bac      	ldr	r3, [pc, #688]	@ (800c844 <_dtoa_r+0x8cc>)
 800c592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c596:	f7f3 fe79 	bl	800028c <__adddf3>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5a2:	f7f4 fab9 	bl	8000b18 <__aeabi_dcmpgt>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d145      	bne.n	800c636 <_dtoa_r+0x6be>
 800c5aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5ae:	49a5      	ldr	r1, [pc, #660]	@ (800c844 <_dtoa_r+0x8cc>)
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	f7f3 fe69 	bl	8000288 <__aeabi_dsub>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5be:	f7f4 fa8d 	bl	8000adc <__aeabi_dcmplt>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f43f aef5 	beq.w	800c3b2 <_dtoa_r+0x43a>
 800c5c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c5ca:	1e73      	subs	r3, r6, #1
 800c5cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c5ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5d2:	2b30      	cmp	r3, #48	@ 0x30
 800c5d4:	d0f8      	beq.n	800c5c8 <_dtoa_r+0x650>
 800c5d6:	9f04      	ldr	r7, [sp, #16]
 800c5d8:	e73e      	b.n	800c458 <_dtoa_r+0x4e0>
 800c5da:	4b9b      	ldr	r3, [pc, #620]	@ (800c848 <_dtoa_r+0x8d0>)
 800c5dc:	f7f4 f80c 	bl	80005f8 <__aeabi_dmul>
 800c5e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5e4:	e7bc      	b.n	800c560 <_dtoa_r+0x5e8>
 800c5e6:	d10c      	bne.n	800c602 <_dtoa_r+0x68a>
 800c5e8:	4b98      	ldr	r3, [pc, #608]	@ (800c84c <_dtoa_r+0x8d4>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5f0:	f7f4 f802 	bl	80005f8 <__aeabi_dmul>
 800c5f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5f8:	f7f4 fa84 	bl	8000b04 <__aeabi_dcmpge>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	f000 8157 	beq.w	800c8b0 <_dtoa_r+0x938>
 800c602:	2400      	movs	r4, #0
 800c604:	4625      	mov	r5, r4
 800c606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c608:	43db      	mvns	r3, r3
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	4656      	mov	r6, sl
 800c60e:	2700      	movs	r7, #0
 800c610:	4621      	mov	r1, r4
 800c612:	4658      	mov	r0, fp
 800c614:	f000 fbb4 	bl	800cd80 <_Bfree>
 800c618:	2d00      	cmp	r5, #0
 800c61a:	d0dc      	beq.n	800c5d6 <_dtoa_r+0x65e>
 800c61c:	b12f      	cbz	r7, 800c62a <_dtoa_r+0x6b2>
 800c61e:	42af      	cmp	r7, r5
 800c620:	d003      	beq.n	800c62a <_dtoa_r+0x6b2>
 800c622:	4639      	mov	r1, r7
 800c624:	4658      	mov	r0, fp
 800c626:	f000 fbab 	bl	800cd80 <_Bfree>
 800c62a:	4629      	mov	r1, r5
 800c62c:	4658      	mov	r0, fp
 800c62e:	f000 fba7 	bl	800cd80 <_Bfree>
 800c632:	e7d0      	b.n	800c5d6 <_dtoa_r+0x65e>
 800c634:	9704      	str	r7, [sp, #16]
 800c636:	4633      	mov	r3, r6
 800c638:	461e      	mov	r6, r3
 800c63a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c63e:	2a39      	cmp	r2, #57	@ 0x39
 800c640:	d107      	bne.n	800c652 <_dtoa_r+0x6da>
 800c642:	459a      	cmp	sl, r3
 800c644:	d1f8      	bne.n	800c638 <_dtoa_r+0x6c0>
 800c646:	9a04      	ldr	r2, [sp, #16]
 800c648:	3201      	adds	r2, #1
 800c64a:	9204      	str	r2, [sp, #16]
 800c64c:	2230      	movs	r2, #48	@ 0x30
 800c64e:	f88a 2000 	strb.w	r2, [sl]
 800c652:	781a      	ldrb	r2, [r3, #0]
 800c654:	3201      	adds	r2, #1
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	e7bd      	b.n	800c5d6 <_dtoa_r+0x65e>
 800c65a:	4b7b      	ldr	r3, [pc, #492]	@ (800c848 <_dtoa_r+0x8d0>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	f7f3 ffcb 	bl	80005f8 <__aeabi_dmul>
 800c662:	2200      	movs	r2, #0
 800c664:	2300      	movs	r3, #0
 800c666:	4604      	mov	r4, r0
 800c668:	460d      	mov	r5, r1
 800c66a:	f7f4 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c66e:	2800      	cmp	r0, #0
 800c670:	f43f aebb 	beq.w	800c3ea <_dtoa_r+0x472>
 800c674:	e6f0      	b.n	800c458 <_dtoa_r+0x4e0>
 800c676:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c678:	2a00      	cmp	r2, #0
 800c67a:	f000 80db 	beq.w	800c834 <_dtoa_r+0x8bc>
 800c67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c680:	2a01      	cmp	r2, #1
 800c682:	f300 80bf 	bgt.w	800c804 <_dtoa_r+0x88c>
 800c686:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c688:	2a00      	cmp	r2, #0
 800c68a:	f000 80b7 	beq.w	800c7fc <_dtoa_r+0x884>
 800c68e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c692:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c694:	4646      	mov	r6, r8
 800c696:	9a08      	ldr	r2, [sp, #32]
 800c698:	2101      	movs	r1, #1
 800c69a:	441a      	add	r2, r3
 800c69c:	4658      	mov	r0, fp
 800c69e:	4498      	add	r8, r3
 800c6a0:	9208      	str	r2, [sp, #32]
 800c6a2:	f000 fc21 	bl	800cee8 <__i2b>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	b15e      	cbz	r6, 800c6c2 <_dtoa_r+0x74a>
 800c6aa:	9b08      	ldr	r3, [sp, #32]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	dd08      	ble.n	800c6c2 <_dtoa_r+0x74a>
 800c6b0:	42b3      	cmp	r3, r6
 800c6b2:	9a08      	ldr	r2, [sp, #32]
 800c6b4:	bfa8      	it	ge
 800c6b6:	4633      	movge	r3, r6
 800c6b8:	eba8 0803 	sub.w	r8, r8, r3
 800c6bc:	1af6      	subs	r6, r6, r3
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	9308      	str	r3, [sp, #32]
 800c6c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6c4:	b1f3      	cbz	r3, 800c704 <_dtoa_r+0x78c>
 800c6c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80b7 	beq.w	800c83c <_dtoa_r+0x8c4>
 800c6ce:	b18c      	cbz	r4, 800c6f4 <_dtoa_r+0x77c>
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	f000 fcc7 	bl	800d068 <__pow5mult>
 800c6da:	464a      	mov	r2, r9
 800c6dc:	4601      	mov	r1, r0
 800c6de:	4605      	mov	r5, r0
 800c6e0:	4658      	mov	r0, fp
 800c6e2:	f000 fc17 	bl	800cf14 <__multiply>
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	9004      	str	r0, [sp, #16]
 800c6ea:	4658      	mov	r0, fp
 800c6ec:	f000 fb48 	bl	800cd80 <_Bfree>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	4699      	mov	r9, r3
 800c6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6f6:	1b1a      	subs	r2, r3, r4
 800c6f8:	d004      	beq.n	800c704 <_dtoa_r+0x78c>
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	4658      	mov	r0, fp
 800c6fe:	f000 fcb3 	bl	800d068 <__pow5mult>
 800c702:	4681      	mov	r9, r0
 800c704:	2101      	movs	r1, #1
 800c706:	4658      	mov	r0, fp
 800c708:	f000 fbee 	bl	800cee8 <__i2b>
 800c70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c70e:	4604      	mov	r4, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 81cf 	beq.w	800cab4 <_dtoa_r+0xb3c>
 800c716:	461a      	mov	r2, r3
 800c718:	4601      	mov	r1, r0
 800c71a:	4658      	mov	r0, fp
 800c71c:	f000 fca4 	bl	800d068 <__pow5mult>
 800c720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c722:	2b01      	cmp	r3, #1
 800c724:	4604      	mov	r4, r0
 800c726:	f300 8095 	bgt.w	800c854 <_dtoa_r+0x8dc>
 800c72a:	9b02      	ldr	r3, [sp, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f040 8087 	bne.w	800c840 <_dtoa_r+0x8c8>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f040 8089 	bne.w	800c850 <_dtoa_r+0x8d8>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c744:	0d1b      	lsrs	r3, r3, #20
 800c746:	051b      	lsls	r3, r3, #20
 800c748:	b12b      	cbz	r3, 800c756 <_dtoa_r+0x7de>
 800c74a:	9b08      	ldr	r3, [sp, #32]
 800c74c:	3301      	adds	r3, #1
 800c74e:	9308      	str	r3, [sp, #32]
 800c750:	f108 0801 	add.w	r8, r8, #1
 800c754:	2301      	movs	r3, #1
 800c756:	930a      	str	r3, [sp, #40]	@ 0x28
 800c758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 81b0 	beq.w	800cac0 <_dtoa_r+0xb48>
 800c760:	6923      	ldr	r3, [r4, #16]
 800c762:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c766:	6918      	ldr	r0, [r3, #16]
 800c768:	f000 fb72 	bl	800ce50 <__hi0bits>
 800c76c:	f1c0 0020 	rsb	r0, r0, #32
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	4418      	add	r0, r3
 800c774:	f010 001f 	ands.w	r0, r0, #31
 800c778:	d077      	beq.n	800c86a <_dtoa_r+0x8f2>
 800c77a:	f1c0 0320 	rsb	r3, r0, #32
 800c77e:	2b04      	cmp	r3, #4
 800c780:	dd6b      	ble.n	800c85a <_dtoa_r+0x8e2>
 800c782:	9b08      	ldr	r3, [sp, #32]
 800c784:	f1c0 001c 	rsb	r0, r0, #28
 800c788:	4403      	add	r3, r0
 800c78a:	4480      	add	r8, r0
 800c78c:	4406      	add	r6, r0
 800c78e:	9308      	str	r3, [sp, #32]
 800c790:	f1b8 0f00 	cmp.w	r8, #0
 800c794:	dd05      	ble.n	800c7a2 <_dtoa_r+0x82a>
 800c796:	4649      	mov	r1, r9
 800c798:	4642      	mov	r2, r8
 800c79a:	4658      	mov	r0, fp
 800c79c:	f000 fcbe 	bl	800d11c <__lshift>
 800c7a0:	4681      	mov	r9, r0
 800c7a2:	9b08      	ldr	r3, [sp, #32]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd05      	ble.n	800c7b4 <_dtoa_r+0x83c>
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	4658      	mov	r0, fp
 800c7ae:	f000 fcb5 	bl	800d11c <__lshift>
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d059      	beq.n	800c86e <_dtoa_r+0x8f6>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f000 fd19 	bl	800d1f4 <__mcmp>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	da53      	bge.n	800c86e <_dtoa_r+0x8f6>
 800c7c6:	1e7b      	subs	r3, r7, #1
 800c7c8:	9304      	str	r3, [sp, #16]
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	220a      	movs	r2, #10
 800c7d0:	4658      	mov	r0, fp
 800c7d2:	f000 faf7 	bl	800cdc4 <__multadd>
 800c7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7d8:	4681      	mov	r9, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 8172 	beq.w	800cac4 <_dtoa_r+0xb4c>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	220a      	movs	r2, #10
 800c7e6:	4658      	mov	r0, fp
 800c7e8:	f000 faec 	bl	800cdc4 <__multadd>
 800c7ec:	9b00      	ldr	r3, [sp, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	dc67      	bgt.n	800c8c4 <_dtoa_r+0x94c>
 800c7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	dc41      	bgt.n	800c87e <_dtoa_r+0x906>
 800c7fa:	e063      	b.n	800c8c4 <_dtoa_r+0x94c>
 800c7fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c7fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c802:	e746      	b.n	800c692 <_dtoa_r+0x71a>
 800c804:	9b07      	ldr	r3, [sp, #28]
 800c806:	1e5c      	subs	r4, r3, #1
 800c808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c80a:	42a3      	cmp	r3, r4
 800c80c:	bfbf      	itttt	lt
 800c80e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c810:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c812:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c814:	1ae3      	sublt	r3, r4, r3
 800c816:	bfb4      	ite	lt
 800c818:	18d2      	addlt	r2, r2, r3
 800c81a:	1b1c      	subge	r4, r3, r4
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	bfbc      	itt	lt
 800c820:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c822:	2400      	movlt	r4, #0
 800c824:	2b00      	cmp	r3, #0
 800c826:	bfb5      	itete	lt
 800c828:	eba8 0603 	sublt.w	r6, r8, r3
 800c82c:	9b07      	ldrge	r3, [sp, #28]
 800c82e:	2300      	movlt	r3, #0
 800c830:	4646      	movge	r6, r8
 800c832:	e730      	b.n	800c696 <_dtoa_r+0x71e>
 800c834:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c836:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c838:	4646      	mov	r6, r8
 800c83a:	e735      	b.n	800c6a8 <_dtoa_r+0x730>
 800c83c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c83e:	e75c      	b.n	800c6fa <_dtoa_r+0x782>
 800c840:	2300      	movs	r3, #0
 800c842:	e788      	b.n	800c756 <_dtoa_r+0x7de>
 800c844:	3fe00000 	.word	0x3fe00000
 800c848:	40240000 	.word	0x40240000
 800c84c:	40140000 	.word	0x40140000
 800c850:	9b02      	ldr	r3, [sp, #8]
 800c852:	e780      	b.n	800c756 <_dtoa_r+0x7de>
 800c854:	2300      	movs	r3, #0
 800c856:	930a      	str	r3, [sp, #40]	@ 0x28
 800c858:	e782      	b.n	800c760 <_dtoa_r+0x7e8>
 800c85a:	d099      	beq.n	800c790 <_dtoa_r+0x818>
 800c85c:	9a08      	ldr	r2, [sp, #32]
 800c85e:	331c      	adds	r3, #28
 800c860:	441a      	add	r2, r3
 800c862:	4498      	add	r8, r3
 800c864:	441e      	add	r6, r3
 800c866:	9208      	str	r2, [sp, #32]
 800c868:	e792      	b.n	800c790 <_dtoa_r+0x818>
 800c86a:	4603      	mov	r3, r0
 800c86c:	e7f6      	b.n	800c85c <_dtoa_r+0x8e4>
 800c86e:	9b07      	ldr	r3, [sp, #28]
 800c870:	9704      	str	r7, [sp, #16]
 800c872:	2b00      	cmp	r3, #0
 800c874:	dc20      	bgt.n	800c8b8 <_dtoa_r+0x940>
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	dd1e      	ble.n	800c8bc <_dtoa_r+0x944>
 800c87e:	9b00      	ldr	r3, [sp, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f47f aec0 	bne.w	800c606 <_dtoa_r+0x68e>
 800c886:	4621      	mov	r1, r4
 800c888:	2205      	movs	r2, #5
 800c88a:	4658      	mov	r0, fp
 800c88c:	f000 fa9a 	bl	800cdc4 <__multadd>
 800c890:	4601      	mov	r1, r0
 800c892:	4604      	mov	r4, r0
 800c894:	4648      	mov	r0, r9
 800c896:	f000 fcad 	bl	800d1f4 <__mcmp>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	f77f aeb3 	ble.w	800c606 <_dtoa_r+0x68e>
 800c8a0:	4656      	mov	r6, sl
 800c8a2:	2331      	movs	r3, #49	@ 0x31
 800c8a4:	f806 3b01 	strb.w	r3, [r6], #1
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	e6ae      	b.n	800c60e <_dtoa_r+0x696>
 800c8b0:	9c07      	ldr	r4, [sp, #28]
 800c8b2:	9704      	str	r7, [sp, #16]
 800c8b4:	4625      	mov	r5, r4
 800c8b6:	e7f3      	b.n	800c8a0 <_dtoa_r+0x928>
 800c8b8:	9b07      	ldr	r3, [sp, #28]
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 8104 	beq.w	800cacc <_dtoa_r+0xb54>
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	dd05      	ble.n	800c8d4 <_dtoa_r+0x95c>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	4658      	mov	r0, fp
 800c8ce:	f000 fc25 	bl	800d11c <__lshift>
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d05a      	beq.n	800c990 <_dtoa_r+0xa18>
 800c8da:	6869      	ldr	r1, [r5, #4]
 800c8dc:	4658      	mov	r0, fp
 800c8de:	f000 fa0f 	bl	800cd00 <_Balloc>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	b928      	cbnz	r0, 800c8f2 <_dtoa_r+0x97a>
 800c8e6:	4b84      	ldr	r3, [pc, #528]	@ (800caf8 <_dtoa_r+0xb80>)
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c8ee:	f7ff bb5a 	b.w	800bfa6 <_dtoa_r+0x2e>
 800c8f2:	692a      	ldr	r2, [r5, #16]
 800c8f4:	3202      	adds	r2, #2
 800c8f6:	0092      	lsls	r2, r2, #2
 800c8f8:	f105 010c 	add.w	r1, r5, #12
 800c8fc:	300c      	adds	r0, #12
 800c8fe:	f7ff faa2 	bl	800be46 <memcpy>
 800c902:	2201      	movs	r2, #1
 800c904:	4631      	mov	r1, r6
 800c906:	4658      	mov	r0, fp
 800c908:	f000 fc08 	bl	800d11c <__lshift>
 800c90c:	f10a 0301 	add.w	r3, sl, #1
 800c910:	9307      	str	r3, [sp, #28]
 800c912:	9b00      	ldr	r3, [sp, #0]
 800c914:	4453      	add	r3, sl
 800c916:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	462f      	mov	r7, r5
 800c920:	930a      	str	r3, [sp, #40]	@ 0x28
 800c922:	4605      	mov	r5, r0
 800c924:	9b07      	ldr	r3, [sp, #28]
 800c926:	4621      	mov	r1, r4
 800c928:	3b01      	subs	r3, #1
 800c92a:	4648      	mov	r0, r9
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	f7ff fa98 	bl	800be62 <quorem>
 800c932:	4639      	mov	r1, r7
 800c934:	9002      	str	r0, [sp, #8]
 800c936:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c93a:	4648      	mov	r0, r9
 800c93c:	f000 fc5a 	bl	800d1f4 <__mcmp>
 800c940:	462a      	mov	r2, r5
 800c942:	9008      	str	r0, [sp, #32]
 800c944:	4621      	mov	r1, r4
 800c946:	4658      	mov	r0, fp
 800c948:	f000 fc70 	bl	800d22c <__mdiff>
 800c94c:	68c2      	ldr	r2, [r0, #12]
 800c94e:	4606      	mov	r6, r0
 800c950:	bb02      	cbnz	r2, 800c994 <_dtoa_r+0xa1c>
 800c952:	4601      	mov	r1, r0
 800c954:	4648      	mov	r0, r9
 800c956:	f000 fc4d 	bl	800d1f4 <__mcmp>
 800c95a:	4602      	mov	r2, r0
 800c95c:	4631      	mov	r1, r6
 800c95e:	4658      	mov	r0, fp
 800c960:	920e      	str	r2, [sp, #56]	@ 0x38
 800c962:	f000 fa0d 	bl	800cd80 <_Bfree>
 800c966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c968:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c96a:	9e07      	ldr	r6, [sp, #28]
 800c96c:	ea43 0102 	orr.w	r1, r3, r2
 800c970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c972:	4319      	orrs	r1, r3
 800c974:	d110      	bne.n	800c998 <_dtoa_r+0xa20>
 800c976:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c97a:	d029      	beq.n	800c9d0 <_dtoa_r+0xa58>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dd02      	ble.n	800c988 <_dtoa_r+0xa10>
 800c982:	9b02      	ldr	r3, [sp, #8]
 800c984:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c988:	9b00      	ldr	r3, [sp, #0]
 800c98a:	f883 8000 	strb.w	r8, [r3]
 800c98e:	e63f      	b.n	800c610 <_dtoa_r+0x698>
 800c990:	4628      	mov	r0, r5
 800c992:	e7bb      	b.n	800c90c <_dtoa_r+0x994>
 800c994:	2201      	movs	r2, #1
 800c996:	e7e1      	b.n	800c95c <_dtoa_r+0x9e4>
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	db04      	blt.n	800c9a8 <_dtoa_r+0xa30>
 800c99e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9a0:	430b      	orrs	r3, r1
 800c9a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c9a4:	430b      	orrs	r3, r1
 800c9a6:	d120      	bne.n	800c9ea <_dtoa_r+0xa72>
 800c9a8:	2a00      	cmp	r2, #0
 800c9aa:	dded      	ble.n	800c988 <_dtoa_r+0xa10>
 800c9ac:	4649      	mov	r1, r9
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4658      	mov	r0, fp
 800c9b2:	f000 fbb3 	bl	800d11c <__lshift>
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4681      	mov	r9, r0
 800c9ba:	f000 fc1b 	bl	800d1f4 <__mcmp>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	dc03      	bgt.n	800c9ca <_dtoa_r+0xa52>
 800c9c2:	d1e1      	bne.n	800c988 <_dtoa_r+0xa10>
 800c9c4:	f018 0f01 	tst.w	r8, #1
 800c9c8:	d0de      	beq.n	800c988 <_dtoa_r+0xa10>
 800c9ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c9ce:	d1d8      	bne.n	800c982 <_dtoa_r+0xa0a>
 800c9d0:	9a00      	ldr	r2, [sp, #0]
 800c9d2:	2339      	movs	r3, #57	@ 0x39
 800c9d4:	7013      	strb	r3, [r2, #0]
 800c9d6:	4633      	mov	r3, r6
 800c9d8:	461e      	mov	r6, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c9e0:	2a39      	cmp	r2, #57	@ 0x39
 800c9e2:	d052      	beq.n	800ca8a <_dtoa_r+0xb12>
 800c9e4:	3201      	adds	r2, #1
 800c9e6:	701a      	strb	r2, [r3, #0]
 800c9e8:	e612      	b.n	800c610 <_dtoa_r+0x698>
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	dd07      	ble.n	800c9fe <_dtoa_r+0xa86>
 800c9ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c9f2:	d0ed      	beq.n	800c9d0 <_dtoa_r+0xa58>
 800c9f4:	9a00      	ldr	r2, [sp, #0]
 800c9f6:	f108 0301 	add.w	r3, r8, #1
 800c9fa:	7013      	strb	r3, [r2, #0]
 800c9fc:	e608      	b.n	800c610 <_dtoa_r+0x698>
 800c9fe:	9b07      	ldr	r3, [sp, #28]
 800ca00:	9a07      	ldr	r2, [sp, #28]
 800ca02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ca06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d028      	beq.n	800ca5e <_dtoa_r+0xae6>
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	2300      	movs	r3, #0
 800ca10:	220a      	movs	r2, #10
 800ca12:	4658      	mov	r0, fp
 800ca14:	f000 f9d6 	bl	800cdc4 <__multadd>
 800ca18:	42af      	cmp	r7, r5
 800ca1a:	4681      	mov	r9, r0
 800ca1c:	f04f 0300 	mov.w	r3, #0
 800ca20:	f04f 020a 	mov.w	r2, #10
 800ca24:	4639      	mov	r1, r7
 800ca26:	4658      	mov	r0, fp
 800ca28:	d107      	bne.n	800ca3a <_dtoa_r+0xac2>
 800ca2a:	f000 f9cb 	bl	800cdc4 <__multadd>
 800ca2e:	4607      	mov	r7, r0
 800ca30:	4605      	mov	r5, r0
 800ca32:	9b07      	ldr	r3, [sp, #28]
 800ca34:	3301      	adds	r3, #1
 800ca36:	9307      	str	r3, [sp, #28]
 800ca38:	e774      	b.n	800c924 <_dtoa_r+0x9ac>
 800ca3a:	f000 f9c3 	bl	800cdc4 <__multadd>
 800ca3e:	4629      	mov	r1, r5
 800ca40:	4607      	mov	r7, r0
 800ca42:	2300      	movs	r3, #0
 800ca44:	220a      	movs	r2, #10
 800ca46:	4658      	mov	r0, fp
 800ca48:	f000 f9bc 	bl	800cdc4 <__multadd>
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	e7f0      	b.n	800ca32 <_dtoa_r+0xaba>
 800ca50:	9b00      	ldr	r3, [sp, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bfcc      	ite	gt
 800ca56:	461e      	movgt	r6, r3
 800ca58:	2601      	movle	r6, #1
 800ca5a:	4456      	add	r6, sl
 800ca5c:	2700      	movs	r7, #0
 800ca5e:	4649      	mov	r1, r9
 800ca60:	2201      	movs	r2, #1
 800ca62:	4658      	mov	r0, fp
 800ca64:	f000 fb5a 	bl	800d11c <__lshift>
 800ca68:	4621      	mov	r1, r4
 800ca6a:	4681      	mov	r9, r0
 800ca6c:	f000 fbc2 	bl	800d1f4 <__mcmp>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	dcb0      	bgt.n	800c9d6 <_dtoa_r+0xa5e>
 800ca74:	d102      	bne.n	800ca7c <_dtoa_r+0xb04>
 800ca76:	f018 0f01 	tst.w	r8, #1
 800ca7a:	d1ac      	bne.n	800c9d6 <_dtoa_r+0xa5e>
 800ca7c:	4633      	mov	r3, r6
 800ca7e:	461e      	mov	r6, r3
 800ca80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca84:	2a30      	cmp	r2, #48	@ 0x30
 800ca86:	d0fa      	beq.n	800ca7e <_dtoa_r+0xb06>
 800ca88:	e5c2      	b.n	800c610 <_dtoa_r+0x698>
 800ca8a:	459a      	cmp	sl, r3
 800ca8c:	d1a4      	bne.n	800c9d8 <_dtoa_r+0xa60>
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	3301      	adds	r3, #1
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	2331      	movs	r3, #49	@ 0x31
 800ca96:	f88a 3000 	strb.w	r3, [sl]
 800ca9a:	e5b9      	b.n	800c610 <_dtoa_r+0x698>
 800ca9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cafc <_dtoa_r+0xb84>
 800caa2:	b11b      	cbz	r3, 800caac <_dtoa_r+0xb34>
 800caa4:	f10a 0308 	add.w	r3, sl, #8
 800caa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800caaa:	6013      	str	r3, [r2, #0]
 800caac:	4650      	mov	r0, sl
 800caae:	b019      	add	sp, #100	@ 0x64
 800cab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	f77f ae37 	ble.w	800c72a <_dtoa_r+0x7b2>
 800cabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cabe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cac0:	2001      	movs	r0, #1
 800cac2:	e655      	b.n	800c770 <_dtoa_r+0x7f8>
 800cac4:	9b00      	ldr	r3, [sp, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f77f aed6 	ble.w	800c878 <_dtoa_r+0x900>
 800cacc:	4656      	mov	r6, sl
 800cace:	4621      	mov	r1, r4
 800cad0:	4648      	mov	r0, r9
 800cad2:	f7ff f9c6 	bl	800be62 <quorem>
 800cad6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cada:	f806 8b01 	strb.w	r8, [r6], #1
 800cade:	9b00      	ldr	r3, [sp, #0]
 800cae0:	eba6 020a 	sub.w	r2, r6, sl
 800cae4:	4293      	cmp	r3, r2
 800cae6:	ddb3      	ble.n	800ca50 <_dtoa_r+0xad8>
 800cae8:	4649      	mov	r1, r9
 800caea:	2300      	movs	r3, #0
 800caec:	220a      	movs	r2, #10
 800caee:	4658      	mov	r0, fp
 800caf0:	f000 f968 	bl	800cdc4 <__multadd>
 800caf4:	4681      	mov	r9, r0
 800caf6:	e7ea      	b.n	800cace <_dtoa_r+0xb56>
 800caf8:	0800ebdc 	.word	0x0800ebdc
 800cafc:	0800eb60 	.word	0x0800eb60

0800cb00 <_free_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	4605      	mov	r5, r0
 800cb04:	2900      	cmp	r1, #0
 800cb06:	d041      	beq.n	800cb8c <_free_r+0x8c>
 800cb08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb0c:	1f0c      	subs	r4, r1, #4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	bfb8      	it	lt
 800cb12:	18e4      	addlt	r4, r4, r3
 800cb14:	f000 f8e8 	bl	800cce8 <__malloc_lock>
 800cb18:	4a1d      	ldr	r2, [pc, #116]	@ (800cb90 <_free_r+0x90>)
 800cb1a:	6813      	ldr	r3, [r2, #0]
 800cb1c:	b933      	cbnz	r3, 800cb2c <_free_r+0x2c>
 800cb1e:	6063      	str	r3, [r4, #4]
 800cb20:	6014      	str	r4, [r2, #0]
 800cb22:	4628      	mov	r0, r5
 800cb24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb28:	f000 b8e4 	b.w	800ccf4 <__malloc_unlock>
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	d908      	bls.n	800cb42 <_free_r+0x42>
 800cb30:	6820      	ldr	r0, [r4, #0]
 800cb32:	1821      	adds	r1, r4, r0
 800cb34:	428b      	cmp	r3, r1
 800cb36:	bf01      	itttt	eq
 800cb38:	6819      	ldreq	r1, [r3, #0]
 800cb3a:	685b      	ldreq	r3, [r3, #4]
 800cb3c:	1809      	addeq	r1, r1, r0
 800cb3e:	6021      	streq	r1, [r4, #0]
 800cb40:	e7ed      	b.n	800cb1e <_free_r+0x1e>
 800cb42:	461a      	mov	r2, r3
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	b10b      	cbz	r3, 800cb4c <_free_r+0x4c>
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	d9fa      	bls.n	800cb42 <_free_r+0x42>
 800cb4c:	6811      	ldr	r1, [r2, #0]
 800cb4e:	1850      	adds	r0, r2, r1
 800cb50:	42a0      	cmp	r0, r4
 800cb52:	d10b      	bne.n	800cb6c <_free_r+0x6c>
 800cb54:	6820      	ldr	r0, [r4, #0]
 800cb56:	4401      	add	r1, r0
 800cb58:	1850      	adds	r0, r2, r1
 800cb5a:	4283      	cmp	r3, r0
 800cb5c:	6011      	str	r1, [r2, #0]
 800cb5e:	d1e0      	bne.n	800cb22 <_free_r+0x22>
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	6053      	str	r3, [r2, #4]
 800cb66:	4408      	add	r0, r1
 800cb68:	6010      	str	r0, [r2, #0]
 800cb6a:	e7da      	b.n	800cb22 <_free_r+0x22>
 800cb6c:	d902      	bls.n	800cb74 <_free_r+0x74>
 800cb6e:	230c      	movs	r3, #12
 800cb70:	602b      	str	r3, [r5, #0]
 800cb72:	e7d6      	b.n	800cb22 <_free_r+0x22>
 800cb74:	6820      	ldr	r0, [r4, #0]
 800cb76:	1821      	adds	r1, r4, r0
 800cb78:	428b      	cmp	r3, r1
 800cb7a:	bf04      	itt	eq
 800cb7c:	6819      	ldreq	r1, [r3, #0]
 800cb7e:	685b      	ldreq	r3, [r3, #4]
 800cb80:	6063      	str	r3, [r4, #4]
 800cb82:	bf04      	itt	eq
 800cb84:	1809      	addeq	r1, r1, r0
 800cb86:	6021      	streq	r1, [r4, #0]
 800cb88:	6054      	str	r4, [r2, #4]
 800cb8a:	e7ca      	b.n	800cb22 <_free_r+0x22>
 800cb8c:	bd38      	pop	{r3, r4, r5, pc}
 800cb8e:	bf00      	nop
 800cb90:	200053c4 	.word	0x200053c4

0800cb94 <malloc>:
 800cb94:	4b02      	ldr	r3, [pc, #8]	@ (800cba0 <malloc+0xc>)
 800cb96:	4601      	mov	r1, r0
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	f000 b825 	b.w	800cbe8 <_malloc_r>
 800cb9e:	bf00      	nop
 800cba0:	20000020 	.word	0x20000020

0800cba4 <sbrk_aligned>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	4e0f      	ldr	r6, [pc, #60]	@ (800cbe4 <sbrk_aligned+0x40>)
 800cba8:	460c      	mov	r4, r1
 800cbaa:	6831      	ldr	r1, [r6, #0]
 800cbac:	4605      	mov	r5, r0
 800cbae:	b911      	cbnz	r1, 800cbb6 <sbrk_aligned+0x12>
 800cbb0:	f000 fe46 	bl	800d840 <_sbrk_r>
 800cbb4:	6030      	str	r0, [r6, #0]
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f000 fe41 	bl	800d840 <_sbrk_r>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	d103      	bne.n	800cbca <sbrk_aligned+0x26>
 800cbc2:	f04f 34ff 	mov.w	r4, #4294967295
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	bd70      	pop	{r4, r5, r6, pc}
 800cbca:	1cc4      	adds	r4, r0, #3
 800cbcc:	f024 0403 	bic.w	r4, r4, #3
 800cbd0:	42a0      	cmp	r0, r4
 800cbd2:	d0f8      	beq.n	800cbc6 <sbrk_aligned+0x22>
 800cbd4:	1a21      	subs	r1, r4, r0
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f000 fe32 	bl	800d840 <_sbrk_r>
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d1f2      	bne.n	800cbc6 <sbrk_aligned+0x22>
 800cbe0:	e7ef      	b.n	800cbc2 <sbrk_aligned+0x1e>
 800cbe2:	bf00      	nop
 800cbe4:	200053c0 	.word	0x200053c0

0800cbe8 <_malloc_r>:
 800cbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbec:	1ccd      	adds	r5, r1, #3
 800cbee:	f025 0503 	bic.w	r5, r5, #3
 800cbf2:	3508      	adds	r5, #8
 800cbf4:	2d0c      	cmp	r5, #12
 800cbf6:	bf38      	it	cc
 800cbf8:	250c      	movcc	r5, #12
 800cbfa:	2d00      	cmp	r5, #0
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	db01      	blt.n	800cc04 <_malloc_r+0x1c>
 800cc00:	42a9      	cmp	r1, r5
 800cc02:	d904      	bls.n	800cc0e <_malloc_r+0x26>
 800cc04:	230c      	movs	r3, #12
 800cc06:	6033      	str	r3, [r6, #0]
 800cc08:	2000      	movs	r0, #0
 800cc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cce4 <_malloc_r+0xfc>
 800cc12:	f000 f869 	bl	800cce8 <__malloc_lock>
 800cc16:	f8d8 3000 	ldr.w	r3, [r8]
 800cc1a:	461c      	mov	r4, r3
 800cc1c:	bb44      	cbnz	r4, 800cc70 <_malloc_r+0x88>
 800cc1e:	4629      	mov	r1, r5
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7ff ffbf 	bl	800cba4 <sbrk_aligned>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	4604      	mov	r4, r0
 800cc2a:	d158      	bne.n	800ccde <_malloc_r+0xf6>
 800cc2c:	f8d8 4000 	ldr.w	r4, [r8]
 800cc30:	4627      	mov	r7, r4
 800cc32:	2f00      	cmp	r7, #0
 800cc34:	d143      	bne.n	800ccbe <_malloc_r+0xd6>
 800cc36:	2c00      	cmp	r4, #0
 800cc38:	d04b      	beq.n	800ccd2 <_malloc_r+0xea>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	4630      	mov	r0, r6
 800cc40:	eb04 0903 	add.w	r9, r4, r3
 800cc44:	f000 fdfc 	bl	800d840 <_sbrk_r>
 800cc48:	4581      	cmp	r9, r0
 800cc4a:	d142      	bne.n	800ccd2 <_malloc_r+0xea>
 800cc4c:	6821      	ldr	r1, [r4, #0]
 800cc4e:	1a6d      	subs	r5, r5, r1
 800cc50:	4629      	mov	r1, r5
 800cc52:	4630      	mov	r0, r6
 800cc54:	f7ff ffa6 	bl	800cba4 <sbrk_aligned>
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d03a      	beq.n	800ccd2 <_malloc_r+0xea>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	442b      	add	r3, r5
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	f8d8 3000 	ldr.w	r3, [r8]
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	bb62      	cbnz	r2, 800ccc4 <_malloc_r+0xdc>
 800cc6a:	f8c8 7000 	str.w	r7, [r8]
 800cc6e:	e00f      	b.n	800cc90 <_malloc_r+0xa8>
 800cc70:	6822      	ldr	r2, [r4, #0]
 800cc72:	1b52      	subs	r2, r2, r5
 800cc74:	d420      	bmi.n	800ccb8 <_malloc_r+0xd0>
 800cc76:	2a0b      	cmp	r2, #11
 800cc78:	d917      	bls.n	800ccaa <_malloc_r+0xc2>
 800cc7a:	1961      	adds	r1, r4, r5
 800cc7c:	42a3      	cmp	r3, r4
 800cc7e:	6025      	str	r5, [r4, #0]
 800cc80:	bf18      	it	ne
 800cc82:	6059      	strne	r1, [r3, #4]
 800cc84:	6863      	ldr	r3, [r4, #4]
 800cc86:	bf08      	it	eq
 800cc88:	f8c8 1000 	streq.w	r1, [r8]
 800cc8c:	5162      	str	r2, [r4, r5]
 800cc8e:	604b      	str	r3, [r1, #4]
 800cc90:	4630      	mov	r0, r6
 800cc92:	f000 f82f 	bl	800ccf4 <__malloc_unlock>
 800cc96:	f104 000b 	add.w	r0, r4, #11
 800cc9a:	1d23      	adds	r3, r4, #4
 800cc9c:	f020 0007 	bic.w	r0, r0, #7
 800cca0:	1ac2      	subs	r2, r0, r3
 800cca2:	bf1c      	itt	ne
 800cca4:	1a1b      	subne	r3, r3, r0
 800cca6:	50a3      	strne	r3, [r4, r2]
 800cca8:	e7af      	b.n	800cc0a <_malloc_r+0x22>
 800ccaa:	6862      	ldr	r2, [r4, #4]
 800ccac:	42a3      	cmp	r3, r4
 800ccae:	bf0c      	ite	eq
 800ccb0:	f8c8 2000 	streq.w	r2, [r8]
 800ccb4:	605a      	strne	r2, [r3, #4]
 800ccb6:	e7eb      	b.n	800cc90 <_malloc_r+0xa8>
 800ccb8:	4623      	mov	r3, r4
 800ccba:	6864      	ldr	r4, [r4, #4]
 800ccbc:	e7ae      	b.n	800cc1c <_malloc_r+0x34>
 800ccbe:	463c      	mov	r4, r7
 800ccc0:	687f      	ldr	r7, [r7, #4]
 800ccc2:	e7b6      	b.n	800cc32 <_malloc_r+0x4a>
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	42a3      	cmp	r3, r4
 800ccca:	d1fb      	bne.n	800ccc4 <_malloc_r+0xdc>
 800cccc:	2300      	movs	r3, #0
 800ccce:	6053      	str	r3, [r2, #4]
 800ccd0:	e7de      	b.n	800cc90 <_malloc_r+0xa8>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	6033      	str	r3, [r6, #0]
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f000 f80c 	bl	800ccf4 <__malloc_unlock>
 800ccdc:	e794      	b.n	800cc08 <_malloc_r+0x20>
 800ccde:	6005      	str	r5, [r0, #0]
 800cce0:	e7d6      	b.n	800cc90 <_malloc_r+0xa8>
 800cce2:	bf00      	nop
 800cce4:	200053c4 	.word	0x200053c4

0800cce8 <__malloc_lock>:
 800cce8:	4801      	ldr	r0, [pc, #4]	@ (800ccf0 <__malloc_lock+0x8>)
 800ccea:	f7ff b8aa 	b.w	800be42 <__retarget_lock_acquire_recursive>
 800ccee:	bf00      	nop
 800ccf0:	200053bc 	.word	0x200053bc

0800ccf4 <__malloc_unlock>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	@ (800ccfc <__malloc_unlock+0x8>)
 800ccf6:	f7ff b8a5 	b.w	800be44 <__retarget_lock_release_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	200053bc 	.word	0x200053bc

0800cd00 <_Balloc>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	69c6      	ldr	r6, [r0, #28]
 800cd04:	4604      	mov	r4, r0
 800cd06:	460d      	mov	r5, r1
 800cd08:	b976      	cbnz	r6, 800cd28 <_Balloc+0x28>
 800cd0a:	2010      	movs	r0, #16
 800cd0c:	f7ff ff42 	bl	800cb94 <malloc>
 800cd10:	4602      	mov	r2, r0
 800cd12:	61e0      	str	r0, [r4, #28]
 800cd14:	b920      	cbnz	r0, 800cd20 <_Balloc+0x20>
 800cd16:	4b18      	ldr	r3, [pc, #96]	@ (800cd78 <_Balloc+0x78>)
 800cd18:	4818      	ldr	r0, [pc, #96]	@ (800cd7c <_Balloc+0x7c>)
 800cd1a:	216b      	movs	r1, #107	@ 0x6b
 800cd1c:	f000 fda0 	bl	800d860 <__assert_func>
 800cd20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd24:	6006      	str	r6, [r0, #0]
 800cd26:	60c6      	str	r6, [r0, #12]
 800cd28:	69e6      	ldr	r6, [r4, #28]
 800cd2a:	68f3      	ldr	r3, [r6, #12]
 800cd2c:	b183      	cbz	r3, 800cd50 <_Balloc+0x50>
 800cd2e:	69e3      	ldr	r3, [r4, #28]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd36:	b9b8      	cbnz	r0, 800cd68 <_Balloc+0x68>
 800cd38:	2101      	movs	r1, #1
 800cd3a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd3e:	1d72      	adds	r2, r6, #5
 800cd40:	0092      	lsls	r2, r2, #2
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 fdaa 	bl	800d89c <_calloc_r>
 800cd48:	b160      	cbz	r0, 800cd64 <_Balloc+0x64>
 800cd4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd4e:	e00e      	b.n	800cd6e <_Balloc+0x6e>
 800cd50:	2221      	movs	r2, #33	@ 0x21
 800cd52:	2104      	movs	r1, #4
 800cd54:	4620      	mov	r0, r4
 800cd56:	f000 fda1 	bl	800d89c <_calloc_r>
 800cd5a:	69e3      	ldr	r3, [r4, #28]
 800cd5c:	60f0      	str	r0, [r6, #12]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1e4      	bne.n	800cd2e <_Balloc+0x2e>
 800cd64:	2000      	movs	r0, #0
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	6802      	ldr	r2, [r0, #0]
 800cd6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd74:	e7f7      	b.n	800cd66 <_Balloc+0x66>
 800cd76:	bf00      	nop
 800cd78:	0800eb6d 	.word	0x0800eb6d
 800cd7c:	0800ebed 	.word	0x0800ebed

0800cd80 <_Bfree>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	69c6      	ldr	r6, [r0, #28]
 800cd84:	4605      	mov	r5, r0
 800cd86:	460c      	mov	r4, r1
 800cd88:	b976      	cbnz	r6, 800cda8 <_Bfree+0x28>
 800cd8a:	2010      	movs	r0, #16
 800cd8c:	f7ff ff02 	bl	800cb94 <malloc>
 800cd90:	4602      	mov	r2, r0
 800cd92:	61e8      	str	r0, [r5, #28]
 800cd94:	b920      	cbnz	r0, 800cda0 <_Bfree+0x20>
 800cd96:	4b09      	ldr	r3, [pc, #36]	@ (800cdbc <_Bfree+0x3c>)
 800cd98:	4809      	ldr	r0, [pc, #36]	@ (800cdc0 <_Bfree+0x40>)
 800cd9a:	218f      	movs	r1, #143	@ 0x8f
 800cd9c:	f000 fd60 	bl	800d860 <__assert_func>
 800cda0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cda4:	6006      	str	r6, [r0, #0]
 800cda6:	60c6      	str	r6, [r0, #12]
 800cda8:	b13c      	cbz	r4, 800cdba <_Bfree+0x3a>
 800cdaa:	69eb      	ldr	r3, [r5, #28]
 800cdac:	6862      	ldr	r2, [r4, #4]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdb4:	6021      	str	r1, [r4, #0]
 800cdb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
 800cdbc:	0800eb6d 	.word	0x0800eb6d
 800cdc0:	0800ebed 	.word	0x0800ebed

0800cdc4 <__multadd>:
 800cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc8:	690d      	ldr	r5, [r1, #16]
 800cdca:	4607      	mov	r7, r0
 800cdcc:	460c      	mov	r4, r1
 800cdce:	461e      	mov	r6, r3
 800cdd0:	f101 0c14 	add.w	ip, r1, #20
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f8dc 3000 	ldr.w	r3, [ip]
 800cdda:	b299      	uxth	r1, r3
 800cddc:	fb02 6101 	mla	r1, r2, r1, r6
 800cde0:	0c1e      	lsrs	r6, r3, #16
 800cde2:	0c0b      	lsrs	r3, r1, #16
 800cde4:	fb02 3306 	mla	r3, r2, r6, r3
 800cde8:	b289      	uxth	r1, r1
 800cdea:	3001      	adds	r0, #1
 800cdec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdf0:	4285      	cmp	r5, r0
 800cdf2:	f84c 1b04 	str.w	r1, [ip], #4
 800cdf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdfa:	dcec      	bgt.n	800cdd6 <__multadd+0x12>
 800cdfc:	b30e      	cbz	r6, 800ce42 <__multadd+0x7e>
 800cdfe:	68a3      	ldr	r3, [r4, #8]
 800ce00:	42ab      	cmp	r3, r5
 800ce02:	dc19      	bgt.n	800ce38 <__multadd+0x74>
 800ce04:	6861      	ldr	r1, [r4, #4]
 800ce06:	4638      	mov	r0, r7
 800ce08:	3101      	adds	r1, #1
 800ce0a:	f7ff ff79 	bl	800cd00 <_Balloc>
 800ce0e:	4680      	mov	r8, r0
 800ce10:	b928      	cbnz	r0, 800ce1e <__multadd+0x5a>
 800ce12:	4602      	mov	r2, r0
 800ce14:	4b0c      	ldr	r3, [pc, #48]	@ (800ce48 <__multadd+0x84>)
 800ce16:	480d      	ldr	r0, [pc, #52]	@ (800ce4c <__multadd+0x88>)
 800ce18:	21ba      	movs	r1, #186	@ 0xba
 800ce1a:	f000 fd21 	bl	800d860 <__assert_func>
 800ce1e:	6922      	ldr	r2, [r4, #16]
 800ce20:	3202      	adds	r2, #2
 800ce22:	f104 010c 	add.w	r1, r4, #12
 800ce26:	0092      	lsls	r2, r2, #2
 800ce28:	300c      	adds	r0, #12
 800ce2a:	f7ff f80c 	bl	800be46 <memcpy>
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7ff ffa5 	bl	800cd80 <_Bfree>
 800ce36:	4644      	mov	r4, r8
 800ce38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce3c:	3501      	adds	r5, #1
 800ce3e:	615e      	str	r6, [r3, #20]
 800ce40:	6125      	str	r5, [r4, #16]
 800ce42:	4620      	mov	r0, r4
 800ce44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce48:	0800ebdc 	.word	0x0800ebdc
 800ce4c:	0800ebed 	.word	0x0800ebed

0800ce50 <__hi0bits>:
 800ce50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce54:	4603      	mov	r3, r0
 800ce56:	bf36      	itet	cc
 800ce58:	0403      	lslcc	r3, r0, #16
 800ce5a:	2000      	movcs	r0, #0
 800ce5c:	2010      	movcc	r0, #16
 800ce5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce62:	bf3c      	itt	cc
 800ce64:	021b      	lslcc	r3, r3, #8
 800ce66:	3008      	addcc	r0, #8
 800ce68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce6c:	bf3c      	itt	cc
 800ce6e:	011b      	lslcc	r3, r3, #4
 800ce70:	3004      	addcc	r0, #4
 800ce72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce76:	bf3c      	itt	cc
 800ce78:	009b      	lslcc	r3, r3, #2
 800ce7a:	3002      	addcc	r0, #2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	db05      	blt.n	800ce8c <__hi0bits+0x3c>
 800ce80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce84:	f100 0001 	add.w	r0, r0, #1
 800ce88:	bf08      	it	eq
 800ce8a:	2020      	moveq	r0, #32
 800ce8c:	4770      	bx	lr

0800ce8e <__lo0bits>:
 800ce8e:	6803      	ldr	r3, [r0, #0]
 800ce90:	4602      	mov	r2, r0
 800ce92:	f013 0007 	ands.w	r0, r3, #7
 800ce96:	d00b      	beq.n	800ceb0 <__lo0bits+0x22>
 800ce98:	07d9      	lsls	r1, r3, #31
 800ce9a:	d421      	bmi.n	800cee0 <__lo0bits+0x52>
 800ce9c:	0798      	lsls	r0, r3, #30
 800ce9e:	bf49      	itett	mi
 800cea0:	085b      	lsrmi	r3, r3, #1
 800cea2:	089b      	lsrpl	r3, r3, #2
 800cea4:	2001      	movmi	r0, #1
 800cea6:	6013      	strmi	r3, [r2, #0]
 800cea8:	bf5c      	itt	pl
 800ceaa:	6013      	strpl	r3, [r2, #0]
 800ceac:	2002      	movpl	r0, #2
 800ceae:	4770      	bx	lr
 800ceb0:	b299      	uxth	r1, r3
 800ceb2:	b909      	cbnz	r1, 800ceb8 <__lo0bits+0x2a>
 800ceb4:	0c1b      	lsrs	r3, r3, #16
 800ceb6:	2010      	movs	r0, #16
 800ceb8:	b2d9      	uxtb	r1, r3
 800ceba:	b909      	cbnz	r1, 800cec0 <__lo0bits+0x32>
 800cebc:	3008      	adds	r0, #8
 800cebe:	0a1b      	lsrs	r3, r3, #8
 800cec0:	0719      	lsls	r1, r3, #28
 800cec2:	bf04      	itt	eq
 800cec4:	091b      	lsreq	r3, r3, #4
 800cec6:	3004      	addeq	r0, #4
 800cec8:	0799      	lsls	r1, r3, #30
 800ceca:	bf04      	itt	eq
 800cecc:	089b      	lsreq	r3, r3, #2
 800cece:	3002      	addeq	r0, #2
 800ced0:	07d9      	lsls	r1, r3, #31
 800ced2:	d403      	bmi.n	800cedc <__lo0bits+0x4e>
 800ced4:	085b      	lsrs	r3, r3, #1
 800ced6:	f100 0001 	add.w	r0, r0, #1
 800ceda:	d003      	beq.n	800cee4 <__lo0bits+0x56>
 800cedc:	6013      	str	r3, [r2, #0]
 800cede:	4770      	bx	lr
 800cee0:	2000      	movs	r0, #0
 800cee2:	4770      	bx	lr
 800cee4:	2020      	movs	r0, #32
 800cee6:	4770      	bx	lr

0800cee8 <__i2b>:
 800cee8:	b510      	push	{r4, lr}
 800ceea:	460c      	mov	r4, r1
 800ceec:	2101      	movs	r1, #1
 800ceee:	f7ff ff07 	bl	800cd00 <_Balloc>
 800cef2:	4602      	mov	r2, r0
 800cef4:	b928      	cbnz	r0, 800cf02 <__i2b+0x1a>
 800cef6:	4b05      	ldr	r3, [pc, #20]	@ (800cf0c <__i2b+0x24>)
 800cef8:	4805      	ldr	r0, [pc, #20]	@ (800cf10 <__i2b+0x28>)
 800cefa:	f240 1145 	movw	r1, #325	@ 0x145
 800cefe:	f000 fcaf 	bl	800d860 <__assert_func>
 800cf02:	2301      	movs	r3, #1
 800cf04:	6144      	str	r4, [r0, #20]
 800cf06:	6103      	str	r3, [r0, #16]
 800cf08:	bd10      	pop	{r4, pc}
 800cf0a:	bf00      	nop
 800cf0c:	0800ebdc 	.word	0x0800ebdc
 800cf10:	0800ebed 	.word	0x0800ebed

0800cf14 <__multiply>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	4614      	mov	r4, r2
 800cf1a:	690a      	ldr	r2, [r1, #16]
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	bfa8      	it	ge
 800cf22:	4623      	movge	r3, r4
 800cf24:	460f      	mov	r7, r1
 800cf26:	bfa4      	itt	ge
 800cf28:	460c      	movge	r4, r1
 800cf2a:	461f      	movge	r7, r3
 800cf2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf34:	68a3      	ldr	r3, [r4, #8]
 800cf36:	6861      	ldr	r1, [r4, #4]
 800cf38:	eb0a 0609 	add.w	r6, sl, r9
 800cf3c:	42b3      	cmp	r3, r6
 800cf3e:	b085      	sub	sp, #20
 800cf40:	bfb8      	it	lt
 800cf42:	3101      	addlt	r1, #1
 800cf44:	f7ff fedc 	bl	800cd00 <_Balloc>
 800cf48:	b930      	cbnz	r0, 800cf58 <__multiply+0x44>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	4b44      	ldr	r3, [pc, #272]	@ (800d060 <__multiply+0x14c>)
 800cf4e:	4845      	ldr	r0, [pc, #276]	@ (800d064 <__multiply+0x150>)
 800cf50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf54:	f000 fc84 	bl	800d860 <__assert_func>
 800cf58:	f100 0514 	add.w	r5, r0, #20
 800cf5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf60:	462b      	mov	r3, r5
 800cf62:	2200      	movs	r2, #0
 800cf64:	4543      	cmp	r3, r8
 800cf66:	d321      	bcc.n	800cfac <__multiply+0x98>
 800cf68:	f107 0114 	add.w	r1, r7, #20
 800cf6c:	f104 0214 	add.w	r2, r4, #20
 800cf70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cf74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cf78:	9302      	str	r3, [sp, #8]
 800cf7a:	1b13      	subs	r3, r2, r4
 800cf7c:	3b15      	subs	r3, #21
 800cf7e:	f023 0303 	bic.w	r3, r3, #3
 800cf82:	3304      	adds	r3, #4
 800cf84:	f104 0715 	add.w	r7, r4, #21
 800cf88:	42ba      	cmp	r2, r7
 800cf8a:	bf38      	it	cc
 800cf8c:	2304      	movcc	r3, #4
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	9b02      	ldr	r3, [sp, #8]
 800cf92:	9103      	str	r1, [sp, #12]
 800cf94:	428b      	cmp	r3, r1
 800cf96:	d80c      	bhi.n	800cfb2 <__multiply+0x9e>
 800cf98:	2e00      	cmp	r6, #0
 800cf9a:	dd03      	ble.n	800cfa4 <__multiply+0x90>
 800cf9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d05b      	beq.n	800d05c <__multiply+0x148>
 800cfa4:	6106      	str	r6, [r0, #16]
 800cfa6:	b005      	add	sp, #20
 800cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfac:	f843 2b04 	str.w	r2, [r3], #4
 800cfb0:	e7d8      	b.n	800cf64 <__multiply+0x50>
 800cfb2:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfb6:	f1ba 0f00 	cmp.w	sl, #0
 800cfba:	d024      	beq.n	800d006 <__multiply+0xf2>
 800cfbc:	f104 0e14 	add.w	lr, r4, #20
 800cfc0:	46a9      	mov	r9, r5
 800cfc2:	f04f 0c00 	mov.w	ip, #0
 800cfc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfca:	f8d9 3000 	ldr.w	r3, [r9]
 800cfce:	fa1f fb87 	uxth.w	fp, r7
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	fb0a 330b 	mla	r3, sl, fp, r3
 800cfd8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cfdc:	f8d9 7000 	ldr.w	r7, [r9]
 800cfe0:	4463      	add	r3, ip
 800cfe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cfe6:	fb0a c70b 	mla	r7, sl, fp, ip
 800cfea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cff4:	4572      	cmp	r2, lr
 800cff6:	f849 3b04 	str.w	r3, [r9], #4
 800cffa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cffe:	d8e2      	bhi.n	800cfc6 <__multiply+0xb2>
 800d000:	9b01      	ldr	r3, [sp, #4]
 800d002:	f845 c003 	str.w	ip, [r5, r3]
 800d006:	9b03      	ldr	r3, [sp, #12]
 800d008:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d00c:	3104      	adds	r1, #4
 800d00e:	f1b9 0f00 	cmp.w	r9, #0
 800d012:	d021      	beq.n	800d058 <__multiply+0x144>
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	f104 0c14 	add.w	ip, r4, #20
 800d01a:	46ae      	mov	lr, r5
 800d01c:	f04f 0a00 	mov.w	sl, #0
 800d020:	f8bc b000 	ldrh.w	fp, [ip]
 800d024:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d028:	fb09 770b 	mla	r7, r9, fp, r7
 800d02c:	4457      	add	r7, sl
 800d02e:	b29b      	uxth	r3, r3
 800d030:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d034:	f84e 3b04 	str.w	r3, [lr], #4
 800d038:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d03c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d040:	f8be 3000 	ldrh.w	r3, [lr]
 800d044:	fb09 330a 	mla	r3, r9, sl, r3
 800d048:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d04c:	4562      	cmp	r2, ip
 800d04e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d052:	d8e5      	bhi.n	800d020 <__multiply+0x10c>
 800d054:	9f01      	ldr	r7, [sp, #4]
 800d056:	51eb      	str	r3, [r5, r7]
 800d058:	3504      	adds	r5, #4
 800d05a:	e799      	b.n	800cf90 <__multiply+0x7c>
 800d05c:	3e01      	subs	r6, #1
 800d05e:	e79b      	b.n	800cf98 <__multiply+0x84>
 800d060:	0800ebdc 	.word	0x0800ebdc
 800d064:	0800ebed 	.word	0x0800ebed

0800d068 <__pow5mult>:
 800d068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d06c:	4615      	mov	r5, r2
 800d06e:	f012 0203 	ands.w	r2, r2, #3
 800d072:	4607      	mov	r7, r0
 800d074:	460e      	mov	r6, r1
 800d076:	d007      	beq.n	800d088 <__pow5mult+0x20>
 800d078:	4c25      	ldr	r4, [pc, #148]	@ (800d110 <__pow5mult+0xa8>)
 800d07a:	3a01      	subs	r2, #1
 800d07c:	2300      	movs	r3, #0
 800d07e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d082:	f7ff fe9f 	bl	800cdc4 <__multadd>
 800d086:	4606      	mov	r6, r0
 800d088:	10ad      	asrs	r5, r5, #2
 800d08a:	d03d      	beq.n	800d108 <__pow5mult+0xa0>
 800d08c:	69fc      	ldr	r4, [r7, #28]
 800d08e:	b97c      	cbnz	r4, 800d0b0 <__pow5mult+0x48>
 800d090:	2010      	movs	r0, #16
 800d092:	f7ff fd7f 	bl	800cb94 <malloc>
 800d096:	4602      	mov	r2, r0
 800d098:	61f8      	str	r0, [r7, #28]
 800d09a:	b928      	cbnz	r0, 800d0a8 <__pow5mult+0x40>
 800d09c:	4b1d      	ldr	r3, [pc, #116]	@ (800d114 <__pow5mult+0xac>)
 800d09e:	481e      	ldr	r0, [pc, #120]	@ (800d118 <__pow5mult+0xb0>)
 800d0a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0a4:	f000 fbdc 	bl	800d860 <__assert_func>
 800d0a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0ac:	6004      	str	r4, [r0, #0]
 800d0ae:	60c4      	str	r4, [r0, #12]
 800d0b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0b8:	b94c      	cbnz	r4, 800d0ce <__pow5mult+0x66>
 800d0ba:	f240 2171 	movw	r1, #625	@ 0x271
 800d0be:	4638      	mov	r0, r7
 800d0c0:	f7ff ff12 	bl	800cee8 <__i2b>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	6003      	str	r3, [r0, #0]
 800d0ce:	f04f 0900 	mov.w	r9, #0
 800d0d2:	07eb      	lsls	r3, r5, #31
 800d0d4:	d50a      	bpl.n	800d0ec <__pow5mult+0x84>
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	4622      	mov	r2, r4
 800d0da:	4638      	mov	r0, r7
 800d0dc:	f7ff ff1a 	bl	800cf14 <__multiply>
 800d0e0:	4631      	mov	r1, r6
 800d0e2:	4680      	mov	r8, r0
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	f7ff fe4b 	bl	800cd80 <_Bfree>
 800d0ea:	4646      	mov	r6, r8
 800d0ec:	106d      	asrs	r5, r5, #1
 800d0ee:	d00b      	beq.n	800d108 <__pow5mult+0xa0>
 800d0f0:	6820      	ldr	r0, [r4, #0]
 800d0f2:	b938      	cbnz	r0, 800d104 <__pow5mult+0x9c>
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7ff ff0b 	bl	800cf14 <__multiply>
 800d0fe:	6020      	str	r0, [r4, #0]
 800d100:	f8c0 9000 	str.w	r9, [r0]
 800d104:	4604      	mov	r4, r0
 800d106:	e7e4      	b.n	800d0d2 <__pow5mult+0x6a>
 800d108:	4630      	mov	r0, r6
 800d10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d10e:	bf00      	nop
 800d110:	0800ec48 	.word	0x0800ec48
 800d114:	0800eb6d 	.word	0x0800eb6d
 800d118:	0800ebed 	.word	0x0800ebed

0800d11c <__lshift>:
 800d11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d120:	460c      	mov	r4, r1
 800d122:	6849      	ldr	r1, [r1, #4]
 800d124:	6923      	ldr	r3, [r4, #16]
 800d126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d12a:	68a3      	ldr	r3, [r4, #8]
 800d12c:	4607      	mov	r7, r0
 800d12e:	4691      	mov	r9, r2
 800d130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d134:	f108 0601 	add.w	r6, r8, #1
 800d138:	42b3      	cmp	r3, r6
 800d13a:	db0b      	blt.n	800d154 <__lshift+0x38>
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7ff fddf 	bl	800cd00 <_Balloc>
 800d142:	4605      	mov	r5, r0
 800d144:	b948      	cbnz	r0, 800d15a <__lshift+0x3e>
 800d146:	4602      	mov	r2, r0
 800d148:	4b28      	ldr	r3, [pc, #160]	@ (800d1ec <__lshift+0xd0>)
 800d14a:	4829      	ldr	r0, [pc, #164]	@ (800d1f0 <__lshift+0xd4>)
 800d14c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d150:	f000 fb86 	bl	800d860 <__assert_func>
 800d154:	3101      	adds	r1, #1
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	e7ee      	b.n	800d138 <__lshift+0x1c>
 800d15a:	2300      	movs	r3, #0
 800d15c:	f100 0114 	add.w	r1, r0, #20
 800d160:	f100 0210 	add.w	r2, r0, #16
 800d164:	4618      	mov	r0, r3
 800d166:	4553      	cmp	r3, sl
 800d168:	db33      	blt.n	800d1d2 <__lshift+0xb6>
 800d16a:	6920      	ldr	r0, [r4, #16]
 800d16c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d170:	f104 0314 	add.w	r3, r4, #20
 800d174:	f019 091f 	ands.w	r9, r9, #31
 800d178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d17c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d180:	d02b      	beq.n	800d1da <__lshift+0xbe>
 800d182:	f1c9 0e20 	rsb	lr, r9, #32
 800d186:	468a      	mov	sl, r1
 800d188:	2200      	movs	r2, #0
 800d18a:	6818      	ldr	r0, [r3, #0]
 800d18c:	fa00 f009 	lsl.w	r0, r0, r9
 800d190:	4310      	orrs	r0, r2
 800d192:	f84a 0b04 	str.w	r0, [sl], #4
 800d196:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19a:	459c      	cmp	ip, r3
 800d19c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1a0:	d8f3      	bhi.n	800d18a <__lshift+0x6e>
 800d1a2:	ebac 0304 	sub.w	r3, ip, r4
 800d1a6:	3b15      	subs	r3, #21
 800d1a8:	f023 0303 	bic.w	r3, r3, #3
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	f104 0015 	add.w	r0, r4, #21
 800d1b2:	4584      	cmp	ip, r0
 800d1b4:	bf38      	it	cc
 800d1b6:	2304      	movcc	r3, #4
 800d1b8:	50ca      	str	r2, [r1, r3]
 800d1ba:	b10a      	cbz	r2, 800d1c0 <__lshift+0xa4>
 800d1bc:	f108 0602 	add.w	r6, r8, #2
 800d1c0:	3e01      	subs	r6, #1
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	612e      	str	r6, [r5, #16]
 800d1c6:	4621      	mov	r1, r4
 800d1c8:	f7ff fdda 	bl	800cd80 <_Bfree>
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	e7c5      	b.n	800d166 <__lshift+0x4a>
 800d1da:	3904      	subs	r1, #4
 800d1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1e4:	459c      	cmp	ip, r3
 800d1e6:	d8f9      	bhi.n	800d1dc <__lshift+0xc0>
 800d1e8:	e7ea      	b.n	800d1c0 <__lshift+0xa4>
 800d1ea:	bf00      	nop
 800d1ec:	0800ebdc 	.word	0x0800ebdc
 800d1f0:	0800ebed 	.word	0x0800ebed

0800d1f4 <__mcmp>:
 800d1f4:	690a      	ldr	r2, [r1, #16]
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	6900      	ldr	r0, [r0, #16]
 800d1fa:	1a80      	subs	r0, r0, r2
 800d1fc:	b530      	push	{r4, r5, lr}
 800d1fe:	d10e      	bne.n	800d21e <__mcmp+0x2a>
 800d200:	3314      	adds	r3, #20
 800d202:	3114      	adds	r1, #20
 800d204:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d208:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d20c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d214:	4295      	cmp	r5, r2
 800d216:	d003      	beq.n	800d220 <__mcmp+0x2c>
 800d218:	d205      	bcs.n	800d226 <__mcmp+0x32>
 800d21a:	f04f 30ff 	mov.w	r0, #4294967295
 800d21e:	bd30      	pop	{r4, r5, pc}
 800d220:	42a3      	cmp	r3, r4
 800d222:	d3f3      	bcc.n	800d20c <__mcmp+0x18>
 800d224:	e7fb      	b.n	800d21e <__mcmp+0x2a>
 800d226:	2001      	movs	r0, #1
 800d228:	e7f9      	b.n	800d21e <__mcmp+0x2a>
	...

0800d22c <__mdiff>:
 800d22c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d230:	4689      	mov	r9, r1
 800d232:	4606      	mov	r6, r0
 800d234:	4611      	mov	r1, r2
 800d236:	4648      	mov	r0, r9
 800d238:	4614      	mov	r4, r2
 800d23a:	f7ff ffdb 	bl	800d1f4 <__mcmp>
 800d23e:	1e05      	subs	r5, r0, #0
 800d240:	d112      	bne.n	800d268 <__mdiff+0x3c>
 800d242:	4629      	mov	r1, r5
 800d244:	4630      	mov	r0, r6
 800d246:	f7ff fd5b 	bl	800cd00 <_Balloc>
 800d24a:	4602      	mov	r2, r0
 800d24c:	b928      	cbnz	r0, 800d25a <__mdiff+0x2e>
 800d24e:	4b3f      	ldr	r3, [pc, #252]	@ (800d34c <__mdiff+0x120>)
 800d250:	f240 2137 	movw	r1, #567	@ 0x237
 800d254:	483e      	ldr	r0, [pc, #248]	@ (800d350 <__mdiff+0x124>)
 800d256:	f000 fb03 	bl	800d860 <__assert_func>
 800d25a:	2301      	movs	r3, #1
 800d25c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d260:	4610      	mov	r0, r2
 800d262:	b003      	add	sp, #12
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	bfbc      	itt	lt
 800d26a:	464b      	movlt	r3, r9
 800d26c:	46a1      	movlt	r9, r4
 800d26e:	4630      	mov	r0, r6
 800d270:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d274:	bfba      	itte	lt
 800d276:	461c      	movlt	r4, r3
 800d278:	2501      	movlt	r5, #1
 800d27a:	2500      	movge	r5, #0
 800d27c:	f7ff fd40 	bl	800cd00 <_Balloc>
 800d280:	4602      	mov	r2, r0
 800d282:	b918      	cbnz	r0, 800d28c <__mdiff+0x60>
 800d284:	4b31      	ldr	r3, [pc, #196]	@ (800d34c <__mdiff+0x120>)
 800d286:	f240 2145 	movw	r1, #581	@ 0x245
 800d28a:	e7e3      	b.n	800d254 <__mdiff+0x28>
 800d28c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d290:	6926      	ldr	r6, [r4, #16]
 800d292:	60c5      	str	r5, [r0, #12]
 800d294:	f109 0310 	add.w	r3, r9, #16
 800d298:	f109 0514 	add.w	r5, r9, #20
 800d29c:	f104 0e14 	add.w	lr, r4, #20
 800d2a0:	f100 0b14 	add.w	fp, r0, #20
 800d2a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2ac:	9301      	str	r3, [sp, #4]
 800d2ae:	46d9      	mov	r9, fp
 800d2b0:	f04f 0c00 	mov.w	ip, #0
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2be:	9301      	str	r3, [sp, #4]
 800d2c0:	fa1f f38a 	uxth.w	r3, sl
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	b283      	uxth	r3, r0
 800d2c8:	1acb      	subs	r3, r1, r3
 800d2ca:	0c00      	lsrs	r0, r0, #16
 800d2cc:	4463      	add	r3, ip
 800d2ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2dc:	4576      	cmp	r6, lr
 800d2de:	f849 3b04 	str.w	r3, [r9], #4
 800d2e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2e6:	d8e5      	bhi.n	800d2b4 <__mdiff+0x88>
 800d2e8:	1b33      	subs	r3, r6, r4
 800d2ea:	3b15      	subs	r3, #21
 800d2ec:	f023 0303 	bic.w	r3, r3, #3
 800d2f0:	3415      	adds	r4, #21
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	42a6      	cmp	r6, r4
 800d2f6:	bf38      	it	cc
 800d2f8:	2304      	movcc	r3, #4
 800d2fa:	441d      	add	r5, r3
 800d2fc:	445b      	add	r3, fp
 800d2fe:	461e      	mov	r6, r3
 800d300:	462c      	mov	r4, r5
 800d302:	4544      	cmp	r4, r8
 800d304:	d30e      	bcc.n	800d324 <__mdiff+0xf8>
 800d306:	f108 0103 	add.w	r1, r8, #3
 800d30a:	1b49      	subs	r1, r1, r5
 800d30c:	f021 0103 	bic.w	r1, r1, #3
 800d310:	3d03      	subs	r5, #3
 800d312:	45a8      	cmp	r8, r5
 800d314:	bf38      	it	cc
 800d316:	2100      	movcc	r1, #0
 800d318:	440b      	add	r3, r1
 800d31a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d31e:	b191      	cbz	r1, 800d346 <__mdiff+0x11a>
 800d320:	6117      	str	r7, [r2, #16]
 800d322:	e79d      	b.n	800d260 <__mdiff+0x34>
 800d324:	f854 1b04 	ldr.w	r1, [r4], #4
 800d328:	46e6      	mov	lr, ip
 800d32a:	0c08      	lsrs	r0, r1, #16
 800d32c:	fa1c fc81 	uxtah	ip, ip, r1
 800d330:	4471      	add	r1, lr
 800d332:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d336:	b289      	uxth	r1, r1
 800d338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d33c:	f846 1b04 	str.w	r1, [r6], #4
 800d340:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d344:	e7dd      	b.n	800d302 <__mdiff+0xd6>
 800d346:	3f01      	subs	r7, #1
 800d348:	e7e7      	b.n	800d31a <__mdiff+0xee>
 800d34a:	bf00      	nop
 800d34c:	0800ebdc 	.word	0x0800ebdc
 800d350:	0800ebed 	.word	0x0800ebed

0800d354 <__d2b>:
 800d354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d358:	460f      	mov	r7, r1
 800d35a:	2101      	movs	r1, #1
 800d35c:	ec59 8b10 	vmov	r8, r9, d0
 800d360:	4616      	mov	r6, r2
 800d362:	f7ff fccd 	bl	800cd00 <_Balloc>
 800d366:	4604      	mov	r4, r0
 800d368:	b930      	cbnz	r0, 800d378 <__d2b+0x24>
 800d36a:	4602      	mov	r2, r0
 800d36c:	4b23      	ldr	r3, [pc, #140]	@ (800d3fc <__d2b+0xa8>)
 800d36e:	4824      	ldr	r0, [pc, #144]	@ (800d400 <__d2b+0xac>)
 800d370:	f240 310f 	movw	r1, #783	@ 0x30f
 800d374:	f000 fa74 	bl	800d860 <__assert_func>
 800d378:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d37c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d380:	b10d      	cbz	r5, 800d386 <__d2b+0x32>
 800d382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	f1b8 0300 	subs.w	r3, r8, #0
 800d38c:	d023      	beq.n	800d3d6 <__d2b+0x82>
 800d38e:	4668      	mov	r0, sp
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	f7ff fd7c 	bl	800ce8e <__lo0bits>
 800d396:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d39a:	b1d0      	cbz	r0, 800d3d2 <__d2b+0x7e>
 800d39c:	f1c0 0320 	rsb	r3, r0, #32
 800d3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a4:	430b      	orrs	r3, r1
 800d3a6:	40c2      	lsrs	r2, r0
 800d3a8:	6163      	str	r3, [r4, #20]
 800d3aa:	9201      	str	r2, [sp, #4]
 800d3ac:	9b01      	ldr	r3, [sp, #4]
 800d3ae:	61a3      	str	r3, [r4, #24]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	bf0c      	ite	eq
 800d3b4:	2201      	moveq	r2, #1
 800d3b6:	2202      	movne	r2, #2
 800d3b8:	6122      	str	r2, [r4, #16]
 800d3ba:	b1a5      	cbz	r5, 800d3e6 <__d2b+0x92>
 800d3bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d3c0:	4405      	add	r5, r0
 800d3c2:	603d      	str	r5, [r7, #0]
 800d3c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3c8:	6030      	str	r0, [r6, #0]
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	b003      	add	sp, #12
 800d3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d2:	6161      	str	r1, [r4, #20]
 800d3d4:	e7ea      	b.n	800d3ac <__d2b+0x58>
 800d3d6:	a801      	add	r0, sp, #4
 800d3d8:	f7ff fd59 	bl	800ce8e <__lo0bits>
 800d3dc:	9b01      	ldr	r3, [sp, #4]
 800d3de:	6163      	str	r3, [r4, #20]
 800d3e0:	3020      	adds	r0, #32
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	e7e8      	b.n	800d3b8 <__d2b+0x64>
 800d3e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d3ee:	6038      	str	r0, [r7, #0]
 800d3f0:	6918      	ldr	r0, [r3, #16]
 800d3f2:	f7ff fd2d 	bl	800ce50 <__hi0bits>
 800d3f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3fa:	e7e5      	b.n	800d3c8 <__d2b+0x74>
 800d3fc:	0800ebdc 	.word	0x0800ebdc
 800d400:	0800ebed 	.word	0x0800ebed

0800d404 <__ssputs_r>:
 800d404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d408:	688e      	ldr	r6, [r1, #8]
 800d40a:	461f      	mov	r7, r3
 800d40c:	42be      	cmp	r6, r7
 800d40e:	680b      	ldr	r3, [r1, #0]
 800d410:	4682      	mov	sl, r0
 800d412:	460c      	mov	r4, r1
 800d414:	4690      	mov	r8, r2
 800d416:	d82d      	bhi.n	800d474 <__ssputs_r+0x70>
 800d418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d41c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d420:	d026      	beq.n	800d470 <__ssputs_r+0x6c>
 800d422:	6965      	ldr	r5, [r4, #20]
 800d424:	6909      	ldr	r1, [r1, #16]
 800d426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d42a:	eba3 0901 	sub.w	r9, r3, r1
 800d42e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d432:	1c7b      	adds	r3, r7, #1
 800d434:	444b      	add	r3, r9
 800d436:	106d      	asrs	r5, r5, #1
 800d438:	429d      	cmp	r5, r3
 800d43a:	bf38      	it	cc
 800d43c:	461d      	movcc	r5, r3
 800d43e:	0553      	lsls	r3, r2, #21
 800d440:	d527      	bpl.n	800d492 <__ssputs_r+0x8e>
 800d442:	4629      	mov	r1, r5
 800d444:	f7ff fbd0 	bl	800cbe8 <_malloc_r>
 800d448:	4606      	mov	r6, r0
 800d44a:	b360      	cbz	r0, 800d4a6 <__ssputs_r+0xa2>
 800d44c:	6921      	ldr	r1, [r4, #16]
 800d44e:	464a      	mov	r2, r9
 800d450:	f7fe fcf9 	bl	800be46 <memcpy>
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d45e:	81a3      	strh	r3, [r4, #12]
 800d460:	6126      	str	r6, [r4, #16]
 800d462:	6165      	str	r5, [r4, #20]
 800d464:	444e      	add	r6, r9
 800d466:	eba5 0509 	sub.w	r5, r5, r9
 800d46a:	6026      	str	r6, [r4, #0]
 800d46c:	60a5      	str	r5, [r4, #8]
 800d46e:	463e      	mov	r6, r7
 800d470:	42be      	cmp	r6, r7
 800d472:	d900      	bls.n	800d476 <__ssputs_r+0x72>
 800d474:	463e      	mov	r6, r7
 800d476:	6820      	ldr	r0, [r4, #0]
 800d478:	4632      	mov	r2, r6
 800d47a:	4641      	mov	r1, r8
 800d47c:	f000 f9c6 	bl	800d80c <memmove>
 800d480:	68a3      	ldr	r3, [r4, #8]
 800d482:	1b9b      	subs	r3, r3, r6
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	4433      	add	r3, r6
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	2000      	movs	r0, #0
 800d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d492:	462a      	mov	r2, r5
 800d494:	f000 fa28 	bl	800d8e8 <_realloc_r>
 800d498:	4606      	mov	r6, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d1e0      	bne.n	800d460 <__ssputs_r+0x5c>
 800d49e:	6921      	ldr	r1, [r4, #16]
 800d4a0:	4650      	mov	r0, sl
 800d4a2:	f7ff fb2d 	bl	800cb00 <_free_r>
 800d4a6:	230c      	movs	r3, #12
 800d4a8:	f8ca 3000 	str.w	r3, [sl]
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4b2:	81a3      	strh	r3, [r4, #12]
 800d4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b8:	e7e9      	b.n	800d48e <__ssputs_r+0x8a>
	...

0800d4bc <_svfiprintf_r>:
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	4698      	mov	r8, r3
 800d4c2:	898b      	ldrh	r3, [r1, #12]
 800d4c4:	061b      	lsls	r3, r3, #24
 800d4c6:	b09d      	sub	sp, #116	@ 0x74
 800d4c8:	4607      	mov	r7, r0
 800d4ca:	460d      	mov	r5, r1
 800d4cc:	4614      	mov	r4, r2
 800d4ce:	d510      	bpl.n	800d4f2 <_svfiprintf_r+0x36>
 800d4d0:	690b      	ldr	r3, [r1, #16]
 800d4d2:	b973      	cbnz	r3, 800d4f2 <_svfiprintf_r+0x36>
 800d4d4:	2140      	movs	r1, #64	@ 0x40
 800d4d6:	f7ff fb87 	bl	800cbe8 <_malloc_r>
 800d4da:	6028      	str	r0, [r5, #0]
 800d4dc:	6128      	str	r0, [r5, #16]
 800d4de:	b930      	cbnz	r0, 800d4ee <_svfiprintf_r+0x32>
 800d4e0:	230c      	movs	r3, #12
 800d4e2:	603b      	str	r3, [r7, #0]
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e8:	b01d      	add	sp, #116	@ 0x74
 800d4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ee:	2340      	movs	r3, #64	@ 0x40
 800d4f0:	616b      	str	r3, [r5, #20]
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f6:	2320      	movs	r3, #32
 800d4f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d500:	2330      	movs	r3, #48	@ 0x30
 800d502:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6a0 <_svfiprintf_r+0x1e4>
 800d506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d50a:	f04f 0901 	mov.w	r9, #1
 800d50e:	4623      	mov	r3, r4
 800d510:	469a      	mov	sl, r3
 800d512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d516:	b10a      	cbz	r2, 800d51c <_svfiprintf_r+0x60>
 800d518:	2a25      	cmp	r2, #37	@ 0x25
 800d51a:	d1f9      	bne.n	800d510 <_svfiprintf_r+0x54>
 800d51c:	ebba 0b04 	subs.w	fp, sl, r4
 800d520:	d00b      	beq.n	800d53a <_svfiprintf_r+0x7e>
 800d522:	465b      	mov	r3, fp
 800d524:	4622      	mov	r2, r4
 800d526:	4629      	mov	r1, r5
 800d528:	4638      	mov	r0, r7
 800d52a:	f7ff ff6b 	bl	800d404 <__ssputs_r>
 800d52e:	3001      	adds	r0, #1
 800d530:	f000 80a7 	beq.w	800d682 <_svfiprintf_r+0x1c6>
 800d534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d536:	445a      	add	r2, fp
 800d538:	9209      	str	r2, [sp, #36]	@ 0x24
 800d53a:	f89a 3000 	ldrb.w	r3, [sl]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f000 809f 	beq.w	800d682 <_svfiprintf_r+0x1c6>
 800d544:	2300      	movs	r3, #0
 800d546:	f04f 32ff 	mov.w	r2, #4294967295
 800d54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d54e:	f10a 0a01 	add.w	sl, sl, #1
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	9307      	str	r3, [sp, #28]
 800d556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d55a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d55c:	4654      	mov	r4, sl
 800d55e:	2205      	movs	r2, #5
 800d560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d564:	484e      	ldr	r0, [pc, #312]	@ (800d6a0 <_svfiprintf_r+0x1e4>)
 800d566:	f7f2 fe33 	bl	80001d0 <memchr>
 800d56a:	9a04      	ldr	r2, [sp, #16]
 800d56c:	b9d8      	cbnz	r0, 800d5a6 <_svfiprintf_r+0xea>
 800d56e:	06d0      	lsls	r0, r2, #27
 800d570:	bf44      	itt	mi
 800d572:	2320      	movmi	r3, #32
 800d574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d578:	0711      	lsls	r1, r2, #28
 800d57a:	bf44      	itt	mi
 800d57c:	232b      	movmi	r3, #43	@ 0x2b
 800d57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d582:	f89a 3000 	ldrb.w	r3, [sl]
 800d586:	2b2a      	cmp	r3, #42	@ 0x2a
 800d588:	d015      	beq.n	800d5b6 <_svfiprintf_r+0xfa>
 800d58a:	9a07      	ldr	r2, [sp, #28]
 800d58c:	4654      	mov	r4, sl
 800d58e:	2000      	movs	r0, #0
 800d590:	f04f 0c0a 	mov.w	ip, #10
 800d594:	4621      	mov	r1, r4
 800d596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d59a:	3b30      	subs	r3, #48	@ 0x30
 800d59c:	2b09      	cmp	r3, #9
 800d59e:	d94b      	bls.n	800d638 <_svfiprintf_r+0x17c>
 800d5a0:	b1b0      	cbz	r0, 800d5d0 <_svfiprintf_r+0x114>
 800d5a2:	9207      	str	r2, [sp, #28]
 800d5a4:	e014      	b.n	800d5d0 <_svfiprintf_r+0x114>
 800d5a6:	eba0 0308 	sub.w	r3, r0, r8
 800d5aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	9304      	str	r3, [sp, #16]
 800d5b2:	46a2      	mov	sl, r4
 800d5b4:	e7d2      	b.n	800d55c <_svfiprintf_r+0xa0>
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	1d19      	adds	r1, r3, #4
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	9103      	str	r1, [sp, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	bfbb      	ittet	lt
 800d5c2:	425b      	neglt	r3, r3
 800d5c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5c8:	9307      	strge	r3, [sp, #28]
 800d5ca:	9307      	strlt	r3, [sp, #28]
 800d5cc:	bfb8      	it	lt
 800d5ce:	9204      	strlt	r2, [sp, #16]
 800d5d0:	7823      	ldrb	r3, [r4, #0]
 800d5d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5d4:	d10a      	bne.n	800d5ec <_svfiprintf_r+0x130>
 800d5d6:	7863      	ldrb	r3, [r4, #1]
 800d5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5da:	d132      	bne.n	800d642 <_svfiprintf_r+0x186>
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	1d1a      	adds	r2, r3, #4
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	9203      	str	r2, [sp, #12]
 800d5e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5e8:	3402      	adds	r4, #2
 800d5ea:	9305      	str	r3, [sp, #20]
 800d5ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6b0 <_svfiprintf_r+0x1f4>
 800d5f0:	7821      	ldrb	r1, [r4, #0]
 800d5f2:	2203      	movs	r2, #3
 800d5f4:	4650      	mov	r0, sl
 800d5f6:	f7f2 fdeb 	bl	80001d0 <memchr>
 800d5fa:	b138      	cbz	r0, 800d60c <_svfiprintf_r+0x150>
 800d5fc:	9b04      	ldr	r3, [sp, #16]
 800d5fe:	eba0 000a 	sub.w	r0, r0, sl
 800d602:	2240      	movs	r2, #64	@ 0x40
 800d604:	4082      	lsls	r2, r0
 800d606:	4313      	orrs	r3, r2
 800d608:	3401      	adds	r4, #1
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	4824      	ldr	r0, [pc, #144]	@ (800d6a4 <_svfiprintf_r+0x1e8>)
 800d612:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d616:	2206      	movs	r2, #6
 800d618:	f7f2 fdda 	bl	80001d0 <memchr>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d036      	beq.n	800d68e <_svfiprintf_r+0x1d2>
 800d620:	4b21      	ldr	r3, [pc, #132]	@ (800d6a8 <_svfiprintf_r+0x1ec>)
 800d622:	bb1b      	cbnz	r3, 800d66c <_svfiprintf_r+0x1b0>
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	3307      	adds	r3, #7
 800d628:	f023 0307 	bic.w	r3, r3, #7
 800d62c:	3308      	adds	r3, #8
 800d62e:	9303      	str	r3, [sp, #12]
 800d630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d632:	4433      	add	r3, r6
 800d634:	9309      	str	r3, [sp, #36]	@ 0x24
 800d636:	e76a      	b.n	800d50e <_svfiprintf_r+0x52>
 800d638:	fb0c 3202 	mla	r2, ip, r2, r3
 800d63c:	460c      	mov	r4, r1
 800d63e:	2001      	movs	r0, #1
 800d640:	e7a8      	b.n	800d594 <_svfiprintf_r+0xd8>
 800d642:	2300      	movs	r3, #0
 800d644:	3401      	adds	r4, #1
 800d646:	9305      	str	r3, [sp, #20]
 800d648:	4619      	mov	r1, r3
 800d64a:	f04f 0c0a 	mov.w	ip, #10
 800d64e:	4620      	mov	r0, r4
 800d650:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d654:	3a30      	subs	r2, #48	@ 0x30
 800d656:	2a09      	cmp	r2, #9
 800d658:	d903      	bls.n	800d662 <_svfiprintf_r+0x1a6>
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d0c6      	beq.n	800d5ec <_svfiprintf_r+0x130>
 800d65e:	9105      	str	r1, [sp, #20]
 800d660:	e7c4      	b.n	800d5ec <_svfiprintf_r+0x130>
 800d662:	fb0c 2101 	mla	r1, ip, r1, r2
 800d666:	4604      	mov	r4, r0
 800d668:	2301      	movs	r3, #1
 800d66a:	e7f0      	b.n	800d64e <_svfiprintf_r+0x192>
 800d66c:	ab03      	add	r3, sp, #12
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	462a      	mov	r2, r5
 800d672:	4b0e      	ldr	r3, [pc, #56]	@ (800d6ac <_svfiprintf_r+0x1f0>)
 800d674:	a904      	add	r1, sp, #16
 800d676:	4638      	mov	r0, r7
 800d678:	f7fd fe88 	bl	800b38c <_printf_float>
 800d67c:	1c42      	adds	r2, r0, #1
 800d67e:	4606      	mov	r6, r0
 800d680:	d1d6      	bne.n	800d630 <_svfiprintf_r+0x174>
 800d682:	89ab      	ldrh	r3, [r5, #12]
 800d684:	065b      	lsls	r3, r3, #25
 800d686:	f53f af2d 	bmi.w	800d4e4 <_svfiprintf_r+0x28>
 800d68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d68c:	e72c      	b.n	800d4e8 <_svfiprintf_r+0x2c>
 800d68e:	ab03      	add	r3, sp, #12
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	462a      	mov	r2, r5
 800d694:	4b05      	ldr	r3, [pc, #20]	@ (800d6ac <_svfiprintf_r+0x1f0>)
 800d696:	a904      	add	r1, sp, #16
 800d698:	4638      	mov	r0, r7
 800d69a:	f7fe f90f 	bl	800b8bc <_printf_i>
 800d69e:	e7ed      	b.n	800d67c <_svfiprintf_r+0x1c0>
 800d6a0:	0800ed48 	.word	0x0800ed48
 800d6a4:	0800ed52 	.word	0x0800ed52
 800d6a8:	0800b38d 	.word	0x0800b38d
 800d6ac:	0800d405 	.word	0x0800d405
 800d6b0:	0800ed4e 	.word	0x0800ed4e

0800d6b4 <__sflush_r>:
 800d6b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6bc:	0716      	lsls	r6, r2, #28
 800d6be:	4605      	mov	r5, r0
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	d454      	bmi.n	800d76e <__sflush_r+0xba>
 800d6c4:	684b      	ldr	r3, [r1, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	dc02      	bgt.n	800d6d0 <__sflush_r+0x1c>
 800d6ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	dd48      	ble.n	800d762 <__sflush_r+0xae>
 800d6d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6d2:	2e00      	cmp	r6, #0
 800d6d4:	d045      	beq.n	800d762 <__sflush_r+0xae>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6dc:	682f      	ldr	r7, [r5, #0]
 800d6de:	6a21      	ldr	r1, [r4, #32]
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	d030      	beq.n	800d746 <__sflush_r+0x92>
 800d6e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	0759      	lsls	r1, r3, #29
 800d6ea:	d505      	bpl.n	800d6f8 <__sflush_r+0x44>
 800d6ec:	6863      	ldr	r3, [r4, #4]
 800d6ee:	1ad2      	subs	r2, r2, r3
 800d6f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6f2:	b10b      	cbz	r3, 800d6f8 <__sflush_r+0x44>
 800d6f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6f6:	1ad2      	subs	r2, r2, r3
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6fc:	6a21      	ldr	r1, [r4, #32]
 800d6fe:	4628      	mov	r0, r5
 800d700:	47b0      	blx	r6
 800d702:	1c43      	adds	r3, r0, #1
 800d704:	89a3      	ldrh	r3, [r4, #12]
 800d706:	d106      	bne.n	800d716 <__sflush_r+0x62>
 800d708:	6829      	ldr	r1, [r5, #0]
 800d70a:	291d      	cmp	r1, #29
 800d70c:	d82b      	bhi.n	800d766 <__sflush_r+0xb2>
 800d70e:	4a2a      	ldr	r2, [pc, #168]	@ (800d7b8 <__sflush_r+0x104>)
 800d710:	410a      	asrs	r2, r1
 800d712:	07d6      	lsls	r6, r2, #31
 800d714:	d427      	bmi.n	800d766 <__sflush_r+0xb2>
 800d716:	2200      	movs	r2, #0
 800d718:	6062      	str	r2, [r4, #4]
 800d71a:	04d9      	lsls	r1, r3, #19
 800d71c:	6922      	ldr	r2, [r4, #16]
 800d71e:	6022      	str	r2, [r4, #0]
 800d720:	d504      	bpl.n	800d72c <__sflush_r+0x78>
 800d722:	1c42      	adds	r2, r0, #1
 800d724:	d101      	bne.n	800d72a <__sflush_r+0x76>
 800d726:	682b      	ldr	r3, [r5, #0]
 800d728:	b903      	cbnz	r3, 800d72c <__sflush_r+0x78>
 800d72a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d72e:	602f      	str	r7, [r5, #0]
 800d730:	b1b9      	cbz	r1, 800d762 <__sflush_r+0xae>
 800d732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d736:	4299      	cmp	r1, r3
 800d738:	d002      	beq.n	800d740 <__sflush_r+0x8c>
 800d73a:	4628      	mov	r0, r5
 800d73c:	f7ff f9e0 	bl	800cb00 <_free_r>
 800d740:	2300      	movs	r3, #0
 800d742:	6363      	str	r3, [r4, #52]	@ 0x34
 800d744:	e00d      	b.n	800d762 <__sflush_r+0xae>
 800d746:	2301      	movs	r3, #1
 800d748:	4628      	mov	r0, r5
 800d74a:	47b0      	blx	r6
 800d74c:	4602      	mov	r2, r0
 800d74e:	1c50      	adds	r0, r2, #1
 800d750:	d1c9      	bne.n	800d6e6 <__sflush_r+0x32>
 800d752:	682b      	ldr	r3, [r5, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0c6      	beq.n	800d6e6 <__sflush_r+0x32>
 800d758:	2b1d      	cmp	r3, #29
 800d75a:	d001      	beq.n	800d760 <__sflush_r+0xac>
 800d75c:	2b16      	cmp	r3, #22
 800d75e:	d11e      	bne.n	800d79e <__sflush_r+0xea>
 800d760:	602f      	str	r7, [r5, #0]
 800d762:	2000      	movs	r0, #0
 800d764:	e022      	b.n	800d7ac <__sflush_r+0xf8>
 800d766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d76a:	b21b      	sxth	r3, r3
 800d76c:	e01b      	b.n	800d7a6 <__sflush_r+0xf2>
 800d76e:	690f      	ldr	r7, [r1, #16]
 800d770:	2f00      	cmp	r7, #0
 800d772:	d0f6      	beq.n	800d762 <__sflush_r+0xae>
 800d774:	0793      	lsls	r3, r2, #30
 800d776:	680e      	ldr	r6, [r1, #0]
 800d778:	bf08      	it	eq
 800d77a:	694b      	ldreq	r3, [r1, #20]
 800d77c:	600f      	str	r7, [r1, #0]
 800d77e:	bf18      	it	ne
 800d780:	2300      	movne	r3, #0
 800d782:	eba6 0807 	sub.w	r8, r6, r7
 800d786:	608b      	str	r3, [r1, #8]
 800d788:	f1b8 0f00 	cmp.w	r8, #0
 800d78c:	dde9      	ble.n	800d762 <__sflush_r+0xae>
 800d78e:	6a21      	ldr	r1, [r4, #32]
 800d790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d792:	4643      	mov	r3, r8
 800d794:	463a      	mov	r2, r7
 800d796:	4628      	mov	r0, r5
 800d798:	47b0      	blx	r6
 800d79a:	2800      	cmp	r0, #0
 800d79c:	dc08      	bgt.n	800d7b0 <__sflush_r+0xfc>
 800d79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b0:	4407      	add	r7, r0
 800d7b2:	eba8 0800 	sub.w	r8, r8, r0
 800d7b6:	e7e7      	b.n	800d788 <__sflush_r+0xd4>
 800d7b8:	dfbffffe 	.word	0xdfbffffe

0800d7bc <_fflush_r>:
 800d7bc:	b538      	push	{r3, r4, r5, lr}
 800d7be:	690b      	ldr	r3, [r1, #16]
 800d7c0:	4605      	mov	r5, r0
 800d7c2:	460c      	mov	r4, r1
 800d7c4:	b913      	cbnz	r3, 800d7cc <_fflush_r+0x10>
 800d7c6:	2500      	movs	r5, #0
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	b118      	cbz	r0, 800d7d6 <_fflush_r+0x1a>
 800d7ce:	6a03      	ldr	r3, [r0, #32]
 800d7d0:	b90b      	cbnz	r3, 800d7d6 <_fflush_r+0x1a>
 800d7d2:	f7fe fa1f 	bl	800bc14 <__sinit>
 800d7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d0f3      	beq.n	800d7c6 <_fflush_r+0xa>
 800d7de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7e0:	07d0      	lsls	r0, r2, #31
 800d7e2:	d404      	bmi.n	800d7ee <_fflush_r+0x32>
 800d7e4:	0599      	lsls	r1, r3, #22
 800d7e6:	d402      	bmi.n	800d7ee <_fflush_r+0x32>
 800d7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ea:	f7fe fb2a 	bl	800be42 <__retarget_lock_acquire_recursive>
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	f7ff ff5f 	bl	800d6b4 <__sflush_r>
 800d7f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7f8:	07da      	lsls	r2, r3, #31
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	d4e4      	bmi.n	800d7c8 <_fflush_r+0xc>
 800d7fe:	89a3      	ldrh	r3, [r4, #12]
 800d800:	059b      	lsls	r3, r3, #22
 800d802:	d4e1      	bmi.n	800d7c8 <_fflush_r+0xc>
 800d804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d806:	f7fe fb1d 	bl	800be44 <__retarget_lock_release_recursive>
 800d80a:	e7dd      	b.n	800d7c8 <_fflush_r+0xc>

0800d80c <memmove>:
 800d80c:	4288      	cmp	r0, r1
 800d80e:	b510      	push	{r4, lr}
 800d810:	eb01 0402 	add.w	r4, r1, r2
 800d814:	d902      	bls.n	800d81c <memmove+0x10>
 800d816:	4284      	cmp	r4, r0
 800d818:	4623      	mov	r3, r4
 800d81a:	d807      	bhi.n	800d82c <memmove+0x20>
 800d81c:	1e43      	subs	r3, r0, #1
 800d81e:	42a1      	cmp	r1, r4
 800d820:	d008      	beq.n	800d834 <memmove+0x28>
 800d822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d82a:	e7f8      	b.n	800d81e <memmove+0x12>
 800d82c:	4402      	add	r2, r0
 800d82e:	4601      	mov	r1, r0
 800d830:	428a      	cmp	r2, r1
 800d832:	d100      	bne.n	800d836 <memmove+0x2a>
 800d834:	bd10      	pop	{r4, pc}
 800d836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d83a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d83e:	e7f7      	b.n	800d830 <memmove+0x24>

0800d840 <_sbrk_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	4d06      	ldr	r5, [pc, #24]	@ (800d85c <_sbrk_r+0x1c>)
 800d844:	2300      	movs	r3, #0
 800d846:	4604      	mov	r4, r0
 800d848:	4608      	mov	r0, r1
 800d84a:	602b      	str	r3, [r5, #0]
 800d84c:	f7f5 fcf6 	bl	800323c <_sbrk>
 800d850:	1c43      	adds	r3, r0, #1
 800d852:	d102      	bne.n	800d85a <_sbrk_r+0x1a>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	b103      	cbz	r3, 800d85a <_sbrk_r+0x1a>
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	bd38      	pop	{r3, r4, r5, pc}
 800d85c:	200053b8 	.word	0x200053b8

0800d860 <__assert_func>:
 800d860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d862:	4614      	mov	r4, r2
 800d864:	461a      	mov	r2, r3
 800d866:	4b09      	ldr	r3, [pc, #36]	@ (800d88c <__assert_func+0x2c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4605      	mov	r5, r0
 800d86c:	68d8      	ldr	r0, [r3, #12]
 800d86e:	b954      	cbnz	r4, 800d886 <__assert_func+0x26>
 800d870:	4b07      	ldr	r3, [pc, #28]	@ (800d890 <__assert_func+0x30>)
 800d872:	461c      	mov	r4, r3
 800d874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d878:	9100      	str	r1, [sp, #0]
 800d87a:	462b      	mov	r3, r5
 800d87c:	4905      	ldr	r1, [pc, #20]	@ (800d894 <__assert_func+0x34>)
 800d87e:	f000 f86f 	bl	800d960 <fiprintf>
 800d882:	f000 f87f 	bl	800d984 <abort>
 800d886:	4b04      	ldr	r3, [pc, #16]	@ (800d898 <__assert_func+0x38>)
 800d888:	e7f4      	b.n	800d874 <__assert_func+0x14>
 800d88a:	bf00      	nop
 800d88c:	20000020 	.word	0x20000020
 800d890:	0800ed9e 	.word	0x0800ed9e
 800d894:	0800ed70 	.word	0x0800ed70
 800d898:	0800ed63 	.word	0x0800ed63

0800d89c <_calloc_r>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	fba1 5402 	umull	r5, r4, r1, r2
 800d8a2:	b93c      	cbnz	r4, 800d8b4 <_calloc_r+0x18>
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	f7ff f99f 	bl	800cbe8 <_malloc_r>
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	b928      	cbnz	r0, 800d8ba <_calloc_r+0x1e>
 800d8ae:	2600      	movs	r6, #0
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	220c      	movs	r2, #12
 800d8b6:	6002      	str	r2, [r0, #0]
 800d8b8:	e7f9      	b.n	800d8ae <_calloc_r+0x12>
 800d8ba:	462a      	mov	r2, r5
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f7fe fa42 	bl	800bd46 <memset>
 800d8c2:	e7f5      	b.n	800d8b0 <_calloc_r+0x14>

0800d8c4 <__ascii_mbtowc>:
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	b901      	cbnz	r1, 800d8ca <__ascii_mbtowc+0x6>
 800d8c8:	a901      	add	r1, sp, #4
 800d8ca:	b142      	cbz	r2, 800d8de <__ascii_mbtowc+0x1a>
 800d8cc:	b14b      	cbz	r3, 800d8e2 <__ascii_mbtowc+0x1e>
 800d8ce:	7813      	ldrb	r3, [r2, #0]
 800d8d0:	600b      	str	r3, [r1, #0]
 800d8d2:	7812      	ldrb	r2, [r2, #0]
 800d8d4:	1e10      	subs	r0, r2, #0
 800d8d6:	bf18      	it	ne
 800d8d8:	2001      	movne	r0, #1
 800d8da:	b002      	add	sp, #8
 800d8dc:	4770      	bx	lr
 800d8de:	4610      	mov	r0, r2
 800d8e0:	e7fb      	b.n	800d8da <__ascii_mbtowc+0x16>
 800d8e2:	f06f 0001 	mvn.w	r0, #1
 800d8e6:	e7f8      	b.n	800d8da <__ascii_mbtowc+0x16>

0800d8e8 <_realloc_r>:
 800d8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ec:	4680      	mov	r8, r0
 800d8ee:	4615      	mov	r5, r2
 800d8f0:	460c      	mov	r4, r1
 800d8f2:	b921      	cbnz	r1, 800d8fe <_realloc_r+0x16>
 800d8f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	f7ff b975 	b.w	800cbe8 <_malloc_r>
 800d8fe:	b92a      	cbnz	r2, 800d90c <_realloc_r+0x24>
 800d900:	f7ff f8fe 	bl	800cb00 <_free_r>
 800d904:	2400      	movs	r4, #0
 800d906:	4620      	mov	r0, r4
 800d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90c:	f000 f841 	bl	800d992 <_malloc_usable_size_r>
 800d910:	4285      	cmp	r5, r0
 800d912:	4606      	mov	r6, r0
 800d914:	d802      	bhi.n	800d91c <_realloc_r+0x34>
 800d916:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d91a:	d8f4      	bhi.n	800d906 <_realloc_r+0x1e>
 800d91c:	4629      	mov	r1, r5
 800d91e:	4640      	mov	r0, r8
 800d920:	f7ff f962 	bl	800cbe8 <_malloc_r>
 800d924:	4607      	mov	r7, r0
 800d926:	2800      	cmp	r0, #0
 800d928:	d0ec      	beq.n	800d904 <_realloc_r+0x1c>
 800d92a:	42b5      	cmp	r5, r6
 800d92c:	462a      	mov	r2, r5
 800d92e:	4621      	mov	r1, r4
 800d930:	bf28      	it	cs
 800d932:	4632      	movcs	r2, r6
 800d934:	f7fe fa87 	bl	800be46 <memcpy>
 800d938:	4621      	mov	r1, r4
 800d93a:	4640      	mov	r0, r8
 800d93c:	f7ff f8e0 	bl	800cb00 <_free_r>
 800d940:	463c      	mov	r4, r7
 800d942:	e7e0      	b.n	800d906 <_realloc_r+0x1e>

0800d944 <__ascii_wctomb>:
 800d944:	4603      	mov	r3, r0
 800d946:	4608      	mov	r0, r1
 800d948:	b141      	cbz	r1, 800d95c <__ascii_wctomb+0x18>
 800d94a:	2aff      	cmp	r2, #255	@ 0xff
 800d94c:	d904      	bls.n	800d958 <__ascii_wctomb+0x14>
 800d94e:	228a      	movs	r2, #138	@ 0x8a
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	f04f 30ff 	mov.w	r0, #4294967295
 800d956:	4770      	bx	lr
 800d958:	700a      	strb	r2, [r1, #0]
 800d95a:	2001      	movs	r0, #1
 800d95c:	4770      	bx	lr
	...

0800d960 <fiprintf>:
 800d960:	b40e      	push	{r1, r2, r3}
 800d962:	b503      	push	{r0, r1, lr}
 800d964:	4601      	mov	r1, r0
 800d966:	ab03      	add	r3, sp, #12
 800d968:	4805      	ldr	r0, [pc, #20]	@ (800d980 <fiprintf+0x20>)
 800d96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d96e:	6800      	ldr	r0, [r0, #0]
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	f000 f83f 	bl	800d9f4 <_vfiprintf_r>
 800d976:	b002      	add	sp, #8
 800d978:	f85d eb04 	ldr.w	lr, [sp], #4
 800d97c:	b003      	add	sp, #12
 800d97e:	4770      	bx	lr
 800d980:	20000020 	.word	0x20000020

0800d984 <abort>:
 800d984:	b508      	push	{r3, lr}
 800d986:	2006      	movs	r0, #6
 800d988:	f000 fa08 	bl	800dd9c <raise>
 800d98c:	2001      	movs	r0, #1
 800d98e:	f7f5 fbdd 	bl	800314c <_exit>

0800d992 <_malloc_usable_size_r>:
 800d992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d996:	1f18      	subs	r0, r3, #4
 800d998:	2b00      	cmp	r3, #0
 800d99a:	bfbc      	itt	lt
 800d99c:	580b      	ldrlt	r3, [r1, r0]
 800d99e:	18c0      	addlt	r0, r0, r3
 800d9a0:	4770      	bx	lr

0800d9a2 <__sfputc_r>:
 800d9a2:	6893      	ldr	r3, [r2, #8]
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	b410      	push	{r4}
 800d9aa:	6093      	str	r3, [r2, #8]
 800d9ac:	da08      	bge.n	800d9c0 <__sfputc_r+0x1e>
 800d9ae:	6994      	ldr	r4, [r2, #24]
 800d9b0:	42a3      	cmp	r3, r4
 800d9b2:	db01      	blt.n	800d9b8 <__sfputc_r+0x16>
 800d9b4:	290a      	cmp	r1, #10
 800d9b6:	d103      	bne.n	800d9c0 <__sfputc_r+0x1e>
 800d9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9bc:	f000 b932 	b.w	800dc24 <__swbuf_r>
 800d9c0:	6813      	ldr	r3, [r2, #0]
 800d9c2:	1c58      	adds	r0, r3, #1
 800d9c4:	6010      	str	r0, [r2, #0]
 800d9c6:	7019      	strb	r1, [r3, #0]
 800d9c8:	4608      	mov	r0, r1
 800d9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <__sfputs_r>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	460f      	mov	r7, r1
 800d9d6:	4614      	mov	r4, r2
 800d9d8:	18d5      	adds	r5, r2, r3
 800d9da:	42ac      	cmp	r4, r5
 800d9dc:	d101      	bne.n	800d9e2 <__sfputs_r+0x12>
 800d9de:	2000      	movs	r0, #0
 800d9e0:	e007      	b.n	800d9f2 <__sfputs_r+0x22>
 800d9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e6:	463a      	mov	r2, r7
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	f7ff ffda 	bl	800d9a2 <__sfputc_r>
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	d1f3      	bne.n	800d9da <__sfputs_r+0xa>
 800d9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9f4 <_vfiprintf_r>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	b09d      	sub	sp, #116	@ 0x74
 800d9fc:	4614      	mov	r4, r2
 800d9fe:	4698      	mov	r8, r3
 800da00:	4606      	mov	r6, r0
 800da02:	b118      	cbz	r0, 800da0c <_vfiprintf_r+0x18>
 800da04:	6a03      	ldr	r3, [r0, #32]
 800da06:	b90b      	cbnz	r3, 800da0c <_vfiprintf_r+0x18>
 800da08:	f7fe f904 	bl	800bc14 <__sinit>
 800da0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da0e:	07d9      	lsls	r1, r3, #31
 800da10:	d405      	bmi.n	800da1e <_vfiprintf_r+0x2a>
 800da12:	89ab      	ldrh	r3, [r5, #12]
 800da14:	059a      	lsls	r2, r3, #22
 800da16:	d402      	bmi.n	800da1e <_vfiprintf_r+0x2a>
 800da18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da1a:	f7fe fa12 	bl	800be42 <__retarget_lock_acquire_recursive>
 800da1e:	89ab      	ldrh	r3, [r5, #12]
 800da20:	071b      	lsls	r3, r3, #28
 800da22:	d501      	bpl.n	800da28 <_vfiprintf_r+0x34>
 800da24:	692b      	ldr	r3, [r5, #16]
 800da26:	b99b      	cbnz	r3, 800da50 <_vfiprintf_r+0x5c>
 800da28:	4629      	mov	r1, r5
 800da2a:	4630      	mov	r0, r6
 800da2c:	f000 f938 	bl	800dca0 <__swsetup_r>
 800da30:	b170      	cbz	r0, 800da50 <_vfiprintf_r+0x5c>
 800da32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da34:	07dc      	lsls	r4, r3, #31
 800da36:	d504      	bpl.n	800da42 <_vfiprintf_r+0x4e>
 800da38:	f04f 30ff 	mov.w	r0, #4294967295
 800da3c:	b01d      	add	sp, #116	@ 0x74
 800da3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da42:	89ab      	ldrh	r3, [r5, #12]
 800da44:	0598      	lsls	r0, r3, #22
 800da46:	d4f7      	bmi.n	800da38 <_vfiprintf_r+0x44>
 800da48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da4a:	f7fe f9fb 	bl	800be44 <__retarget_lock_release_recursive>
 800da4e:	e7f3      	b.n	800da38 <_vfiprintf_r+0x44>
 800da50:	2300      	movs	r3, #0
 800da52:	9309      	str	r3, [sp, #36]	@ 0x24
 800da54:	2320      	movs	r3, #32
 800da56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800da5e:	2330      	movs	r3, #48	@ 0x30
 800da60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc10 <_vfiprintf_r+0x21c>
 800da64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da68:	f04f 0901 	mov.w	r9, #1
 800da6c:	4623      	mov	r3, r4
 800da6e:	469a      	mov	sl, r3
 800da70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da74:	b10a      	cbz	r2, 800da7a <_vfiprintf_r+0x86>
 800da76:	2a25      	cmp	r2, #37	@ 0x25
 800da78:	d1f9      	bne.n	800da6e <_vfiprintf_r+0x7a>
 800da7a:	ebba 0b04 	subs.w	fp, sl, r4
 800da7e:	d00b      	beq.n	800da98 <_vfiprintf_r+0xa4>
 800da80:	465b      	mov	r3, fp
 800da82:	4622      	mov	r2, r4
 800da84:	4629      	mov	r1, r5
 800da86:	4630      	mov	r0, r6
 800da88:	f7ff ffa2 	bl	800d9d0 <__sfputs_r>
 800da8c:	3001      	adds	r0, #1
 800da8e:	f000 80a7 	beq.w	800dbe0 <_vfiprintf_r+0x1ec>
 800da92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da94:	445a      	add	r2, fp
 800da96:	9209      	str	r2, [sp, #36]	@ 0x24
 800da98:	f89a 3000 	ldrb.w	r3, [sl]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f000 809f 	beq.w	800dbe0 <_vfiprintf_r+0x1ec>
 800daa2:	2300      	movs	r3, #0
 800daa4:	f04f 32ff 	mov.w	r2, #4294967295
 800daa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daac:	f10a 0a01 	add.w	sl, sl, #1
 800dab0:	9304      	str	r3, [sp, #16]
 800dab2:	9307      	str	r3, [sp, #28]
 800dab4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dab8:	931a      	str	r3, [sp, #104]	@ 0x68
 800daba:	4654      	mov	r4, sl
 800dabc:	2205      	movs	r2, #5
 800dabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac2:	4853      	ldr	r0, [pc, #332]	@ (800dc10 <_vfiprintf_r+0x21c>)
 800dac4:	f7f2 fb84 	bl	80001d0 <memchr>
 800dac8:	9a04      	ldr	r2, [sp, #16]
 800daca:	b9d8      	cbnz	r0, 800db04 <_vfiprintf_r+0x110>
 800dacc:	06d1      	lsls	r1, r2, #27
 800dace:	bf44      	itt	mi
 800dad0:	2320      	movmi	r3, #32
 800dad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dad6:	0713      	lsls	r3, r2, #28
 800dad8:	bf44      	itt	mi
 800dada:	232b      	movmi	r3, #43	@ 0x2b
 800dadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dae0:	f89a 3000 	ldrb.w	r3, [sl]
 800dae4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dae6:	d015      	beq.n	800db14 <_vfiprintf_r+0x120>
 800dae8:	9a07      	ldr	r2, [sp, #28]
 800daea:	4654      	mov	r4, sl
 800daec:	2000      	movs	r0, #0
 800daee:	f04f 0c0a 	mov.w	ip, #10
 800daf2:	4621      	mov	r1, r4
 800daf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daf8:	3b30      	subs	r3, #48	@ 0x30
 800dafa:	2b09      	cmp	r3, #9
 800dafc:	d94b      	bls.n	800db96 <_vfiprintf_r+0x1a2>
 800dafe:	b1b0      	cbz	r0, 800db2e <_vfiprintf_r+0x13a>
 800db00:	9207      	str	r2, [sp, #28]
 800db02:	e014      	b.n	800db2e <_vfiprintf_r+0x13a>
 800db04:	eba0 0308 	sub.w	r3, r0, r8
 800db08:	fa09 f303 	lsl.w	r3, r9, r3
 800db0c:	4313      	orrs	r3, r2
 800db0e:	9304      	str	r3, [sp, #16]
 800db10:	46a2      	mov	sl, r4
 800db12:	e7d2      	b.n	800daba <_vfiprintf_r+0xc6>
 800db14:	9b03      	ldr	r3, [sp, #12]
 800db16:	1d19      	adds	r1, r3, #4
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	9103      	str	r1, [sp, #12]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	bfbb      	ittet	lt
 800db20:	425b      	neglt	r3, r3
 800db22:	f042 0202 	orrlt.w	r2, r2, #2
 800db26:	9307      	strge	r3, [sp, #28]
 800db28:	9307      	strlt	r3, [sp, #28]
 800db2a:	bfb8      	it	lt
 800db2c:	9204      	strlt	r2, [sp, #16]
 800db2e:	7823      	ldrb	r3, [r4, #0]
 800db30:	2b2e      	cmp	r3, #46	@ 0x2e
 800db32:	d10a      	bne.n	800db4a <_vfiprintf_r+0x156>
 800db34:	7863      	ldrb	r3, [r4, #1]
 800db36:	2b2a      	cmp	r3, #42	@ 0x2a
 800db38:	d132      	bne.n	800dba0 <_vfiprintf_r+0x1ac>
 800db3a:	9b03      	ldr	r3, [sp, #12]
 800db3c:	1d1a      	adds	r2, r3, #4
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	9203      	str	r2, [sp, #12]
 800db42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db46:	3402      	adds	r4, #2
 800db48:	9305      	str	r3, [sp, #20]
 800db4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc20 <_vfiprintf_r+0x22c>
 800db4e:	7821      	ldrb	r1, [r4, #0]
 800db50:	2203      	movs	r2, #3
 800db52:	4650      	mov	r0, sl
 800db54:	f7f2 fb3c 	bl	80001d0 <memchr>
 800db58:	b138      	cbz	r0, 800db6a <_vfiprintf_r+0x176>
 800db5a:	9b04      	ldr	r3, [sp, #16]
 800db5c:	eba0 000a 	sub.w	r0, r0, sl
 800db60:	2240      	movs	r2, #64	@ 0x40
 800db62:	4082      	lsls	r2, r0
 800db64:	4313      	orrs	r3, r2
 800db66:	3401      	adds	r4, #1
 800db68:	9304      	str	r3, [sp, #16]
 800db6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db6e:	4829      	ldr	r0, [pc, #164]	@ (800dc14 <_vfiprintf_r+0x220>)
 800db70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db74:	2206      	movs	r2, #6
 800db76:	f7f2 fb2b 	bl	80001d0 <memchr>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d03f      	beq.n	800dbfe <_vfiprintf_r+0x20a>
 800db7e:	4b26      	ldr	r3, [pc, #152]	@ (800dc18 <_vfiprintf_r+0x224>)
 800db80:	bb1b      	cbnz	r3, 800dbca <_vfiprintf_r+0x1d6>
 800db82:	9b03      	ldr	r3, [sp, #12]
 800db84:	3307      	adds	r3, #7
 800db86:	f023 0307 	bic.w	r3, r3, #7
 800db8a:	3308      	adds	r3, #8
 800db8c:	9303      	str	r3, [sp, #12]
 800db8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db90:	443b      	add	r3, r7
 800db92:	9309      	str	r3, [sp, #36]	@ 0x24
 800db94:	e76a      	b.n	800da6c <_vfiprintf_r+0x78>
 800db96:	fb0c 3202 	mla	r2, ip, r2, r3
 800db9a:	460c      	mov	r4, r1
 800db9c:	2001      	movs	r0, #1
 800db9e:	e7a8      	b.n	800daf2 <_vfiprintf_r+0xfe>
 800dba0:	2300      	movs	r3, #0
 800dba2:	3401      	adds	r4, #1
 800dba4:	9305      	str	r3, [sp, #20]
 800dba6:	4619      	mov	r1, r3
 800dba8:	f04f 0c0a 	mov.w	ip, #10
 800dbac:	4620      	mov	r0, r4
 800dbae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbb2:	3a30      	subs	r2, #48	@ 0x30
 800dbb4:	2a09      	cmp	r2, #9
 800dbb6:	d903      	bls.n	800dbc0 <_vfiprintf_r+0x1cc>
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0c6      	beq.n	800db4a <_vfiprintf_r+0x156>
 800dbbc:	9105      	str	r1, [sp, #20]
 800dbbe:	e7c4      	b.n	800db4a <_vfiprintf_r+0x156>
 800dbc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e7f0      	b.n	800dbac <_vfiprintf_r+0x1b8>
 800dbca:	ab03      	add	r3, sp, #12
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	462a      	mov	r2, r5
 800dbd0:	4b12      	ldr	r3, [pc, #72]	@ (800dc1c <_vfiprintf_r+0x228>)
 800dbd2:	a904      	add	r1, sp, #16
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7fd fbd9 	bl	800b38c <_printf_float>
 800dbda:	4607      	mov	r7, r0
 800dbdc:	1c78      	adds	r0, r7, #1
 800dbde:	d1d6      	bne.n	800db8e <_vfiprintf_r+0x19a>
 800dbe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbe2:	07d9      	lsls	r1, r3, #31
 800dbe4:	d405      	bmi.n	800dbf2 <_vfiprintf_r+0x1fe>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	059a      	lsls	r2, r3, #22
 800dbea:	d402      	bmi.n	800dbf2 <_vfiprintf_r+0x1fe>
 800dbec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbee:	f7fe f929 	bl	800be44 <__retarget_lock_release_recursive>
 800dbf2:	89ab      	ldrh	r3, [r5, #12]
 800dbf4:	065b      	lsls	r3, r3, #25
 800dbf6:	f53f af1f 	bmi.w	800da38 <_vfiprintf_r+0x44>
 800dbfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbfc:	e71e      	b.n	800da3c <_vfiprintf_r+0x48>
 800dbfe:	ab03      	add	r3, sp, #12
 800dc00:	9300      	str	r3, [sp, #0]
 800dc02:	462a      	mov	r2, r5
 800dc04:	4b05      	ldr	r3, [pc, #20]	@ (800dc1c <_vfiprintf_r+0x228>)
 800dc06:	a904      	add	r1, sp, #16
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7fd fe57 	bl	800b8bc <_printf_i>
 800dc0e:	e7e4      	b.n	800dbda <_vfiprintf_r+0x1e6>
 800dc10:	0800ed48 	.word	0x0800ed48
 800dc14:	0800ed52 	.word	0x0800ed52
 800dc18:	0800b38d 	.word	0x0800b38d
 800dc1c:	0800d9d1 	.word	0x0800d9d1
 800dc20:	0800ed4e 	.word	0x0800ed4e

0800dc24 <__swbuf_r>:
 800dc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc26:	460e      	mov	r6, r1
 800dc28:	4614      	mov	r4, r2
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	b118      	cbz	r0, 800dc36 <__swbuf_r+0x12>
 800dc2e:	6a03      	ldr	r3, [r0, #32]
 800dc30:	b90b      	cbnz	r3, 800dc36 <__swbuf_r+0x12>
 800dc32:	f7fd ffef 	bl	800bc14 <__sinit>
 800dc36:	69a3      	ldr	r3, [r4, #24]
 800dc38:	60a3      	str	r3, [r4, #8]
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	071a      	lsls	r2, r3, #28
 800dc3e:	d501      	bpl.n	800dc44 <__swbuf_r+0x20>
 800dc40:	6923      	ldr	r3, [r4, #16]
 800dc42:	b943      	cbnz	r3, 800dc56 <__swbuf_r+0x32>
 800dc44:	4621      	mov	r1, r4
 800dc46:	4628      	mov	r0, r5
 800dc48:	f000 f82a 	bl	800dca0 <__swsetup_r>
 800dc4c:	b118      	cbz	r0, 800dc56 <__swbuf_r+0x32>
 800dc4e:	f04f 37ff 	mov.w	r7, #4294967295
 800dc52:	4638      	mov	r0, r7
 800dc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	6922      	ldr	r2, [r4, #16]
 800dc5a:	1a98      	subs	r0, r3, r2
 800dc5c:	6963      	ldr	r3, [r4, #20]
 800dc5e:	b2f6      	uxtb	r6, r6
 800dc60:	4283      	cmp	r3, r0
 800dc62:	4637      	mov	r7, r6
 800dc64:	dc05      	bgt.n	800dc72 <__swbuf_r+0x4e>
 800dc66:	4621      	mov	r1, r4
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f7ff fda7 	bl	800d7bc <_fflush_r>
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	d1ed      	bne.n	800dc4e <__swbuf_r+0x2a>
 800dc72:	68a3      	ldr	r3, [r4, #8]
 800dc74:	3b01      	subs	r3, #1
 800dc76:	60a3      	str	r3, [r4, #8]
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	1c5a      	adds	r2, r3, #1
 800dc7c:	6022      	str	r2, [r4, #0]
 800dc7e:	701e      	strb	r6, [r3, #0]
 800dc80:	6962      	ldr	r2, [r4, #20]
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d004      	beq.n	800dc92 <__swbuf_r+0x6e>
 800dc88:	89a3      	ldrh	r3, [r4, #12]
 800dc8a:	07db      	lsls	r3, r3, #31
 800dc8c:	d5e1      	bpl.n	800dc52 <__swbuf_r+0x2e>
 800dc8e:	2e0a      	cmp	r6, #10
 800dc90:	d1df      	bne.n	800dc52 <__swbuf_r+0x2e>
 800dc92:	4621      	mov	r1, r4
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7ff fd91 	bl	800d7bc <_fflush_r>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d0d9      	beq.n	800dc52 <__swbuf_r+0x2e>
 800dc9e:	e7d6      	b.n	800dc4e <__swbuf_r+0x2a>

0800dca0 <__swsetup_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4b29      	ldr	r3, [pc, #164]	@ (800dd48 <__swsetup_r+0xa8>)
 800dca4:	4605      	mov	r5, r0
 800dca6:	6818      	ldr	r0, [r3, #0]
 800dca8:	460c      	mov	r4, r1
 800dcaa:	b118      	cbz	r0, 800dcb4 <__swsetup_r+0x14>
 800dcac:	6a03      	ldr	r3, [r0, #32]
 800dcae:	b90b      	cbnz	r3, 800dcb4 <__swsetup_r+0x14>
 800dcb0:	f7fd ffb0 	bl	800bc14 <__sinit>
 800dcb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcb8:	0719      	lsls	r1, r3, #28
 800dcba:	d422      	bmi.n	800dd02 <__swsetup_r+0x62>
 800dcbc:	06da      	lsls	r2, r3, #27
 800dcbe:	d407      	bmi.n	800dcd0 <__swsetup_r+0x30>
 800dcc0:	2209      	movs	r2, #9
 800dcc2:	602a      	str	r2, [r5, #0]
 800dcc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcc8:	81a3      	strh	r3, [r4, #12]
 800dcca:	f04f 30ff 	mov.w	r0, #4294967295
 800dcce:	e033      	b.n	800dd38 <__swsetup_r+0x98>
 800dcd0:	0758      	lsls	r0, r3, #29
 800dcd2:	d512      	bpl.n	800dcfa <__swsetup_r+0x5a>
 800dcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcd6:	b141      	cbz	r1, 800dcea <__swsetup_r+0x4a>
 800dcd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcdc:	4299      	cmp	r1, r3
 800dcde:	d002      	beq.n	800dce6 <__swsetup_r+0x46>
 800dce0:	4628      	mov	r0, r5
 800dce2:	f7fe ff0d 	bl	800cb00 <_free_r>
 800dce6:	2300      	movs	r3, #0
 800dce8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dcf0:	81a3      	strh	r3, [r4, #12]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	6063      	str	r3, [r4, #4]
 800dcf6:	6923      	ldr	r3, [r4, #16]
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	f043 0308 	orr.w	r3, r3, #8
 800dd00:	81a3      	strh	r3, [r4, #12]
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	b94b      	cbnz	r3, 800dd1a <__swsetup_r+0x7a>
 800dd06:	89a3      	ldrh	r3, [r4, #12]
 800dd08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd10:	d003      	beq.n	800dd1a <__swsetup_r+0x7a>
 800dd12:	4621      	mov	r1, r4
 800dd14:	4628      	mov	r0, r5
 800dd16:	f000 f883 	bl	800de20 <__smakebuf_r>
 800dd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd1e:	f013 0201 	ands.w	r2, r3, #1
 800dd22:	d00a      	beq.n	800dd3a <__swsetup_r+0x9a>
 800dd24:	2200      	movs	r2, #0
 800dd26:	60a2      	str	r2, [r4, #8]
 800dd28:	6962      	ldr	r2, [r4, #20]
 800dd2a:	4252      	negs	r2, r2
 800dd2c:	61a2      	str	r2, [r4, #24]
 800dd2e:	6922      	ldr	r2, [r4, #16]
 800dd30:	b942      	cbnz	r2, 800dd44 <__swsetup_r+0xa4>
 800dd32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd36:	d1c5      	bne.n	800dcc4 <__swsetup_r+0x24>
 800dd38:	bd38      	pop	{r3, r4, r5, pc}
 800dd3a:	0799      	lsls	r1, r3, #30
 800dd3c:	bf58      	it	pl
 800dd3e:	6962      	ldrpl	r2, [r4, #20]
 800dd40:	60a2      	str	r2, [r4, #8]
 800dd42:	e7f4      	b.n	800dd2e <__swsetup_r+0x8e>
 800dd44:	2000      	movs	r0, #0
 800dd46:	e7f7      	b.n	800dd38 <__swsetup_r+0x98>
 800dd48:	20000020 	.word	0x20000020

0800dd4c <_raise_r>:
 800dd4c:	291f      	cmp	r1, #31
 800dd4e:	b538      	push	{r3, r4, r5, lr}
 800dd50:	4605      	mov	r5, r0
 800dd52:	460c      	mov	r4, r1
 800dd54:	d904      	bls.n	800dd60 <_raise_r+0x14>
 800dd56:	2316      	movs	r3, #22
 800dd58:	6003      	str	r3, [r0, #0]
 800dd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5e:	bd38      	pop	{r3, r4, r5, pc}
 800dd60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd62:	b112      	cbz	r2, 800dd6a <_raise_r+0x1e>
 800dd64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd68:	b94b      	cbnz	r3, 800dd7e <_raise_r+0x32>
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f000 f830 	bl	800ddd0 <_getpid_r>
 800dd70:	4622      	mov	r2, r4
 800dd72:	4601      	mov	r1, r0
 800dd74:	4628      	mov	r0, r5
 800dd76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd7a:	f000 b817 	b.w	800ddac <_kill_r>
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d00a      	beq.n	800dd98 <_raise_r+0x4c>
 800dd82:	1c59      	adds	r1, r3, #1
 800dd84:	d103      	bne.n	800dd8e <_raise_r+0x42>
 800dd86:	2316      	movs	r3, #22
 800dd88:	6003      	str	r3, [r0, #0]
 800dd8a:	2001      	movs	r0, #1
 800dd8c:	e7e7      	b.n	800dd5e <_raise_r+0x12>
 800dd8e:	2100      	movs	r1, #0
 800dd90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd94:	4620      	mov	r0, r4
 800dd96:	4798      	blx	r3
 800dd98:	2000      	movs	r0, #0
 800dd9a:	e7e0      	b.n	800dd5e <_raise_r+0x12>

0800dd9c <raise>:
 800dd9c:	4b02      	ldr	r3, [pc, #8]	@ (800dda8 <raise+0xc>)
 800dd9e:	4601      	mov	r1, r0
 800dda0:	6818      	ldr	r0, [r3, #0]
 800dda2:	f7ff bfd3 	b.w	800dd4c <_raise_r>
 800dda6:	bf00      	nop
 800dda8:	20000020 	.word	0x20000020

0800ddac <_kill_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d07      	ldr	r5, [pc, #28]	@ (800ddcc <_kill_r+0x20>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	602b      	str	r3, [r5, #0]
 800ddba:	f7f5 f9b7 	bl	800312c <_kill>
 800ddbe:	1c43      	adds	r3, r0, #1
 800ddc0:	d102      	bne.n	800ddc8 <_kill_r+0x1c>
 800ddc2:	682b      	ldr	r3, [r5, #0]
 800ddc4:	b103      	cbz	r3, 800ddc8 <_kill_r+0x1c>
 800ddc6:	6023      	str	r3, [r4, #0]
 800ddc8:	bd38      	pop	{r3, r4, r5, pc}
 800ddca:	bf00      	nop
 800ddcc:	200053b8 	.word	0x200053b8

0800ddd0 <_getpid_r>:
 800ddd0:	f7f5 b9a4 	b.w	800311c <_getpid>

0800ddd4 <__swhatbuf_r>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dddc:	2900      	cmp	r1, #0
 800ddde:	b096      	sub	sp, #88	@ 0x58
 800dde0:	4615      	mov	r5, r2
 800dde2:	461e      	mov	r6, r3
 800dde4:	da0d      	bge.n	800de02 <__swhatbuf_r+0x2e>
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddec:	f04f 0100 	mov.w	r1, #0
 800ddf0:	bf14      	ite	ne
 800ddf2:	2340      	movne	r3, #64	@ 0x40
 800ddf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	6031      	str	r1, [r6, #0]
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	b016      	add	sp, #88	@ 0x58
 800de00:	bd70      	pop	{r4, r5, r6, pc}
 800de02:	466a      	mov	r2, sp
 800de04:	f000 f848 	bl	800de98 <_fstat_r>
 800de08:	2800      	cmp	r0, #0
 800de0a:	dbec      	blt.n	800dde6 <__swhatbuf_r+0x12>
 800de0c:	9901      	ldr	r1, [sp, #4]
 800de0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de16:	4259      	negs	r1, r3
 800de18:	4159      	adcs	r1, r3
 800de1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de1e:	e7eb      	b.n	800ddf8 <__swhatbuf_r+0x24>

0800de20 <__smakebuf_r>:
 800de20:	898b      	ldrh	r3, [r1, #12]
 800de22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de24:	079d      	lsls	r5, r3, #30
 800de26:	4606      	mov	r6, r0
 800de28:	460c      	mov	r4, r1
 800de2a:	d507      	bpl.n	800de3c <__smakebuf_r+0x1c>
 800de2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	6123      	str	r3, [r4, #16]
 800de34:	2301      	movs	r3, #1
 800de36:	6163      	str	r3, [r4, #20]
 800de38:	b003      	add	sp, #12
 800de3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de3c:	ab01      	add	r3, sp, #4
 800de3e:	466a      	mov	r2, sp
 800de40:	f7ff ffc8 	bl	800ddd4 <__swhatbuf_r>
 800de44:	9f00      	ldr	r7, [sp, #0]
 800de46:	4605      	mov	r5, r0
 800de48:	4639      	mov	r1, r7
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7fe fecc 	bl	800cbe8 <_malloc_r>
 800de50:	b948      	cbnz	r0, 800de66 <__smakebuf_r+0x46>
 800de52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de56:	059a      	lsls	r2, r3, #22
 800de58:	d4ee      	bmi.n	800de38 <__smakebuf_r+0x18>
 800de5a:	f023 0303 	bic.w	r3, r3, #3
 800de5e:	f043 0302 	orr.w	r3, r3, #2
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	e7e2      	b.n	800de2c <__smakebuf_r+0xc>
 800de66:	89a3      	ldrh	r3, [r4, #12]
 800de68:	6020      	str	r0, [r4, #0]
 800de6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de6e:	81a3      	strh	r3, [r4, #12]
 800de70:	9b01      	ldr	r3, [sp, #4]
 800de72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de76:	b15b      	cbz	r3, 800de90 <__smakebuf_r+0x70>
 800de78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de7c:	4630      	mov	r0, r6
 800de7e:	f000 f81d 	bl	800debc <_isatty_r>
 800de82:	b128      	cbz	r0, 800de90 <__smakebuf_r+0x70>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	f023 0303 	bic.w	r3, r3, #3
 800de8a:	f043 0301 	orr.w	r3, r3, #1
 800de8e:	81a3      	strh	r3, [r4, #12]
 800de90:	89a3      	ldrh	r3, [r4, #12]
 800de92:	431d      	orrs	r5, r3
 800de94:	81a5      	strh	r5, [r4, #12]
 800de96:	e7cf      	b.n	800de38 <__smakebuf_r+0x18>

0800de98 <_fstat_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4d07      	ldr	r5, [pc, #28]	@ (800deb8 <_fstat_r+0x20>)
 800de9c:	2300      	movs	r3, #0
 800de9e:	4604      	mov	r4, r0
 800dea0:	4608      	mov	r0, r1
 800dea2:	4611      	mov	r1, r2
 800dea4:	602b      	str	r3, [r5, #0]
 800dea6:	f7f5 f9a1 	bl	80031ec <_fstat>
 800deaa:	1c43      	adds	r3, r0, #1
 800deac:	d102      	bne.n	800deb4 <_fstat_r+0x1c>
 800deae:	682b      	ldr	r3, [r5, #0]
 800deb0:	b103      	cbz	r3, 800deb4 <_fstat_r+0x1c>
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
 800deb6:	bf00      	nop
 800deb8:	200053b8 	.word	0x200053b8

0800debc <_isatty_r>:
 800debc:	b538      	push	{r3, r4, r5, lr}
 800debe:	4d06      	ldr	r5, [pc, #24]	@ (800ded8 <_isatty_r+0x1c>)
 800dec0:	2300      	movs	r3, #0
 800dec2:	4604      	mov	r4, r0
 800dec4:	4608      	mov	r0, r1
 800dec6:	602b      	str	r3, [r5, #0]
 800dec8:	f7f5 f9a0 	bl	800320c <_isatty>
 800decc:	1c43      	adds	r3, r0, #1
 800dece:	d102      	bne.n	800ded6 <_isatty_r+0x1a>
 800ded0:	682b      	ldr	r3, [r5, #0]
 800ded2:	b103      	cbz	r3, 800ded6 <_isatty_r+0x1a>
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	bd38      	pop	{r3, r4, r5, pc}
 800ded8:	200053b8 	.word	0x200053b8

0800dedc <_init>:
 800dedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dede:	bf00      	nop
 800dee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dee2:	bc08      	pop	{r3}
 800dee4:	469e      	mov	lr, r3
 800dee6:	4770      	bx	lr

0800dee8 <_fini>:
 800dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deea:	bf00      	nop
 800deec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deee:	bc08      	pop	{r3}
 800def0:	469e      	mov	lr, r3
 800def2:	4770      	bx	lr
